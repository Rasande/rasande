!function(t){var e={};function n(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(i,o,function(e){return t[e]}.bind(null,o));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=3)}([function(t,e){t.exports=jQuery},function(t,e,n){"use strict";(function(t){
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.16.1
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document&&"undefined"!=typeof navigator,i=function(){for(var t=["Edge","Trident","Firefox"],e=0;e<t.length;e+=1)if(n&&navigator.userAgent.indexOf(t[e])>=0)return 1;return 0}();var o=n&&window.Promise?function(t){var e=!1;return function(){e||(e=!0,window.Promise.resolve().then((function(){e=!1,t()})))}}:function(t){var e=!1;return function(){e||(e=!0,setTimeout((function(){e=!1,t()}),i))}};function r(t){return t&&"[object Function]"==={}.toString.call(t)}function s(t,e){if(1!==t.nodeType)return[];var n=t.ownerDocument.defaultView.getComputedStyle(t,null);return e?n[e]:n}function a(t){return"HTML"===t.nodeName?t:t.parentNode||t.host}function l(t){if(!t)return document.body;switch(t.nodeName){case"HTML":case"BODY":return t.ownerDocument.body;case"#document":return t.body}var e=s(t),n=e.overflow,i=e.overflowX,o=e.overflowY;return/(auto|scroll|overlay)/.test(n+o+i)?t:l(a(t))}function u(t){return t&&t.referenceNode?t.referenceNode:t}var h=n&&!(!window.MSInputMethodContext||!document.documentMode),c=n&&/MSIE 10/.test(navigator.userAgent);function f(t){return 11===t?h:10===t?c:h||c}function p(t){if(!t)return document.documentElement;for(var e=f(10)?document.body:null,n=t.offsetParent||null;n===e&&t.nextElementSibling;)n=(t=t.nextElementSibling).offsetParent;var i=n&&n.nodeName;return i&&"BODY"!==i&&"HTML"!==i?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===s(n,"position")?p(n):n:t?t.ownerDocument.documentElement:document.documentElement}function d(t){return null!==t.parentNode?d(t.parentNode):t}function m(t,e){if(!(t&&t.nodeType&&e&&e.nodeType))return document.documentElement;var n=t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING,i=n?t:e,o=n?e:t,r=document.createRange();r.setStart(i,0),r.setEnd(o,0);var s,a,l=r.commonAncestorContainer;if(t!==l&&e!==l||i.contains(o))return"BODY"===(a=(s=l).nodeName)||"HTML"!==a&&p(s.firstElementChild)!==s?p(l):l;var u=d(t);return u.host?m(u.host,e):m(t,d(e).host)}function g(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top",n="top"===e?"scrollTop":"scrollLeft",i=t.nodeName;if("BODY"===i||"HTML"===i){var o=t.ownerDocument.documentElement,r=t.ownerDocument.scrollingElement||o;return r[n]}return t[n]}function v(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=g(e,"top"),o=g(e,"left"),r=n?-1:1;return t.top+=i*r,t.bottom+=i*r,t.left+=o*r,t.right+=o*r,t}function y(t,e){var n="x"===e?"Left":"Top",i="Left"===n?"Right":"Bottom";return parseFloat(t["border"+n+"Width"])+parseFloat(t["border"+i+"Width"])}function b(t,e,n,i){return Math.max(e["offset"+t],e["scroll"+t],n["client"+t],n["offset"+t],n["scroll"+t],f(10)?parseInt(n["offset"+t])+parseInt(i["margin"+("Height"===t?"Top":"Left")])+parseInt(i["margin"+("Height"===t?"Bottom":"Right")]):0)}function w(t){var e=t.body,n=t.documentElement,i=f(10)&&getComputedStyle(n);return{height:b("Height",e,n,i),width:b("Width",e,n,i)}}var _=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},E=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),x=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t},S=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t};function T(t){return S({},t,{right:t.left+t.width,bottom:t.top+t.height})}function C(t){var e={};try{if(f(10)){e=t.getBoundingClientRect();var n=g(t,"top"),i=g(t,"left");e.top+=n,e.left+=i,e.bottom+=n,e.right+=i}else e=t.getBoundingClientRect()}catch(t){}var o={left:e.left,top:e.top,width:e.right-e.left,height:e.bottom-e.top},r="HTML"===t.nodeName?w(t.ownerDocument):{},a=r.width||t.clientWidth||o.width,l=r.height||t.clientHeight||o.height,u=t.offsetWidth-a,h=t.offsetHeight-l;if(u||h){var c=s(t);u-=y(c,"x"),h-=y(c,"y"),o.width-=u,o.height-=h}return T(o)}function O(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=f(10),o="HTML"===e.nodeName,r=C(t),a=C(e),u=l(t),h=s(e),c=parseFloat(h.borderTopWidth),p=parseFloat(h.borderLeftWidth);n&&o&&(a.top=Math.max(a.top,0),a.left=Math.max(a.left,0));var d=T({top:r.top-a.top-c,left:r.left-a.left-p,width:r.width,height:r.height});if(d.marginTop=0,d.marginLeft=0,!i&&o){var m=parseFloat(h.marginTop),g=parseFloat(h.marginLeft);d.top-=c-m,d.bottom-=c-m,d.left-=p-g,d.right-=p-g,d.marginTop=m,d.marginLeft=g}return(i&&!n?e.contains(u):e===u&&"BODY"!==u.nodeName)&&(d=v(d,e)),d}function I(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=t.ownerDocument.documentElement,i=O(t,n),o=Math.max(n.clientWidth,window.innerWidth||0),r=Math.max(n.clientHeight,window.innerHeight||0),s=e?0:g(n),a=e?0:g(n,"left"),l={top:s-i.top+i.marginTop,left:a-i.left+i.marginLeft,width:o,height:r};return T(l)}function L(t){var e=t.nodeName;if("BODY"===e||"HTML"===e)return!1;if("fixed"===s(t,"position"))return!0;var n=a(t);return!!n&&L(n)}function A(t){if(!t||!t.parentElement||f())return document.documentElement;for(var e=t.parentElement;e&&"none"===s(e,"transform");)e=e.parentElement;return e||document.documentElement}function z(t,e,n,i){var o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],r={top:0,left:0},s=o?A(t):m(t,u(e));if("viewport"===i)r=I(s,o);else{var h=void 0;"scrollParent"===i?"BODY"===(h=l(a(e))).nodeName&&(h=t.ownerDocument.documentElement):h="window"===i?t.ownerDocument.documentElement:i;var c=O(h,s,o);if("HTML"!==h.nodeName||L(s))r=c;else{var f=w(t.ownerDocument),p=f.height,d=f.width;r.top+=c.top-c.marginTop,r.bottom=p+c.top,r.left+=c.left-c.marginLeft,r.right=d+c.left}}var g="number"==typeof(n=n||0);return r.left+=g?n:n.left||0,r.top+=g?n:n.top||0,r.right-=g?n:n.right||0,r.bottom-=g?n:n.bottom||0,r}function D(t){return t.width*t.height}function P(t,e,n,i,o){var r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===t.indexOf("auto"))return t;var s=z(n,i,r,o),a={top:{width:s.width,height:e.top-s.top},right:{width:s.right-e.right,height:s.height},bottom:{width:s.width,height:s.bottom-e.bottom},left:{width:e.left-s.left,height:s.height}},l=Object.keys(a).map((function(t){return S({key:t},a[t],{area:D(a[t])})})).sort((function(t,e){return e.area-t.area})),u=l.filter((function(t){var e=t.width,i=t.height;return e>=n.clientWidth&&i>=n.clientHeight})),h=u.length>0?u[0].key:l[0].key,c=t.split("-")[1];return h+(c?"-"+c:"")}function k(t,e,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,o=i?A(e):m(e,u(n));return O(n,o,i)}function W(t){var e=t.ownerDocument.defaultView.getComputedStyle(t),n=parseFloat(e.marginTop||0)+parseFloat(e.marginBottom||0),i=parseFloat(e.marginLeft||0)+parseFloat(e.marginRight||0);return{width:t.offsetWidth+i,height:t.offsetHeight+n}}function M(t){var e={left:"right",right:"left",bottom:"top",top:"bottom"};return t.replace(/left|right|bottom|top/g,(function(t){return e[t]}))}function N(t,e,n){n=n.split("-")[0];var i=W(t),o={width:i.width,height:i.height},r=-1!==["right","left"].indexOf(n),s=r?"top":"left",a=r?"left":"top",l=r?"height":"width",u=r?"width":"height";return o[s]=e[s]+e[l]/2-i[l]/2,o[a]=n===a?e[a]-i[u]:e[M(a)],o}function F(t,e){return Array.prototype.find?t.find(e):t.filter(e)[0]}function j(t,e,n){return(void 0===n?t:t.slice(0,function(t,e,n){if(Array.prototype.findIndex)return t.findIndex((function(t){return t[e]===n}));var i=F(t,(function(t){return t[e]===n}));return t.indexOf(i)}(t,"name",n))).forEach((function(t){t.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=t.function||t.fn;t.enabled&&r(n)&&(e.offsets.popper=T(e.offsets.popper),e.offsets.reference=T(e.offsets.reference),e=n(e,t))})),e}function H(){if(!this.state.isDestroyed){var t={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};t.offsets.reference=k(this.state,this.popper,this.reference,this.options.positionFixed),t.placement=P(this.options.placement,t.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),t.originalPlacement=t.placement,t.positionFixed=this.options.positionFixed,t.offsets.popper=N(this.popper,t.offsets.reference,t.placement),t.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",t=j(this.modifiers,t),this.state.isCreated?this.options.onUpdate(t):(this.state.isCreated=!0,this.options.onCreate(t))}}function R(t,e){return t.some((function(t){var n=t.name;return t.enabled&&n===e}))}function B(t){for(var e=[!1,"ms","Webkit","Moz","O"],n=t.charAt(0).toUpperCase()+t.slice(1),i=0;i<e.length;i++){var o=e[i],r=o?""+o+n:t;if(void 0!==document.body.style[r])return r}return null}function Y(){return this.state.isDestroyed=!0,R(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[B("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function q(t){var e=t.ownerDocument;return e?e.defaultView:window}function X(t,e,n,i){n.updateBound=i,q(t).addEventListener("resize",n.updateBound,{passive:!0});var o=l(t);return function t(e,n,i,o){var r="BODY"===e.nodeName,s=r?e.ownerDocument.defaultView:e;s.addEventListener(n,i,{passive:!0}),r||t(l(s.parentNode),n,i,o),o.push(s)}(o,"scroll",n.updateBound,n.scrollParents),n.scrollElement=o,n.eventsEnabled=!0,n}function Q(){this.state.eventsEnabled||(this.state=X(this.reference,this.options,this.state,this.scheduleUpdate))}function U(){var t,e;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(t=this.reference,e=this.state,q(t).removeEventListener("resize",e.updateBound),e.scrollParents.forEach((function(t){t.removeEventListener("scroll",e.updateBound)})),e.updateBound=null,e.scrollParents=[],e.scrollElement=null,e.eventsEnabled=!1,e))}function G(t){return""!==t&&!isNaN(parseFloat(t))&&isFinite(t)}function V(t,e){Object.keys(e).forEach((function(n){var i="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&G(e[n])&&(i="px"),t.style[n]=e[n]+i}))}var K=n&&/Firefox/i.test(navigator.userAgent);function $(t,e,n){var i=F(t,(function(t){return t.name===e})),o=!!i&&t.some((function(t){return t.name===n&&t.enabled&&t.order<i.order}));if(!o){var r="`"+e+"`",s="`"+n+"`";console.warn(s+" modifier is required by "+r+" modifier in order to work, be sure to include it before "+r+"!")}return o}var J=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],Z=J.slice(3);function tt(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=Z.indexOf(t),i=Z.slice(n+1).concat(Z.slice(0,n));return e?i.reverse():i}var et="flip",nt="clockwise",it="counterclockwise";function ot(t,e,n,i){var o=[0,0],r=-1!==["right","left"].indexOf(i),s=t.split(/(\+|\-)/).map((function(t){return t.trim()})),a=s.indexOf(F(s,(function(t){return-1!==t.search(/,|\s/)})));s[a]&&-1===s[a].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,u=-1!==a?[s.slice(0,a).concat([s[a].split(l)[0]]),[s[a].split(l)[1]].concat(s.slice(a+1))]:[s];return(u=u.map((function(t,i){var o=(1===i?!r:r)?"height":"width",s=!1;return t.reduce((function(t,e){return""===t[t.length-1]&&-1!==["+","-"].indexOf(e)?(t[t.length-1]=e,s=!0,t):s?(t[t.length-1]+=e,s=!1,t):t.concat(e)}),[]).map((function(t){return function(t,e,n,i){var o=t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),r=+o[1],s=o[2];if(!r)return t;if(0===s.indexOf("%")){var a=void 0;switch(s){case"%p":a=n;break;case"%":case"%r":default:a=i}return T(a)[e]/100*r}if("vh"===s||"vw"===s){return("vh"===s?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*r}return r}(t,o,e,n)}))}))).forEach((function(t,e){t.forEach((function(n,i){G(n)&&(o[e]+=n*("-"===t[i-1]?-1:1))}))})),o}var rt={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(t){var e=t.placement,n=e.split("-")[0],i=e.split("-")[1];if(i){var o=t.offsets,r=o.reference,s=o.popper,a=-1!==["bottom","top"].indexOf(n),l=a?"left":"top",u=a?"width":"height",h={start:x({},l,r[l]),end:x({},l,r[l]+r[u]-s[u])};t.offsets.popper=S({},s,h[i])}return t}},offset:{order:200,enabled:!0,fn:function(t,e){var n=e.offset,i=t.placement,o=t.offsets,r=o.popper,s=o.reference,a=i.split("-")[0],l=void 0;return l=G(+n)?[+n,0]:ot(n,r,s,a),"left"===a?(r.top+=l[0],r.left-=l[1]):"right"===a?(r.top+=l[0],r.left+=l[1]):"top"===a?(r.left+=l[0],r.top-=l[1]):"bottom"===a&&(r.left+=l[0],r.top+=l[1]),t.popper=r,t},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(t,e){var n=e.boundariesElement||p(t.instance.popper);t.instance.reference===n&&(n=p(n));var i=B("transform"),o=t.instance.popper.style,r=o.top,s=o.left,a=o[i];o.top="",o.left="",o[i]="";var l=z(t.instance.popper,t.instance.reference,e.padding,n,t.positionFixed);o.top=r,o.left=s,o[i]=a,e.boundaries=l;var u=e.priority,h=t.offsets.popper,c={primary:function(t){var n=h[t];return h[t]<l[t]&&!e.escapeWithReference&&(n=Math.max(h[t],l[t])),x({},t,n)},secondary:function(t){var n="right"===t?"left":"top",i=h[n];return h[t]>l[t]&&!e.escapeWithReference&&(i=Math.min(h[n],l[t]-("right"===t?h.width:h.height))),x({},n,i)}};return u.forEach((function(t){var e=-1!==["left","top"].indexOf(t)?"primary":"secondary";h=S({},h,c[e](t))})),t.offsets.popper=h,t},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(t){var e=t.offsets,n=e.popper,i=e.reference,o=t.placement.split("-")[0],r=Math.floor,s=-1!==["top","bottom"].indexOf(o),a=s?"right":"bottom",l=s?"left":"top",u=s?"width":"height";return n[a]<r(i[l])&&(t.offsets.popper[l]=r(i[l])-n[u]),n[l]>r(i[a])&&(t.offsets.popper[l]=r(i[a])),t}},arrow:{order:500,enabled:!0,fn:function(t,e){var n;if(!$(t.instance.modifiers,"arrow","keepTogether"))return t;var i=e.element;if("string"==typeof i){if(!(i=t.instance.popper.querySelector(i)))return t}else if(!t.instance.popper.contains(i))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),t;var o=t.placement.split("-")[0],r=t.offsets,a=r.popper,l=r.reference,u=-1!==["left","right"].indexOf(o),h=u?"height":"width",c=u?"Top":"Left",f=c.toLowerCase(),p=u?"left":"top",d=u?"bottom":"right",m=W(i)[h];l[d]-m<a[f]&&(t.offsets.popper[f]-=a[f]-(l[d]-m)),l[f]+m>a[d]&&(t.offsets.popper[f]+=l[f]+m-a[d]),t.offsets.popper=T(t.offsets.popper);var g=l[f]+l[h]/2-m/2,v=s(t.instance.popper),y=parseFloat(v["margin"+c]),b=parseFloat(v["border"+c+"Width"]),w=g-t.offsets.popper[f]-y-b;return w=Math.max(Math.min(a[h]-m,w),0),t.arrowElement=i,t.offsets.arrow=(x(n={},f,Math.round(w)),x(n,p,""),n),t},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(t,e){if(R(t.instance.modifiers,"inner"))return t;if(t.flipped&&t.placement===t.originalPlacement)return t;var n=z(t.instance.popper,t.instance.reference,e.padding,e.boundariesElement,t.positionFixed),i=t.placement.split("-")[0],o=M(i),r=t.placement.split("-")[1]||"",s=[];switch(e.behavior){case et:s=[i,o];break;case nt:s=tt(i);break;case it:s=tt(i,!0);break;default:s=e.behavior}return s.forEach((function(a,l){if(i!==a||s.length===l+1)return t;i=t.placement.split("-")[0],o=M(i);var u=t.offsets.popper,h=t.offsets.reference,c=Math.floor,f="left"===i&&c(u.right)>c(h.left)||"right"===i&&c(u.left)<c(h.right)||"top"===i&&c(u.bottom)>c(h.top)||"bottom"===i&&c(u.top)<c(h.bottom),p=c(u.left)<c(n.left),d=c(u.right)>c(n.right),m=c(u.top)<c(n.top),g=c(u.bottom)>c(n.bottom),v="left"===i&&p||"right"===i&&d||"top"===i&&m||"bottom"===i&&g,y=-1!==["top","bottom"].indexOf(i),b=!!e.flipVariations&&(y&&"start"===r&&p||y&&"end"===r&&d||!y&&"start"===r&&m||!y&&"end"===r&&g),w=!!e.flipVariationsByContent&&(y&&"start"===r&&d||y&&"end"===r&&p||!y&&"start"===r&&g||!y&&"end"===r&&m),_=b||w;(f||v||_)&&(t.flipped=!0,(f||v)&&(i=s[l+1]),_&&(r=function(t){return"end"===t?"start":"start"===t?"end":t}(r)),t.placement=i+(r?"-"+r:""),t.offsets.popper=S({},t.offsets.popper,N(t.instance.popper,t.offsets.reference,t.placement)),t=j(t.instance.modifiers,t,"flip"))})),t},behavior:"flip",padding:5,boundariesElement:"viewport",flipVariations:!1,flipVariationsByContent:!1},inner:{order:700,enabled:!1,fn:function(t){var e=t.placement,n=e.split("-")[0],i=t.offsets,o=i.popper,r=i.reference,s=-1!==["left","right"].indexOf(n),a=-1===["top","left"].indexOf(n);return o[s?"left":"top"]=r[n]-(a?o[s?"width":"height"]:0),t.placement=M(e),t.offsets.popper=T(o),t}},hide:{order:800,enabled:!0,fn:function(t){if(!$(t.instance.modifiers,"hide","preventOverflow"))return t;var e=t.offsets.reference,n=F(t.instance.modifiers,(function(t){return"preventOverflow"===t.name})).boundaries;if(e.bottom<n.top||e.left>n.right||e.top>n.bottom||e.right<n.left){if(!0===t.hide)return t;t.hide=!0,t.attributes["x-out-of-boundaries"]=""}else{if(!1===t.hide)return t;t.hide=!1,t.attributes["x-out-of-boundaries"]=!1}return t}},computeStyle:{order:850,enabled:!0,fn:function(t,e){var n=e.x,i=e.y,o=t.offsets.popper,r=F(t.instance.modifiers,(function(t){return"applyStyle"===t.name})).gpuAcceleration;void 0!==r&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var s=void 0!==r?r:e.gpuAcceleration,a=p(t.instance.popper),l=C(a),u={position:o.position},h=function(t,e){var n=t.offsets,i=n.popper,o=n.reference,r=Math.round,s=Math.floor,a=function(t){return t},l=r(o.width),u=r(i.width),h=-1!==["left","right"].indexOf(t.placement),c=-1!==t.placement.indexOf("-"),f=e?h||c||l%2==u%2?r:s:a,p=e?r:a;return{left:f(l%2==1&&u%2==1&&!c&&e?i.left-1:i.left),top:p(i.top),bottom:p(i.bottom),right:f(i.right)}}(t,window.devicePixelRatio<2||!K),c="bottom"===n?"top":"bottom",f="right"===i?"left":"right",d=B("transform"),m=void 0,g=void 0;if(g="bottom"===c?"HTML"===a.nodeName?-a.clientHeight+h.bottom:-l.height+h.bottom:h.top,m="right"===f?"HTML"===a.nodeName?-a.clientWidth+h.right:-l.width+h.right:h.left,s&&d)u[d]="translate3d("+m+"px, "+g+"px, 0)",u[c]=0,u[f]=0,u.willChange="transform";else{var v="bottom"===c?-1:1,y="right"===f?-1:1;u[c]=g*v,u[f]=m*y,u.willChange=c+", "+f}var b={"x-placement":t.placement};return t.attributes=S({},b,t.attributes),t.styles=S({},u,t.styles),t.arrowStyles=S({},t.offsets.arrow,t.arrowStyles),t},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(t){var e,n;return V(t.instance.popper,t.styles),e=t.instance.popper,n=t.attributes,Object.keys(n).forEach((function(t){!1!==n[t]?e.setAttribute(t,n[t]):e.removeAttribute(t)})),t.arrowElement&&Object.keys(t.arrowStyles).length&&V(t.arrowElement,t.arrowStyles),t},onLoad:function(t,e,n,i,o){var r=k(o,e,t,n.positionFixed),s=P(n.placement,r,e,t,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return e.setAttribute("x-placement",s),V(e,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},st=function(){function t(e,n){var i=this,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};_(this,t),this.scheduleUpdate=function(){return requestAnimationFrame(i.update)},this.update=o(this.update.bind(this)),this.options=S({},t.Defaults,s),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=e&&e.jquery?e[0]:e,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(S({},t.Defaults.modifiers,s.modifiers)).forEach((function(e){i.options.modifiers[e]=S({},t.Defaults.modifiers[e]||{},s.modifiers?s.modifiers[e]:{})})),this.modifiers=Object.keys(this.options.modifiers).map((function(t){return S({name:t},i.options.modifiers[t])})).sort((function(t,e){return t.order-e.order})),this.modifiers.forEach((function(t){t.enabled&&r(t.onLoad)&&t.onLoad(i.reference,i.popper,i.options,t,i.state)})),this.update();var a=this.options.eventsEnabled;a&&this.enableEventListeners(),this.state.eventsEnabled=a}return E(t,[{key:"update",value:function(){return H.call(this)}},{key:"destroy",value:function(){return Y.call(this)}},{key:"enableEventListeners",value:function(){return Q.call(this)}},{key:"disableEventListeners",value:function(){return U.call(this)}}]),t}();st.Utils=("undefined"!=typeof window?window:t).PopperUtils,st.placements=J,st.Defaults=rt,e.a=st}).call(this,n(2))},function(t,e){function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(t){"object"===("undefined"==typeof window?"undefined":n(window))&&(i=window)}t.exports=i},function(t,e,n){t.exports=n(10)},function(t,e,n){var i,o,r,s,a,l,u,h,c,f,p,d,m,g,v,y,b,w,_,E,x;function S(t){return(S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}
/*!
 * Isotope PACKAGED v3.0.6
 *
 * Licensed GPLv3 for open source use
 * or Isotope Commercial License for commercial use
 *
 * https://isotope.metafizzy.co
 * Copyright 2010-2018 Metafizzy
 */!function(i,o){E=[n(0)],void 0===(x=function(t){return function(t,e){"use strict";var n=Array.prototype.slice,i=t.console,o=void 0===i?function(){}:function(t){i.error(t)};function r(i,r,a){function l(t,e,n){var r,s="$()."+i+'("'+e+'")';return t.each((function(t,l){var u=a.data(l,i);if(u){var h=u[e];if(h&&"_"!=e.charAt(0)){var c=h.apply(u,n);r=void 0===r?c:r}else o(s+" is not a valid method")}else o(i+" not initialized. Cannot call methods, i.e. "+s)})),void 0!==r?r:t}function u(t,e){t.each((function(t,n){var o=a.data(n,i);o?(o.option(e),o._init()):(o=new r(n,e),a.data(n,i,o))}))}(a=a||e||t.jQuery)&&(r.prototype.option||(r.prototype.option=function(t){a.isPlainObject(t)&&(this.options=a.extend(!0,this.options,t))}),a.fn[i]=function(t){if("string"==typeof t){var e=n.call(arguments,1);return l(this,t,e)}return u(this,t),this},s(a))}function s(t){!t||t&&t.bridget||(t.bridget=r)}return s(e||t.jQuery),r}(i,t)}.apply(e,E))||(t.exports=x)}(window),"undefined"!=typeof window&&window,r={id:"ev-emitter/ev-emitter",exports:{},loaded:!1},i="function"==typeof(o=function(){function t(){}var e=t.prototype;return e.on=function(t,e){if(t&&e){var n=this._events=this._events||{},i=n[t]=n[t]||[];return-1==i.indexOf(e)&&i.push(e),this}},e.once=function(t,e){if(t&&e){this.on(t,e);var n=this._onceEvents=this._onceEvents||{};return(n[t]=n[t]||{})[e]=!0,this}},e.off=function(t,e){var n=this._events&&this._events[t];if(n&&n.length){var i=n.indexOf(e);return-1!=i&&n.splice(i,1),this}},e.emitEvent=function(t,e){var n=this._events&&this._events[t];if(n&&n.length){n=n.slice(0),e=e||[];for(var i=this._onceEvents&&this._onceEvents[t],o=0;o<n.length;o++){var r=n[o];i&&i[r]&&(this.off(t,r),delete i[r]),r.apply(this,e)}return this}},e.allOff=function(){delete this._events,delete this._onceEvents},t})?o.call(r.exports,n,r.exports,r):o,r.loaded=!0,void 0!==i||(i=r.exports),window,l={id:"get-size/get-size",exports:{},loaded:!1},s="function"==typeof(a=function(){"use strict";function t(t){var e=parseFloat(t);return-1==t.indexOf("%")&&!isNaN(e)&&e}var e="undefined"==typeof console?function(){}:function(t){console.error(t)},n=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"],i=n.length;function o(t){var n=getComputedStyle(t);return n||e("Style returned "+n+". Are you running this code in a hidden iframe on Firefox? See https://bit.ly/getsizebug1"),n}var r,s=!1;function a(e){if(function(){if(!s){s=!0;var e=document.createElement("div");e.style.width="200px",e.style.padding="1px 2px 3px 4px",e.style.borderStyle="solid",e.style.borderWidth="1px 2px 3px 4px",e.style.boxSizing="border-box";var n=document.body||document.documentElement;n.appendChild(e);var i=o(e);r=200==Math.round(t(i.width)),a.isBoxSizeOuter=r,n.removeChild(e)}}(),"string"==typeof e&&(e=document.querySelector(e)),e&&"object"==S(e)&&e.nodeType){var l=o(e);if("none"==l.display)return function(){for(var t={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},e=0;e<i;e++)t[n[e]]=0;return t}();var u={};u.width=e.offsetWidth,u.height=e.offsetHeight;for(var h=u.isBorderBox="border-box"==l.boxSizing,c=0;c<i;c++){var f=n[c],p=l[f],d=parseFloat(p);u[f]=isNaN(d)?0:d}var m=u.paddingLeft+u.paddingRight,g=u.paddingTop+u.paddingBottom,v=u.marginLeft+u.marginRight,y=u.marginTop+u.marginBottom,b=u.borderLeftWidth+u.borderRightWidth,w=u.borderTopWidth+u.borderBottomWidth,_=h&&r,E=t(l.width);!1!==E&&(u.width=E+(_?0:m+b));var x=t(l.height);return!1!==x&&(u.height=x+(_?0:g+w)),u.innerWidth=u.width-(m+b),u.innerHeight=u.height-(g+w),u.outerWidth=u.width+v,u.outerHeight=u.height+y,u}}return a})?a.call(l.exports,n,l.exports,l):a,l.loaded=!0,void 0!==s||(s=l.exports),function(t,e){"use strict";c={id:"desandro-matches-selector/matches-selector",exports:{},loaded:!1},u="function"==typeof(h=e)?h.call(c.exports,n,c.exports,c):h,c.loaded=!0,void 0!==u||(u=c.exports)}(window,(function(){"use strict";var t=function(){var t=window.Element.prototype;if(t.matches)return"matches";if(t.matchesSelector)return"matchesSelector";for(var e=["webkit","moz","ms","o"],n=0;n<e.length;n++){var i=e[n]+"MatchesSelector";if(t[i])return i}}();return function(e,n){return e[t](n)}})),function(t,n){f=function(e){return function(t,e){var n={extend:function(t,e){for(var n in e)t[n]=e[n];return t},modulo:function(t,e){return(t%e+e)%e}},i=Array.prototype.slice;n.makeArray=function(t){return Array.isArray(t)?t:null==t?[]:"object"==S(t)&&"number"==typeof t.length?i.call(t):[t]},n.removeFrom=function(t,e){var n=t.indexOf(e);-1!=n&&t.splice(n,1)},n.getParent=function(t,n){for(;t.parentNode&&t!=document.body;)if(t=t.parentNode,e(t,n))return t},n.getQueryElement=function(t){return"string"==typeof t?document.querySelector(t):t},n.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},n.filterFindElements=function(t,i){t=n.makeArray(t);var o=[];return t.forEach((function(t){if(t instanceof HTMLElement)if(i){e(t,i)&&o.push(t);for(var n=t.querySelectorAll(i),r=0;r<n.length;r++)o.push(n[r])}else o.push(t)})),o},n.debounceMethod=function(t,e,n){n=n||100;var i=t.prototype[e],o=e+"Timeout";t.prototype[e]=function(){var t=this[o];clearTimeout(t);var e=arguments,r=this;this[o]=setTimeout((function(){i.apply(r,e),delete r[o]}),n)}},n.docReady=function(t){var e=document.readyState;"complete"==e||"interactive"==e?setTimeout(t):document.addEventListener("DOMContentLoaded",t)},n.toDashed=function(t){return t.replace(/(.)([A-Z])/g,(function(t,e,n){return e+"-"+n})).toLowerCase()};var o=t.console;return n.htmlInit=function(e,i){n.docReady((function(){var r=n.toDashed(i),s="data-"+r,a=document.querySelectorAll("["+s+"]"),l=document.querySelectorAll(".js-"+r),u=n.makeArray(a).concat(n.makeArray(l)),h=s+"-options",c=t.jQuery;u.forEach((function(t){var n,r=t.getAttribute(s)||t.getAttribute(h);try{n=r&&JSON.parse(r)}catch(e){return void(o&&o.error("Error parsing "+s+" on "+t.className+": "+e))}var a=new e(t,n);c&&c.data(t,i,a)}))}))},n}(t,e)}.apply(e,E=[u])}(window),window,E=[i,s],p="function"==typeof(w=function(t,e){"use strict";var n=document.documentElement.style,i="string"==typeof n.transition?"transition":"WebkitTransition",o="string"==typeof n.transform?"transform":"WebkitTransform",r={WebkitTransition:"webkitTransitionEnd",transition:"transitionend"}[i],s={transform:o,transition:i,transitionDuration:i+"Duration",transitionProperty:i+"Property",transitionDelay:i+"Delay"};function a(t,e){t&&(this.element=t,this.layout=e,this.position={x:0,y:0},this._create())}var l=a.prototype=Object.create(t.prototype);l.constructor=a,l._create=function(){this._transn={ingProperties:{},clean:{},onEnd:{}},this.css({position:"absolute"})},l.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},l.getSize=function(){this.size=e(this.element)},l.css=function(t){var e=this.element.style;for(var n in t)e[s[n]||n]=t[n]},l.getPosition=function(){var t=getComputedStyle(this.element),e=this.layout._getOption("originLeft"),n=this.layout._getOption("originTop"),i=t[e?"left":"right"],o=t[n?"top":"bottom"],r=parseFloat(i),s=parseFloat(o),a=this.layout.size;-1!=i.indexOf("%")&&(r=r/100*a.width),-1!=o.indexOf("%")&&(s=s/100*a.height),r=isNaN(r)?0:r,s=isNaN(s)?0:s,r-=e?a.paddingLeft:a.paddingRight,s-=n?a.paddingTop:a.paddingBottom,this.position.x=r,this.position.y=s},l.layoutPosition=function(){var t=this.layout.size,e={},n=this.layout._getOption("originLeft"),i=this.layout._getOption("originTop"),o=n?"paddingLeft":"paddingRight",r=n?"left":"right",s=n?"right":"left",a=this.position.x+t[o];e[r]=this.getXValue(a),e[s]="";var l=i?"paddingTop":"paddingBottom",u=i?"top":"bottom",h=i?"bottom":"top",c=this.position.y+t[l];e[u]=this.getYValue(c),e[h]="",this.css(e),this.emitEvent("layout",[this])},l.getXValue=function(t){var e=this.layout._getOption("horizontal");return this.layout.options.percentPosition&&!e?t/this.layout.size.width*100+"%":t+"px"},l.getYValue=function(t){var e=this.layout._getOption("horizontal");return this.layout.options.percentPosition&&e?t/this.layout.size.height*100+"%":t+"px"},l._transitionTo=function(t,e){this.getPosition();var n=this.position.x,i=this.position.y,o=t==this.position.x&&e==this.position.y;if(this.setPosition(t,e),!o||this.isTransitioning){var r=t-n,s=e-i,a={};a.transform=this.getTranslate(r,s),this.transition({to:a,onTransitionEnd:{transform:this.layoutPosition},isCleaning:!0})}else this.layoutPosition()},l.getTranslate=function(t,e){return"translate3d("+(t=this.layout._getOption("originLeft")?t:-t)+"px, "+(e=this.layout._getOption("originTop")?e:-e)+"px, 0)"},l.goTo=function(t,e){this.setPosition(t,e),this.layoutPosition()},l.moveTo=l._transitionTo,l.setPosition=function(t,e){this.position.x=parseFloat(t),this.position.y=parseFloat(e)},l._nonTransition=function(t){for(var e in this.css(t.to),t.isCleaning&&this._removeStyles(t.to),t.onTransitionEnd)t.onTransitionEnd[e].call(this)},l.transition=function(t){if(parseFloat(this.layout.options.transitionDuration)){var e=this._transn;for(var n in t.onTransitionEnd)e.onEnd[n]=t.onTransitionEnd[n];for(n in t.to)e.ingProperties[n]=!0,t.isCleaning&&(e.clean[n]=!0);t.from&&(this.css(t.from),this.element.offsetHeight),this.enableTransition(t.to),this.css(t.to),this.isTransitioning=!0}else this._nonTransition(t)};var u="opacity,"+o.replace(/([A-Z])/g,(function(t){return"-"+t.toLowerCase()}));l.enableTransition=function(){if(!this.isTransitioning){var t=this.layout.options.transitionDuration;t="number"==typeof t?t+"ms":t,this.css({transitionProperty:u,transitionDuration:t,transitionDelay:this.staggerDelay||0}),this.element.addEventListener(r,this,!1)}},l.onwebkitTransitionEnd=function(t){this.ontransitionend(t)},l.onotransitionend=function(t){this.ontransitionend(t)};var h={"-webkit-transform":"transform"};l.ontransitionend=function(t){if(t.target===this.element){var e=this._transn,n=h[t.propertyName]||t.propertyName;delete e.ingProperties[n],function(t){for(var e in t)return!1;return!0}(e.ingProperties)&&this.disableTransition(),n in e.clean&&(this.element.style[t.propertyName]="",delete e.clean[n]),n in e.onEnd&&(e.onEnd[n].call(this),delete e.onEnd[n]),this.emitEvent("transitionEnd",[this])}},l.disableTransition=function(){this.removeTransitionStyles(),this.element.removeEventListener(r,this,!1),this.isTransitioning=!1},l._removeStyles=function(t){var e={};for(var n in t)e[n]="";this.css(e)};var c={transitionProperty:"",transitionDuration:"",transitionDelay:""};return l.removeTransitionStyles=function(){this.css(c)},l.stagger=function(t){t=isNaN(t)?0:t,this.staggerDelay=t+"ms"},l.removeElem=function(){this.element.parentNode.removeChild(this.element),this.css({display:""}),this.emitEvent("remove",[this])},l.remove=function(){i&&parseFloat(this.layout.options.transitionDuration)?(this.once("transitionEnd",(function(){this.removeElem()})),this.hide()):this.removeElem()},l.reveal=function(){delete this.isHidden,this.css({display:""});var t=this.layout.options,e={};e[this.getHideRevealTransitionEndProperty("visibleStyle")]=this.onRevealTransitionEnd,this.transition({from:t.hiddenStyle,to:t.visibleStyle,isCleaning:!0,onTransitionEnd:e})},l.onRevealTransitionEnd=function(){this.isHidden||this.emitEvent("reveal")},l.getHideRevealTransitionEndProperty=function(t){var e=this.layout.options[t];if(e.opacity)return"opacity";for(var n in e)return n},l.hide=function(){this.isHidden=!0,this.css({display:""});var t=this.layout.options,e={};e[this.getHideRevealTransitionEndProperty("hiddenStyle")]=this.onHideTransitionEnd,this.transition({from:t.visibleStyle,to:t.hiddenStyle,isCleaning:!0,onTransitionEnd:e})},l.onHideTransitionEnd=function(){this.isHidden&&(this.css({display:"none"}),this.emitEvent("hide"))},l.destroy=function(){this.css({position:"",left:"",right:"",top:"",bottom:"",transition:"",transform:""})},a})?w.apply(e,E):w,
/*!
 * Outlayer v2.1.1
 * the brains and guts of a layout library
 * MIT license
 */
function(t,n){"use strict";d=function(e,n,i,o){return function(t,e,n,i,o){var r=t.console,s=t.jQuery,a=function(){},l=0,u={};function h(t,e){var n=i.getQueryElement(t);if(n){this.element=n,s&&(this.$element=s(this.element)),this.options=i.extend({},this.constructor.defaults),this.option(e);var o=++l;this.element.outlayerGUID=o,u[o]=this,this._create(),this._getOption("initLayout")&&this.layout()}else r&&r.error("Bad element for "+this.constructor.namespace+": "+(n||t))}h.namespace="outlayer",h.Item=o,h.defaults={containerStyle:{position:"relative"},initLayout:!0,originLeft:!0,originTop:!0,resize:!0,resizeContainer:!0,transitionDuration:"0.4s",hiddenStyle:{opacity:0,transform:"scale(0.001)"},visibleStyle:{opacity:1,transform:"scale(1)"}};var c=h.prototype;function f(t){function e(){t.apply(this,arguments)}return e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e}i.extend(c,e.prototype),c.option=function(t){i.extend(this.options,t)},c._getOption=function(t){var e=this.constructor.compatOptions[t];return e&&void 0!==this.options[e]?this.options[e]:this.options[t]},h.compatOptions={initLayout:"isInitLayout",horizontal:"isHorizontal",layoutInstant:"isLayoutInstant",originLeft:"isOriginLeft",originTop:"isOriginTop",resize:"isResizeBound",resizeContainer:"isResizingContainer"},c._create=function(){this.reloadItems(),this.stamps=[],this.stamp(this.options.stamp),i.extend(this.element.style,this.options.containerStyle),this._getOption("resize")&&this.bindResize()},c.reloadItems=function(){this.items=this._itemize(this.element.children)},c._itemize=function(t){for(var e=this._filterFindItemElements(t),n=this.constructor.Item,i=[],o=0;o<e.length;o++){var r=new n(e[o],this);i.push(r)}return i},c._filterFindItemElements=function(t){return i.filterFindElements(t,this.options.itemSelector)},c.getItemElements=function(){return this.items.map((function(t){return t.element}))},c.layout=function(){this._resetLayout(),this._manageStamps();var t=this._getOption("layoutInstant"),e=void 0!==t?t:!this._isLayoutInited;this.layoutItems(this.items,e),this._isLayoutInited=!0},c._init=c.layout,c._resetLayout=function(){this.getSize()},c.getSize=function(){this.size=n(this.element)},c._getMeasurement=function(t,e){var i,o=this.options[t];o?("string"==typeof o?i=this.element.querySelector(o):o instanceof HTMLElement&&(i=o),this[t]=i?n(i)[e]:o):this[t]=0},c.layoutItems=function(t,e){t=this._getItemsForLayout(t),this._layoutItems(t,e),this._postLayout()},c._getItemsForLayout=function(t){return t.filter((function(t){return!t.isIgnored}))},c._layoutItems=function(t,e){if(this._emitCompleteOnItems("layout",t),t&&t.length){var n=[];t.forEach((function(t){var i=this._getItemLayoutPosition(t);i.item=t,i.isInstant=e||t.isLayoutInstant,n.push(i)}),this),this._processLayoutQueue(n)}},c._getItemLayoutPosition=function(){return{x:0,y:0}},c._processLayoutQueue=function(t){this.updateStagger(),t.forEach((function(t,e){this._positionItem(t.item,t.x,t.y,t.isInstant,e)}),this)},c.updateStagger=function(){var t=this.options.stagger;if(null!=t)return this.stagger=function(t){if("number"==typeof t)return t;var e=t.match(/(^\d*\.?\d*)(\w*)/),n=e&&e[1],i=e&&e[2];if(!n.length)return 0;return(n=parseFloat(n))*(p[i]||1)}(t),this.stagger;this.stagger=0},c._positionItem=function(t,e,n,i,o){i?t.goTo(e,n):(t.stagger(o*this.stagger),t.moveTo(e,n))},c._postLayout=function(){this.resizeContainer()},c.resizeContainer=function(){if(this._getOption("resizeContainer")){var t=this._getContainerSize();t&&(this._setContainerMeasure(t.width,!0),this._setContainerMeasure(t.height,!1))}},c._getContainerSize=a,c._setContainerMeasure=function(t,e){if(void 0!==t){var n=this.size;n.isBorderBox&&(t+=e?n.paddingLeft+n.paddingRight+n.borderLeftWidth+n.borderRightWidth:n.paddingBottom+n.paddingTop+n.borderTopWidth+n.borderBottomWidth),t=Math.max(t,0),this.element.style[e?"width":"height"]=t+"px"}},c._emitCompleteOnItems=function(t,e){var n=this;function i(){n.dispatchEvent(t+"Complete",null,[e])}var o=e.length;if(e&&o){var r=0;e.forEach((function(e){e.once(t,s)}))}else i();function s(){++r==o&&i()}},c.dispatchEvent=function(t,e,n){var i=e?[e].concat(n):n;if(this.emitEvent(t,i),s)if(this.$element=this.$element||s(this.element),e){var o=s.Event(e);o.type=t,this.$element.trigger(o,n)}else this.$element.trigger(t,n)},c.ignore=function(t){var e=this.getItem(t);e&&(e.isIgnored=!0)},c.unignore=function(t){var e=this.getItem(t);e&&delete e.isIgnored},c.stamp=function(t){(t=this._find(t))&&(this.stamps=this.stamps.concat(t),t.forEach(this.ignore,this))},c.unstamp=function(t){(t=this._find(t))&&t.forEach((function(t){i.removeFrom(this.stamps,t),this.unignore(t)}),this)},c._find=function(t){if(t)return"string"==typeof t&&(t=this.element.querySelectorAll(t)),t=i.makeArray(t)},c._manageStamps=function(){this.stamps&&this.stamps.length&&(this._getBoundingRect(),this.stamps.forEach(this._manageStamp,this))},c._getBoundingRect=function(){var t=this.element.getBoundingClientRect(),e=this.size;this._boundingRect={left:t.left+e.paddingLeft+e.borderLeftWidth,top:t.top+e.paddingTop+e.borderTopWidth,right:t.right-(e.paddingRight+e.borderRightWidth),bottom:t.bottom-(e.paddingBottom+e.borderBottomWidth)}},c._manageStamp=a,c._getElementOffset=function(t){var e=t.getBoundingClientRect(),i=this._boundingRect,o=n(t);return{left:e.left-i.left-o.marginLeft,top:e.top-i.top-o.marginTop,right:i.right-e.right-o.marginRight,bottom:i.bottom-e.bottom-o.marginBottom}},c.handleEvent=i.handleEvent,c.bindResize=function(){t.addEventListener("resize",this),this.isResizeBound=!0},c.unbindResize=function(){t.removeEventListener("resize",this),this.isResizeBound=!1},c.onresize=function(){this.resize()},i.debounceMethod(h,"onresize",100),c.resize=function(){this.isResizeBound&&this.needsResizeLayout()&&this.layout()},c.needsResizeLayout=function(){var t=n(this.element);return this.size&&t&&t.innerWidth!==this.size.innerWidth},c.addItems=function(t){var e=this._itemize(t);return e.length&&(this.items=this.items.concat(e)),e},c.appended=function(t){var e=this.addItems(t);e.length&&(this.layoutItems(e,!0),this.reveal(e))},c.prepended=function(t){var e=this._itemize(t);if(e.length){var n=this.items.slice(0);this.items=e.concat(n),this._resetLayout(),this._manageStamps(),this.layoutItems(e,!0),this.reveal(e),this.layoutItems(n)}},c.reveal=function(t){if(this._emitCompleteOnItems("reveal",t),t&&t.length){var e=this.updateStagger();t.forEach((function(t,n){t.stagger(n*e),t.reveal()}))}},c.hide=function(t){if(this._emitCompleteOnItems("hide",t),t&&t.length){var e=this.updateStagger();t.forEach((function(t,n){t.stagger(n*e),t.hide()}))}},c.revealItemElements=function(t){var e=this.getItems(t);this.reveal(e)},c.hideItemElements=function(t){var e=this.getItems(t);this.hide(e)},c.getItem=function(t){for(var e=0;e<this.items.length;e++){var n=this.items[e];if(n.element==t)return n}},c.getItems=function(t){t=i.makeArray(t);var e=[];return t.forEach((function(t){var n=this.getItem(t);n&&e.push(n)}),this),e},c.remove=function(t){var e=this.getItems(t);this._emitCompleteOnItems("remove",e),e&&e.length&&e.forEach((function(t){t.remove(),i.removeFrom(this.items,t)}),this)},c.destroy=function(){var t=this.element.style;t.height="",t.position="",t.width="",this.items.forEach((function(t){t.destroy()})),this.unbindResize();var e=this.element.outlayerGUID;delete u[e],delete this.element.outlayerGUID,s&&s.removeData(this.element,this.constructor.namespace)},h.data=function(t){var e=(t=i.getQueryElement(t))&&t.outlayerGUID;return e&&u[e]},h.create=function(t,e){var n=f(h);return n.defaults=i.extend({},h.defaults),i.extend(n.defaults,e),n.compatOptions=i.extend({},h.compatOptions),n.namespace=t,n.data=h.data,n.Item=f(o),i.htmlInit(n,t),s&&s.bridget&&s.bridget(t,n),n};var p={ms:1,s:1e3};return h.Item=o,h}(t,e,n,i,o)}.apply(e,E=[i,s,f,p])}(window),window,E=[d],m="function"==typeof(w=function(t){"use strict";function e(){t.Item.apply(this,arguments)}var n=e.prototype=Object.create(t.Item.prototype),i=n._create;n._create=function(){this.id=this.layout.itemGUID++,i.call(this),this.sortData={}},n.updateSortData=function(){if(!this.isIgnored){this.sortData.id=this.id,this.sortData["original-order"]=this.id,this.sortData.random=Math.random();var t=this.layout.options.getSortData,e=this.layout._sorters;for(var n in t){var i=e[n];this.sortData[n]=i(this.element,this)}}};var o=n.destroy;return n.destroy=function(){o.apply(this,arguments),this.css({display:""})},e})?w.apply(e,E):w,window,E=[s,d],g="function"==typeof(w=function(t,e){"use strict";function n(t){this.isotope=t,t&&(this.options=t.options[this.namespace],this.element=t.element,this.items=t.filteredItems,this.size=t.size)}var i=n.prototype;return["_resetLayout","_getItemLayoutPosition","_manageStamp","_getContainerSize","_getElementOffset","needsResizeLayout","_getOption"].forEach((function(t){i[t]=function(){return e.prototype[t].apply(this.isotope,arguments)}})),i.needsVerticalResizeLayout=function(){var e=t(this.isotope.element);return this.isotope.size&&e&&e.innerHeight!=this.isotope.size.innerHeight},i._getMeasurement=function(){this.isotope._getMeasurement.apply(this,arguments)},i.getColumnWidth=function(){this.getSegmentSize("column","Width")},i.getRowHeight=function(){this.getSegmentSize("row","Height")},i.getSegmentSize=function(t,e){var n=t+e,i="outer"+e;if(this._getMeasurement(n,i),!this[n]){var o=this.getFirstItemSize();this[n]=o&&o[i]||this.isotope.size["inner"+e]}},i.getFirstItemSize=function(){var e=this.isotope.filteredItems[0];return e&&e.element&&t(e.element)},i.layout=function(){this.isotope.layout.apply(this.isotope,arguments)},i.getSize=function(){this.isotope.getSize(),this.size=this.isotope.size},n.modes={},n.create=function(t,e){function o(){n.apply(this,arguments)}return o.prototype=Object.create(i),o.prototype.constructor=o,e&&(o.options=e),o.prototype.namespace=t,n.modes[t]=o,o},n})?w.apply(e,E):w,window,E=[d,s],v="function"==typeof(w=function(t,e){var n=t.create("masonry");n.compatOptions.fitWidth="isFitWidth";var i=n.prototype;return i._resetLayout=function(){this.getSize(),this._getMeasurement("columnWidth","outerWidth"),this._getMeasurement("gutter","outerWidth"),this.measureColumns(),this.colYs=[];for(var t=0;t<this.cols;t++)this.colYs.push(0);this.maxY=0,this.horizontalColIndex=0},i.measureColumns=function(){if(this.getContainerWidth(),!this.columnWidth){var t=this.items[0],n=t&&t.element;this.columnWidth=n&&e(n).outerWidth||this.containerWidth}var i=this.columnWidth+=this.gutter,o=this.containerWidth+this.gutter,r=o/i,s=i-o%i;r=Math[s&&s<1?"round":"floor"](r),this.cols=Math.max(r,1)},i.getContainerWidth=function(){var t=this._getOption("fitWidth")?this.element.parentNode:this.element,n=e(t);this.containerWidth=n&&n.innerWidth},i._getItemLayoutPosition=function(t){t.getSize();var e=t.size.outerWidth%this.columnWidth,n=Math[e&&e<1?"round":"ceil"](t.size.outerWidth/this.columnWidth);n=Math.min(n,this.cols);for(var i=this[this.options.horizontalOrder?"_getHorizontalColPosition":"_getTopColPosition"](n,t),o={x:this.columnWidth*i.col,y:i.y},r=i.y+t.size.outerHeight,s=n+i.col,a=i.col;a<s;a++)this.colYs[a]=r;return o},i._getTopColPosition=function(t){var e=this._getTopColGroup(t),n=Math.min.apply(Math,e);return{col:e.indexOf(n),y:n}},i._getTopColGroup=function(t){if(t<2)return this.colYs;for(var e=[],n=this.cols+1-t,i=0;i<n;i++)e[i]=this._getColGroupY(i,t);return e},i._getColGroupY=function(t,e){if(e<2)return this.colYs[t];var n=this.colYs.slice(t,t+e);return Math.max.apply(Math,n)},i._getHorizontalColPosition=function(t,e){var n=this.horizontalColIndex%this.cols;n=t>1&&n+t>this.cols?0:n;var i=e.size.outerWidth&&e.size.outerHeight;return this.horizontalColIndex=i?n+t:this.horizontalColIndex,{col:n,y:this._getColGroupY(n,t)}},i._manageStamp=function(t){var n=e(t),i=this._getElementOffset(t),o=this._getOption("originLeft")?i.left:i.right,r=o+n.outerWidth,s=Math.floor(o/this.columnWidth);s=Math.max(0,s);var a=Math.floor(r/this.columnWidth);a-=r%this.columnWidth?0:1,a=Math.min(this.cols-1,a);for(var l=(this._getOption("originTop")?i.top:i.bottom)+n.outerHeight,u=s;u<=a;u++)this.colYs[u]=Math.max(l,this.colYs[u])},i._getContainerSize=function(){this.maxY=Math.max.apply(Math,this.colYs);var t={height:this.maxY};return this._getOption("fitWidth")&&(t.width=this._getContainerFitWidth()),t},i._getContainerFitWidth=function(){for(var t=0,e=this.cols;--e&&0===this.colYs[e];)t++;return(this.cols-t)*this.columnWidth-this.gutter},i.needsResizeLayout=function(){var t=this.containerWidth;return this.getContainerWidth(),t!=this.containerWidth},n})?w.apply(e,E):w,window,E=[g,v],y="function"==typeof(w=function(t,e){"use strict";var n=t.create("masonry"),i=n.prototype,o={_getElementOffset:!0,layout:!0,_getMeasurement:!0};for(var r in e.prototype)o[r]||(i[r]=e.prototype[r]);var s=i.measureColumns;i.measureColumns=function(){this.items=this.isotope.filteredItems,s.call(this)};var a=i._getOption;return i._getOption=function(t){return"fitWidth"==t?void 0!==this.options.isFitWidth?this.options.isFitWidth:this.options.fitWidth:a.apply(this.isotope,arguments)},n})?w.apply(e,E):w,window,E=[g],b="function"==typeof(w=function(t){"use strict";var e=t.create("fitRows"),n=e.prototype;return n._resetLayout=function(){this.x=0,this.y=0,this.maxY=0,this._getMeasurement("gutter","outerWidth")},n._getItemLayoutPosition=function(t){t.getSize();var e=t.size.outerWidth+this.gutter,n=this.isotope.size.innerWidth+this.gutter;0!==this.x&&e+this.x>n&&(this.x=0,this.y=this.maxY);var i={x:this.x,y:this.y};return this.maxY=Math.max(this.maxY,this.y+t.size.outerHeight),this.x+=e,i},n._getContainerSize=function(){return{height:this.maxY}},e})?w.apply(e,E):w,window,E=[g],_="function"==typeof(w=function(t){"use strict";var e=t.create("vertical",{horizontalAlignment:0}),n=e.prototype;return n._resetLayout=function(){this.y=0},n._getItemLayoutPosition=function(t){t.getSize();var e=(this.isotope.size.innerWidth-t.size.outerWidth)*this.options.horizontalAlignment,n=this.y;return this.y+=t.size.outerHeight,{x:e,y:n}},n._getContainerSize=function(){return{height:this.y}},e})?w.apply(e,E):w,
/*!
 * Isotope v3.0.6
 *
 * Licensed GPLv3 for open source use
 * or Isotope Commercial License for commercial use
 *
 * https://isotope.metafizzy.co
 * Copyright 2010-2018 Metafizzy
 */
function(n,i){void 0===(x=function(t,e,i,o,r,s){return function(t,e,n,i,o,r,s){var a=t.jQuery,l=String.prototype.trim?function(t){return t.trim()}:function(t){return t.replace(/^\s+|\s+$/g,"")},u=e.create("isotope",{layoutMode:"masonry",isJQueryFiltering:!0,sortAscending:!0});u.Item=r,u.LayoutMode=s;var h=u.prototype;h._create=function(){for(var t in this.itemGUID=0,this._sorters={},this._getSorters(),e.prototype._create.call(this),this.modes={},this.filteredItems=this.items,this.sortHistory=["original-order"],s.modes)this._initLayoutMode(t)},h.reloadItems=function(){this.itemGUID=0,e.prototype.reloadItems.call(this)},h._itemize=function(){for(var t=e.prototype._itemize.apply(this,arguments),n=0;n<t.length;n++){var i=t[n];i.id=this.itemGUID++}return this._updateItemsSortData(t),t},h._initLayoutMode=function(t){var e=s.modes[t],n=this.options[t]||{};this.options[t]=e.options?o.extend(e.options,n):n,this.modes[t]=new e(this)},h.layout=function(){this._isLayoutInited||!this._getOption("initLayout")?this._layout():this.arrange()},h._layout=function(){var t=this._getIsInstant();this._resetLayout(),this._manageStamps(),this.layoutItems(this.filteredItems,t),this._isLayoutInited=!0},h.arrange=function(t){this.option(t),this._getIsInstant();var e=this._filter(this.items);this.filteredItems=e.matches,this._bindArrangeComplete(),this._isInstant?this._noTransition(this._hideReveal,[e]):this._hideReveal(e),this._sort(),this._layout()},h._init=h.arrange,h._hideReveal=function(t){this.reveal(t.needReveal),this.hide(t.needHide)},h._getIsInstant=function(){var t=this._getOption("layoutInstant"),e=void 0!==t?t:!this._isLayoutInited;return this._isInstant=e,e},h._bindArrangeComplete=function(){var t,e,n,i=this;function o(){t&&e&&n&&i.dispatchEvent("arrangeComplete",null,[i.filteredItems])}this.once("layoutComplete",(function(){t=!0,o()})),this.once("hideComplete",(function(){e=!0,o()})),this.once("revealComplete",(function(){n=!0,o()}))},h._filter=function(t){var e=this.options.filter;e=e||"*";for(var n=[],i=[],o=[],r=this._getFilterTest(e),s=0;s<t.length;s++){var a=t[s];if(!a.isIgnored){var l=r(a);l&&n.push(a),l&&a.isHidden?i.push(a):l||a.isHidden||o.push(a)}}return{matches:n,needReveal:i,needHide:o}},h._getFilterTest=function(t){return a&&this.options.isJQueryFiltering?function(e){return a(e.element).is(t)}:"function"==typeof t?function(e){return t(e.element)}:function(e){return i(e.element,t)}},h.updateSortData=function(t){var e;t?(t=o.makeArray(t),e=this.getItems(t)):e=this.items,this._getSorters(),this._updateItemsSortData(e)},h._getSorters=function(){var t=this.options.getSortData;for(var e in t){var n=t[e];this._sorters[e]=c(n)}},h._updateItemsSortData=function(t){for(var e=t&&t.length,n=0;e&&n<e;n++){t[n].updateSortData()}};var c=function(t){if("string"!=typeof t)return t;var e=l(t).split(" "),n=e[0],i=n.match(/^\[(.+)\]$/),o=function(t,e){return t?function(e){return e.getAttribute(t)}:function(t){var n=t.querySelector(e);return n&&n.textContent}}(i&&i[1],n),r=u.sortDataParsers[e[1]];return t=r?function(t){return t&&r(o(t))}:function(t){return t&&o(t)}};u.sortDataParsers={parseInt:function(t){function e(e){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}((function(t){return parseInt(t,10)})),parseFloat:function(t){function e(e){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}((function(t){return parseFloat(t)}))},h._sort=function(){if(this.options.sortBy){var t=o.makeArray(this.options.sortBy);this._getIsSameSortBy(t)||(this.sortHistory=t.concat(this.sortHistory));var e=function(t,e){return function(n,i){for(var o=0;o<t.length;o++){var r=t[o],s=n.sortData[r],a=i.sortData[r];if(s>a||s<a)return(s>a?1:-1)*((void 0!==e[r]?e[r]:e)?1:-1)}return 0}}(this.sortHistory,this.options.sortAscending);this.filteredItems.sort(e)}},h._getIsSameSortBy=function(t){for(var e=0;e<t.length;e++)if(t[e]!=this.sortHistory[e])return!1;return!0},h._mode=function(){var t=this.options.layoutMode,e=this.modes[t];if(!e)throw new Error("No layout mode: "+t);return e.options=this.options[t],e},h._resetLayout=function(){e.prototype._resetLayout.call(this),this._mode()._resetLayout()},h._getItemLayoutPosition=function(t){return this._mode()._getItemLayoutPosition(t)},h._manageStamp=function(t){this._mode()._manageStamp(t)},h._getContainerSize=function(){return this._mode()._getContainerSize()},h.needsResizeLayout=function(){return this._mode().needsResizeLayout()},h.appended=function(t){var e=this.addItems(t);if(e.length){var n=this._filterRevealAdded(e);this.filteredItems=this.filteredItems.concat(n)}},h.prepended=function(t){var e=this._itemize(t);if(e.length){this._resetLayout(),this._manageStamps();var n=this._filterRevealAdded(e);this.layoutItems(this.filteredItems),this.filteredItems=n.concat(this.filteredItems),this.items=e.concat(this.items)}},h._filterRevealAdded=function(t){var e=this._filter(t);return this.hide(e.needHide),this.reveal(e.matches),this.layoutItems(e.matches,!0),e.matches},h.insert=function(t){var e=this.addItems(t);if(e.length){var n,i,o=e.length;for(n=0;n<o;n++)i=e[n],this.element.appendChild(i.element);var r=this._filter(e).matches;for(n=0;n<o;n++)e[n].isLayoutInstant=!0;for(this.arrange(),n=0;n<o;n++)delete e[n].isLayoutInstant;this.reveal(r)}};var f=h.remove;return h.remove=function(t){t=o.makeArray(t);var e=this.getItems(t);f.call(this,t);for(var n=e&&e.length,i=0;n&&i<n;i++){var r=e[i];o.removeFrom(this.filteredItems,r)}},h.shuffle=function(){for(var t=0;t<this.items.length;t++){this.items[t].sortData.random=Math.random()}this.options.sortBy="random",this._sort(),this._layout()},h._noTransition=function(t,e){var n=this.options.transitionDuration;this.options.transitionDuration=0;var i=t.apply(this,e);return this.options.transitionDuration=n,i},h.getFilteredItemElements=function(){return this.filteredItems.map((function(t){return t.element}))},u}(n,t,0,i,o,r,s)}.apply(e,E=[d,s,u,f,m,g,y,b,_]))||(t.exports=x)}(window)},function(t,e){function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}!function(){"use strict";var t=function(){function t(e){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(n(this,t),!(e instanceof Node))throw"Can't initialize VanillaTilt because "+e+" is not a Node.";this.width=null,this.height=null,this.clientWidth=null,this.clientHeight=null,this.left=null,this.top=null,this.gammazero=null,this.betazero=null,this.lastgammazero=null,this.lastbetazero=null,this.transitionTimeout=null,this.updateCall=null,this.event=null,this.updateBind=this.update.bind(this),this.resetBind=this.reset.bind(this),this.element=e,this.settings=this.extendSettings(i),this.reverse=this.settings.reverse?-1:1,this.glare=t.isSettingTrue(this.settings.glare),this.glarePrerender=t.isSettingTrue(this.settings["glare-prerender"]),this.fullPageListening=t.isSettingTrue(this.settings["full-page-listening"]),this.gyroscope=t.isSettingTrue(this.settings.gyroscope),this.gyroscopeSamples=this.settings.gyroscopeSamples,this.elementListener=this.getElementListener(),this.glare&&this.prepareGlare(),this.fullPageListening&&this.updateClientSize(),this.addEventListeners(),this.updateInitialPosition()}var e,o,r;return e=t,r=[{key:"isSettingTrue",value:function(t){return""===t||!0===t||1===t}},{key:"init",value:function(e,n){e instanceof Node&&(e=[e]),e instanceof NodeList&&(e=[].slice.call(e)),e instanceof Array&&e.forEach((function(e){"vanillaTilt"in e||(e.vanillaTilt=new t(e,n))}))}}],(o=[{key:"getElementListener",value:function(){if(this.fullPageListening)return window.document;if("string"==typeof this.settings["mouse-event-element"]){var t=document.querySelector(this.settings["mouse-event-element"]);if(t)return t}return this.settings["mouse-event-element"]instanceof Node?this.settings["mouse-event-element"]:this.element}},{key:"addEventListeners",value:function(){this.onMouseEnterBind=this.onMouseEnter.bind(this),this.onMouseMoveBind=this.onMouseMove.bind(this),this.onMouseLeaveBind=this.onMouseLeave.bind(this),this.onWindowResizeBind=this.onWindowResize.bind(this),this.onDeviceOrientationBind=this.onDeviceOrientation.bind(this),this.elementListener.addEventListener("mouseenter",this.onMouseEnterBind),this.elementListener.addEventListener("mouseleave",this.onMouseLeaveBind),this.elementListener.addEventListener("mousemove",this.onMouseMoveBind),(this.glare||this.fullPageListening)&&window.addEventListener("resize",this.onWindowResizeBind),this.gyroscope&&window.addEventListener("deviceorientation",this.onDeviceOrientationBind)}},{key:"removeEventListeners",value:function(){this.elementListener.removeEventListener("mouseenter",this.onMouseEnterBind),this.elementListener.removeEventListener("mouseleave",this.onMouseLeaveBind),this.elementListener.removeEventListener("mousemove",this.onMouseMoveBind),this.gyroscope&&window.removeEventListener("deviceorientation",this.onDeviceOrientationBind),(this.glare||this.fullPageListening)&&window.removeEventListener("resize",this.onWindowResizeBind)}},{key:"destroy",value:function(){clearTimeout(this.transitionTimeout),null!==this.updateCall&&cancelAnimationFrame(this.updateCall),this.reset(),this.removeEventListeners(),this.element.vanillaTilt=null,delete this.element.vanillaTilt,this.element=null}},{key:"onDeviceOrientation",value:function(t){if(null!==t.gamma&&null!==t.beta){this.updateElementPosition(),this.gyroscopeSamples>0&&(this.lastgammazero=this.gammazero,this.lastbetazero=this.betazero,null===this.gammazero?(this.gammazero=t.gamma,this.betazero=t.beta):(this.gammazero=(t.gamma+this.lastgammazero)/2,this.betazero=(t.beta+this.lastbetazero)/2),this.gyroscopeSamples-=1);var e=this.settings.gyroscopeMaxAngleX-this.settings.gyroscopeMinAngleX,n=this.settings.gyroscopeMaxAngleY-this.settings.gyroscopeMinAngleY,i=e/this.width,o=n/this.height,r=(t.gamma-(this.settings.gyroscopeMinAngleX+this.gammazero))/i,s=(t.beta-(this.settings.gyroscopeMinAngleY+this.betazero))/o;null!==this.updateCall&&cancelAnimationFrame(this.updateCall),this.event={clientX:r+this.left,clientY:s+this.top},this.updateCall=requestAnimationFrame(this.updateBind)}}},{key:"onMouseEnter",value:function(){this.updateElementPosition(),this.element.style.willChange="transform",this.setTransition()}},{key:"onMouseMove",value:function(t){null!==this.updateCall&&cancelAnimationFrame(this.updateCall),this.event=t,this.updateCall=requestAnimationFrame(this.updateBind)}},{key:"onMouseLeave",value:function(){this.setTransition(),this.settings.reset&&requestAnimationFrame(this.resetBind)}},{key:"reset",value:function(){this.event={clientX:this.left+this.width/2,clientY:this.top+this.height/2},this.element&&this.element.style&&(this.element.style.transform="perspective(".concat(this.settings.perspective,"px) ")+"rotateX(0deg) rotateY(0deg) scale3d(1, 1, 1)"),this.resetGlare()}},{key:"resetGlare",value:function(){this.glare&&(this.glareElement.style.transform="rotate(180deg) translate(-50%, -50%)",this.glareElement.style.opacity="0")}},{key:"updateInitialPosition",value:function(){if(0!==this.settings.startX||0!==this.settings.startY){this.onMouseEnter(),this.fullPageListening?this.event={clientX:(this.settings.startX+this.settings.max)/(2*this.settings.max)*this.clientWidth,clientY:(this.settings.startY+this.settings.max)/(2*this.settings.max)*this.clientHeight}:this.event={clientX:this.left+(this.settings.startX+this.settings.max)/(2*this.settings.max)*this.width,clientY:this.top+(this.settings.startY+this.settings.max)/(2*this.settings.max)*this.height};var t=this.settings.scale;this.settings.scale=1,this.update(),this.settings.scale=t,this.resetGlare()}}},{key:"getValues",value:function(){var t,e;return this.fullPageListening?(t=this.event.clientX/this.clientWidth,e=this.event.clientY/this.clientHeight):(t=(this.event.clientX-this.left)/this.width,e=(this.event.clientY-this.top)/this.height),t=Math.min(Math.max(t,0),1),e=Math.min(Math.max(e,0),1),{tiltX:(this.reverse*(this.settings.max-t*this.settings.max*2)).toFixed(2),tiltY:(this.reverse*(e*this.settings.max*2-this.settings.max)).toFixed(2),percentageX:100*t,percentageY:100*e,angle:Math.atan2(this.event.clientX-(this.left+this.width/2),-(this.event.clientY-(this.top+this.height/2)))*(180/Math.PI)}}},{key:"updateElementPosition",value:function(){var t=this.element.getBoundingClientRect();this.width=this.element.offsetWidth,this.height=this.element.offsetHeight,this.left=t.left,this.top=t.top}},{key:"update",value:function(){var t=this.getValues();this.element.style.transform="perspective("+this.settings.perspective+"px) rotateX("+("x"===this.settings.axis?0:t.tiltY)+"deg) rotateY("+("y"===this.settings.axis?0:t.tiltX)+"deg) scale3d("+this.settings.scale+", "+this.settings.scale+", "+this.settings.scale+")",this.glare&&(this.glareElement.style.transform="rotate(".concat(t.angle,"deg) translate(-50%, -50%)"),this.glareElement.style.opacity="".concat(t.percentageY*this.settings["max-glare"]/100)),this.element.dispatchEvent(new CustomEvent("tiltChange",{detail:t})),this.updateCall=null}},{key:"prepareGlare",value:function(){if(!this.glarePrerender){var t=document.createElement("div");t.classList.add("js-tilt-glare");var e=document.createElement("div");e.classList.add("js-tilt-glare-inner"),t.appendChild(e),this.element.appendChild(t)}this.glareElementWrapper=this.element.querySelector(".js-tilt-glare"),this.glareElement=this.element.querySelector(".js-tilt-glare-inner"),this.glarePrerender||(Object.assign(this.glareElementWrapper.style,{position:"absolute",top:"0",left:"0",width:"100%",height:"100%",overflow:"hidden","pointer-events":"none"}),Object.assign(this.glareElement.style,{position:"absolute",top:"50%",left:"50%","pointer-events":"none","background-image":"linear-gradient(0deg, rgba(255,255,255,0) 0%, rgba(255,255,255,1) 100%)",width:"".concat(2*this.element.offsetWidth,"px"),height:"".concat(2*this.element.offsetWidth,"px"),transform:"rotate(180deg) translate(-50%, -50%)","transform-origin":"0% 0%",opacity:"0"}))}},{key:"updateGlareSize",value:function(){this.glare&&Object.assign(this.glareElement.style,{width:"".concat(2*this.element.offsetWidth),height:"".concat(2*this.element.offsetWidth)})}},{key:"updateClientSize",value:function(){this.clientWidth=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,this.clientHeight=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}},{key:"onWindowResize",value:function(){this.updateGlareSize(),this.updateClientSize()}},{key:"setTransition",value:function(){var t=this;clearTimeout(this.transitionTimeout),this.element.style.transition=this.settings.speed+"ms "+this.settings.easing,this.glare&&(this.glareElement.style.transition="opacity ".concat(this.settings.speed,"ms ").concat(this.settings.easing)),this.transitionTimeout=setTimeout((function(){t.element.style.transition="",t.glare&&(t.glareElement.style.transition="")}),this.settings.speed)}},{key:"extendSettings",value:function(t){var e={reverse:!1,max:15,startX:0,startY:0,perspective:1e3,easing:"cubic-bezier(.03,.98,.52,.99)",scale:1,speed:300,transition:!0,axis:null,glare:!1,"max-glare":1,"glare-prerender":!1,"full-page-listening":!1,"mouse-event-element":null,reset:!0,gyroscope:!0,gyroscopeMinAngleX:-45,gyroscopeMaxAngleX:45,gyroscopeMinAngleY:-45,gyroscopeMaxAngleY:45,gyroscopeSamples:10},n={};for(var i in e)if(i in t)n[i]=t[i];else if(this.element.hasAttribute("data-tilt-"+i)){var o=this.element.getAttribute("data-tilt-"+i);try{n[i]=JSON.parse(o)}catch(t){n[i]=o}}else n[i]=e[i];return n}}])&&i(e.prototype,o),r&&i(e,r),t}();"undefined"!=typeof document&&(window.VanillaTilt=t,t.init(document.querySelectorAll("[data-tilt]")))}()},function(t,e,n){(function(n){var i,o,r;"undefined"!=typeof window&&window,o=[],void 0===(r="function"==typeof(i=function(){return function t(e,n){"use strict";var i=Object.create(t.prototype),o=0,r=0,s=0,a=0,l=[],u=!0,h=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||window.oRequestAnimationFrame||function(t){return setTimeout(t,1e3/60)},c=null,f=!1;try{var p=Object.defineProperty({},"passive",{get:function(){f=!0}});window.addEventListener("testPassive",null,p),window.removeEventListener("testPassive",null,p)}catch(t){}var d=window.cancelAnimationFrame||window.mozCancelAnimationFrame||clearTimeout,m=window.transformProp||function(){var t=document.createElement("div");if(null===t.style.transform){var e=["Webkit","Moz","ms"];for(var n in e)if(void 0!==t.style[e[n]+"Transform"])return e[n]+"Transform"}return"transform"}();i.options={speed:-2,verticalSpeed:null,horizontalSpeed:null,breakpoints:[576,768,1201],center:!1,wrapper:null,relativeToWrapper:!1,round:!0,vertical:!0,horizontal:!1,verticalScrollAxis:"y",horizontalScrollAxis:"x",callback:function(){}},n&&Object.keys(n).forEach((function(t){i.options[t]=n[t]})),n&&n.breakpoints&&function(){if(3===i.options.breakpoints.length&&Array.isArray(i.options.breakpoints)){var t,e=!0,n=!0;if(i.options.breakpoints.forEach((function(i){"number"!=typeof i&&(n=!1),null!==t&&i<t&&(e=!1),t=i})),e&&n)return}i.options.breakpoints=[576,768,1201],console.warn("Rellax: You must pass an array of 3 numbers in ascending order to the breakpoints option. Defaults reverted")}(),e||(e=".rellax");var g="string"==typeof e?document.querySelectorAll(e):[e];if(g.length>0){if(i.elems=g,i.options.wrapper&&!i.options.wrapper.nodeType){var v=document.querySelector(i.options.wrapper);if(!v)return void console.warn("Rellax: The wrapper you're trying to use doesn't exist.");i.options.wrapper=v}var y,b=function t(){for(var e=0;e<l.length;e++)i.elems[e].style.cssText=l[e].style;var n,o;l=[],r=window.innerHeight,a=window.innerWidth,n=a,o=i.options.breakpoints,y=n<o[0]?"xs":n>=o[0]&&n<o[1]?"sm":n>=o[1]&&n<o[2]?"md":"lg",_(),function(){for(var t=0;t<i.elems.length;t++){var e=w(i.elems[t]);l.push(e)}}(),T(),u&&(window.addEventListener("resize",t),u=!1,S())},w=function(t){var e,n=t.getAttribute("data-rellax-percentage"),o=t.getAttribute("data-rellax-speed"),s=t.getAttribute("data-rellax-xs-speed"),l=t.getAttribute("data-rellax-mobile-speed"),u=t.getAttribute("data-rellax-tablet-speed"),h=t.getAttribute("data-rellax-desktop-speed"),c=t.getAttribute("data-rellax-vertical-speed"),f=t.getAttribute("data-rellax-horizontal-speed"),p=t.getAttribute("data-rellax-vertical-scroll-axis"),d=t.getAttribute("data-rellax-horizontal-scroll-axis"),m=t.getAttribute("data-rellax-zindex")||0,g=t.getAttribute("data-rellax-min"),v=t.getAttribute("data-rellax-max"),b=t.getAttribute("data-rellax-min-x"),w=t.getAttribute("data-rellax-max-x"),_=t.getAttribute("data-rellax-min-y"),x=t.getAttribute("data-rellax-max-y"),S=!0;s||l||u||h?e={xs:s,sm:l,md:u,lg:h}:S=!1;var T=i.options.wrapper?i.options.wrapper.scrollTop:window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop;i.options.relativeToWrapper&&(T=(window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop)-i.options.wrapper.offsetTop);var C=i.options.vertical&&(n||i.options.center)?T:0,O=i.options.horizontal&&(n||i.options.center)?i.options.wrapper?i.options.wrapper.scrollLeft:window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft:0,I=C+t.getBoundingClientRect().top,L=t.clientHeight||t.offsetHeight||t.scrollHeight,A=O+t.getBoundingClientRect().left,z=t.clientWidth||t.offsetWidth||t.scrollWidth,D=n||(C-I+r)/(L+r),P=n||(O-A+a)/(z+a);i.options.center&&(P=.5,D=.5);var k=S&&null!==e[y]?Number(e[y]):o||i.options.speed,W=c||i.options.verticalSpeed,M=f||i.options.horizontalSpeed,N=p||i.options.verticalScrollAxis,F=d||i.options.horizontalScrollAxis,j=E(P,D,k,W,M),H=t.style.cssText,R="",B=/transform\s*:/i.exec(H);if(B){var Y=B.index,q=H.slice(Y),X=q.indexOf(";");R=X?" "+q.slice(11,X).replace(/\s/g,""):" "+q.slice(11).replace(/\s/g,"")}return{baseX:j.x,baseY:j.y,top:I,left:A,height:L,width:z,speed:k,verticalSpeed:W,horizontalSpeed:M,verticalScrollAxis:N,horizontalScrollAxis:F,style:H,transform:R,zindex:m,min:g,max:v,minX:b,maxX:w,minY:_,maxY:x}},_=function(){var t=o,e=s;if(o=i.options.wrapper?i.options.wrapper.scrollTop:(document.documentElement||document.body.parentNode||document.body).scrollTop||window.pageYOffset,s=i.options.wrapper?i.options.wrapper.scrollLeft:(document.documentElement||document.body.parentNode||document.body).scrollLeft||window.pageXOffset,i.options.relativeToWrapper){var n=(document.documentElement||document.body.parentNode||document.body).scrollTop||window.pageYOffset;o=n-i.options.wrapper.offsetTop}return!(t==o||!i.options.vertical)||!(e==s||!i.options.horizontal)},E=function(t,e,n,o,r){var s={},a=(r||n)*(100*(1-t)),l=(o||n)*(100*(1-e));return s.x=i.options.round?Math.round(a):Math.round(100*a)/100,s.y=i.options.round?Math.round(l):Math.round(100*l)/100,s},x=function t(){window.removeEventListener("resize",t),window.removeEventListener("orientationchange",t),(i.options.wrapper?i.options.wrapper:window).removeEventListener("scroll",t),(i.options.wrapper?i.options.wrapper:document).removeEventListener("touchmove",t),c=h(S)},S=function t(){_()&&!1===u?(T(),c=h(t)):(c=null,window.addEventListener("resize",x),window.addEventListener("orientationchange",x),(i.options.wrapper?i.options.wrapper:window).addEventListener("scroll",x,!!f&&{passive:!0}),(i.options.wrapper?i.options.wrapper:document).addEventListener("touchmove",x,!!f&&{passive:!0}))},T=function(){for(var t,e=0;e<i.elems.length;e++){var n=l[e].verticalScrollAxis.toLowerCase(),u=l[e].horizontalScrollAxis.toLowerCase(),h=-1!=n.indexOf("x")?o:0,c=-1!=n.indexOf("y")?o:0,f=-1!=u.indexOf("x")?s:0,p=(c+(-1!=u.indexOf("y")?s:0)-l[e].top+r)/(l[e].height+r),d=(h+f-l[e].left+a)/(l[e].width+a),g=(t=E(d,p,l[e].speed,l[e].verticalSpeed,l[e].horizontalSpeed)).y-l[e].baseY,v=t.x-l[e].baseX;null!==l[e].min&&(i.options.vertical&&!i.options.horizontal&&(g=g<=l[e].min?l[e].min:g),i.options.horizontal&&!i.options.vertical&&(v=v<=l[e].min?l[e].min:v)),null!=l[e].minY&&(g=g<=l[e].minY?l[e].minY:g),null!=l[e].minX&&(v=v<=l[e].minX?l[e].minX:v),null!==l[e].max&&(i.options.vertical&&!i.options.horizontal&&(g=g>=l[e].max?l[e].max:g),i.options.horizontal&&!i.options.vertical&&(v=v>=l[e].max?l[e].max:v)),null!=l[e].maxY&&(g=g>=l[e].maxY?l[e].maxY:g),null!=l[e].maxX&&(v=v>=l[e].maxX?l[e].maxX:v);var y=l[e].zindex,b="translate3d("+(i.options.horizontal?v:"0")+"px,"+(i.options.vertical?g:"0")+"px,"+y+"px) "+l[e].transform;i.elems[e].style[m]=b}i.options.callback(t)};return i.destroy=function(){for(var t=0;t<i.elems.length;t++)i.elems[t].style.cssText=l[t].style;u||(window.removeEventListener("resize",b),u=!0),d(c),c=null},b(),i.refresh=b,i}console.warn("Rellax: The elements you're trying to select don't exist.")}})?i.apply(e,o):i)||(t.exports=r)}).call(this,n(2))},function(t,e){window.onscroll=function(){document.getElementById("rotate--scroll").style.transform="rotate("+window.pageYOffset/4+"deg)"}},function(t,e){var n;(n=jQuery)("li.dropdown").hover((function(t){t.preventDefault(),n(this).toggleClass("hover")}))},function(t,e){jQuery((function(t){var e={numberGreaterThan50:function(){var e=t(this).find(".number").text();return parseInt(e,10)>50},ium:function(){var e=t(this).find(".name").text();return console.log(e),e.match(/kes$/)},testFunc:function(){var e=t(this).hasClass("webbutveckling");return console.log(e),e},testSeo:function(){var e=t(this).hasClass("seo");return console.log(e),e}};var n=t(".gallery"),i=t(".btn-filter-group");i.on("click","button",(function(){var e=t(this).attr("data-filter");location.hash=""+encodeURIComponent(e)}));var o=!1;function r(){var t=function(){var t=location.hash.match(/([^&]+)/i),e=t&&t[1];return e&&decodeURIComponent(e).substr(1)}();!t&&o||(o=!0,n.isotope({itemSelector:".gallery-item",layoutMode:"masonry",masonry:{gutter:".gallery-item-gutter"},filter:e[t]||t}),t&&(i.find(".selected").removeClass("selected"),i.find('[data-filter="'+t+'"]').addClass("selected")))}t(window).on("hashchange",r),r()}))},function(t,e,n){"use strict";n.r(e),n.d(e,"Util",(function(){return a})),n.d(e,"Collapse",(function(){return L})),n.d(e,"Dropdown",(function(){return at}));var i=n(0),o=n.n(i);function r(t){var e=this,n=!1;return o()(this).one(s.TRANSITION_END,(function(){n=!0})),setTimeout((function(){n||s.triggerTransitionEnd(e)}),t),this}var s={TRANSITION_END:"bsTransitionEnd",getUID:function(t){do{t+=~~(1e6*Math.random())}while(document.getElementById(t));return t},getSelectorFromElement:function(t){var e=t.getAttribute("data-target");if(!e||"#"===e){var n=t.getAttribute("href");e=n&&"#"!==n?n.trim():""}try{return document.querySelector(e)?e:null}catch(t){return null}},getTransitionDurationFromElement:function(t){if(!t)return 0;var e=o()(t).css("transition-duration"),n=o()(t).css("transition-delay"),i=parseFloat(e),r=parseFloat(n);return i||r?(e=e.split(",")[0],n=n.split(",")[0],1e3*(parseFloat(e)+parseFloat(n))):0},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(t){o()(t).trigger("transitionend")},supportsTransitionEnd:function(){return Boolean("transitionend")},isElement:function(t){return(t[0]||t).nodeType},typeCheckConfig:function(t,e,n){for(var i in n)if(Object.prototype.hasOwnProperty.call(n,i)){var o=n[i],r=e[i],a=r&&s.isElement(r)?"element":(l=r,{}.toString.call(l).match(/\s([a-z]+)/i)[1].toLowerCase());if(!new RegExp(o).test(a))throw new Error("".concat(t.toUpperCase(),": ")+'Option "'.concat(i,'" provided type "').concat(a,'" ')+'but expected type "'.concat(o,'".'))}var l},findShadowRoot:function(t){if(!document.documentElement.attachShadow)return null;if("function"==typeof t.getRootNode){var e=t.getRootNode();return e instanceof ShadowRoot?e:null}return t instanceof ShadowRoot?t:t.parentNode?s.findShadowRoot(t.parentNode):null},jQueryDetection:function(){if(void 0===o.a)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var t=o.a.fn.jquery.split(" ")[0].split(".");if(t[0]<2&&t[1]<9||1===t[0]&&9===t[1]&&t[2]<1||t[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}};s.jQueryDetection(),o.a.fn.emulateTransitionEnd=r,o.a.event.special[s.TRANSITION_END]={bindType:"transitionend",delegateType:"transitionend",handle:function(t){if(o()(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}};var a=s;function l(t){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function u(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function h(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?u(Object(n),!0).forEach((function(e){c(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function c(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function f(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var p="collapse",d="bs.collapse",m=".".concat(d),g=o.a.fn[p],v={toggle:!0,parent:""},y={toggle:"boolean",parent:"(string|element)"},b={SHOW:"show".concat(m),SHOWN:"shown".concat(m),HIDE:"hide".concat(m),HIDDEN:"hidden".concat(m),CLICK_DATA_API:"click".concat(m).concat(".data-api")},w="show",_="collapse",E="collapsing",x="collapsed",S="width",T="height",C=".show, .collapsing",O='[data-toggle="collapse"]',I=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._isTransitioning=!1,this._element=e,this._config=this._getConfig(n),this._triggerArray=[].slice.call(document.querySelectorAll('[data-toggle="collapse"][href="#'.concat(e.id,'"],')+'[data-toggle="collapse"][data-target="#'.concat(e.id,'"]')));for(var i=[].slice.call(document.querySelectorAll(O)),o=0,r=i.length;o<r;o++){var s=i[o],l=a.getSelectorFromElement(s),u=[].slice.call(document.querySelectorAll(l)).filter((function(t){return t===e}));null!==l&&u.length>0&&(this._selector=l,this._triggerArray.push(s))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var e,n,i;return e=t,i=[{key:"_getTargetFromElement",value:function(t){var e=a.getSelectorFromElement(t);return e?document.querySelector(e):null}},{key:"_jQueryInterface",value:function(e){return this.each((function(){var n=o()(this),i=n.data(d),r=h({},v,{},n.data(),{},"object"===l(e)&&e?e:{});if(!i&&r.toggle&&/show|hide/.test(e)&&(r.toggle=!1),i||(i=new t(this,r),n.data(d,i)),"string"==typeof e){if(void 0===i[e])throw new TypeError('No method named "'.concat(e,'"'));i[e]()}}))}},{key:"VERSION",get:function(){return"4.4.1"}},{key:"Default",get:function(){return v}}],(n=[{key:"toggle",value:function(){o()(this._element).hasClass(w)?this.hide():this.show()}},{key:"show",value:function(){var e,n,i=this;if(!(this._isTransitioning||o()(this._element).hasClass(w)||(this._parent&&0===(e=[].slice.call(this._parent.querySelectorAll(C)).filter((function(t){return"string"==typeof i._config.parent?t.getAttribute("data-parent")===i._config.parent:t.classList.contains(_)}))).length&&(e=null),e&&(n=o()(e).not(this._selector).data(d))&&n._isTransitioning))){var r=o.a.Event(b.SHOW);if(o()(this._element).trigger(r),!r.isDefaultPrevented()){e&&(t._jQueryInterface.call(o()(e).not(this._selector),"hide"),n||o()(e).data(d,null));var s=this._getDimension();o()(this._element).removeClass(_).addClass(E),this._element.style[s]=0,this._triggerArray.length&&o()(this._triggerArray).removeClass(x).attr("aria-expanded",!0),this.setTransitioning(!0);var l=s[0].toUpperCase()+s.slice(1),u="scroll".concat(l),h=a.getTransitionDurationFromElement(this._element);o()(this._element).one(a.TRANSITION_END,(function(){o()(i._element).removeClass(E).addClass(_).addClass(w),i._element.style[s]="",i.setTransitioning(!1),o()(i._element).trigger(b.SHOWN)})).emulateTransitionEnd(h),this._element.style[s]="".concat(this._element[u],"px")}}}},{key:"hide",value:function(){var t=this;if(!this._isTransitioning&&o()(this._element).hasClass(w)){var e=o.a.Event(b.HIDE);if(o()(this._element).trigger(e),!e.isDefaultPrevented()){var n=this._getDimension();this._element.style[n]="".concat(this._element.getBoundingClientRect()[n],"px"),a.reflow(this._element),o()(this._element).addClass(E).removeClass(_).removeClass(w);var i=this._triggerArray.length;if(i>0)for(var r=0;r<i;r++){var s=this._triggerArray[r],l=a.getSelectorFromElement(s);null!==l&&(o()([].slice.call(document.querySelectorAll(l))).hasClass(w)||o()(s).addClass(x).attr("aria-expanded",!1))}this.setTransitioning(!0),this._element.style[n]="";var u=a.getTransitionDurationFromElement(this._element);o()(this._element).one(a.TRANSITION_END,(function(){t.setTransitioning(!1),o()(t._element).removeClass(E).addClass(_).trigger(b.HIDDEN)})).emulateTransitionEnd(u)}}}},{key:"setTransitioning",value:function(t){this._isTransitioning=t}},{key:"dispose",value:function(){o.a.removeData(this._element,d),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null}},{key:"_getConfig",value:function(t){return(t=h({},v,{},t)).toggle=Boolean(t.toggle),a.typeCheckConfig(p,t,y),t}},{key:"_getDimension",value:function(){return o()(this._element).hasClass(S)?S:T}},{key:"_getParent",value:function(){var e,n=this;a.isElement(this._config.parent)?(e=this._config.parent,void 0!==this._config.parent.jquery&&(e=this._config.parent[0])):e=document.querySelector(this._config.parent);var i='[data-toggle="collapse"][data-parent="'.concat(this._config.parent,'"]'),r=[].slice.call(e.querySelectorAll(i));return o()(r).each((function(e,i){n._addAriaAndCollapsedClass(t._getTargetFromElement(i),[i])})),e}},{key:"_addAriaAndCollapsedClass",value:function(t,e){var n=o()(t).hasClass(w);e.length&&o()(e).toggleClass(x,!n).attr("aria-expanded",n)}}])&&f(e.prototype,n),i&&f(e,i),t}();o()(document).on(b.CLICK_DATA_API,O,(function(t){"A"===t.currentTarget.tagName&&t.preventDefault();var e=o()(this),n=a.getSelectorFromElement(this),i=[].slice.call(document.querySelectorAll(n));o()(i).each((function(){var t=o()(this),n=t.data(d)?"toggle":e.data();I._jQueryInterface.call(t,n)}))})),o.a.fn[p]=I._jQueryInterface,o.a.fn[p].Constructor=I,o.a.fn[p].noConflict=function(){return o.a.fn[p]=g,I._jQueryInterface};var L=I,A=n(1);function z(t){return(z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function D(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function P(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?D(Object(n),!0).forEach((function(e){k(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):D(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function k(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function W(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var M=".".concat("bs.dropdown"),N=o.a.fn.dropdown,F=new RegExp("".concat(38,"|").concat(40,"|").concat(27)),j={HIDE:"hide".concat(M),HIDDEN:"hidden".concat(M),SHOW:"show".concat(M),SHOWN:"shown".concat(M),CLICK:"click".concat(M),CLICK_DATA_API:"click".concat(M).concat(".data-api"),KEYDOWN_DATA_API:"keydown".concat(M).concat(".data-api"),KEYUP_DATA_API:"keyup".concat(M).concat(".data-api")},H="disabled",R="show",B="dropup",Y="dropright",q="dropleft",X="dropdown-menu-right",Q="position-static",U='[data-toggle="dropdown"]',G=".dropdown form",V=".dropdown-menu",K=".navbar-nav",$=".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",J="top-start",Z="top-end",tt="bottom-start",et="bottom-end",nt="right-start",it="left-start",ot={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic",popperConfig:null},rt={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string",popperConfig:"(null|object)"},st=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._element=e,this._popper=null,this._config=this._getConfig(n),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var e,n,i;return e=t,i=[{key:"_jQueryInterface",value:function(e){return this.each((function(){var n=o()(this).data("bs.dropdown"),i="object"===z(e)?e:null;if(n||(n=new t(this,i),o()(this).data("bs.dropdown",n)),"string"==typeof e){if(void 0===n[e])throw new TypeError('No method named "'.concat(e,'"'));n[e]()}}))}},{key:"_clearMenus",value:function(e){if(!e||3!==e.which&&("keyup"!==e.type||9===e.which))for(var n=[].slice.call(document.querySelectorAll(U)),i=0,r=n.length;i<r;i++){var s=t._getParentFromElement(n[i]),a=o()(n[i]).data("bs.dropdown"),l={relatedTarget:n[i]};if(e&&"click"===e.type&&(l.clickEvent=e),a){var u=a._menu;if(o()(s).hasClass(R)&&!(e&&("click"===e.type&&/input|textarea/i.test(e.target.tagName)||"keyup"===e.type&&9===e.which)&&o.a.contains(s,e.target))){var h=o.a.Event(j.HIDE,l);o()(s).trigger(h),h.isDefaultPrevented()||("ontouchstart"in document.documentElement&&o()(document.body).children().off("mouseover",null,o.a.noop),n[i].setAttribute("aria-expanded","false"),a._popper&&a._popper.destroy(),o()(u).removeClass(R),o()(s).removeClass(R).trigger(o.a.Event(j.HIDDEN,l)))}}}}},{key:"_getParentFromElement",value:function(t){var e,n=a.getSelectorFromElement(t);return n&&(e=document.querySelector(n)),e||t.parentNode}},{key:"_dataApiKeydownHandler",value:function(e){if(!(/input|textarea/i.test(e.target.tagName)?32===e.which||27!==e.which&&(40!==e.which&&38!==e.which||o()(e.target).closest(V).length):!F.test(e.which))&&(e.preventDefault(),e.stopPropagation(),!this.disabled&&!o()(this).hasClass(H))){var n=t._getParentFromElement(this),i=o()(n).hasClass(R);if(i||27!==e.which)if(i&&(!i||27!==e.which&&32!==e.which)){var r=[].slice.call(n.querySelectorAll($)).filter((function(t){return o()(t).is(":visible")}));if(0!==r.length){var s=r.indexOf(e.target);38===e.which&&s>0&&s--,40===e.which&&s<r.length-1&&s++,s<0&&(s=0),r[s].focus()}}else{if(27===e.which){var a=n.querySelector(U);o()(a).trigger("focus")}o()(this).trigger("click")}}}},{key:"VERSION",get:function(){return"4.4.1"}},{key:"Default",get:function(){return ot}},{key:"DefaultType",get:function(){return rt}}],(n=[{key:"toggle",value:function(){if(!this._element.disabled&&!o()(this._element).hasClass(H)){var e=o()(this._menu).hasClass(R);t._clearMenus(),e||this.show(!0)}}},{key:"show",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!(this._element.disabled||o()(this._element).hasClass(H)||o()(this._menu).hasClass(R))){var n={relatedTarget:this._element},i=o.a.Event(j.SHOW,n),r=t._getParentFromElement(this._element);if(o()(r).trigger(i),!i.isDefaultPrevented()){if(!this._inNavbar&&e){if(void 0===A.a)throw new TypeError("Bootstrap's dropdowns require Popper.js (https://popper.js.org/)");var s=this._element;"parent"===this._config.reference?s=r:a.isElement(this._config.reference)&&(s=this._config.reference,void 0!==this._config.reference.jquery&&(s=this._config.reference[0])),"scrollParent"!==this._config.boundary&&o()(r).addClass(Q),this._popper=new A.a(s,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===o()(r).closest(K).length&&o()(document.body).children().on("mouseover",null,o.a.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),o()(this._menu).toggleClass(R),o()(r).toggleClass(R).trigger(o.a.Event(j.SHOWN,n))}}}},{key:"hide",value:function(){if(!this._element.disabled&&!o()(this._element).hasClass(H)&&o()(this._menu).hasClass(R)){var e={relatedTarget:this._element},n=o.a.Event(j.HIDE,e),i=t._getParentFromElement(this._element);o()(i).trigger(n),n.isDefaultPrevented()||(this._popper&&this._popper.destroy(),o()(this._menu).toggleClass(R),o()(i).toggleClass(R).trigger(o.a.Event(j.HIDDEN,e)))}}},{key:"dispose",value:function(){o.a.removeData(this._element,"bs.dropdown"),o()(this._element).off(M),this._element=null,this._menu=null,null!==this._popper&&(this._popper.destroy(),this._popper=null)}},{key:"update",value:function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()}},{key:"_addEventListeners",value:function(){var t=this;o()(this._element).on(j.CLICK,(function(e){e.preventDefault(),e.stopPropagation(),t.toggle()}))}},{key:"_getConfig",value:function(t){return t=P({},this.constructor.Default,{},o()(this._element).data(),{},t),a.typeCheckConfig("dropdown",t,this.constructor.DefaultType),t}},{key:"_getMenuElement",value:function(){if(!this._menu){var e=t._getParentFromElement(this._element);e&&(this._menu=e.querySelector(V))}return this._menu}},{key:"_getPlacement",value:function(){var t=o()(this._element.parentNode),e=tt;return t.hasClass(B)?(e=J,o()(this._menu).hasClass(X)&&(e=Z)):t.hasClass(Y)?e=nt:t.hasClass(q)?e=it:o()(this._menu).hasClass(X)&&(e=et),e}},{key:"_detectNavbar",value:function(){return o()(this._element).closest(".navbar").length>0}},{key:"_getOffset",value:function(){var t=this,e={};return"function"==typeof this._config.offset?e.fn=function(e){return e.offsets=P({},e.offsets,{},t._config.offset(e.offsets,t._element)||{}),e}:e.offset=this._config.offset,e}},{key:"_getPopperConfig",value:function(){var t={placement:this._getPlacement(),modifiers:{offset:this._getOffset(),flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(t.modifiers.applyStyle={enabled:!1}),P({},t,{},this._config.popperConfig)}}])&&W(e.prototype,n),i&&W(e,i),t}();o()(document).on(j.KEYDOWN_DATA_API,U,st._dataApiKeydownHandler).on(j.KEYDOWN_DATA_API,V,st._dataApiKeydownHandler).on("".concat(j.CLICK_DATA_API," ").concat(j.KEYUP_DATA_API),st._clearMenus).on(j.CLICK_DATA_API,U,(function(t){t.preventDefault(),t.stopPropagation(),st._jQueryInterface.call(o()(this),"toggle")})).on(j.CLICK_DATA_API,G,(function(t){t.stopPropagation()})),o.a.fn.dropdown=st._jQueryInterface,o.a.fn.dropdown.Constructor=st,o.a.fn.dropdown.noConflict=function(){return o.a.fn.dropdown=N,st._jQueryInterface};var at=st;n(4),n(5),n(6),n(7),n(8),n(9)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwialF1ZXJ5XCIiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy91dGlscy9pc0Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy91dGlscy9kZWJvdW5jZS5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL3V0aWxzL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy91dGlscy9nZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy91dGlscy9nZXRQYXJlbnROb2RlLmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvdXRpbHMvZ2V0U2Nyb2xsUGFyZW50LmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvdXRpbHMvZ2V0UmVmZXJlbmNlTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL3V0aWxzL2lzSUUuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy91dGlscy9nZXRPZmZzZXRQYXJlbnQuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy91dGlscy9nZXRSb290LmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvdXRpbHMvZmluZENvbW1vbk9mZnNldFBhcmVudC5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL3V0aWxzL2lzT2Zmc2V0Q29udGFpbmVyLmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvdXRpbHMvZ2V0U2Nyb2xsLmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvdXRpbHMvaW5jbHVkZVNjcm9sbC5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL3V0aWxzL2dldEJvcmRlcnNTaXplLmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvdXRpbHMvZ2V0V2luZG93U2l6ZXMuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy91dGlscy9nZXRDbGllbnRSZWN0LmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvdXRpbHMvZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvdXRpbHMvZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlLmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvdXRpbHMvZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlLmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvdXRpbHMvaXNGaXhlZC5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL3V0aWxzL2dldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy91dGlscy9nZXRCb3VuZGFyaWVzLmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvdXRpbHMvY29tcHV0ZUF1dG9QbGFjZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy91dGlscy9nZXRSZWZlcmVuY2VPZmZzZXRzLmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvdXRpbHMvZ2V0T3V0ZXJTaXplcy5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL3V0aWxzL2dldE9wcG9zaXRlUGxhY2VtZW50LmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvdXRpbHMvZ2V0UG9wcGVyT2Zmc2V0cy5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL3V0aWxzL2ZpbmQuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy91dGlscy9ydW5Nb2RpZmllcnMuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy91dGlscy9maW5kSW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy9tZXRob2RzL3VwZGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL3V0aWxzL2lzTW9kaWZpZXJFbmFibGVkLmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvdXRpbHMvZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lLmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvbWV0aG9kcy9kZXN0cm95LmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvdXRpbHMvZ2V0V2luZG93LmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvdXRpbHMvc2V0dXBFdmVudExpc3RlbmVycy5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL21ldGhvZHMvZW5hYmxlRXZlbnRMaXN0ZW5lcnMuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy9tZXRob2RzL2Rpc2FibGVFdmVudExpc3RlbmVycy5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL3V0aWxzL3JlbW92ZUV2ZW50TGlzdGVuZXJzLmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvdXRpbHMvaXNOdW1lcmljLmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvdXRpbHMvc2V0U3R5bGVzLmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvbW9kaWZpZXJzL2NvbXB1dGVTdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL3V0aWxzL2lzTW9kaWZpZXJSZXF1aXJlZC5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL21ldGhvZHMvcGxhY2VtZW50cy5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL3V0aWxzL2Nsb2Nrd2lzZS5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL21vZGlmaWVycy9mbGlwLmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvbW9kaWZpZXJzL29mZnNldC5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL21vZGlmaWVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL21ldGhvZHMvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy9tb2RpZmllcnMvc2hpZnQuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy9tb2RpZmllcnMvcHJldmVudE92ZXJmbG93LmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvbW9kaWZpZXJzL2tlZXBUb2dldGhlci5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL21vZGlmaWVycy9hcnJvdy5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL3V0aWxzL2dldE9wcG9zaXRlVmFyaWF0aW9uLmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvbW9kaWZpZXJzL2lubmVyLmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvbW9kaWZpZXJzL2hpZGUuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL3NyYy91dGlscy9nZXRSb3VuZGVkT2Zmc2V0cy5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL21vZGlmaWVycy9hcHBseVN0eWxlLmpzIiwid2VicGFjazovLy8uLi8uLi9zcmMvdXRpbHMvc2V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3ZlbmRvci9pc290b3BlL2lzb3RvcGUucGtnZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvdmVuZG9yL3RpbHQvdGlsdC5qcXVlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3ZlbmRvci9yZWxsYXgvcmVsbGF4LmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9tb2R1bGVzL2N1c3RvbS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbW9kdWxlcy9uYXZpZ2F0aW9uLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9tb2R1bGVzL2lzb3RvcGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3ZlbmRvci9ib290c3RyYXAvdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvdmVuZG9yL2Jvb3RzdHJhcC9jb2xsYXBzZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvdmVuZG9yL2Jvb3RzdHJhcC9kcm9wZG93bi5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImpRdWVyeSIsIndpbmRvdyIsImRvY3VtZW50IiwibmF2aWdhdG9yIiwidGltZW91dER1cmF0aW9uIiwibG9uZ2VyVGltZW91dEJyb3dzZXJzIiwiaXNCcm93c2VyIiwiZm4iLCJjYWxsZWQiLCJzY2hlZHVsZWQiLCJpc0Z1bmN0aW9uIiwiZnVuY3Rpb25Ub0NoZWNrIiwiZ2V0VHlwZSIsImdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSIsImVsZW1lbnQiLCJjc3MiLCJnZXRQYXJlbnROb2RlIiwiZ2V0U2Nyb2xsUGFyZW50Iiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJ0ZXN0IiwiZ2V0UmVmZXJlbmNlTm9kZSIsInJlZmVyZW5jZSIsImlzSUUxMSIsImlzSUUxMCIsImlzSUUiLCJ2ZXJzaW9uIiwiZ2V0T2Zmc2V0UGFyZW50Iiwibm9PZmZzZXRQYXJlbnQiLCJvZmZzZXRQYXJlbnQiLCJub2RlTmFtZSIsImluZGV4T2YiLCJnZXRSb290Iiwibm9kZSIsImZpbmRDb21tb25PZmZzZXRQYXJlbnQiLCJlbGVtZW50MSIsImVsZW1lbnQyIiwib3JkZXIiLCJOb2RlIiwic3RhcnQiLCJlbmQiLCJyYW5nZSIsImNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIiwiZWxlbWVudDFyb290IiwiZ2V0U2Nyb2xsIiwic2lkZSIsInVwcGVyU2lkZSIsImh0bWwiLCJzY3JvbGxpbmdFbGVtZW50IiwiaW5jbHVkZVNjcm9sbCIsInJlY3QiLCJzdWJ0cmFjdCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJtb2RpZmllciIsImdldEJvcmRlcnNTaXplIiwic3R5bGVzIiwiYXhpcyIsInNpZGVBIiwic2lkZUIiLCJwYXJzZUZsb2F0IiwiZ2V0U2l6ZSIsImJvZHkiLCJjb21wdXRlZFN0eWxlIiwiTWF0aCIsInBhcnNlSW50IiwiZ2V0V2luZG93U2l6ZXMiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0Q2xpZW50UmVjdCIsIm9mZnNldHMiLCJoZWlnaHQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJyZXN1bHQiLCJ0b3AiLCJzaXplcyIsIndpZHRoIiwiaG9yaXpTY3JvbGxiYXIiLCJ2ZXJ0U2Nyb2xsYmFyIiwiZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlIiwiY2hpbGRyZW4iLCJwYXJlbnQiLCJmaXhlZFBvc2l0aW9uIiwicnVuSXNJRSIsImlzSFRNTCIsImNoaWxkcmVuUmVjdCIsInBhcmVudFJlY3QiLCJzY3JvbGxQYXJlbnQiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckxlZnRXaWR0aCIsIm1hcmdpblRvcCIsIm1hcmdpbkxlZnQiLCJnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUiLCJleGNsdWRlU2Nyb2xsIiwicmVsYXRpdmVPZmZzZXQiLCJvZmZzZXQiLCJpc0ZpeGVkIiwicGFyZW50Tm9kZSIsImdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQiLCJlbCIsImdldEJvdW5kYXJpZXMiLCJib3VuZGFyaWVzIiwibGVmdCIsImJvdW5kYXJpZXNFbGVtZW50IiwiYm91bmRhcmllc05vZGUiLCJwb3BwZXIiLCJpc1BhZGRpbmdOdW1iZXIiLCJwYWRkaW5nIiwiZ2V0QXJlYSIsImNvbXB1dGVBdXRvUGxhY2VtZW50IiwicGxhY2VtZW50IiwicmVjdHMiLCJyZWZSZWN0IiwiYm90dG9tIiwic29ydGVkQXJlYXMiLCJrZXlzIiwiYiIsImEiLCJmaWx0ZXJlZEFyZWFzIiwiZmlsdGVyIiwiY29tcHV0ZWRQbGFjZW1lbnQiLCJ2YXJpYXRpb24iLCJnZXRSZWZlcmVuY2VPZmZzZXRzIiwic3RhdGUiLCJjb21tb25PZmZzZXRQYXJlbnQiLCJnZXRPdXRlclNpemVzIiwieCIsInkiLCJnZXRPcHBvc2l0ZVBsYWNlbWVudCIsImhhc2giLCJyaWdodCIsInJlcGxhY2UiLCJtYXRjaGVkIiwiZ2V0UG9wcGVyT2Zmc2V0cyIsInJlZmVyZW5jZU9mZnNldHMiLCJwb3BwZXJSZWN0IiwicG9wcGVyT2Zmc2V0cyIsImlzSG9yaXoiLCJtYWluU2lkZSIsInNlY29uZGFyeVNpZGUiLCJtZWFzdXJlbWVudCIsInNlY29uZGFyeU1lYXN1cmVtZW50IiwiZmluZCIsImFyciIsImNoZWNrIiwiQXJyYXkiLCJydW5Nb2RpZmllcnMiLCJtb2RpZmllcnMiLCJkYXRhIiwiZW5kcyIsInByb3AiLCJmaW5kSW5kZXgiLCJjdXIiLCJtYXRjaCIsIm9iaiIsInVwZGF0ZSIsInRoaXMiLCJvcHRpb25zIiwiZmxpcCIsInBvc2l0aW9uRml4ZWQiLCJpc01vZGlmaWVyRW5hYmxlZCIsIm1vZGlmaWVyTmFtZSIsInNvbWUiLCJnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUiLCJwcmVmaXhlcyIsInVwcGVyUHJvcCIsInByZWZpeCIsInRvQ2hlY2siLCJkZXN0cm95IiwiZ2V0V2luZG93Iiwib3duZXJEb2N1bWVudCIsInNldHVwRXZlbnRMaXN0ZW5lcnMiLCJwYXNzaXZlIiwic2Nyb2xsRWxlbWVudCIsImF0dGFjaFRvU2Nyb2xsUGFyZW50cyIsImV2ZW50IiwiY2FsbGJhY2siLCJzY3JvbGxQYXJlbnRzIiwiaXNCb2R5IiwidGFyZ2V0IiwiZW5hYmxlRXZlbnRMaXN0ZW5lcnMiLCJkaXNhYmxlRXZlbnRMaXN0ZW5lcnMiLCJyZW1vdmVFdmVudExpc3RlbmVycyIsImlzTnVtZXJpYyIsImlzTmFOIiwiaXNGaW5pdGUiLCJzZXRTdHlsZXMiLCJ1bml0IiwiaXNGaXJlZm94IiwiaXNNb2RpZmllclJlcXVpcmVkIiwicmVxdWVzdGluZyIsImlzUmVxdWlyZWQiLCJyZXF1ZXN0ZWQiLCJ2YWxpZFBsYWNlbWVudHMiLCJwbGFjZW1lbnRzIiwiY2xvY2t3aXNlIiwiY291bnRlciIsImluZGV4IiwiQkVIQVZJT1JTIiwicGFyc2VPZmZzZXQiLCJ1c2VIZWlnaHQiLCJiYXNlUGxhY2VtZW50IiwiZnJhZ21lbnRzIiwic3BsaXQiLCJtYXAiLCJmcmFnIiwiZGl2aWRlciIsInNwbGl0UmVnZXgiLCJvcHMiLCJtZXJnZVdpdGhQcmV2aW91cyIsIm9wIiwic3RyIiwic2l6ZSIsInRvVmFsdWUiLCJpbmRleDIiLCJzaGlmdHZhcmlhdGlvbiIsImlzVmVydGljYWwiLCJzaGlmdE9mZnNldHMiLCJ0cmFuc2Zvcm1Qcm9wIiwicG9wcGVyU3R5bGVzIiwidHJhbnNmb3JtIiwiZmxvb3IiLCJvcFNpZGUiLCJhcnJvd0VsZW1lbnQiLCJsZW4iLCJzaWRlQ2FwaXRhbGl6ZWQiLCJhbHRTaWRlIiwiYXJyb3dFbGVtZW50U2l6ZSIsImNlbnRlciIsInBvcHBlck1hcmdpblNpZGUiLCJwb3BwZXJCb3JkZXJTaWRlIiwic2lkZVZhbHVlIiwicGxhY2VtZW50T3Bwb3NpdGUiLCJmbGlwT3JkZXIiLCJyZWZPZmZzZXRzIiwib3ZlcmxhcHNSZWYiLCJvdmVyZmxvd3NMZWZ0Iiwib3ZlcmZsb3dzUmlnaHQiLCJvdmVyZmxvd3NUb3AiLCJvdmVyZmxvd3NCb3R0b20iLCJvdmVyZmxvd3NCb3VuZGFyaWVzIiwiZmxpcHBlZFZhcmlhdGlvbkJ5UmVmIiwiZmxpcHBlZFZhcmlhdGlvbkJ5Q29udGVudCIsImZsaXBwZWRWYXJpYXRpb24iLCJnZXRPcHBvc2l0ZVZhcmlhdGlvbiIsInN1YnRyYWN0TGVuZ3RoIiwiYm91bmQiLCJsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24iLCJncHVBY2NlbGVyYXRpb24iLCJvZmZzZXRQYXJlbnRSZWN0IiwicG9zaXRpb24iLCJzaG91bGRSb3VuZCIsInJvdW5kIiwibm9Sb3VuZCIsInYiLCJyZWZlcmVuY2VXaWR0aCIsInBvcHBlcldpZHRoIiwiaXNWYXJpYXRpb24iLCJob3Jpem9udGFsVG9JbnRlZ2VyIiwidmVydGljYWxUb0ludGVnZXIiLCJib3RoT2RkV2lkdGgiLCJnZXRSb3VuZGVkT2Zmc2V0cyIsInByZWZpeGVkUHJvcGVydHkiLCJpbnZlcnRUb3AiLCJpbnZlcnRMZWZ0IiwiYXR0cmlidXRlcyIsInVuZGVmaW5lZCIsIlBvcHBlciIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImRlYm91bmNlIiwibW9kaWZpZXJPcHRpb25zIiwiZXZlbnRzRW5hYmxlZCIsIlV0aWxzIiwiUG9wcGVyVXRpbHMiLCJEZWZhdWx0cyIsImciLCJGdW5jdGlvbiIsImUiLCJmYWN0b3J5IiwiZGVmaW5lIiwiYXJyYXlTbGljZSIsInNsaWNlIiwiY29uc29sZSIsImxvZ0Vycm9yIiwibWVzc2FnZSIsImVycm9yIiwialF1ZXJ5QnJpZGdldCIsIm5hbWVzcGFjZSIsIlBsdWdpbkNsYXNzIiwiJCIsIm1ldGhvZENhbGwiLCIkZWxlbXMiLCJtZXRob2ROYW1lIiwiYXJncyIsInJldHVyblZhbHVlIiwicGx1Z2luTWV0aG9kU3RyIiwiZWFjaCIsImVsZW0iLCJpbnN0YW5jZSIsIm1ldGhvZCIsImNoYXJBdCIsImFwcGx5IiwicGxhaW5DYWxsIiwib3B0aW9uIiwiX2luaXQiLCJvcHRzIiwiaXNQbGFpbk9iamVjdCIsImV4dGVuZCIsImFyZzAiLCJhcmd1bWVudHMiLCJ1cGRhdGVKUXVlcnkiLCJicmlkZ2V0IiwiRXZFbWl0dGVyIiwicHJvdG8iLCJvbiIsImV2ZW50TmFtZSIsImxpc3RlbmVyIiwiZXZlbnRzIiwiX2V2ZW50cyIsImxpc3RlbmVycyIsInB1c2giLCJvbmNlIiwib25jZUV2ZW50cyIsIl9vbmNlRXZlbnRzIiwib2ZmIiwibGVuZ3RoIiwic3BsaWNlIiwiZW1pdEV2ZW50Iiwib25jZUxpc3RlbmVycyIsImFsbE9mZiIsImdldFN0eWxlU2l6ZSIsIm51bSIsIm1lYXN1cmVtZW50cyIsIm1lYXN1cmVtZW50c0xlbmd0aCIsImdldFN0eWxlIiwic3R5bGUiLCJpc0JveFNpemVPdXRlciIsImlzU2V0dXAiLCJkaXYiLCJjcmVhdGVFbGVtZW50IiwiYm9yZGVyU3R5bGUiLCJib3JkZXJXaWR0aCIsImJveFNpemluZyIsImRvY3VtZW50RWxlbWVudCIsImFwcGVuZENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJzZXR1cCIsInF1ZXJ5U2VsZWN0b3IiLCJub2RlVHlwZSIsImRpc3BsYXkiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJvdXRlcldpZHRoIiwib3V0ZXJIZWlnaHQiLCJnZXRaZXJvU2l6ZSIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwiaXNCb3JkZXJCb3giLCJwYWRkaW5nV2lkdGgiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsInBhZGRpbmdIZWlnaHQiLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsIm1hcmdpbldpZHRoIiwibWFyZ2luUmlnaHQiLCJtYXJnaW5IZWlnaHQiLCJtYXJnaW5Cb3R0b20iLCJib3JkZXJSaWdodFdpZHRoIiwiYm9yZGVySGVpZ2h0IiwiYm9yZGVyQm90dG9tV2lkdGgiLCJpc0JvcmRlckJveFNpemVPdXRlciIsInN0eWxlV2lkdGgiLCJzdHlsZUhlaWdodCIsIm1hdGNoZXNNZXRob2QiLCJFbGVtUHJvdG8iLCJFbGVtZW50IiwibWF0Y2hlcyIsIm1hdGNoZXNTZWxlY3RvciIsInNlbGVjdG9yIiwidXRpbHMiLCJtYWtlQXJyYXkiLCJpc0FycmF5IiwicmVtb3ZlRnJvbSIsImFyeSIsImdldFBhcmVudCIsImdldFF1ZXJ5RWxlbWVudCIsImhhbmRsZUV2ZW50IiwidHlwZSIsImZpbHRlckZpbmRFbGVtZW50cyIsImVsZW1zIiwiZmZFbGVtcyIsImZvckVhY2giLCJIVE1MRWxlbWVudCIsImNoaWxkRWxlbXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZGVib3VuY2VNZXRob2QiLCJfY2xhc3MiLCJ0aHJlc2hvbGQiLCJ0aW1lb3V0TmFtZSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJfdGhpcyIsInNldFRpbWVvdXQiLCJkb2NSZWFkeSIsInJlYWR5U3RhdGUiLCJhZGRFdmVudExpc3RlbmVyIiwidG9EYXNoZWQiLCIkMSIsIiQyIiwidG9Mb3dlckNhc2UiLCJodG1sSW5pdCIsIldpZGdldENsYXNzIiwiZGFzaGVkTmFtZXNwYWNlIiwiZGF0YUF0dHIiLCJkYXRhQXR0ckVsZW1zIiwianNEYXNoRWxlbXMiLCJjb25jYXQiLCJkYXRhT3B0aW9uc0F0dHIiLCJhdHRyIiwiZ2V0QXR0cmlidXRlIiwiSlNPTiIsInBhcnNlIiwiY2xhc3NOYW1lIiwiZG9jRWxlbVN0eWxlIiwidHJhbnNpdGlvblByb3BlcnR5IiwidHJhbnNpdGlvbiIsInRyYW5zZm9ybVByb3BlcnR5IiwidHJhbnNpdGlvbkVuZEV2ZW50IiwiV2Via2l0VHJhbnNpdGlvbiIsInZlbmRvclByb3BlcnRpZXMiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uRGVsYXkiLCJJdGVtIiwibGF5b3V0IiwiX2NyZWF0ZSIsImNvbnN0cnVjdG9yIiwiX3RyYW5zbiIsImluZ1Byb3BlcnRpZXMiLCJjbGVhbiIsIm9uRW5kIiwiZWxlbVN0eWxlIiwiZ2V0UG9zaXRpb24iLCJpc09yaWdpbkxlZnQiLCJfZ2V0T3B0aW9uIiwiaXNPcmlnaW5Ub3AiLCJ4VmFsdWUiLCJ5VmFsdWUiLCJsYXlvdXRTaXplIiwibGF5b3V0UG9zaXRpb24iLCJ4UGFkZGluZyIsInhQcm9wZXJ0eSIsInhSZXNldFByb3BlcnR5IiwiZ2V0WFZhbHVlIiwieVBhZGRpbmciLCJ5UHJvcGVydHkiLCJ5UmVzZXRQcm9wZXJ0eSIsImdldFlWYWx1ZSIsImlzSG9yaXpvbnRhbCIsInBlcmNlbnRQb3NpdGlvbiIsIl90cmFuc2l0aW9uVG8iLCJjdXJYIiwiY3VyWSIsImRpZE5vdE1vdmUiLCJzZXRQb3NpdGlvbiIsImlzVHJhbnNpdGlvbmluZyIsInRyYW5zWCIsInRyYW5zWSIsInRyYW5zaXRpb25TdHlsZSIsImdldFRyYW5zbGF0ZSIsInRvIiwib25UcmFuc2l0aW9uRW5kIiwiaXNDbGVhbmluZyIsImdvVG8iLCJtb3ZlVG8iLCJfbm9uVHJhbnNpdGlvbiIsIl9yZW1vdmVTdHlsZXMiLCJfdHJhbnNpdGlvbiIsImZyb20iLCJlbmFibGVUcmFuc2l0aW9uIiwidHJhbnNpdGlvblByb3BzIiwiZHVyYXRpb24iLCJzdGFnZ2VyRGVsYXkiLCJvbndlYmtpdFRyYW5zaXRpb25FbmQiLCJvbnRyYW5zaXRpb25lbmQiLCJvbm90cmFuc2l0aW9uZW5kIiwiZGFzaGVkVmVuZG9yUHJvcGVydGllcyIsInByb3BlcnR5TmFtZSIsImlzRW1wdHlPYmoiLCJkaXNhYmxlVHJhbnNpdGlvbiIsInJlbW92ZVRyYW5zaXRpb25TdHlsZXMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2xlYW5TdHlsZSIsImNsZWFuVHJhbnNpdGlvblN0eWxlIiwic3RhZ2dlciIsImRlbGF5IiwicmVtb3ZlRWxlbSIsInJlbW92ZSIsImhpZGUiLCJyZXZlYWwiLCJpc0hpZGRlbiIsImdldEhpZGVSZXZlYWxUcmFuc2l0aW9uRW5kUHJvcGVydHkiLCJvblJldmVhbFRyYW5zaXRpb25FbmQiLCJoaWRkZW5TdHlsZSIsInZpc2libGVTdHlsZSIsInN0eWxlUHJvcGVydHkiLCJvcHRpb25TdHlsZSIsIm9wYWNpdHkiLCJvbkhpZGVUcmFuc2l0aW9uRW5kIiwibm9vcCIsIkdVSUQiLCJpbnN0YW5jZXMiLCJPdXRsYXllciIsInF1ZXJ5RWxlbWVudCIsIiRlbGVtZW50IiwiZGVmYXVsdHMiLCJpZCIsIm91dGxheWVyR1VJRCIsImNvbnRhaW5lclN0eWxlIiwiaW5pdExheW91dCIsIm9yaWdpbkxlZnQiLCJvcmlnaW5Ub3AiLCJyZXNpemUiLCJyZXNpemVDb250YWluZXIiLCJzdWJjbGFzcyIsIlBhcmVudCIsIlN1YkNsYXNzIiwib2xkT3B0aW9uIiwiY29tcGF0T3B0aW9ucyIsImhvcml6b250YWwiLCJsYXlvdXRJbnN0YW50IiwicmVsb2FkSXRlbXMiLCJzdGFtcHMiLCJzdGFtcCIsImJpbmRSZXNpemUiLCJpdGVtcyIsIl9pdGVtaXplIiwiaXRlbUVsZW1zIiwiX2ZpbHRlckZpbmRJdGVtRWxlbWVudHMiLCJpdGVtIiwiaXRlbVNlbGVjdG9yIiwiZ2V0SXRlbUVsZW1lbnRzIiwiX3Jlc2V0TGF5b3V0IiwiX21hbmFnZVN0YW1wcyIsImlzSW5zdGFudCIsIl9pc0xheW91dEluaXRlZCIsImxheW91dEl0ZW1zIiwiX2dldE1lYXN1cmVtZW50IiwiX2dldEl0ZW1zRm9yTGF5b3V0IiwiX2xheW91dEl0ZW1zIiwiX3Bvc3RMYXlvdXQiLCJpc0lnbm9yZWQiLCJfZW1pdENvbXBsZXRlT25JdGVtcyIsInF1ZXVlIiwiX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiIsImlzTGF5b3V0SW5zdGFudCIsIl9wcm9jZXNzTGF5b3V0UXVldWUiLCJ1cGRhdGVTdGFnZ2VyIiwiX3Bvc2l0aW9uSXRlbSIsInRpbWUiLCJtc1VuaXRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwiX2dldENvbnRhaW5lclNpemUiLCJfc2V0Q29udGFpbmVyTWVhc3VyZSIsIm1lYXN1cmUiLCJpc1dpZHRoIiwiZWxlbVNpemUiLCJtYXgiLCJvbkNvbXBsZXRlIiwiZGlzcGF0Y2hFdmVudCIsImNvdW50IiwiZG9uZUNvdW50IiwidGljayIsImVtaXRBcmdzIiwiJGV2ZW50IiwiRXZlbnQiLCJ0cmlnZ2VyIiwiaWdub3JlIiwiZ2V0SXRlbSIsInVuaWdub3JlIiwiX2ZpbmQiLCJ1bnN0YW1wIiwiX2dldEJvdW5kaW5nUmVjdCIsIl9tYW5hZ2VTdGFtcCIsImJvdW5kaW5nUmVjdCIsIl9ib3VuZGluZ1JlY3QiLCJfZ2V0RWxlbWVudE9mZnNldCIsInRoaXNSZWN0IiwiaXNSZXNpemVCb3VuZCIsInVuYmluZFJlc2l6ZSIsIm9ucmVzaXplIiwibmVlZHNSZXNpemVMYXlvdXQiLCJhZGRJdGVtcyIsImFwcGVuZGVkIiwicHJlcGVuZGVkIiwicHJldmlvdXNJdGVtcyIsInJldmVhbEl0ZW1FbGVtZW50cyIsImdldEl0ZW1zIiwiaGlkZUl0ZW1FbGVtZW50cyIsInJlbW92ZUl0ZW1zIiwicmVtb3ZlRGF0YSIsIkxheW91dCIsIm1zIiwiaXRlbUdVSUQiLCJzb3J0RGF0YSIsInVwZGF0ZVNvcnREYXRhIiwicmFuZG9tIiwiZ2V0U29ydERhdGEiLCJzb3J0ZXJzIiwiX3NvcnRlcnMiLCJzb3J0ZXIiLCJfZGVzdHJveSIsIkxheW91dE1vZGUiLCJpc290b3BlIiwiZmlsdGVyZWRJdGVtcyIsIm5lZWRzVmVydGljYWxSZXNpemVMYXlvdXQiLCJnZXRDb2x1bW5XaWR0aCIsImdldFNlZ21lbnRTaXplIiwiZ2V0Um93SGVpZ2h0Iiwic2VnbWVudCIsInNlZ21lbnROYW1lIiwib3V0ZXJTaXplIiwiZmlyc3RJdGVtU2l6ZSIsImdldEZpcnN0SXRlbVNpemUiLCJmaXJzdEl0ZW0iLCJtb2RlcyIsIk1vZGUiLCJNYXNvbnJ5IiwiZml0V2lkdGgiLCJtZWFzdXJlQ29sdW1ucyIsImNvbFlzIiwiY29scyIsIm1heFkiLCJob3Jpem9udGFsQ29sSW5kZXgiLCJnZXRDb250YWluZXJXaWR0aCIsImNvbHVtbldpZHRoIiwiZmlyc3RJdGVtRWxlbSIsImNvbnRhaW5lcldpZHRoIiwiZ3V0dGVyIiwiZXhjZXNzIiwiY29udGFpbmVyIiwicmVtYWluZGVyIiwiY29sU3BhbiIsIm1pbiIsImNvbFBvc2l0aW9uIiwiaG9yaXpvbnRhbE9yZGVyIiwiY29sIiwic2V0SGVpZ2h0Iiwic2V0TWF4IiwiX2dldFRvcENvbFBvc2l0aW9uIiwiY29sR3JvdXAiLCJfZ2V0VG9wQ29sR3JvdXAiLCJtaW5pbXVtWSIsImdyb3VwQ291bnQiLCJfZ2V0Q29sR3JvdXBZIiwiZ3JvdXBDb2xZcyIsIl9nZXRIb3Jpem9udGFsQ29sUG9zaXRpb24iLCJoYXNTaXplIiwic3RhbXBTaXplIiwiZmlyc3RYIiwibGFzdFgiLCJmaXJzdENvbCIsImxhc3RDb2wiLCJzdGFtcE1heFkiLCJfZ2V0Q29udGFpbmVyRml0V2lkdGgiLCJ1bnVzZWRDb2xzIiwicHJldmlvdXNXaWR0aCIsIk1hc29ucnlNb2RlIiwia2VlcE1vZGVNZXRob2RzIiwiaXNGaXRXaWR0aCIsIkZpdFJvd3MiLCJpdGVtV2lkdGgiLCJWZXJ0aWNhbCIsImhvcml6b250YWxBbGlnbm1lbnQiLCJ0cmltIiwiU3RyaW5nIiwiSXNvdG9wZSIsImxheW91dE1vZGUiLCJpc0pRdWVyeUZpbHRlcmluZyIsInNvcnRBc2NlbmRpbmciLCJfZ2V0U29ydGVycyIsInNvcnRIaXN0b3J5IiwiX2luaXRMYXlvdXRNb2RlIiwiX3VwZGF0ZUl0ZW1zU29ydERhdGEiLCJpbml0aWFsT3B0cyIsIl9sYXlvdXQiLCJhcnJhbmdlIiwiX2dldElzSW5zdGFudCIsImZpbHRlcmVkIiwiX2ZpbHRlciIsIl9iaW5kQXJyYW5nZUNvbXBsZXRlIiwiX2lzSW5zdGFudCIsIl9ub1RyYW5zaXRpb24iLCJfaGlkZVJldmVhbCIsIl9zb3J0IiwibmVlZFJldmVhbCIsIm5lZWRIaWRlIiwiaXNMYXlvdXRDb21wbGV0ZSIsImlzSGlkZUNvbXBsZXRlIiwiaXNSZXZlYWxDb21wbGV0ZSIsImFycmFuZ2VQYXJhbGxlbENhbGxiYWNrIiwiaGlkZGVuTWF0Y2hlZCIsInZpc2libGVVbm1hdGNoZWQiLCJfZ2V0RmlsdGVyVGVzdCIsImlzTWF0Y2hlZCIsImlzIiwibXVuZ2VTb3J0ZXIiLCJxdWVyeSIsImF0dHJNYXRjaCIsImdldFZhbHVlIiwiY2hpbGQiLCJ0ZXh0Q29udGVudCIsImdldFZhbHVlR2V0dGVyIiwicGFyc2VyIiwic29ydERhdGFQYXJzZXJzIiwidmFsIiwic29ydEJ5Iiwic29ydEJ5cyIsIl9nZXRJc1NhbWVTb3J0QnkiLCJpdGVtU29ydGVyIiwic29ydEFzYyIsIml0ZW1BIiwiaXRlbUIiLCJnZXRJdGVtU29ydGVyIiwic29ydCIsIl9tb2RlIiwiRXJyb3IiLCJfZmlsdGVyUmV2ZWFsQWRkZWQiLCJpbnNlcnQiLCJmaWx0ZXJlZEluc2VydEl0ZW1zIiwiX3JlbW92ZSIsInNodWZmbGUiLCJnZXRGaWx0ZXJlZEl0ZW1FbGVtZW50cyIsIlZhbmlsbGFUaWx0Iiwic2V0dGluZ3MiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImdhbW1hemVybyIsImJldGF6ZXJvIiwibGFzdGdhbW1hemVybyIsImxhc3RiZXRhemVybyIsInRyYW5zaXRpb25UaW1lb3V0IiwidXBkYXRlQ2FsbCIsInVwZGF0ZUJpbmQiLCJyZXNldEJpbmQiLCJyZXNldCIsImV4dGVuZFNldHRpbmdzIiwicmV2ZXJzZSIsImdsYXJlIiwiaXNTZXR0aW5nVHJ1ZSIsImdsYXJlUHJlcmVuZGVyIiwiZnVsbFBhZ2VMaXN0ZW5pbmciLCJneXJvc2NvcGUiLCJneXJvc2NvcGVTYW1wbGVzIiwiZWxlbWVudExpc3RlbmVyIiwiZ2V0RWxlbWVudExpc3RlbmVyIiwicHJlcGFyZUdsYXJlIiwidXBkYXRlQ2xpZW50U2l6ZSIsImFkZEV2ZW50TGlzdGVuZXJzIiwidXBkYXRlSW5pdGlhbFBvc2l0aW9uIiwic2V0dGluZyIsImVsZW1lbnRzIiwiTm9kZUxpc3QiLCJ2YW5pbGxhVGlsdCIsIm1vdXNlRXZlbnRFbGVtZW50Iiwib25Nb3VzZUVudGVyQmluZCIsIm9uTW91c2VFbnRlciIsIm9uTW91c2VNb3ZlQmluZCIsIm9uTW91c2VNb3ZlIiwib25Nb3VzZUxlYXZlQmluZCIsIm9uTW91c2VMZWF2ZSIsIm9uV2luZG93UmVzaXplQmluZCIsIm9uV2luZG93UmVzaXplIiwib25EZXZpY2VPcmllbnRhdGlvbkJpbmQiLCJvbkRldmljZU9yaWVudGF0aW9uIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJnYW1tYSIsImJldGEiLCJ1cGRhdGVFbGVtZW50UG9zaXRpb24iLCJ0b3RhbEFuZ2xlWCIsImd5cm9zY29wZU1heEFuZ2xlWCIsImd5cm9zY29wZU1pbkFuZ2xlWCIsInRvdGFsQW5nbGVZIiwiZ3lyb3Njb3BlTWF4QW5nbGVZIiwiZ3lyb3Njb3BlTWluQW5nbGVZIiwiZGVncmVlc1BlclBpeGVsWCIsImRlZ3JlZXNQZXJQaXhlbFkiLCJwb3NYIiwicG9zWSIsImNsaWVudFgiLCJjbGllbnRZIiwid2lsbENoYW5nZSIsInNldFRyYW5zaXRpb24iLCJwZXJzcGVjdGl2ZSIsInJlc2V0R2xhcmUiLCJnbGFyZUVsZW1lbnQiLCJzdGFydFgiLCJzdGFydFkiLCJiYWNrdXBTY2FsZSIsInNjYWxlIiwidGlsdFgiLCJ0b0ZpeGVkIiwidGlsdFkiLCJwZXJjZW50YWdlWCIsInBlcmNlbnRhZ2VZIiwiYW5nbGUiLCJhdGFuMiIsIlBJIiwidmFsdWVzIiwiZ2V0VmFsdWVzIiwiQ3VzdG9tRXZlbnQiLCJqc1RpbHRHbGFyZSIsImNsYXNzTGlzdCIsImFkZCIsImpzVGlsdEdsYXJlSW5uZXIiLCJnbGFyZUVsZW1lbnRXcmFwcGVyIiwiYXNzaWduIiwidXBkYXRlR2xhcmVTaXplIiwic3BlZWQiLCJlYXNpbmciLCJkZWZhdWx0U2V0dGluZ3MiLCJuZXdTZXR0aW5ncyIsImhhc0F0dHJpYnV0ZSIsImF0dHJpYnV0ZSIsImluaXQiLCJSZWxsYXgiLCJzZWxmIiwic2NyZWVuWSIsInNjcmVlblgiLCJibG9ja3MiLCJwYXVzZSIsImxvb3AiLCJ3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtc1JlcXVlc3RBbmltYXRpb25GcmFtZSIsIm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJsb29wSWQiLCJzdXBwb3J0c1Bhc3NpdmUiLCJjbGVhckxvb3AiLCJtb3pDYW5jZWxBbmltYXRpb25GcmFtZSIsInRlc3RFbCIsInZlbmRvcnMiLCJ2ZW5kb3IiLCJ2ZXJ0aWNhbFNwZWVkIiwiaG9yaXpvbnRhbFNwZWVkIiwiYnJlYWtwb2ludHMiLCJ3cmFwcGVyIiwicmVsYXRpdmVUb1dyYXBwZXIiLCJ2ZXJ0aWNhbCIsInZlcnRpY2FsU2Nyb2xsQXhpcyIsImhvcml6b250YWxTY3JvbGxBeGlzIiwibGFzdFZhbCIsImlzQXNjZW5kaW5nIiwiaXNOdW1lcmljYWwiLCJ3YXJuIiwidmFsaWRhdGVDdXN0b21CcmVha3BvaW50cyIsImN1cnJlbnRCcmVha3BvaW50IiwiY3NzVGV4dCIsInciLCJicCIsImJsb2NrIiwiY3JlYXRlQmxvY2siLCJjYWNoZUJsb2NrcyIsImFuaW1hdGUiLCJtYXBCcmVha3BvaW50cyIsImRhdGFQZXJjZW50YWdlIiwiZGF0YVNwZWVkIiwiZGF0YVhzU3BlZWQiLCJkYXRhTW9iaWxlU3BlZWQiLCJkYXRhVGFibGV0U3BlZWQiLCJkYXRhRGVza3RvcFNwZWVkIiwiZGF0YVZlcnRpY2FsU3BlZWQiLCJkYXRhSG9yaXpvbnRhbFNwZWVkIiwiZGF0YVZlcmljYWxTY3JvbGxBeGlzIiwiZGF0YUhvcml6b250YWxTY3JvbGxBeGlzIiwiZGF0YVppbmRleCIsImRhdGFNaW4iLCJkYXRhTWF4IiwiZGF0YU1pblgiLCJkYXRhTWF4WCIsImRhdGFNaW5ZIiwiZGF0YU1heFkiLCJ3cmFwcGVyUG9zWSIsInBhZ2VZT2Zmc2V0Iiwib2Zmc2V0VG9wIiwicGFnZVhPZmZzZXQiLCJibG9ja1RvcCIsImJsb2NrSGVpZ2h0Iiwic2Nyb2xsSGVpZ2h0IiwiYmxvY2tMZWZ0IiwiYmxvY2tXaWR0aCIsInNjcm9sbFdpZHRoIiwiTnVtYmVyIiwiYmFzZXMiLCJ1cGRhdGVQb3NpdGlvbiIsInNlYXJjaFJlc3VsdCIsImV4ZWMiLCJ0cmltbWVkU3R5bGUiLCJkZWxpbWl0ZXIiLCJiYXNlWCIsImJhc2VZIiwiemluZGV4IiwibWluWCIsIm1heFgiLCJtaW5ZIiwib2xkWSIsIm9sZFgiLCJzY3JvbGxQb3NZIiwidmFsdWVYIiwidmFsdWVZIiwiZGVmZXJyZWRVcGRhdGUiLCJwb3NpdGlvbnMiLCJ2ZXJ0aWNhbFNjcm9sbFgiLCJ2ZXJ0aWNhbFNjcm9sbFkiLCJob3Jpem9udGFsU2Nyb2xsWCIsInBvc2l0aW9uWSIsInBvc2l0aW9uWCIsInRyYW5zbGF0ZSIsInJlZnJlc2giLCJvbnNjcm9sbCIsImdldEVsZW1lbnRCeUlkIiwiaG92ZXIiLCJwcmV2ZW50RGVmYXVsdCIsInRvZ2dsZUNsYXNzIiwiZmlsdGVyRm5zIiwibnVtYmVyR3JlYXRlclRoYW41MCIsIm51bWJlciIsInRleHQiLCJpdW0iLCJsb2ciLCJ0ZXN0RnVuYyIsImhhc0NsYXNzIiwidGVzdFNlbyIsIiRncmlkIiwiJGZpbHRlckJ1dHRvbkdyb3VwIiwiZmlsdGVyQXR0ciIsImxvY2F0aW9uIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiaXNJc290b3BlSW5pdCIsIm9uSGFzaGNoYW5nZSIsImhhc2hGaWx0ZXIiLCJkZWNvZGVVUklDb21wb25lbnQiLCJzdWJzdHIiLCJnZXRIYXNoRmlsdGVyIiwibWFzb25yeSIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJ0cmFuc2l0aW9uRW5kRW11bGF0b3IiLCJvbmUiLCJVdGlsIiwiVFJBTlNJVElPTl9FTkQiLCJ0cmlnZ2VyVHJhbnNpdGlvbkVuZCIsImdldFVJRCIsImdldFNlbGVjdG9yRnJvbUVsZW1lbnQiLCJocmVmQXR0ciIsImVyciIsImdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50IiwiZmxvYXRUcmFuc2l0aW9uRHVyYXRpb24iLCJmbG9hdFRyYW5zaXRpb25EZWxheSIsInJlZmxvdyIsInN1cHBvcnRzVHJhbnNpdGlvbkVuZCIsIkJvb2xlYW4iLCJpc0VsZW1lbnQiLCJ0eXBlQ2hlY2tDb25maWciLCJjb21wb25lbnROYW1lIiwiY29uZmlnIiwiY29uZmlnVHlwZXMiLCJleHBlY3RlZFR5cGVzIiwidmFsdWVUeXBlIiwidG9TdHJpbmciLCJSZWdFeHAiLCJ0b1VwcGVyQ2FzZSIsImZpbmRTaGFkb3dSb290IiwiYXR0YWNoU2hhZG93IiwiZ2V0Um9vdE5vZGUiLCJyb290IiwiU2hhZG93Um9vdCIsImpRdWVyeURldGVjdGlvbiIsIlR5cGVFcnJvciIsImpxdWVyeSIsImVtdWxhdGVUcmFuc2l0aW9uRW5kIiwic3BlY2lhbCIsImJpbmRUeXBlIiwiZGVsZWdhdGVUeXBlIiwiaGFuZGxlIiwiaGFuZGxlT2JqIiwiaGFuZGxlciIsIk5BTUUiLCJEQVRBX0tFWSIsIkVWRU5UX0tFWSIsIkpRVUVSWV9OT19DT05GTElDVCIsIkRlZmF1bHQiLCJ0b2dnbGUiLCJEZWZhdWx0VHlwZSIsIlNIT1ciLCJTSE9XTiIsIkhJREUiLCJISURERU4iLCJDTElDS19EQVRBX0FQSSIsIkNsYXNzTmFtZSIsIkRpbWVuc2lvbiIsIlNlbGVjdG9yIiwiQ29sbGFwc2UiLCJfaXNUcmFuc2l0aW9uaW5nIiwiX2VsZW1lbnQiLCJfY29uZmlnIiwiX2dldENvbmZpZyIsIl90cmlnZ2VyQXJyYXkiLCJ0b2dnbGVMaXN0IiwiZmlsdGVyRWxlbWVudCIsImZvdW5kRWxlbSIsIl9zZWxlY3RvciIsIl9wYXJlbnQiLCJfZ2V0UGFyZW50IiwiX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyIsIiR0aGlzIiwic2hvdyIsImFjdGl2ZXMiLCJhY3RpdmVzRGF0YSIsImNvbnRhaW5zIiwibm90Iiwic3RhcnRFdmVudCIsImlzRGVmYXVsdFByZXZlbnRlZCIsIl9qUXVlcnlJbnRlcmZhY2UiLCJkaW1lbnNpb24iLCJfZ2V0RGltZW5zaW9uIiwic2V0VHJhbnNpdGlvbmluZyIsImNhcGl0YWxpemVkRGltZW5zaW9uIiwic2Nyb2xsU2l6ZSIsInRyaWdnZXJBcnJheUxlbmd0aCIsIl9nZXRUYXJnZXRGcm9tRWxlbWVudCIsInRyaWdnZXJBcnJheSIsImlzT3BlbiIsImN1cnJlbnRUYXJnZXQiLCJ0YWdOYW1lIiwiJHRyaWdnZXIiLCJzZWxlY3RvcnMiLCIkdGFyZ2V0IiwiQ29uc3RydWN0b3IiLCJub0NvbmZsaWN0IiwiUkVHRVhQX0tFWURPV04iLCJDTElDSyIsIktFWURPV05fREFUQV9BUEkiLCJLRVlVUF9EQVRBX0FQSSIsIkF0dGFjaG1lbnRNYXAiLCJib3VuZGFyeSIsInBvcHBlckNvbmZpZyIsIkRyb3Bkb3duIiwiX3BvcHBlciIsIl9tZW51IiwiX2dldE1lbnVFbGVtZW50IiwiX2luTmF2YmFyIiwiX2RldGVjdE5hdmJhciIsIl9hZGRFdmVudExpc3RlbmVycyIsIndoaWNoIiwidG9nZ2xlcyIsIl9nZXRQYXJlbnRGcm9tRWxlbWVudCIsImNvbnRleHQiLCJyZWxhdGVkVGFyZ2V0IiwiY2xpY2tFdmVudCIsImRyb3Bkb3duTWVudSIsImhpZGVFdmVudCIsInNldEF0dHJpYnV0ZSIsImNsb3Nlc3QiLCJzdG9wUHJvcGFnYXRpb24iLCJkaXNhYmxlZCIsImlzQWN0aXZlIiwiZm9jdXMiLCJfY2xlYXJNZW51cyIsInVzZVBvcHBlciIsInNob3dFdmVudCIsInJlZmVyZW5jZUVsZW1lbnQiLCJfZ2V0UG9wcGVyQ29uZmlnIiwic2NoZWR1bGVVcGRhdGUiLCIkcGFyZW50RHJvcGRvd24iLCJfZ2V0UGxhY2VtZW50IiwiX2dldE9mZnNldCIsImVuYWJsZWQiLCJwcmV2ZW50T3ZlcmZsb3ciLCJhcHBseVN0eWxlIiwiX2RhdGFBcGlLZXlkb3duSGFuZGxlciJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUXJCLEVBQW9CcUIsSUFDL0IsRUFBUEUsRUFBVSxPQUFPRixFQUNwQixHQUFXLEVBQVBFLEdBQThCLGlCQUFWRixHQUFzQkEsR0FBU0EsRUFBTUcsV0FBWSxPQUFPSCxFQUNoRixJ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WXRDLE1BTjZCLFdBQXpCejNCLEtBQUtpMUIsUUFBUWhwQixVQUNmeXJCLEVBQWFuNEIsVUFBVW82QixXQUFhLENBQ2xDRixTQUFTLElBSWIsS0FDSy9CLEVBREwsR0FFSzEzQixLQUFLaTFCLFFBQVF5QyxtQixnQ0FzS3RCcnZCLElBQUUvUixVQUNDd1QsR0FBR3FRLEVBQU1tZCxpQkFBa0J6QyxFQUFzQjhDLEdBQVNpQyx3QkFDMUQ5dkIsR0FBR3FRLEVBQU1tZCxpQkFBa0J6QyxFQUFlOEMsR0FBU2lDLHdCQUNuRDl2QixHQUhILFVBR1NxUSxFQUFNdWEsZUFIZixZQUdpQ3ZhLEVBQU1vZCxnQkFBa0JJLEdBQVNxQixhQUMvRGx2QixHQUFHcVEsRUFBTXVhLGVBQWdCRyxHQUFzQixTQUFVMXpCLEdBQ3hEQSxFQUFNMnVCLGlCQUNOM3VCLEVBQU15M0Isa0JBQ05qQixHQUFTeEIsaUJBQWlCNWhDLEtBQUs4VCxJQUFFckksTUFBTyxhQUV6QzhKLEdBQUdxUSxFQUFNdWEsZUFBZ0JHLEdBQXFCLFNBQUNwdEIsR0FDOUNBLEVBQUVteEIscUJBU052d0IsSUFBRTFSLEdBQUYsU0FBYWdoQyxHQUFTeEIsaUJBQ3RCOXRCLElBQUUxUixHQUFGLFNBQVd1Z0MsWUFBY1MsR0FDekJ0dkIsSUFBRTFSLEdBQUYsU0FBV3dnQyxXQUFhLFdBRXRCLE9BREE5dUIsSUFBRTFSLEdBQUYsU0FBYXU5QixFQUNOeUQsR0FBU3hCLGtCQUlId0IsVSIsImZpbGUiOiJzY3JpcHQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGpRdWVyeTsiLCJleHBvcnQgZGVmYXVsdCB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnO1xuIiwiaW1wb3J0IGlzQnJvd3NlciBmcm9tICcuL2lzQnJvd3Nlcic7XG5cbmNvbnN0IHRpbWVvdXREdXJhdGlvbiA9IChmdW5jdGlvbigpe1xuICBjb25zdCBsb25nZXJUaW1lb3V0QnJvd3NlcnMgPSBbJ0VkZ2UnLCAnVHJpZGVudCcsICdGaXJlZm94J107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbG9uZ2VyVGltZW91dEJyb3dzZXJzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGlzQnJvd3NlciAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YobG9uZ2VyVGltZW91dEJyb3dzZXJzW2ldKSA+PSAwKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIDA7XG59KCkpO1xuXG5leHBvcnQgZnVuY3Rpb24gbWljcm90YXNrRGVib3VuY2UoZm4pIHtcbiAgbGV0IGNhbGxlZCA9IGZhbHNlXG4gIHJldHVybiAoKSA9PiB7XG4gICAgaWYgKGNhbGxlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNhbGxlZCA9IHRydWVcbiAgICB3aW5kb3cuUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICBjYWxsZWQgPSBmYWxzZVxuICAgICAgZm4oKVxuICAgIH0pXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRhc2tEZWJvdW5jZShmbikge1xuICBsZXQgc2NoZWR1bGVkID0gZmFsc2U7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgaWYgKCFzY2hlZHVsZWQpIHtcbiAgICAgIHNjaGVkdWxlZCA9IHRydWU7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgc2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICAgIGZuKCk7XG4gICAgICB9LCB0aW1lb3V0RHVyYXRpb24pO1xuICAgIH1cbiAgfTtcbn1cblxuY29uc3Qgc3VwcG9ydHNNaWNyb1Rhc2tzID0gaXNCcm93c2VyICYmIHdpbmRvdy5Qcm9taXNlXG5cblxuLyoqXG4qIENyZWF0ZSBhIGRlYm91bmNlZCB2ZXJzaW9uIG9mIGEgbWV0aG9kLCB0aGF0J3MgYXN5bmNocm9ub3VzbHkgZGVmZXJyZWRcbiogYnV0IGNhbGxlZCBpbiB0aGUgbWluaW11bSB0aW1lIHBvc3NpYmxlLlxuKlxuKiBAbWV0aG9kXG4qIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiogQGFyZ3VtZW50IHtGdW5jdGlvbn0gZm5cbiogQHJldHVybnMge0Z1bmN0aW9ufVxuKi9cbmV4cG9ydCBkZWZhdWx0IChzdXBwb3J0c01pY3JvVGFza3NcbiAgPyBtaWNyb3Rhc2tEZWJvdW5jZVxuICA6IHRhc2tEZWJvdW5jZSk7XG4iLCIvKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiB2YXJpYWJsZSBpcyBhIGZ1bmN0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0FueX0gZnVuY3Rpb25Ub0NoZWNrIC0gdmFyaWFibGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSBhbnN3ZXIgdG86IGlzIGEgZnVuY3Rpb24/XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzRnVuY3Rpb24oZnVuY3Rpb25Ub0NoZWNrKSB7XG4gIGNvbnN0IGdldFR5cGUgPSB7fTtcbiAgcmV0dXJuIChcbiAgICBmdW5jdGlvblRvQ2hlY2sgJiZcbiAgICBnZXRUeXBlLnRvU3RyaW5nLmNhbGwoZnVuY3Rpb25Ub0NoZWNrKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJ1xuICApO1xufVxuIiwiLyoqXG4gKiBHZXQgQ1NTIGNvbXB1dGVkIHByb3BlcnR5IG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VlbWVudH0gZWxlbWVudFxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHByb3BlcnR5XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50LCBwcm9wZXJ0eSkge1xuICBpZiAoZWxlbWVudC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuICBjb25zdCB3aW5kb3cgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gIGNvbnN0IGNzcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIG51bGwpO1xuICByZXR1cm4gcHJvcGVydHkgPyBjc3NbcHJvcGVydHldIDogY3NzO1xufVxuIiwiLyoqXG4gKiBSZXR1cm5zIHRoZSBwYXJlbnROb2RlIG9yIHRoZSBob3N0IG9mIHRoZSBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBwYXJlbnRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0UGFyZW50Tm9kZShlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50Lm5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuICByZXR1cm4gZWxlbWVudC5wYXJlbnROb2RlIHx8IGVsZW1lbnQuaG9zdDtcbn1cbiIsImltcG9ydCBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkgZnJvbSAnLi9nZXRTdHlsZUNvbXB1dGVkUHJvcGVydHknO1xuaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSAnLi9nZXRQYXJlbnROb2RlJztcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzY3JvbGxpbmcgcGFyZW50IG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBzY3JvbGwgcGFyZW50XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudChlbGVtZW50KSB7XG4gIC8vIFJldHVybiBib2R5LCBgZ2V0U2Nyb2xsYCB3aWxsIHRha2UgY2FyZSB0byBnZXQgdGhlIGNvcnJlY3QgYHNjcm9sbFRvcGAgZnJvbSBpdFxuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuYm9keVxuICB9XG5cbiAgc3dpdGNoIChlbGVtZW50Lm5vZGVOYW1lKSB7XG4gICAgY2FzZSAnSFRNTCc6XG4gICAgY2FzZSAnQk9EWSc6XG4gICAgICByZXR1cm4gZWxlbWVudC5vd25lckRvY3VtZW50LmJvZHlcbiAgICBjYXNlICcjZG9jdW1lbnQnOlxuICAgICAgcmV0dXJuIGVsZW1lbnQuYm9keVxuICB9XG5cbiAgLy8gRmlyZWZveCB3YW50IHVzIHRvIGNoZWNrIGAteGAgYW5kIGAteWAgdmFyaWF0aW9ucyBhcyB3ZWxsXG4gIGNvbnN0IHsgb3ZlcmZsb3csIG92ZXJmbG93WCwgb3ZlcmZsb3dZIH0gPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCk7XG4gIGlmICgvKGF1dG98c2Nyb2xsfG92ZXJsYXkpLy50ZXN0KG92ZXJmbG93ICsgb3ZlcmZsb3dZICsgb3ZlcmZsb3dYKSkge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgcmV0dXJuIGdldFNjcm9sbFBhcmVudChnZXRQYXJlbnROb2RlKGVsZW1lbnQpKTtcbn1cbiIsIi8qKlxuICogUmV0dXJucyB0aGUgcmVmZXJlbmNlIG5vZGUgb2YgdGhlIHJlZmVyZW5jZSBvYmplY3QsIG9yIHRoZSByZWZlcmVuY2Ugb2JqZWN0IGl0c2VsZi5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IHJlZmVyZW5jZSAtIHRoZSByZWZlcmVuY2UgZWxlbWVudCAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXG4gKiBAcmV0dXJucyB7RWxlbWVudH0gcGFyZW50XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFJlZmVyZW5jZU5vZGUocmVmZXJlbmNlKSB7XG4gIHJldHVybiByZWZlcmVuY2UgJiYgcmVmZXJlbmNlLnJlZmVyZW5jZU5vZGUgPyByZWZlcmVuY2UucmVmZXJlbmNlTm9kZSA6IHJlZmVyZW5jZTtcbn1cbiIsImltcG9ydCBpc0Jyb3dzZXIgZnJvbSAnLi9pc0Jyb3dzZXInO1xuXG5jb25zdCBpc0lFMTEgPSBpc0Jyb3dzZXIgJiYgISEod2luZG93Lk1TSW5wdXRNZXRob2RDb250ZXh0ICYmIGRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG5jb25zdCBpc0lFMTAgPSBpc0Jyb3dzZXIgJiYgL01TSUUgMTAvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0aGUgYnJvd3NlciBpcyBJbnRlcm5ldCBFeHBsb3JlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtOdW1iZXJ9IHZlcnNpb24gdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSBpc0lFXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzSUUodmVyc2lvbikge1xuICBpZiAodmVyc2lvbiA9PT0gMTEpIHtcbiAgICByZXR1cm4gaXNJRTExO1xuICB9XG4gIGlmICh2ZXJzaW9uID09PSAxMCkge1xuICAgIHJldHVybiBpc0lFMTA7XG4gIH1cbiAgcmV0dXJuIGlzSUUxMSB8fCBpc0lFMTA7XG59XG4iLCJpbXBvcnQgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5IGZyb20gJy4vZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5JztcbmltcG9ydCBpc0lFIGZyb20gJy4vaXNJRSc7XG4vKipcbiAqIFJldHVybnMgdGhlIG9mZnNldCBwYXJlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IG9mZnNldCBwYXJlbnRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIGNvbnN0IG5vT2Zmc2V0UGFyZW50ID0gaXNJRSgxMCkgPyBkb2N1bWVudC5ib2R5IDogbnVsbDtcblxuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuICBsZXQgb2Zmc2V0UGFyZW50ID0gZWxlbWVudC5vZmZzZXRQYXJlbnQgfHwgbnVsbDtcbiAgLy8gU2tpcCBoaWRkZW4gZWxlbWVudHMgd2hpY2ggZG9uJ3QgaGF2ZSBhbiBvZmZzZXRQYXJlbnRcbiAgd2hpbGUgKG9mZnNldFBhcmVudCA9PT0gbm9PZmZzZXRQYXJlbnQgJiYgZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcpIHtcbiAgICBvZmZzZXRQYXJlbnQgPSAoZWxlbWVudCA9IGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nKS5vZmZzZXRQYXJlbnQ7XG4gIH1cblxuICBjb25zdCBub2RlTmFtZSA9IG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQubm9kZU5hbWU7XG5cbiAgaWYgKCFub2RlTmFtZSB8fCBub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICByZXR1cm4gZWxlbWVudCA/IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICAvLyAub2Zmc2V0UGFyZW50IHdpbGwgcmV0dXJuIHRoZSBjbG9zZXN0IFRILCBURCBvciBUQUJMRSBpbiBjYXNlXG4gIC8vIG5vIG9mZnNldFBhcmVudCBpcyBwcmVzZW50LCBJIGhhdGUgdGhpcyBqb2IuLi5cbiAgaWYgKFxuICAgIFsnVEgnLCAnVEQnLCAnVEFCTEUnXS5pbmRleE9mKG9mZnNldFBhcmVudC5ub2RlTmFtZSkgIT09IC0xICYmXG4gICAgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KG9mZnNldFBhcmVudCwgJ3Bvc2l0aW9uJykgPT09ICdzdGF0aWMnXG4gICkge1xuICAgIHJldHVybiBnZXRPZmZzZXRQYXJlbnQob2Zmc2V0UGFyZW50KTtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRQYXJlbnQ7XG59XG4iLCIvKipcbiAqIEZpbmRzIHRoZSByb290IG5vZGUgKGRvY3VtZW50LCBzaGFkb3dET00gcm9vdCkgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gbm9kZVxuICogQHJldHVybnMge0VsZW1lbnR9IHJvb3Qgbm9kZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRSb290KG5vZGUpIHtcbiAgaWYgKG5vZGUucGFyZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgIHJldHVybiBnZXRSb290KG5vZGUucGFyZW50Tm9kZSk7XG4gIH1cblxuICByZXR1cm4gbm9kZTtcbn1cbiIsImltcG9ydCBpc09mZnNldENvbnRhaW5lciBmcm9tICcuL2lzT2Zmc2V0Q29udGFpbmVyJztcbmltcG9ydCBnZXRSb290IGZyb20gJy4vZ2V0Um9vdCc7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gJy4vZ2V0T2Zmc2V0UGFyZW50JztcblxuLyoqXG4gKiBGaW5kcyB0aGUgb2Zmc2V0IHBhcmVudCBjb21tb24gdG8gdGhlIHR3byBwcm92aWRlZCBub2Rlc1xuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50MVxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50MlxuICogQHJldHVybnMge0VsZW1lbnR9IGNvbW1vbiBvZmZzZXQgcGFyZW50XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDEsIGVsZW1lbnQyKSB7XG4gIC8vIFRoaXMgY2hlY2sgaXMgbmVlZGVkIHRvIGF2b2lkIGVycm9ycyBpbiBjYXNlIG9uZSBvZiB0aGUgZWxlbWVudHMgaXNuJ3QgZGVmaW5lZCBmb3IgYW55IHJlYXNvblxuICBpZiAoIWVsZW1lbnQxIHx8ICFlbGVtZW50MS5ub2RlVHlwZSB8fCAhZWxlbWVudDIgfHwgIWVsZW1lbnQyLm5vZGVUeXBlKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIC8vIEhlcmUgd2UgbWFrZSBzdXJlIHRvIGdpdmUgYXMgXCJzdGFydFwiIHRoZSBlbGVtZW50IHRoYXQgY29tZXMgZmlyc3QgaW4gdGhlIERPTVxuICBjb25zdCBvcmRlciA9XG4gICAgZWxlbWVudDEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZWxlbWVudDIpICZcbiAgICBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORztcbiAgY29uc3Qgc3RhcnQgPSBvcmRlciA/IGVsZW1lbnQxIDogZWxlbWVudDI7XG4gIGNvbnN0IGVuZCA9IG9yZGVyID8gZWxlbWVudDIgOiBlbGVtZW50MTtcblxuICAvLyBHZXQgY29tbW9uIGFuY2VzdG9yIGNvbnRhaW5lclxuICBjb25zdCByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gIHJhbmdlLnNldFN0YXJ0KHN0YXJ0LCAwKTtcbiAgcmFuZ2Uuc2V0RW5kKGVuZCwgMCk7XG4gIGNvbnN0IHsgY29tbW9uQW5jZXN0b3JDb250YWluZXIgfSA9IHJhbmdlO1xuXG4gIC8vIEJvdGggbm9kZXMgYXJlIGluc2lkZSAjZG9jdW1lbnRcbiAgaWYgKFxuICAgIChlbGVtZW50MSAhPT0gY29tbW9uQW5jZXN0b3JDb250YWluZXIgJiZcbiAgICAgIGVsZW1lbnQyICE9PSBjb21tb25BbmNlc3RvckNvbnRhaW5lcikgfHxcbiAgICBzdGFydC5jb250YWlucyhlbmQpXG4gICkge1xuICAgIGlmIChpc09mZnNldENvbnRhaW5lcihjb21tb25BbmNlc3RvckNvbnRhaW5lcikpIHtcbiAgICAgIHJldHVybiBjb21tb25BbmNlc3RvckNvbnRhaW5lcjtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0T2Zmc2V0UGFyZW50KGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKTtcbiAgfVxuXG4gIC8vIG9uZSBvZiB0aGUgbm9kZXMgaXMgaW5zaWRlIHNoYWRvd0RPTSwgZmluZCB3aGljaCBvbmVcbiAgY29uc3QgZWxlbWVudDFyb290ID0gZ2V0Um9vdChlbGVtZW50MSk7XG4gIGlmIChlbGVtZW50MXJvb3QuaG9zdCkge1xuICAgIHJldHVybiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxcm9vdC5ob3N0LCBlbGVtZW50Mik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDEsIGdldFJvb3QoZWxlbWVudDIpLmhvc3QpO1xuICB9XG59XG4iLCJpbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gJy4vZ2V0T2Zmc2V0UGFyZW50JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNPZmZzZXRDb250YWluZXIoZWxlbWVudCkge1xuICBjb25zdCB7IG5vZGVOYW1lIH0gPSBlbGVtZW50O1xuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIG5vZGVOYW1lID09PSAnSFRNTCcgfHwgZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQpID09PSBlbGVtZW50XG4gICk7XG59XG4iLCIvKipcbiAqIEdldHMgdGhlIHNjcm9sbCB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudCBpbiB0aGUgZ2l2ZW4gc2lkZSAodG9wIGFuZCBsZWZ0KVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge1N0cmluZ30gc2lkZSBgdG9wYCBvciBgbGVmdGBcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGFtb3VudCBvZiBzY3JvbGxlZCBwaXhlbHNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U2Nyb2xsKGVsZW1lbnQsIHNpZGUgPSAndG9wJykge1xuICBjb25zdCB1cHBlclNpZGUgPSBzaWRlID09PSAndG9wJyA/ICdzY3JvbGxUb3AnIDogJ3Njcm9sbExlZnQnO1xuICBjb25zdCBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG5cbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIGNvbnN0IGh0bWwgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIGNvbnN0IHNjcm9sbGluZ0VsZW1lbnQgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudCB8fCBodG1sO1xuICAgIHJldHVybiBzY3JvbGxpbmdFbGVtZW50W3VwcGVyU2lkZV07XG4gIH1cblxuICByZXR1cm4gZWxlbWVudFt1cHBlclNpZGVdO1xufVxuIiwiaW1wb3J0IGdldFNjcm9sbCBmcm9tICcuL2dldFNjcm9sbCc7XG5cbi8qXG4gKiBTdW0gb3Igc3VidHJhY3QgdGhlIGVsZW1lbnQgc2Nyb2xsIHZhbHVlcyAobGVmdCBhbmQgdG9wKSBmcm9tIGEgZ2l2ZW4gcmVjdCBvYmplY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWN0IC0gUmVjdCBvYmplY3QgeW91IHdhbnQgdG8gY2hhbmdlXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgZnJvbSB0aGUgZnVuY3Rpb24gcmVhZHMgdGhlIHNjcm9sbCB2YWx1ZXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gc3VidHJhY3QgLSBzZXQgdG8gdHJ1ZSBpZiB5b3Ugd2FudCB0byBzdWJ0cmFjdCB0aGUgc2Nyb2xsIHZhbHVlc1xuICogQHJldHVybiB7T2JqZWN0fSByZWN0IC0gVGhlIG1vZGlmaWVyIHJlY3Qgb2JqZWN0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluY2x1ZGVTY3JvbGwocmVjdCwgZWxlbWVudCwgc3VidHJhY3QgPSBmYWxzZSkge1xuICBjb25zdCBzY3JvbGxUb3AgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ3RvcCcpO1xuICBjb25zdCBzY3JvbGxMZWZ0ID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICdsZWZ0Jyk7XG4gIGNvbnN0IG1vZGlmaWVyID0gc3VidHJhY3QgPyAtMSA6IDE7XG4gIHJlY3QudG9wICs9IHNjcm9sbFRvcCAqIG1vZGlmaWVyO1xuICByZWN0LmJvdHRvbSArPSBzY3JvbGxUb3AgKiBtb2RpZmllcjtcbiAgcmVjdC5sZWZ0ICs9IHNjcm9sbExlZnQgKiBtb2RpZmllcjtcbiAgcmVjdC5yaWdodCArPSBzY3JvbGxMZWZ0ICogbW9kaWZpZXI7XG4gIHJldHVybiByZWN0O1xufVxuIiwiLypcbiAqIEhlbHBlciB0byBkZXRlY3QgYm9yZGVycyBvZiBhIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7Q1NTU3R5bGVEZWNsYXJhdGlvbn0gc3R5bGVzXG4gKiBSZXN1bHQgb2YgYGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eWAgb24gdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBheGlzIC0gYHhgIG9yIGB5YFxuICogQHJldHVybiB7bnVtYmVyfSBib3JkZXJzIC0gVGhlIGJvcmRlcnMgc2l6ZSBvZiB0aGUgZ2l2ZW4gYXhpc1xuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEJvcmRlcnNTaXplKHN0eWxlcywgYXhpcykge1xuICBjb25zdCBzaWRlQSA9IGF4aXMgPT09ICd4JyA/ICdMZWZ0JyA6ICdUb3AnO1xuICBjb25zdCBzaWRlQiA9IHNpZGVBID09PSAnTGVmdCcgPyAnUmlnaHQnIDogJ0JvdHRvbSc7XG5cbiAgcmV0dXJuIChcbiAgICBwYXJzZUZsb2F0KHN0eWxlc1tgYm9yZGVyJHtzaWRlQX1XaWR0aGBdKSArXG4gICAgcGFyc2VGbG9hdChzdHlsZXNbYGJvcmRlciR7c2lkZUJ9V2lkdGhgXSlcbiAgKTtcbn1cbiIsImltcG9ydCBpc0lFIGZyb20gJy4vaXNJRSc7XG5cbmZ1bmN0aW9uIGdldFNpemUoYXhpcywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSkge1xuICByZXR1cm4gTWF0aC5tYXgoXG4gICAgYm9keVtgb2Zmc2V0JHtheGlzfWBdLFxuICAgIGJvZHlbYHNjcm9sbCR7YXhpc31gXSxcbiAgICBodG1sW2BjbGllbnQke2F4aXN9YF0sXG4gICAgaHRtbFtgb2Zmc2V0JHtheGlzfWBdLFxuICAgIGh0bWxbYHNjcm9sbCR7YXhpc31gXSxcbiAgICBpc0lFKDEwKVxuICAgICAgPyAocGFyc2VJbnQoaHRtbFtgb2Zmc2V0JHtheGlzfWBdKSArIFxuICAgICAgcGFyc2VJbnQoY29tcHV0ZWRTdHlsZVtgbWFyZ2luJHtheGlzID09PSAnSGVpZ2h0JyA/ICdUb3AnIDogJ0xlZnQnfWBdKSArIFxuICAgICAgcGFyc2VJbnQoY29tcHV0ZWRTdHlsZVtgbWFyZ2luJHtheGlzID09PSAnSGVpZ2h0JyA/ICdCb3R0b20nIDogJ1JpZ2h0J31gXSkpXG4gICAgOiAwIFxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRXaW5kb3dTaXplcyhkb2N1bWVudCkge1xuICBjb25zdCBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgY29uc3QgaHRtbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgY29uc3QgY29tcHV0ZWRTdHlsZSA9IGlzSUUoMTApICYmIGdldENvbXB1dGVkU3R5bGUoaHRtbCk7XG5cbiAgcmV0dXJuIHtcbiAgICBoZWlnaHQ6IGdldFNpemUoJ0hlaWdodCcsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpLFxuICAgIHdpZHRoOiBnZXRTaXplKCdXaWR0aCcsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpLFxuICB9O1xufVxuIiwiLyoqXG4gKiBHaXZlbiBlbGVtZW50IG9mZnNldHMsIGdlbmVyYXRlIGFuIG91dHB1dCBzaW1pbGFyIHRvIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IG9mZnNldHNcbiAqIEByZXR1cm5zIHtPYmplY3R9IENsaWVudFJlY3QgbGlrZSBvdXRwdXRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q2xpZW50UmVjdChvZmZzZXRzKSB7XG4gIHJldHVybiB7XG4gICAgLi4ub2Zmc2V0cyxcbiAgICByaWdodDogb2Zmc2V0cy5sZWZ0ICsgb2Zmc2V0cy53aWR0aCxcbiAgICBib3R0b206IG9mZnNldHMudG9wICsgb2Zmc2V0cy5oZWlnaHQsXG4gIH07XG59XG4iLCJpbXBvcnQgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5IGZyb20gJy4vZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5JztcbmltcG9ydCBnZXRCb3JkZXJzU2l6ZSBmcm9tICcuL2dldEJvcmRlcnNTaXplJztcbmltcG9ydCBnZXRXaW5kb3dTaXplcyBmcm9tICcuL2dldFdpbmRvd1NpemVzJztcbmltcG9ydCBnZXRTY3JvbGwgZnJvbSAnLi9nZXRTY3JvbGwnO1xuaW1wb3J0IGdldENsaWVudFJlY3QgZnJvbSAnLi9nZXRDbGllbnRSZWN0JztcbmltcG9ydCBpc0lFIGZyb20gJy4vaXNJRSc7XG5cbi8qKlxuICogR2V0IGJvdW5kaW5nIGNsaWVudCByZWN0IG9mIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge09iamVjdH0gY2xpZW50IHJlY3RcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpIHtcbiAgbGV0IHJlY3QgPSB7fTtcblxuICAvLyBJRTEwIDEwIEZJWDogUGxlYXNlLCBkb24ndCBhc2ssIHRoZSBlbGVtZW50IGlzbid0XG4gIC8vIGNvbnNpZGVyZWQgaW4gRE9NIGluIHNvbWUgY2lyY3Vtc3RhbmNlcy4uLlxuICAvLyBUaGlzIGlzbid0IHJlcHJvZHVjaWJsZSBpbiBJRTEwIGNvbXBhdGliaWxpdHkgbW9kZSBvZiBJRTExXG4gIHRyeSB7XG4gICAgaWYgKGlzSUUoMTApKSB7XG4gICAgICByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIGNvbnN0IHNjcm9sbFRvcCA9IGdldFNjcm9sbChlbGVtZW50LCAndG9wJyk7XG4gICAgICBjb25zdCBzY3JvbGxMZWZ0ID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICdsZWZ0Jyk7XG4gICAgICByZWN0LnRvcCArPSBzY3JvbGxUb3A7XG4gICAgICByZWN0LmxlZnQgKz0gc2Nyb2xsTGVmdDtcbiAgICAgIHJlY3QuYm90dG9tICs9IHNjcm9sbFRvcDtcbiAgICAgIHJlY3QucmlnaHQgKz0gc2Nyb2xsTGVmdDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB9XG4gIH1cbiAgY2F0Y2goZSl7fVxuXG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICBsZWZ0OiByZWN0LmxlZnQsXG4gICAgdG9wOiByZWN0LnRvcCxcbiAgICB3aWR0aDogcmVjdC5yaWdodCAtIHJlY3QubGVmdCxcbiAgICBoZWlnaHQ6IHJlY3QuYm90dG9tIC0gcmVjdC50b3AsXG4gIH07XG5cbiAgLy8gc3VidHJhY3Qgc2Nyb2xsYmFyIHNpemUgZnJvbSBzaXplc1xuICBjb25zdCBzaXplcyA9IGVsZW1lbnQubm9kZU5hbWUgPT09ICdIVE1MJyA/IGdldFdpbmRvd1NpemVzKGVsZW1lbnQub3duZXJEb2N1bWVudCkgOiB7fTtcbiAgY29uc3Qgd2lkdGggPVxuICAgIHNpemVzLndpZHRoIHx8IGVsZW1lbnQuY2xpZW50V2lkdGggfHwgcmVzdWx0LndpZHRoO1xuICBjb25zdCBoZWlnaHQgPVxuICAgIHNpemVzLmhlaWdodCB8fCBlbGVtZW50LmNsaWVudEhlaWdodCB8fCByZXN1bHQuaGVpZ2h0O1xuXG4gIGxldCBob3JpelNjcm9sbGJhciA9IGVsZW1lbnQub2Zmc2V0V2lkdGggLSB3aWR0aDtcbiAgbGV0IHZlcnRTY3JvbGxiYXIgPSBlbGVtZW50Lm9mZnNldEhlaWdodCAtIGhlaWdodDtcblxuICAvLyBpZiBhbiBoeXBvdGhldGljYWwgc2Nyb2xsYmFyIGlzIGRldGVjdGVkLCB3ZSBtdXN0IGJlIHN1cmUgaXQncyBub3QgYSBgYm9yZGVyYFxuICAvLyB3ZSBtYWtlIHRoaXMgY2hlY2sgY29uZGl0aW9uYWwgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnNcbiAgaWYgKGhvcml6U2Nyb2xsYmFyIHx8IHZlcnRTY3JvbGxiYXIpIHtcbiAgICBjb25zdCBzdHlsZXMgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCk7XG4gICAgaG9yaXpTY3JvbGxiYXIgLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAneCcpO1xuICAgIHZlcnRTY3JvbGxiYXIgLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAneScpO1xuXG4gICAgcmVzdWx0LndpZHRoIC09IGhvcml6U2Nyb2xsYmFyO1xuICAgIHJlc3VsdC5oZWlnaHQgLT0gdmVydFNjcm9sbGJhcjtcbiAgfVxuXG4gIHJldHVybiBnZXRDbGllbnRSZWN0KHJlc3VsdCk7XG59XG4iLCJpbXBvcnQgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5IGZyb20gJy4vZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5JztcbmltcG9ydCBpbmNsdWRlU2Nyb2xsIGZyb20gJy4vaW5jbHVkZVNjcm9sbCc7XG5pbXBvcnQgZ2V0U2Nyb2xsUGFyZW50IGZyb20gJy4vZ2V0U2Nyb2xsUGFyZW50JztcbmltcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZnJvbSAnLi9nZXRCb3VuZGluZ0NsaWVudFJlY3QnO1xuaW1wb3J0IHJ1bklzSUUgZnJvbSAnLi9pc0lFJztcbmltcG9ydCBnZXRDbGllbnRSZWN0IGZyb20gJy4vZ2V0Q2xpZW50UmVjdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShjaGlsZHJlbiwgcGFyZW50LCBmaXhlZFBvc2l0aW9uID0gZmFsc2UpIHtcbiAgY29uc3QgaXNJRTEwID0gcnVuSXNJRSgxMCk7XG4gIGNvbnN0IGlzSFRNTCA9IHBhcmVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnO1xuICBjb25zdCBjaGlsZHJlblJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoY2hpbGRyZW4pO1xuICBjb25zdCBwYXJlbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHBhcmVudCk7XG4gIGNvbnN0IHNjcm9sbFBhcmVudCA9IGdldFNjcm9sbFBhcmVudChjaGlsZHJlbik7XG5cbiAgY29uc3Qgc3R5bGVzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KHBhcmVudCk7XG4gIGNvbnN0IGJvcmRlclRvcFdpZHRoID0gcGFyc2VGbG9hdChzdHlsZXMuYm9yZGVyVG9wV2lkdGgpO1xuICBjb25zdCBib3JkZXJMZWZ0V2lkdGggPSBwYXJzZUZsb2F0KHN0eWxlcy5ib3JkZXJMZWZ0V2lkdGgpO1xuXG4gIC8vIEluIGNhc2VzIHdoZXJlIHRoZSBwYXJlbnQgaXMgZml4ZWQsIHdlIG11c3QgaWdub3JlIG5lZ2F0aXZlIHNjcm9sbCBpbiBvZmZzZXQgY2FsY1xuICBpZihmaXhlZFBvc2l0aW9uICYmIGlzSFRNTCkge1xuICAgIHBhcmVudFJlY3QudG9wID0gTWF0aC5tYXgocGFyZW50UmVjdC50b3AsIDApO1xuICAgIHBhcmVudFJlY3QubGVmdCA9IE1hdGgubWF4KHBhcmVudFJlY3QubGVmdCwgMCk7XG4gIH1cbiAgbGV0IG9mZnNldHMgPSBnZXRDbGllbnRSZWN0KHtcbiAgICB0b3A6IGNoaWxkcmVuUmVjdC50b3AgLSBwYXJlbnRSZWN0LnRvcCAtIGJvcmRlclRvcFdpZHRoLFxuICAgIGxlZnQ6IGNoaWxkcmVuUmVjdC5sZWZ0IC0gcGFyZW50UmVjdC5sZWZ0IC0gYm9yZGVyTGVmdFdpZHRoLFxuICAgIHdpZHRoOiBjaGlsZHJlblJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiBjaGlsZHJlblJlY3QuaGVpZ2h0LFxuICB9KTtcbiAgb2Zmc2V0cy5tYXJnaW5Ub3AgPSAwO1xuICBvZmZzZXRzLm1hcmdpbkxlZnQgPSAwO1xuXG4gIC8vIFN1YnRyYWN0IG1hcmdpbnMgb2YgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgaXQncyBiZWluZyB1c2VkIGFzIHBhcmVudFxuICAvLyB3ZSBkbyB0aGlzIG9ubHkgb24gSFRNTCBiZWNhdXNlIGl0J3MgdGhlIG9ubHkgZWxlbWVudCB0aGF0IGJlaGF2ZXNcbiAgLy8gZGlmZmVyZW50bHkgd2hlbiBtYXJnaW5zIGFyZSBhcHBsaWVkIHRvIGl0LiBUaGUgbWFyZ2lucyBhcmUgaW5jbHVkZWQgaW5cbiAgLy8gdGhlIGJveCBvZiB0aGUgZG9jdW1lbnRFbGVtZW50LCBpbiB0aGUgb3RoZXIgY2FzZXMgbm90LlxuICBpZiAoIWlzSUUxMCAmJiBpc0hUTUwpIHtcbiAgICBjb25zdCBtYXJnaW5Ub3AgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Ub3ApO1xuICAgIGNvbnN0IG1hcmdpbkxlZnQgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5MZWZ0KTtcblxuICAgIG9mZnNldHMudG9wIC09IGJvcmRlclRvcFdpZHRoIC0gbWFyZ2luVG9wO1xuICAgIG9mZnNldHMuYm90dG9tIC09IGJvcmRlclRvcFdpZHRoIC0gbWFyZ2luVG9wO1xuICAgIG9mZnNldHMubGVmdCAtPSBib3JkZXJMZWZ0V2lkdGggLSBtYXJnaW5MZWZ0O1xuICAgIG9mZnNldHMucmlnaHQgLT0gYm9yZGVyTGVmdFdpZHRoIC0gbWFyZ2luTGVmdDtcblxuICAgIC8vIEF0dGFjaCBtYXJnaW5Ub3AgYW5kIG1hcmdpbkxlZnQgYmVjYXVzZSBpbiBzb21lIGNpcmN1bXN0YW5jZXMgd2UgbWF5IG5lZWQgdGhlbVxuICAgIG9mZnNldHMubWFyZ2luVG9wID0gbWFyZ2luVG9wO1xuICAgIG9mZnNldHMubWFyZ2luTGVmdCA9IG1hcmdpbkxlZnQ7XG4gIH1cblxuICBpZiAoXG4gICAgaXNJRTEwICYmICFmaXhlZFBvc2l0aW9uXG4gICAgICA/IHBhcmVudC5jb250YWlucyhzY3JvbGxQYXJlbnQpXG4gICAgICA6IHBhcmVudCA9PT0gc2Nyb2xsUGFyZW50ICYmIHNjcm9sbFBhcmVudC5ub2RlTmFtZSAhPT0gJ0JPRFknXG4gICkge1xuICAgIG9mZnNldHMgPSBpbmNsdWRlU2Nyb2xsKG9mZnNldHMsIHBhcmVudCk7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0cztcbn1cbiIsImltcG9ydCBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUgZnJvbSAnLi9nZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUnO1xuaW1wb3J0IGdldFNjcm9sbCBmcm9tICcuL2dldFNjcm9sbCc7XG5pbXBvcnQgZ2V0Q2xpZW50UmVjdCBmcm9tICcuL2dldENsaWVudFJlY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUoZWxlbWVudCwgZXhjbHVkZVNjcm9sbCA9IGZhbHNlKSB7XG4gIGNvbnN0IGh0bWwgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICBjb25zdCByZWxhdGl2ZU9mZnNldCA9IGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShlbGVtZW50LCBodG1sKTtcbiAgY29uc3Qgd2lkdGggPSBNYXRoLm1heChodG1sLmNsaWVudFdpZHRoLCB3aW5kb3cuaW5uZXJXaWR0aCB8fCAwKTtcbiAgY29uc3QgaGVpZ2h0ID0gTWF0aC5tYXgoaHRtbC5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCB8fCAwKTtcblxuICBjb25zdCBzY3JvbGxUb3AgPSAhZXhjbHVkZVNjcm9sbCA/IGdldFNjcm9sbChodG1sKSA6IDA7XG4gIGNvbnN0IHNjcm9sbExlZnQgPSAhZXhjbHVkZVNjcm9sbCA/IGdldFNjcm9sbChodG1sLCAnbGVmdCcpIDogMDtcblxuICBjb25zdCBvZmZzZXQgPSB7XG4gICAgdG9wOiBzY3JvbGxUb3AgLSByZWxhdGl2ZU9mZnNldC50b3AgKyByZWxhdGl2ZU9mZnNldC5tYXJnaW5Ub3AsXG4gICAgbGVmdDogc2Nyb2xsTGVmdCAtIHJlbGF0aXZlT2Zmc2V0LmxlZnQgKyByZWxhdGl2ZU9mZnNldC5tYXJnaW5MZWZ0LFxuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgfTtcblxuICByZXR1cm4gZ2V0Q2xpZW50UmVjdChvZmZzZXQpO1xufVxuIiwiaW1wb3J0IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSBmcm9tICcuL2dldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSc7XG5pbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tICcuL2dldFBhcmVudE5vZGUnO1xuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiBlbGVtZW50IGlzIGZpeGVkIG9yIGlzIGluc2lkZSBhIGZpeGVkIHBhcmVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGN1c3RvbUNvbnRhaW5lclxuICogQHJldHVybnMge0Jvb2xlYW59IGFuc3dlciB0byBcImlzRml4ZWQ/XCJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNGaXhlZChlbGVtZW50KSB7XG4gIGNvbnN0IG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQsICdwb3NpdGlvbicpID09PSAnZml4ZWQnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgY29uc3QgcGFyZW50Tm9kZSA9IGdldFBhcmVudE5vZGUoZWxlbWVudCk7XG4gIGlmICghcGFyZW50Tm9kZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gaXNGaXhlZChwYXJlbnROb2RlKTtcbn1cbiIsImltcG9ydCBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkgZnJvbSAnLi9nZXRTdHlsZUNvbXB1dGVkUHJvcGVydHknO1xuaW1wb3J0IGlzSUUgZnJvbSAnLi9pc0lFJztcbi8qKlxuICogRmluZHMgdGhlIGZpcnN0IHBhcmVudCBvZiBhbiBlbGVtZW50IHRoYXQgaGFzIGEgdHJhbnNmb3JtZWQgcHJvcGVydHkgZGVmaW5lZFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gZmlyc3QgdHJhbnNmb3JtZWQgcGFyZW50IG9yIGRvY3VtZW50RWxlbWVudFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICAvLyBUaGlzIGNoZWNrIGlzIG5lZWRlZCB0byBhdm9pZCBlcnJvcnMgaW4gY2FzZSBvbmUgb2YgdGhlIGVsZW1lbnRzIGlzbid0IGRlZmluZWQgZm9yIGFueSByZWFzb25cbiAgIGlmICghZWxlbWVudCB8fCAhZWxlbWVudC5wYXJlbnRFbGVtZW50IHx8IGlzSUUoKSkge1xuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cbiAgbGV0IGVsID0gZWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICB3aGlsZSAoZWwgJiYgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsLCAndHJhbnNmb3JtJykgPT09ICdub25lJykge1xuICAgIGVsID0gZWwucGFyZW50RWxlbWVudDtcbiAgfVxuICByZXR1cm4gZWwgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG59XG4iLCJpbXBvcnQgZ2V0U2Nyb2xsUGFyZW50IGZyb20gJy4vZ2V0U2Nyb2xsUGFyZW50JztcbmltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gJy4vZ2V0UGFyZW50Tm9kZSc7XG5pbXBvcnQgZ2V0UmVmZXJlbmNlTm9kZSBmcm9tICcuL2dldFJlZmVyZW5jZU5vZGUnO1xuaW1wb3J0IGZpbmRDb21tb25PZmZzZXRQYXJlbnQgZnJvbSAnLi9maW5kQ29tbW9uT2Zmc2V0UGFyZW50JztcbmltcG9ydCBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUgZnJvbSAnLi9nZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUnO1xuaW1wb3J0IGdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZSBmcm9tICcuL2dldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZSc7XG5pbXBvcnQgZ2V0V2luZG93U2l6ZXMgZnJvbSAnLi9nZXRXaW5kb3dTaXplcyc7XG5pbXBvcnQgaXNGaXhlZCBmcm9tICcuL2lzRml4ZWQnO1xuaW1wb3J0IGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQgZnJvbSAnLi9nZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50JztcblxuLyoqXG4gKiBDb21wdXRlZCB0aGUgYm91bmRhcmllcyBsaW1pdHMgYW5kIHJldHVybiB0aGVtXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJlZmVyZW5jZVxuICogQHBhcmFtIHtudW1iZXJ9IHBhZGRpbmdcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50IC0gRWxlbWVudCB1c2VkIHRvIGRlZmluZSB0aGUgYm91bmRhcmllc1xuICogQHBhcmFtIHtCb29sZWFufSBmaXhlZFBvc2l0aW9uIC0gSXMgaW4gZml4ZWQgcG9zaXRpb24gbW9kZVxuICogQHJldHVybnMge09iamVjdH0gQ29vcmRpbmF0ZXMgb2YgdGhlIGJvdW5kYXJpZXNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Qm91bmRhcmllcyhcbiAgcG9wcGVyLFxuICByZWZlcmVuY2UsXG4gIHBhZGRpbmcsXG4gIGJvdW5kYXJpZXNFbGVtZW50LFxuICBmaXhlZFBvc2l0aW9uID0gZmFsc2Vcbikge1xuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuXG4gIGxldCBib3VuZGFyaWVzID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcbiAgY29uc3Qgb2Zmc2V0UGFyZW50ID0gZml4ZWRQb3NpdGlvbiA/IGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQocG9wcGVyKSA6IGZpbmRDb21tb25PZmZzZXRQYXJlbnQocG9wcGVyLCBnZXRSZWZlcmVuY2VOb2RlKHJlZmVyZW5jZSkpO1xuXG4gIC8vIEhhbmRsZSB2aWV3cG9ydCBjYXNlXG4gIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3ZpZXdwb3J0JyApIHtcbiAgICBib3VuZGFyaWVzID0gZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlKG9mZnNldFBhcmVudCwgZml4ZWRQb3NpdGlvbik7XG4gIH1cblxuICBlbHNlIHtcbiAgICAvLyBIYW5kbGUgb3RoZXIgY2FzZXMgYmFzZWQgb24gRE9NIGVsZW1lbnQgdXNlZCBhcyBib3VuZGFyaWVzXG4gICAgbGV0IGJvdW5kYXJpZXNOb2RlO1xuICAgIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3Njcm9sbFBhcmVudCcpIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUocmVmZXJlbmNlKSk7XG4gICAgICBpZiAoYm91bmRhcmllc05vZGUubm9kZU5hbWUgPT09ICdCT0RZJykge1xuICAgICAgICBib3VuZGFyaWVzTm9kZSA9IHBvcHBlci5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAnd2luZG93Jykge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBwb3BwZXIub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gYm91bmRhcmllc0VsZW1lbnQ7XG4gICAgfVxuXG4gICAgY29uc3Qgb2Zmc2V0cyA9IGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShcbiAgICAgIGJvdW5kYXJpZXNOb2RlLFxuICAgICAgb2Zmc2V0UGFyZW50LFxuICAgICAgZml4ZWRQb3NpdGlvblxuICAgICk7XG5cbiAgICAvLyBJbiBjYXNlIG9mIEhUTUwsIHdlIG5lZWQgYSBkaWZmZXJlbnQgY29tcHV0YXRpb25cbiAgICBpZiAoYm91bmRhcmllc05vZGUubm9kZU5hbWUgPT09ICdIVE1MJyAmJiAhaXNGaXhlZChvZmZzZXRQYXJlbnQpKSB7XG4gICAgICBjb25zdCB7IGhlaWdodCwgd2lkdGggfSA9IGdldFdpbmRvd1NpemVzKHBvcHBlci5vd25lckRvY3VtZW50KTtcbiAgICAgIGJvdW5kYXJpZXMudG9wICs9IG9mZnNldHMudG9wIC0gb2Zmc2V0cy5tYXJnaW5Ub3A7XG4gICAgICBib3VuZGFyaWVzLmJvdHRvbSA9IGhlaWdodCArIG9mZnNldHMudG9wO1xuICAgICAgYm91bmRhcmllcy5sZWZ0ICs9IG9mZnNldHMubGVmdCAtIG9mZnNldHMubWFyZ2luTGVmdDtcbiAgICAgIGJvdW5kYXJpZXMucmlnaHQgPSB3aWR0aCArIG9mZnNldHMubGVmdDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZm9yIGFsbCB0aGUgb3RoZXIgRE9NIGVsZW1lbnRzLCB0aGlzIG9uZSBpcyBnb29kXG4gICAgICBib3VuZGFyaWVzID0gb2Zmc2V0cztcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgcGFkZGluZ3NcbiAgcGFkZGluZyA9IHBhZGRpbmcgfHwgMDtcbiAgY29uc3QgaXNQYWRkaW5nTnVtYmVyID0gdHlwZW9mIHBhZGRpbmcgPT09ICdudW1iZXInO1xuICBib3VuZGFyaWVzLmxlZnQgKz0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcubGVmdCB8fCAwOyBcbiAgYm91bmRhcmllcy50b3AgKz0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcudG9wIHx8IDA7IFxuICBib3VuZGFyaWVzLnJpZ2h0IC09IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLnJpZ2h0IHx8IDA7IFxuICBib3VuZGFyaWVzLmJvdHRvbSAtPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy5ib3R0b20gfHwgMDsgXG5cbiAgcmV0dXJuIGJvdW5kYXJpZXM7XG59XG4iLCJpbXBvcnQgZ2V0Qm91bmRhcmllcyBmcm9tICcuLi91dGlscy9nZXRCb3VuZGFyaWVzJztcblxuZnVuY3Rpb24gZ2V0QXJlYSh7IHdpZHRoLCBoZWlnaHQgfSkge1xuICByZXR1cm4gd2lkdGggKiBoZWlnaHQ7XG59XG5cbi8qKlxuICogVXRpbGl0eSB1c2VkIHRvIHRyYW5zZm9ybSB0aGUgYGF1dG9gIHBsYWNlbWVudCB0byB0aGUgcGxhY2VtZW50IHdpdGggbW9yZVxuICogYXZhaWxhYmxlIHNwYWNlLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcHV0ZUF1dG9QbGFjZW1lbnQoXG4gIHBsYWNlbWVudCxcbiAgcmVmUmVjdCxcbiAgcG9wcGVyLFxuICByZWZlcmVuY2UsXG4gIGJvdW5kYXJpZXNFbGVtZW50LFxuICBwYWRkaW5nID0gMFxuKSB7XG4gIGlmIChwbGFjZW1lbnQuaW5kZXhPZignYXV0bycpID09PSAtMSkge1xuICAgIHJldHVybiBwbGFjZW1lbnQ7XG4gIH1cblxuICBjb25zdCBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhcbiAgICBwb3BwZXIsXG4gICAgcmVmZXJlbmNlLFxuICAgIHBhZGRpbmcsXG4gICAgYm91bmRhcmllc0VsZW1lbnRcbiAgKTtcblxuICBjb25zdCByZWN0cyA9IHtcbiAgICB0b3A6IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLndpZHRoLFxuICAgICAgaGVpZ2h0OiByZWZSZWN0LnRvcCAtIGJvdW5kYXJpZXMudG9wLFxuICAgIH0sXG4gICAgcmlnaHQ6IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLnJpZ2h0IC0gcmVmUmVjdC5yaWdodCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5oZWlnaHQsXG4gICAgfSxcbiAgICBib3R0b206IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLndpZHRoLFxuICAgICAgaGVpZ2h0OiBib3VuZGFyaWVzLmJvdHRvbSAtIHJlZlJlY3QuYm90dG9tLFxuICAgIH0sXG4gICAgbGVmdDoge1xuICAgICAgd2lkdGg6IHJlZlJlY3QubGVmdCAtIGJvdW5kYXJpZXMubGVmdCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5oZWlnaHQsXG4gICAgfSxcbiAgfTtcblxuICBjb25zdCBzb3J0ZWRBcmVhcyA9IE9iamVjdC5rZXlzKHJlY3RzKVxuICAgIC5tYXAoa2V5ID0+ICh7XG4gICAgICBrZXksXG4gICAgICAuLi5yZWN0c1trZXldLFxuICAgICAgYXJlYTogZ2V0QXJlYShyZWN0c1trZXldKSxcbiAgICB9KSlcbiAgICAuc29ydCgoYSwgYikgPT4gYi5hcmVhIC0gYS5hcmVhKTtcblxuICBjb25zdCBmaWx0ZXJlZEFyZWFzID0gc29ydGVkQXJlYXMuZmlsdGVyKFxuICAgICh7IHdpZHRoLCBoZWlnaHQgfSkgPT5cbiAgICAgIHdpZHRoID49IHBvcHBlci5jbGllbnRXaWR0aCAmJiBoZWlnaHQgPj0gcG9wcGVyLmNsaWVudEhlaWdodFxuICApO1xuXG4gIGNvbnN0IGNvbXB1dGVkUGxhY2VtZW50ID0gZmlsdGVyZWRBcmVhcy5sZW5ndGggPiAwXG4gICAgPyBmaWx0ZXJlZEFyZWFzWzBdLmtleVxuICAgIDogc29ydGVkQXJlYXNbMF0ua2V5O1xuXG4gIGNvbnN0IHZhcmlhdGlvbiA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xuXG4gIHJldHVybiBjb21wdXRlZFBsYWNlbWVudCArICh2YXJpYXRpb24gPyBgLSR7dmFyaWF0aW9ufWAgOiAnJyk7XG59XG4iLCJpbXBvcnQgZmluZENvbW1vbk9mZnNldFBhcmVudCBmcm9tICcuL2ZpbmRDb21tb25PZmZzZXRQYXJlbnQnO1xuaW1wb3J0IGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZSBmcm9tICcuL2dldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZSc7XG5pbXBvcnQgZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudCBmcm9tICcuL2dldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQnO1xuaW1wb3J0IGdldFJlZmVyZW5jZU5vZGUgZnJvbSAnLi9nZXRSZWZlcmVuY2VOb2RlJztcblxuLyoqXG4gKiBHZXQgb2Zmc2V0cyB0byB0aGUgcmVmZXJlbmNlIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGF0ZVxuICogQHBhcmFtIHtFbGVtZW50fSBwb3BwZXIgLSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudH0gcmVmZXJlbmNlIC0gdGhlIHJlZmVyZW5jZSBlbGVtZW50ICh0aGUgcG9wcGVyIHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhpcylcbiAqIEBwYXJhbSB7RWxlbWVudH0gZml4ZWRQb3NpdGlvbiAtIGlzIGluIGZpeGVkIHBvc2l0aW9uIG1vZGVcbiAqIEByZXR1cm5zIHtPYmplY3R9IEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBvZmZzZXRzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFJlZmVyZW5jZU9mZnNldHMoc3RhdGUsIHBvcHBlciwgcmVmZXJlbmNlLCBmaXhlZFBvc2l0aW9uID0gbnVsbCkge1xuICBjb25zdCBjb21tb25PZmZzZXRQYXJlbnQgPSBmaXhlZFBvc2l0aW9uID8gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChwb3BwZXIpIDogZmluZENvbW1vbk9mZnNldFBhcmVudChwb3BwZXIsIGdldFJlZmVyZW5jZU5vZGUocmVmZXJlbmNlKSk7XG4gIHJldHVybiBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUocmVmZXJlbmNlLCBjb21tb25PZmZzZXRQYXJlbnQsIGZpeGVkUG9zaXRpb24pO1xufVxuIiwiLyoqXG4gKiBHZXQgdGhlIG91dGVyIHNpemVzIG9mIHRoZSBnaXZlbiBlbGVtZW50IChvZmZzZXQgc2l6ZSArIG1hcmdpbnMpXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IG9iamVjdCBjb250YWluaW5nIHdpZHRoIGFuZCBoZWlnaHQgcHJvcGVydGllc1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPdXRlclNpemVzKGVsZW1lbnQpIHtcbiAgY29uc3Qgd2luZG93ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICBjb25zdCBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgY29uc3QgeCA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblRvcCB8fCAwKSArIHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkJvdHRvbSB8fCAwKTtcbiAgY29uc3QgeSA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkxlZnQgfHwgMCkgKyBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5SaWdodCB8fCAwKTtcbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIHdpZHRoOiBlbGVtZW50Lm9mZnNldFdpZHRoICsgeSxcbiAgICBoZWlnaHQ6IGVsZW1lbnQub2Zmc2V0SGVpZ2h0ICsgeCxcbiAgfTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsIi8qKlxuICogR2V0IHRoZSBvcHBvc2l0ZSBwbGFjZW1lbnQgb2YgdGhlIGdpdmVuIG9uZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudFxuICogQHJldHVybnMge1N0cmluZ30gZmxpcHBlZCBwbGFjZW1lbnRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIGNvbnN0IGhhc2ggPSB7IGxlZnQ6ICdyaWdodCcsIHJpZ2h0OiAnbGVmdCcsIGJvdHRvbTogJ3RvcCcsIHRvcDogJ2JvdHRvbScgfTtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9sZWZ0fHJpZ2h0fGJvdHRvbXx0b3AvZywgbWF0Y2hlZCA9PiBoYXNoW21hdGNoZWRdKTtcbn1cbiIsImltcG9ydCBnZXRPdXRlclNpemVzIGZyb20gJy4vZ2V0T3V0ZXJTaXplcyc7XG5pbXBvcnQgZ2V0T3Bwb3NpdGVQbGFjZW1lbnQgZnJvbSAnLi9nZXRPcHBvc2l0ZVBsYWNlbWVudCc7XG5cbi8qKlxuICogR2V0IG9mZnNldHMgdG8gdGhlIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtPYmplY3R9IHBvc2l0aW9uIC0gQ1NTIHBvc2l0aW9uIHRoZSBQb3BwZXIgd2lsbCBnZXQgYXBwbGllZFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gdGhlIHBvcHBlciBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0cyAtIHRoZSByZWZlcmVuY2Ugb2Zmc2V0cyAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXG4gKiBAcGFyYW0ge1N0cmluZ30gcGxhY2VtZW50IC0gb25lIG9mIHRoZSB2YWxpZCBwbGFjZW1lbnQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gcG9wcGVyT2Zmc2V0cyAtIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBvZmZzZXRzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFBvcHBlck9mZnNldHMocG9wcGVyLCByZWZlcmVuY2VPZmZzZXRzLCBwbGFjZW1lbnQpIHtcbiAgcGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG5cbiAgLy8gR2V0IHBvcHBlciBub2RlIHNpemVzXG4gIGNvbnN0IHBvcHBlclJlY3QgPSBnZXRPdXRlclNpemVzKHBvcHBlcik7XG5cbiAgLy8gQWRkIHBvc2l0aW9uLCB3aWR0aCBhbmQgaGVpZ2h0IHRvIG91ciBvZmZzZXRzIG9iamVjdFxuICBjb25zdCBwb3BwZXJPZmZzZXRzID0ge1xuICAgIHdpZHRoOiBwb3BwZXJSZWN0LndpZHRoLFxuICAgIGhlaWdodDogcG9wcGVyUmVjdC5oZWlnaHQsXG4gIH07XG5cbiAgLy8gZGVwZW5kaW5nIGJ5IHRoZSBwb3BwZXIgcGxhY2VtZW50IHdlIGhhdmUgdG8gY29tcHV0ZSBpdHMgb2Zmc2V0cyBzbGlnaHRseSBkaWZmZXJlbnRseVxuICBjb25zdCBpc0hvcml6ID0gWydyaWdodCcsICdsZWZ0J10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgY29uc3QgbWFpblNpZGUgPSBpc0hvcml6ID8gJ3RvcCcgOiAnbGVmdCc7XG4gIGNvbnN0IHNlY29uZGFyeVNpZGUgPSBpc0hvcml6ID8gJ2xlZnQnIDogJ3RvcCc7XG4gIGNvbnN0IG1lYXN1cmVtZW50ID0gaXNIb3JpeiA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgY29uc3Qgc2Vjb25kYXJ5TWVhc3VyZW1lbnQgPSAhaXNIb3JpeiA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICBwb3BwZXJPZmZzZXRzW21haW5TaWRlXSA9XG4gICAgcmVmZXJlbmNlT2Zmc2V0c1ttYWluU2lkZV0gK1xuICAgIHJlZmVyZW5jZU9mZnNldHNbbWVhc3VyZW1lbnRdIC8gMiAtXG4gICAgcG9wcGVyUmVjdFttZWFzdXJlbWVudF0gLyAyO1xuICBpZiAocGxhY2VtZW50ID09PSBzZWNvbmRhcnlTaWRlKSB7XG4gICAgcG9wcGVyT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSA9XG4gICAgICByZWZlcmVuY2VPZmZzZXRzW3NlY29uZGFyeVNpZGVdIC0gcG9wcGVyUmVjdFtzZWNvbmRhcnlNZWFzdXJlbWVudF07XG4gIH0gZWxzZSB7XG4gICAgcG9wcGVyT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSA9XG4gICAgICByZWZlcmVuY2VPZmZzZXRzW2dldE9wcG9zaXRlUGxhY2VtZW50KHNlY29uZGFyeVNpZGUpXTtcbiAgfVxuXG4gIHJldHVybiBwb3BwZXJPZmZzZXRzO1xufVxuIiwiLyoqXG4gKiBNaW1pY3MgdGhlIGBmaW5kYCBtZXRob2Qgb2YgQXJyYXlcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QXJyYXl9IGFyclxuICogQGFyZ3VtZW50IHByb3BcbiAqIEBhcmd1bWVudCB2YWx1ZVxuICogQHJldHVybnMgaW5kZXggb3IgLTFcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmluZChhcnIsIGNoZWNrKSB7XG4gIC8vIHVzZSBuYXRpdmUgZmluZCBpZiBzdXBwb3J0ZWRcbiAgaWYgKEFycmF5LnByb3RvdHlwZS5maW5kKSB7XG4gICAgcmV0dXJuIGFyci5maW5kKGNoZWNrKTtcbiAgfVxuXG4gIC8vIHVzZSBgZmlsdGVyYCB0byBvYnRhaW4gdGhlIHNhbWUgYmVoYXZpb3Igb2YgYGZpbmRgXG4gIHJldHVybiBhcnIuZmlsdGVyKGNoZWNrKVswXTtcbn1cbiIsImltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbic7XG5pbXBvcnQgZmluZEluZGV4IGZyb20gJy4vZmluZEluZGV4JztcbmltcG9ydCBnZXRDbGllbnRSZWN0IGZyb20gJy4uL3V0aWxzL2dldENsaWVudFJlY3QnO1xuXG4vKipcbiAqIExvb3AgdHJvdWdoIHRoZSBsaXN0IG9mIG1vZGlmaWVycyBhbmQgcnVuIHRoZW0gaW4gb3JkZXIsXG4gKiBlYWNoIG9mIHRoZW0gd2lsbCB0aGVuIGVkaXQgdGhlIGRhdGEgb2JqZWN0LlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKiBAcGFyYW0ge0FycmF5fSBtb2RpZmllcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBlbmRzIC0gT3B0aW9uYWwgbW9kaWZpZXIgbmFtZSB1c2VkIGFzIHN0b3BwZXJcbiAqIEByZXR1cm5zIHtkYXRhT2JqZWN0fVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBydW5Nb2RpZmllcnMobW9kaWZpZXJzLCBkYXRhLCBlbmRzKSB7XG4gIGNvbnN0IG1vZGlmaWVyc1RvUnVuID0gZW5kcyA9PT0gdW5kZWZpbmVkXG4gICAgPyBtb2RpZmllcnNcbiAgICA6IG1vZGlmaWVycy5zbGljZSgwLCBmaW5kSW5kZXgobW9kaWZpZXJzLCAnbmFtZScsIGVuZHMpKTtcblxuICBtb2RpZmllcnNUb1J1bi5mb3JFYWNoKG1vZGlmaWVyID0+IHtcbiAgICBpZiAobW9kaWZpZXJbJ2Z1bmN0aW9uJ10pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICAgIGNvbnNvbGUud2FybignYG1vZGlmaWVyLmZ1bmN0aW9uYCBpcyBkZXByZWNhdGVkLCB1c2UgYG1vZGlmaWVyLmZuYCEnKTtcbiAgICB9XG4gICAgY29uc3QgZm4gPSBtb2RpZmllclsnZnVuY3Rpb24nXSB8fCBtb2RpZmllci5mbjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICBpZiAobW9kaWZpZXIuZW5hYmxlZCAmJiBpc0Z1bmN0aW9uKGZuKSkge1xuICAgICAgLy8gQWRkIHByb3BlcnRpZXMgdG8gb2Zmc2V0cyB0byBtYWtlIHRoZW0gYSBjb21wbGV0ZSBjbGllbnRSZWN0IG9iamVjdFxuICAgICAgLy8gd2UgZG8gdGhpcyBiZWZvcmUgZWFjaCBtb2RpZmllciB0byBtYWtlIHN1cmUgdGhlIHByZXZpb3VzIG9uZSBkb2Vzbid0XG4gICAgICAvLyBtZXNzIHdpdGggdGhlc2UgdmFsdWVzXG4gICAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucG9wcGVyKTtcbiAgICAgIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UpO1xuXG4gICAgICBkYXRhID0gZm4oZGF0YSwgbW9kaWZpZXIpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG4iLCJpbXBvcnQgZmluZCBmcm9tICcuL2ZpbmQnO1xuXG4vKipcbiAqIFJldHVybiB0aGUgaW5kZXggb2YgdGhlIG1hdGNoaW5nIG9iamVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBcnJheX0gYXJyXG4gKiBAYXJndW1lbnQgcHJvcFxuICogQGFyZ3VtZW50IHZhbHVlXG4gKiBAcmV0dXJucyBpbmRleCBvciAtMVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5kSW5kZXgoYXJyLCBwcm9wLCB2YWx1ZSkge1xuICAvLyB1c2UgbmF0aXZlIGZpbmRJbmRleCBpZiBzdXBwb3J0ZWRcbiAgaWYgKEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgpIHtcbiAgICByZXR1cm4gYXJyLmZpbmRJbmRleChjdXIgPT4gY3VyW3Byb3BdID09PSB2YWx1ZSk7XG4gIH1cblxuICAvLyB1c2UgYGZpbmRgICsgYGluZGV4T2ZgIGlmIGBmaW5kSW5kZXhgIGlzbid0IHN1cHBvcnRlZFxuICBjb25zdCBtYXRjaCA9IGZpbmQoYXJyLCBvYmogPT4gb2JqW3Byb3BdID09PSB2YWx1ZSk7XG4gIHJldHVybiBhcnIuaW5kZXhPZihtYXRjaCk7XG59XG4iLCJpbXBvcnQgY29tcHV0ZUF1dG9QbGFjZW1lbnQgZnJvbSAnLi4vdXRpbHMvY29tcHV0ZUF1dG9QbGFjZW1lbnQnO1xuaW1wb3J0IGdldFJlZmVyZW5jZU9mZnNldHMgZnJvbSAnLi4vdXRpbHMvZ2V0UmVmZXJlbmNlT2Zmc2V0cyc7XG5pbXBvcnQgZ2V0UG9wcGVyT2Zmc2V0cyBmcm9tICcuLi91dGlscy9nZXRQb3BwZXJPZmZzZXRzJztcbmltcG9ydCBydW5Nb2RpZmllcnMgZnJvbSAnLi4vdXRpbHMvcnVuTW9kaWZpZXJzJztcblxuLyoqXG4gKiBVcGRhdGVzIHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyLCBjb21wdXRpbmcgdGhlIG5ldyBvZmZzZXRzIGFuZCBhcHBseWluZ1xuICogdGhlIG5ldyBzdHlsZS48YnIgLz5cbiAqIFByZWZlciBgc2NoZWR1bGVVcGRhdGVgIG92ZXIgYHVwZGF0ZWAgYmVjYXVzZSBvZiBwZXJmb3JtYW5jZSByZWFzb25zLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gIC8vIGlmIHBvcHBlciBpcyBkZXN0cm95ZWQsIGRvbid0IHBlcmZvcm0gYW55IGZ1cnRoZXIgdXBkYXRlXG4gIGlmICh0aGlzLnN0YXRlLmlzRGVzdHJveWVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IGRhdGEgPSB7XG4gICAgaW5zdGFuY2U6IHRoaXMsXG4gICAgc3R5bGVzOiB7fSxcbiAgICBhcnJvd1N0eWxlczoge30sXG4gICAgYXR0cmlidXRlczoge30sXG4gICAgZmxpcHBlZDogZmFsc2UsXG4gICAgb2Zmc2V0czoge30sXG4gIH07XG5cbiAgLy8gY29tcHV0ZSByZWZlcmVuY2UgZWxlbWVudCBvZmZzZXRzXG4gIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgPSBnZXRSZWZlcmVuY2VPZmZzZXRzKFxuICAgIHRoaXMuc3RhdGUsXG4gICAgdGhpcy5wb3BwZXIsXG4gICAgdGhpcy5yZWZlcmVuY2UsXG4gICAgdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWRcbiAgKTtcblxuICAvLyBjb21wdXRlIGF1dG8gcGxhY2VtZW50LCBzdG9yZSBwbGFjZW1lbnQgaW5zaWRlIHRoZSBkYXRhIG9iamVjdCxcbiAgLy8gbW9kaWZpZXJzIHdpbGwgYmUgYWJsZSB0byBlZGl0IGBwbGFjZW1lbnRgIGlmIG5lZWRlZFxuICAvLyBhbmQgcmVmZXIgdG8gb3JpZ2luYWxQbGFjZW1lbnQgdG8ga25vdyB0aGUgb3JpZ2luYWwgdmFsdWVcbiAgZGF0YS5wbGFjZW1lbnQgPSBjb21wdXRlQXV0b1BsYWNlbWVudChcbiAgICB0aGlzLm9wdGlvbnMucGxhY2VtZW50LFxuICAgIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsXG4gICAgdGhpcy5wb3BwZXIsXG4gICAgdGhpcy5yZWZlcmVuY2UsXG4gICAgdGhpcy5vcHRpb25zLm1vZGlmaWVycy5mbGlwLmJvdW5kYXJpZXNFbGVtZW50LFxuICAgIHRoaXMub3B0aW9ucy5tb2RpZmllcnMuZmxpcC5wYWRkaW5nXG4gICk7XG5cbiAgLy8gc3RvcmUgdGhlIGNvbXB1dGVkIHBsYWNlbWVudCBpbnNpZGUgYG9yaWdpbmFsUGxhY2VtZW50YFxuICBkYXRhLm9yaWdpbmFsUGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG5cbiAgZGF0YS5wb3NpdGlvbkZpeGVkID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQ7XG5cbiAgLy8gY29tcHV0ZSB0aGUgcG9wcGVyIG9mZnNldHNcbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldFBvcHBlck9mZnNldHMoXG4gICAgdGhpcy5wb3BwZXIsXG4gICAgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSxcbiAgICBkYXRhLnBsYWNlbWVudFxuICApO1xuXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIucG9zaXRpb24gPSB0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZFxuICAgID8gJ2ZpeGVkJ1xuICAgIDogJ2Fic29sdXRlJztcblxuICAvLyBydW4gdGhlIG1vZGlmaWVyc1xuICBkYXRhID0gcnVuTW9kaWZpZXJzKHRoaXMubW9kaWZpZXJzLCBkYXRhKTtcblxuICAvLyB0aGUgZmlyc3QgYHVwZGF0ZWAgd2lsbCBjYWxsIGBvbkNyZWF0ZWAgY2FsbGJhY2tcbiAgLy8gdGhlIG90aGVyIG9uZXMgd2lsbCBjYWxsIGBvblVwZGF0ZWAgY2FsbGJhY2tcbiAgaWYgKCF0aGlzLnN0YXRlLmlzQ3JlYXRlZCkge1xuICAgIHRoaXMuc3RhdGUuaXNDcmVhdGVkID0gdHJ1ZTtcbiAgICB0aGlzLm9wdGlvbnMub25DcmVhdGUoZGF0YSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5vcHRpb25zLm9uVXBkYXRlKGRhdGEpO1xuICB9XG59XG4iLCIvKipcbiAqIEhlbHBlciB1c2VkIHRvIGtub3cgaWYgdGhlIGdpdmVuIG1vZGlmaWVyIGlzIGVuYWJsZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNNb2RpZmllckVuYWJsZWQobW9kaWZpZXJzLCBtb2RpZmllck5hbWUpIHtcbiAgcmV0dXJuIG1vZGlmaWVycy5zb21lKFxuICAgICh7IG5hbWUsIGVuYWJsZWQgfSkgPT4gZW5hYmxlZCAmJiBuYW1lID09PSBtb2RpZmllck5hbWVcbiAgKTtcbn1cbiIsIi8qKlxuICogR2V0IHRoZSBwcmVmaXhlZCBzdXBwb3J0ZWQgcHJvcGVydHkgbmFtZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHByb3BlcnR5IChjYW1lbENhc2UpXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBwcmVmaXhlZCBwcm9wZXJ0eSAoY2FtZWxDYXNlIG9yIFBhc2NhbENhc2UsIGRlcGVuZGluZyBvbiB0aGUgdmVuZG9yIHByZWZpeClcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKHByb3BlcnR5KSB7XG4gIGNvbnN0IHByZWZpeGVzID0gW2ZhbHNlLCAnbXMnLCAnV2Via2l0JywgJ01veicsICdPJ107XG4gIGNvbnN0IHVwcGVyUHJvcCA9IHByb3BlcnR5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc2xpY2UoMSk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHByZWZpeCA9IHByZWZpeGVzW2ldO1xuICAgIGNvbnN0IHRvQ2hlY2sgPSBwcmVmaXggPyBgJHtwcmVmaXh9JHt1cHBlclByb3B9YCA6IHByb3BlcnR5O1xuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuYm9keS5zdHlsZVt0b0NoZWNrXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB0b0NoZWNrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbiIsImltcG9ydCBpc01vZGlmaWVyRW5hYmxlZCBmcm9tICcuLi91dGlscy9pc01vZGlmaWVyRW5hYmxlZCc7XG5pbXBvcnQgZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lIGZyb20gJy4uL3V0aWxzL2dldFN1cHBvcnRlZFByb3BlcnR5TmFtZSc7XG5cbi8qKlxuICogRGVzdHJveXMgdGhlIHBvcHBlci5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgdGhpcy5zdGF0ZS5pc0Rlc3Ryb3llZCA9IHRydWU7XG5cbiAgLy8gdG91Y2ggRE9NIG9ubHkgaWYgYGFwcGx5U3R5bGVgIG1vZGlmaWVyIGlzIGVuYWJsZWRcbiAgaWYgKGlzTW9kaWZpZXJFbmFibGVkKHRoaXMubW9kaWZpZXJzLCAnYXBwbHlTdHlsZScpKSB7XG4gICAgdGhpcy5wb3BwZXIucmVtb3ZlQXR0cmlidXRlKCd4LXBsYWNlbWVudCcpO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLnBvc2l0aW9uID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUudG9wID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUubGVmdCA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLnJpZ2h0ID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUuYm90dG9tID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUud2lsbENoYW5nZSA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlW2dldFN1cHBvcnRlZFByb3BlcnR5TmFtZSgndHJhbnNmb3JtJyldID0gJyc7XG4gIH1cblxuICB0aGlzLmRpc2FibGVFdmVudExpc3RlbmVycygpO1xuXG4gIC8vIHJlbW92ZSB0aGUgcG9wcGVyIGlmIHVzZXIgZXhwbGljaXRseSBhc2tlZCBmb3IgdGhlIGRlbGV0aW9uIG9uIGRlc3Ryb3lcbiAgLy8gZG8gbm90IHVzZSBgcmVtb3ZlYCBiZWNhdXNlIElFMTEgZG9lc24ndCBzdXBwb3J0IGl0XG4gIGlmICh0aGlzLm9wdGlvbnMucmVtb3ZlT25EZXN0cm95KSB7XG4gICAgdGhpcy5wb3BwZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnBvcHBlcik7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCIvKipcbiAqIEdldCB0aGUgd2luZG93IGFzc29jaWF0ZWQgd2l0aCB0aGUgZWxlbWVudFxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7V2luZG93fVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRXaW5kb3coZWxlbWVudCkge1xuICBjb25zdCBvd25lckRvY3VtZW50ID0gZWxlbWVudC5vd25lckRvY3VtZW50O1xuICByZXR1cm4gb3duZXJEb2N1bWVudCA/IG93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgOiB3aW5kb3c7XG59XG4iLCJpbXBvcnQgZ2V0U2Nyb2xsUGFyZW50IGZyb20gJy4vZ2V0U2Nyb2xsUGFyZW50JztcbmltcG9ydCBnZXRXaW5kb3cgZnJvbSAnLi9nZXRXaW5kb3cnO1xuXG5mdW5jdGlvbiBhdHRhY2hUb1Njcm9sbFBhcmVudHMoc2Nyb2xsUGFyZW50LCBldmVudCwgY2FsbGJhY2ssIHNjcm9sbFBhcmVudHMpIHtcbiAgY29uc3QgaXNCb2R5ID0gc2Nyb2xsUGFyZW50Lm5vZGVOYW1lID09PSAnQk9EWSc7XG4gIGNvbnN0IHRhcmdldCA9IGlzQm9keSA/IHNjcm9sbFBhcmVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IDogc2Nyb2xsUGFyZW50O1xuICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgY2FsbGJhY2ssIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcblxuICBpZiAoIWlzQm9keSkge1xuICAgIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhcbiAgICAgIGdldFNjcm9sbFBhcmVudCh0YXJnZXQucGFyZW50Tm9kZSksXG4gICAgICBldmVudCxcbiAgICAgIGNhbGxiYWNrLFxuICAgICAgc2Nyb2xsUGFyZW50c1xuICAgICk7XG4gIH1cbiAgc2Nyb2xsUGFyZW50cy5wdXNoKHRhcmdldCk7XG59XG5cbi8qKlxuICogU2V0dXAgbmVlZGVkIGV2ZW50IGxpc3RlbmVycyB1c2VkIHRvIHVwZGF0ZSB0aGUgcG9wcGVyIHBvc2l0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXR1cEV2ZW50TGlzdGVuZXJzKFxuICByZWZlcmVuY2UsXG4gIG9wdGlvbnMsXG4gIHN0YXRlLFxuICB1cGRhdGVCb3VuZFxuKSB7XG4gIC8vIFJlc2l6ZSBldmVudCBsaXN0ZW5lciBvbiB3aW5kb3dcbiAgc3RhdGUudXBkYXRlQm91bmQgPSB1cGRhdGVCb3VuZDtcbiAgZ2V0V2luZG93KHJlZmVyZW5jZSkuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3RhdGUudXBkYXRlQm91bmQsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcblxuICAvLyBTY3JvbGwgZXZlbnQgbGlzdGVuZXIgb24gc2Nyb2xsIHBhcmVudHNcbiAgY29uc3Qgc2Nyb2xsRWxlbWVudCA9IGdldFNjcm9sbFBhcmVudChyZWZlcmVuY2UpO1xuICBhdHRhY2hUb1Njcm9sbFBhcmVudHMoXG4gICAgc2Nyb2xsRWxlbWVudCxcbiAgICAnc2Nyb2xsJyxcbiAgICBzdGF0ZS51cGRhdGVCb3VuZCxcbiAgICBzdGF0ZS5zY3JvbGxQYXJlbnRzXG4gICk7XG4gIHN0YXRlLnNjcm9sbEVsZW1lbnQgPSBzY3JvbGxFbGVtZW50O1xuICBzdGF0ZS5ldmVudHNFbmFibGVkID0gdHJ1ZTtcblxuICByZXR1cm4gc3RhdGU7XG59XG4iLCJpbXBvcnQgc2V0dXBFdmVudExpc3RlbmVycyBmcm9tICcuLi91dGlscy9zZXR1cEV2ZW50TGlzdGVuZXJzJztcblxuLyoqXG4gKiBJdCB3aWxsIGFkZCByZXNpemUvc2Nyb2xsIGV2ZW50cyBhbmQgc3RhcnQgcmVjYWxjdWxhdGluZ1xuICogcG9zaXRpb24gb2YgdGhlIHBvcHBlciBlbGVtZW50IHdoZW4gdGhleSBhcmUgdHJpZ2dlcmVkLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlbmFibGVFdmVudExpc3RlbmVycygpIHtcbiAgaWYgKCF0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQpIHtcbiAgICB0aGlzLnN0YXRlID0gc2V0dXBFdmVudExpc3RlbmVycyhcbiAgICAgIHRoaXMucmVmZXJlbmNlLFxuICAgICAgdGhpcy5vcHRpb25zLFxuICAgICAgdGhpcy5zdGF0ZSxcbiAgICAgIHRoaXMuc2NoZWR1bGVVcGRhdGVcbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMgZnJvbSAnLi4vdXRpbHMvcmVtb3ZlRXZlbnRMaXN0ZW5lcnMnO1xuXG4vKipcbiAqIEl0IHdpbGwgcmVtb3ZlIHJlc2l6ZS9zY3JvbGwgZXZlbnRzIGFuZCB3b24ndCByZWNhbGN1bGF0ZSBwb3BwZXIgcG9zaXRpb25cbiAqIHdoZW4gdGhleSBhcmUgdHJpZ2dlcmVkLiBJdCBhbHNvIHdvbid0IHRyaWdnZXIgYG9uVXBkYXRlYCBjYWxsYmFjayBhbnltb3JlLFxuICogdW5sZXNzIHlvdSBjYWxsIGB1cGRhdGVgIG1ldGhvZCBtYW51YWxseS5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCkge1xuICBpZiAodGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkKSB7XG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5zY2hlZHVsZVVwZGF0ZSk7XG4gICAgdGhpcy5zdGF0ZSA9IHJlbW92ZUV2ZW50TGlzdGVuZXJzKHRoaXMucmVmZXJlbmNlLCB0aGlzLnN0YXRlKTtcbiAgfVxufVxuIiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tICcuL2dldFdpbmRvdyc7XG5cbi8qKlxuICogUmVtb3ZlIGV2ZW50IGxpc3RlbmVycyB1c2VkIHRvIHVwZGF0ZSB0aGUgcG9wcGVyIHBvc2l0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVycyhyZWZlcmVuY2UsIHN0YXRlKSB7XG4gIC8vIFJlbW92ZSByZXNpemUgZXZlbnQgbGlzdGVuZXIgb24gd2luZG93XG4gIGdldFdpbmRvdyhyZWZlcmVuY2UpLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN0YXRlLnVwZGF0ZUJvdW5kKTtcblxuICAvLyBSZW1vdmUgc2Nyb2xsIGV2ZW50IGxpc3RlbmVyIG9uIHNjcm9sbCBwYXJlbnRzXG4gIHN0YXRlLnNjcm9sbFBhcmVudHMuZm9yRWFjaCh0YXJnZXQgPT4ge1xuICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzdGF0ZS51cGRhdGVCb3VuZCk7XG4gIH0pO1xuXG4gIC8vIFJlc2V0IHN0YXRlXG4gIHN0YXRlLnVwZGF0ZUJvdW5kID0gbnVsbDtcbiAgc3RhdGUuc2Nyb2xsUGFyZW50cyA9IFtdO1xuICBzdGF0ZS5zY3JvbGxFbGVtZW50ID0gbnVsbDtcbiAgc3RhdGUuZXZlbnRzRW5hYmxlZCA9IGZhbHNlO1xuICByZXR1cm4gc3RhdGU7XG59XG4iLCIvKipcbiAqIFRlbGxzIGlmIGEgZ2l2ZW4gaW5wdXQgaXMgYSBudW1iZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7Kn0gaW5wdXQgdG8gY2hlY2tcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzTnVtZXJpYyhuKSB7XG4gIHJldHVybiBuICE9PSAnJyAmJiAhaXNOYU4ocGFyc2VGbG9hdChuKSkgJiYgaXNGaW5pdGUobik7XG59XG4iLCJpbXBvcnQgaXNOdW1lcmljIGZyb20gJy4vaXNOdW1lcmljJztcblxuLyoqXG4gKiBTZXQgdGhlIHN0eWxlIHRvIHRoZSBnaXZlbiBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gYXBwbHkgdGhlIHN0eWxlIHRvXG4gKiBAYXJndW1lbnQge09iamVjdH0gc3R5bGVzXG4gKiBPYmplY3Qgd2l0aCBhIGxpc3Qgb2YgcHJvcGVydGllcyBhbmQgdmFsdWVzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRTdHlsZXMoZWxlbWVudCwgc3R5bGVzKSB7XG4gIE9iamVjdC5rZXlzKHN0eWxlcykuZm9yRWFjaChwcm9wID0+IHtcbiAgICBsZXQgdW5pdCA9ICcnO1xuICAgIC8vIGFkZCB1bml0IGlmIHRoZSB2YWx1ZSBpcyBudW1lcmljIGFuZCBpcyBvbmUgb2YgdGhlIGZvbGxvd2luZ1xuICAgIGlmIChcbiAgICAgIFsnd2lkdGgnLCAnaGVpZ2h0JywgJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddLmluZGV4T2YocHJvcCkgIT09XG4gICAgICAgIC0xICYmXG4gICAgICBpc051bWVyaWMoc3R5bGVzW3Byb3BdKVxuICAgICkge1xuICAgICAgdW5pdCA9ICdweCc7XG4gICAgfVxuICAgIGVsZW1lbnQuc3R5bGVbcHJvcF0gPSBzdHlsZXNbcHJvcF0gKyB1bml0O1xuICB9KTtcbn1cbiIsImltcG9ydCBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUgZnJvbSAnLi4vdXRpbHMvZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lJztcbmltcG9ydCBmaW5kIGZyb20gJy4uL3V0aWxzL2ZpbmQnO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tICcuLi91dGlscy9nZXRPZmZzZXRQYXJlbnQnO1xuaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tICcuLi91dGlscy9nZXRCb3VuZGluZ0NsaWVudFJlY3QnO1xuaW1wb3J0IGdldFJvdW5kZWRPZmZzZXRzIGZyb20gJy4uL3V0aWxzL2dldFJvdW5kZWRPZmZzZXRzJztcbmltcG9ydCBpc0Jyb3dzZXIgZnJvbSAnLi4vdXRpbHMvaXNCcm93c2VyJztcblxuY29uc3QgaXNGaXJlZm94ID0gaXNCcm93c2VyICYmIC9GaXJlZm94L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcHV0ZVN0eWxlKGRhdGEsIG9wdGlvbnMpIHtcbiAgY29uc3QgeyB4LCB5IH0gPSBvcHRpb25zO1xuICBjb25zdCB7IHBvcHBlciB9ID0gZGF0YS5vZmZzZXRzO1xuXG4gIC8vIFJlbW92ZSB0aGlzIGxlZ2FjeSBzdXBwb3J0IGluIFBvcHBlci5qcyB2MlxuICBjb25zdCBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gPSBmaW5kKFxuICAgIGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLFxuICAgIG1vZGlmaWVyID0+IG1vZGlmaWVyLm5hbWUgPT09ICdhcHBseVN0eWxlJ1xuICApLmdwdUFjY2VsZXJhdGlvbjtcbiAgaWYgKGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgJ1dBUk5JTkc6IGBncHVBY2NlbGVyYXRpb25gIG9wdGlvbiBtb3ZlZCB0byBgY29tcHV0ZVN0eWxlYCBtb2RpZmllciBhbmQgd2lsbCBub3QgYmUgc3VwcG9ydGVkIGluIGZ1dHVyZSB2ZXJzaW9ucyBvZiBQb3BwZXIuanMhJ1xuICAgICk7XG4gIH1cbiAgY29uc3QgZ3B1QWNjZWxlcmF0aW9uID1cbiAgICBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gIT09IHVuZGVmaW5lZFxuICAgICAgPyBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb25cbiAgICAgIDogb3B0aW9ucy5ncHVBY2NlbGVyYXRpb247XG5cbiAgY29uc3Qgb2Zmc2V0UGFyZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGRhdGEuaW5zdGFuY2UucG9wcGVyKTtcbiAgY29uc3Qgb2Zmc2V0UGFyZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChvZmZzZXRQYXJlbnQpO1xuXG4gIC8vIFN0eWxlc1xuICBjb25zdCBzdHlsZXMgPSB7XG4gICAgcG9zaXRpb246IHBvcHBlci5wb3NpdGlvbixcbiAgfTtcblxuICBjb25zdCBvZmZzZXRzID0gZ2V0Um91bmRlZE9mZnNldHMoXG4gICAgZGF0YSxcbiAgICB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA8IDIgfHwgIWlzRmlyZWZveFxuICApO1xuXG4gIGNvbnN0IHNpZGVBID0geCA9PT0gJ2JvdHRvbScgPyAndG9wJyA6ICdib3R0b20nO1xuICBjb25zdCBzaWRlQiA9IHkgPT09ICdyaWdodCcgPyAnbGVmdCcgOiAncmlnaHQnO1xuXG4gIC8vIGlmIGdwdUFjY2VsZXJhdGlvbiBpcyBzZXQgdG8gYHRydWVgIGFuZCB0cmFuc2Zvcm0gaXMgc3VwcG9ydGVkLFxuICAvLyAgd2UgdXNlIGB0cmFuc2xhdGUzZGAgdG8gYXBwbHkgdGhlIHBvc2l0aW9uIHRvIHRoZSBwb3BwZXIgd2VcbiAgLy8gYXV0b21hdGljYWxseSB1c2UgdGhlIHN1cHBvcnRlZCBwcmVmaXhlZCB2ZXJzaW9uIGlmIG5lZWRlZFxuICBjb25zdCBwcmVmaXhlZFByb3BlcnR5ID0gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKTtcblxuICAvLyBub3csIGxldCdzIG1ha2UgYSBzdGVwIGJhY2sgYW5kIGxvb2sgYXQgdGhpcyBjb2RlIGNsb3NlbHkgKHd0Zj8pXG4gIC8vIElmIHRoZSBjb250ZW50IG9mIHRoZSBwb3BwZXIgZ3Jvd3Mgb25jZSBpdCdzIGJlZW4gcG9zaXRpb25lZCwgaXRcbiAgLy8gbWF5IGhhcHBlbiB0aGF0IHRoZSBwb3BwZXIgZ2V0cyBtaXNwbGFjZWQgYmVjYXVzZSBvZiB0aGUgbmV3IGNvbnRlbnRcbiAgLy8gb3ZlcmZsb3dpbmcgaXRzIHJlZmVyZW5jZSBlbGVtZW50XG4gIC8vIFRvIGF2b2lkIHRoaXMgcHJvYmxlbSwgd2UgcHJvdmlkZSB0d28gb3B0aW9ucyAoeCBhbmQgeSksIHdoaWNoIGFsbG93XG4gIC8vIHRoZSBjb25zdW1lciB0byBkZWZpbmUgdGhlIG9mZnNldCBvcmlnaW4uXG4gIC8vIElmIHdlIHBvc2l0aW9uIGEgcG9wcGVyIG9uIHRvcCBvZiBhIHJlZmVyZW5jZSBlbGVtZW50LCB3ZSBjYW4gc2V0XG4gIC8vIGB4YCB0byBgdG9wYCB0byBtYWtlIHRoZSBwb3BwZXIgZ3JvdyB0b3dhcmRzIGl0cyB0b3AgaW5zdGVhZCBvZlxuICAvLyBpdHMgYm90dG9tLlxuICBsZXQgbGVmdCwgdG9wO1xuICBpZiAoc2lkZUEgPT09ICdib3R0b20nKSB7XG4gICAgLy8gd2hlbiBvZmZzZXRQYXJlbnQgaXMgPGh0bWw+IHRoZSBwb3NpdGlvbmluZyBpcyByZWxhdGl2ZSB0byB0aGUgYm90dG9tIG9mIHRoZSBzY3JlZW4gKGV4Y2x1ZGluZyB0aGUgc2Nyb2xsYmFyKVxuICAgIC8vIGFuZCBub3QgdGhlIGJvdHRvbSBvZiB0aGUgaHRtbCBlbGVtZW50XG4gICAgaWYgKG9mZnNldFBhcmVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgICB0b3AgPSAtb2Zmc2V0UGFyZW50LmNsaWVudEhlaWdodCArIG9mZnNldHMuYm90dG9tO1xuICAgIH0gZWxzZSB7XG4gICAgICB0b3AgPSAtb2Zmc2V0UGFyZW50UmVjdC5oZWlnaHQgKyBvZmZzZXRzLmJvdHRvbTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdG9wID0gb2Zmc2V0cy50b3A7XG4gIH1cbiAgaWYgKHNpZGVCID09PSAncmlnaHQnKSB7XG4gICAgaWYgKG9mZnNldFBhcmVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgICBsZWZ0ID0gLW9mZnNldFBhcmVudC5jbGllbnRXaWR0aCArIG9mZnNldHMucmlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlZnQgPSAtb2Zmc2V0UGFyZW50UmVjdC53aWR0aCArIG9mZnNldHMucmlnaHQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxlZnQgPSBvZmZzZXRzLmxlZnQ7XG4gIH1cbiAgaWYgKGdwdUFjY2VsZXJhdGlvbiAmJiBwcmVmaXhlZFByb3BlcnR5KSB7XG4gICAgc3R5bGVzW3ByZWZpeGVkUHJvcGVydHldID0gYHRyYW5zbGF0ZTNkKCR7bGVmdH1weCwgJHt0b3B9cHgsIDApYDtcbiAgICBzdHlsZXNbc2lkZUFdID0gMDtcbiAgICBzdHlsZXNbc2lkZUJdID0gMDtcbiAgICBzdHlsZXMud2lsbENoYW5nZSA9ICd0cmFuc2Zvcm0nO1xuICB9IGVsc2Uge1xuICAgIC8vIG90aHdlcmlzZSwgd2UgdXNlIHRoZSBzdGFuZGFyZCBgdG9wYCwgYGxlZnRgLCBgYm90dG9tYCBhbmQgYHJpZ2h0YCBwcm9wZXJ0aWVzXG4gICAgY29uc3QgaW52ZXJ0VG9wID0gc2lkZUEgPT09ICdib3R0b20nID8gLTEgOiAxO1xuICAgIGNvbnN0IGludmVydExlZnQgPSBzaWRlQiA9PT0gJ3JpZ2h0JyA/IC0xIDogMTtcbiAgICBzdHlsZXNbc2lkZUFdID0gdG9wICogaW52ZXJ0VG9wO1xuICAgIHN0eWxlc1tzaWRlQl0gPSBsZWZ0ICogaW52ZXJ0TGVmdDtcbiAgICBzdHlsZXMud2lsbENoYW5nZSA9IGAke3NpZGVBfSwgJHtzaWRlQn1gO1xuICB9XG5cbiAgLy8gQXR0cmlidXRlc1xuICBjb25zdCBhdHRyaWJ1dGVzID0ge1xuICAgICd4LXBsYWNlbWVudCc6IGRhdGEucGxhY2VtZW50LFxuICB9O1xuXG4gIC8vIFVwZGF0ZSBgZGF0YWAgYXR0cmlidXRlcywgc3R5bGVzIGFuZCBhcnJvd1N0eWxlc1xuICBkYXRhLmF0dHJpYnV0ZXMgPSB7IC4uLmF0dHJpYnV0ZXMsIC4uLmRhdGEuYXR0cmlidXRlcyB9O1xuICBkYXRhLnN0eWxlcyA9IHsgLi4uc3R5bGVzLCAuLi5kYXRhLnN0eWxlcyB9O1xuICBkYXRhLmFycm93U3R5bGVzID0geyAuLi5kYXRhLm9mZnNldHMuYXJyb3csIC4uLmRhdGEuYXJyb3dTdHlsZXMgfTtcblxuICByZXR1cm4gZGF0YTtcbn1cbiIsImltcG9ydCBmaW5kIGZyb20gJy4vZmluZCc7XG5cbi8qKlxuICogSGVscGVyIHVzZWQgdG8ga25vdyBpZiB0aGUgZ2l2ZW4gbW9kaWZpZXIgZGVwZW5kcyBmcm9tIGFub3RoZXIgb25lLjxiciAvPlxuICogSXQgY2hlY2tzIGlmIHRoZSBuZWVkZWQgbW9kaWZpZXIgaXMgbGlzdGVkIGFuZCBlbmFibGVkLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtBcnJheX0gbW9kaWZpZXJzIC0gbGlzdCBvZiBtb2RpZmllcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0aW5nTmFtZSAtIG5hbWUgb2YgcmVxdWVzdGluZyBtb2RpZmllclxuICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RlZE5hbWUgLSBuYW1lIG9mIHJlcXVlc3RlZCBtb2RpZmllclxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzTW9kaWZpZXJSZXF1aXJlZChcbiAgbW9kaWZpZXJzLFxuICByZXF1ZXN0aW5nTmFtZSxcbiAgcmVxdWVzdGVkTmFtZVxuKSB7XG4gIGNvbnN0IHJlcXVlc3RpbmcgPSBmaW5kKG1vZGlmaWVycywgKHsgbmFtZSB9KSA9PiBuYW1lID09PSByZXF1ZXN0aW5nTmFtZSk7XG5cbiAgY29uc3QgaXNSZXF1aXJlZCA9XG4gICAgISFyZXF1ZXN0aW5nICYmXG4gICAgbW9kaWZpZXJzLnNvbWUobW9kaWZpZXIgPT4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgbW9kaWZpZXIubmFtZSA9PT0gcmVxdWVzdGVkTmFtZSAmJlxuICAgICAgICBtb2RpZmllci5lbmFibGVkICYmXG4gICAgICAgIG1vZGlmaWVyLm9yZGVyIDwgcmVxdWVzdGluZy5vcmRlclxuICAgICAgKTtcbiAgICB9KTtcblxuICBpZiAoIWlzUmVxdWlyZWQpIHtcbiAgICBjb25zdCByZXF1ZXN0aW5nID0gYFxcYCR7cmVxdWVzdGluZ05hbWV9XFxgYDtcbiAgICBjb25zdCByZXF1ZXN0ZWQgPSBgXFxgJHtyZXF1ZXN0ZWROYW1lfVxcYGA7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgYCR7cmVxdWVzdGVkfSBtb2RpZmllciBpcyByZXF1aXJlZCBieSAke3JlcXVlc3Rpbmd9IG1vZGlmaWVyIGluIG9yZGVyIHRvIHdvcmssIGJlIHN1cmUgdG8gaW5jbHVkZSBpdCBiZWZvcmUgJHtyZXF1ZXN0aW5nfSFgXG4gICAgKTtcbiAgfVxuICByZXR1cm4gaXNSZXF1aXJlZDtcbn1cbiIsIi8qKlxuICogTGlzdCBvZiBhY2NlcHRlZCBwbGFjZW1lbnRzIHRvIHVzZSBhcyB2YWx1ZXMgb2YgdGhlIGBwbGFjZW1lbnRgIG9wdGlvbi48YnIgLz5cbiAqIFZhbGlkIHBsYWNlbWVudHMgYXJlOlxuICogLSBgYXV0b2BcbiAqIC0gYHRvcGBcbiAqIC0gYHJpZ2h0YFxuICogLSBgYm90dG9tYFxuICogLSBgbGVmdGBcbiAqXG4gKiBFYWNoIHBsYWNlbWVudCBjYW4gaGF2ZSBhIHZhcmlhdGlvbiBmcm9tIHRoaXMgbGlzdDpcbiAqIC0gYC1zdGFydGBcbiAqIC0gYC1lbmRgXG4gKlxuICogVmFyaWF0aW9ucyBhcmUgaW50ZXJwcmV0ZWQgZWFzaWx5IGlmIHlvdSB0aGluayBvZiB0aGVtIGFzIHRoZSBsZWZ0IHRvIHJpZ2h0XG4gKiB3cml0dGVuIGxhbmd1YWdlcy4gSG9yaXpvbnRhbGx5IChgdG9wYCBhbmQgYGJvdHRvbWApLCBgc3RhcnRgIGlzIGxlZnQgYW5kIGBlbmRgXG4gKiBpcyByaWdodC48YnIgLz5cbiAqIFZlcnRpY2FsbHkgKGBsZWZ0YCBhbmQgYHJpZ2h0YCksIGBzdGFydGAgaXMgdG9wIGFuZCBgZW5kYCBpcyBib3R0b20uXG4gKlxuICogU29tZSB2YWxpZCBleGFtcGxlcyBhcmU6XG4gKiAtIGB0b3AtZW5kYCAob24gdG9wIG9mIHJlZmVyZW5jZSwgcmlnaHQgYWxpZ25lZClcbiAqIC0gYHJpZ2h0LXN0YXJ0YCAob24gcmlnaHQgb2YgcmVmZXJlbmNlLCB0b3AgYWxpZ25lZClcbiAqIC0gYGJvdHRvbWAgKG9uIGJvdHRvbSwgY2VudGVyZWQpXG4gKiAtIGBhdXRvLWVuZGAgKG9uIHRoZSBzaWRlIHdpdGggbW9yZSBzcGFjZSBhdmFpbGFibGUsIGFsaWdubWVudCBkZXBlbmRzIGJ5IHBsYWNlbWVudClcbiAqXG4gKiBAc3RhdGljXG4gKiBAdHlwZSB7QXJyYXl9XG4gKiBAZW51bSB7U3RyaW5nfVxuICogQHJlYWRvbmx5XG4gKiBAbWV0aG9kIHBsYWNlbWVudHNcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgW1xuICAnYXV0by1zdGFydCcsXG4gICdhdXRvJyxcbiAgJ2F1dG8tZW5kJyxcbiAgJ3RvcC1zdGFydCcsXG4gICd0b3AnLFxuICAndG9wLWVuZCcsXG4gICdyaWdodC1zdGFydCcsXG4gICdyaWdodCcsXG4gICdyaWdodC1lbmQnLFxuICAnYm90dG9tLWVuZCcsXG4gICdib3R0b20nLFxuICAnYm90dG9tLXN0YXJ0JyxcbiAgJ2xlZnQtZW5kJyxcbiAgJ2xlZnQnLFxuICAnbGVmdC1zdGFydCcsXG5dO1xuIiwiaW1wb3J0IHBsYWNlbWVudHMgZnJvbSAnLi4vbWV0aG9kcy9wbGFjZW1lbnRzJztcblxuLy8gR2V0IHJpZCBvZiBgYXV0b2AgYGF1dG8tc3RhcnRgIGFuZCBgYXV0by1lbmRgXG5jb25zdCB2YWxpZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzLnNsaWNlKDMpO1xuXG4vKipcbiAqIEdpdmVuIGFuIGluaXRpYWwgcGxhY2VtZW50LCByZXR1cm5zIGFsbCB0aGUgc3Vic2VxdWVudCBwbGFjZW1lbnRzXG4gKiBjbG9ja3dpc2UgKG9yIGNvdW50ZXItY2xvY2t3aXNlKS5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50IC0gQSB2YWxpZCBwbGFjZW1lbnQgKGl0IGFjY2VwdHMgdmFyaWF0aW9ucylcbiAqIEBhcmd1bWVudCB7Qm9vbGVhbn0gY291bnRlciAtIFNldCB0byB0cnVlIHRvIHdhbGsgdGhlIHBsYWNlbWVudHMgY291bnRlcmNsb2Nrd2lzZVxuICogQHJldHVybnMge0FycmF5fSBwbGFjZW1lbnRzIGluY2x1ZGluZyB0aGVpciB2YXJpYXRpb25zXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNsb2Nrd2lzZShwbGFjZW1lbnQsIGNvdW50ZXIgPSBmYWxzZSkge1xuICBjb25zdCBpbmRleCA9IHZhbGlkUGxhY2VtZW50cy5pbmRleE9mKHBsYWNlbWVudCk7XG4gIGNvbnN0IGFyciA9IHZhbGlkUGxhY2VtZW50c1xuICAgIC5zbGljZShpbmRleCArIDEpXG4gICAgLmNvbmNhdCh2YWxpZFBsYWNlbWVudHMuc2xpY2UoMCwgaW5kZXgpKTtcbiAgcmV0dXJuIGNvdW50ZXIgPyBhcnIucmV2ZXJzZSgpIDogYXJyO1xufVxuIiwiaW1wb3J0IGdldE9wcG9zaXRlUGxhY2VtZW50IGZyb20gJy4uL3V0aWxzL2dldE9wcG9zaXRlUGxhY2VtZW50JztcbmltcG9ydCBnZXRPcHBvc2l0ZVZhcmlhdGlvbiBmcm9tICcuLi91dGlscy9nZXRPcHBvc2l0ZVZhcmlhdGlvbic7XG5pbXBvcnQgZ2V0UG9wcGVyT2Zmc2V0cyBmcm9tICcuLi91dGlscy9nZXRQb3BwZXJPZmZzZXRzJztcbmltcG9ydCBydW5Nb2RpZmllcnMgZnJvbSAnLi4vdXRpbHMvcnVuTW9kaWZpZXJzJztcbmltcG9ydCBnZXRCb3VuZGFyaWVzIGZyb20gJy4uL3V0aWxzL2dldEJvdW5kYXJpZXMnO1xuaW1wb3J0IGlzTW9kaWZpZXJFbmFibGVkIGZyb20gJy4uL3V0aWxzL2lzTW9kaWZpZXJFbmFibGVkJztcbmltcG9ydCBjbG9ja3dpc2UgZnJvbSAnLi4vdXRpbHMvY2xvY2t3aXNlJztcblxuY29uc3QgQkVIQVZJT1JTID0ge1xuICBGTElQOiAnZmxpcCcsXG4gIENMT0NLV0lTRTogJ2Nsb2Nrd2lzZScsXG4gIENPVU5URVJDTE9DS1dJU0U6ICdjb3VudGVyY2xvY2t3aXNlJyxcbn07XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmbGlwKGRhdGEsIG9wdGlvbnMpIHtcbiAgLy8gaWYgYGlubmVyYCBtb2RpZmllciBpcyBlbmFibGVkLCB3ZSBjYW4ndCB1c2UgdGhlIGBmbGlwYCBtb2RpZmllclxuICBpZiAoaXNNb2RpZmllckVuYWJsZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdpbm5lcicpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBpZiAoZGF0YS5mbGlwcGVkICYmIGRhdGEucGxhY2VtZW50ID09PSBkYXRhLm9yaWdpbmFsUGxhY2VtZW50KSB7XG4gICAgLy8gc2VlbXMgbGlrZSBmbGlwIGlzIHRyeWluZyB0byBsb29wLCBwcm9iYWJseSB0aGVyZSdzIG5vdCBlbm91Z2ggc3BhY2Ugb24gYW55IG9mIHRoZSBmbGlwcGFibGUgc2lkZXNcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGNvbnN0IGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKFxuICAgIGRhdGEuaW5zdGFuY2UucG9wcGVyLFxuICAgIGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlLFxuICAgIG9wdGlvbnMucGFkZGluZyxcbiAgICBvcHRpb25zLmJvdW5kYXJpZXNFbGVtZW50LFxuICAgIGRhdGEucG9zaXRpb25GaXhlZFxuICApO1xuXG4gIGxldCBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICBsZXQgcGxhY2VtZW50T3Bwb3NpdGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICBsZXQgdmFyaWF0aW9uID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVsxXSB8fCAnJztcblxuICBsZXQgZmxpcE9yZGVyID0gW107XG5cbiAgc3dpdGNoIChvcHRpb25zLmJlaGF2aW9yKSB7XG4gICAgY2FzZSBCRUhBVklPUlMuRkxJUDpcbiAgICAgIGZsaXBPcmRlciA9IFtwbGFjZW1lbnQsIHBsYWNlbWVudE9wcG9zaXRlXTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQkVIQVZJT1JTLkNMT0NLV0lTRTpcbiAgICAgIGZsaXBPcmRlciA9IGNsb2Nrd2lzZShwbGFjZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBCRUhBVklPUlMuQ09VTlRFUkNMT0NLV0lTRTpcbiAgICAgIGZsaXBPcmRlciA9IGNsb2Nrd2lzZShwbGFjZW1lbnQsIHRydWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGZsaXBPcmRlciA9IG9wdGlvbnMuYmVoYXZpb3I7XG4gIH1cblxuICBmbGlwT3JkZXIuZm9yRWFjaCgoc3RlcCwgaW5kZXgpID0+IHtcbiAgICBpZiAocGxhY2VtZW50ICE9PSBzdGVwIHx8IGZsaXBPcmRlci5sZW5ndGggPT09IGluZGV4ICsgMSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgICBwbGFjZW1lbnRPcHBvc2l0ZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG5cbiAgICBjb25zdCBwb3BwZXJPZmZzZXRzID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcbiAgICBjb25zdCByZWZPZmZzZXRzID0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZTtcblxuICAgIC8vIHVzaW5nIGZsb29yIGJlY2F1c2UgdGhlIHJlZmVyZW5jZSBvZmZzZXRzIG1heSBjb250YWluIGRlY2ltYWxzIHdlIGFyZSBub3QgZ29pbmcgdG8gY29uc2lkZXIgaGVyZVxuICAgIGNvbnN0IGZsb29yID0gTWF0aC5mbG9vcjtcbiAgICBjb25zdCBvdmVybGFwc1JlZiA9XG4gICAgICAocGxhY2VtZW50ID09PSAnbGVmdCcgJiZcbiAgICAgICAgZmxvb3IocG9wcGVyT2Zmc2V0cy5yaWdodCkgPiBmbG9vcihyZWZPZmZzZXRzLmxlZnQpKSB8fFxuICAgICAgKHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJlxuICAgICAgICBmbG9vcihwb3BwZXJPZmZzZXRzLmxlZnQpIDwgZmxvb3IocmVmT2Zmc2V0cy5yaWdodCkpIHx8XG4gICAgICAocGxhY2VtZW50ID09PSAndG9wJyAmJlxuICAgICAgICBmbG9vcihwb3BwZXJPZmZzZXRzLmJvdHRvbSkgPiBmbG9vcihyZWZPZmZzZXRzLnRvcCkpIHx8XG4gICAgICAocGxhY2VtZW50ID09PSAnYm90dG9tJyAmJlxuICAgICAgICBmbG9vcihwb3BwZXJPZmZzZXRzLnRvcCkgPCBmbG9vcihyZWZPZmZzZXRzLmJvdHRvbSkpO1xuXG4gICAgY29uc3Qgb3ZlcmZsb3dzTGVmdCA9IGZsb29yKHBvcHBlck9mZnNldHMubGVmdCkgPCBmbG9vcihib3VuZGFyaWVzLmxlZnQpO1xuICAgIGNvbnN0IG92ZXJmbG93c1JpZ2h0ID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5yaWdodCkgPiBmbG9vcihib3VuZGFyaWVzLnJpZ2h0KTtcbiAgICBjb25zdCBvdmVyZmxvd3NUb3AgPSBmbG9vcihwb3BwZXJPZmZzZXRzLnRvcCkgPCBmbG9vcihib3VuZGFyaWVzLnRvcCk7XG4gICAgY29uc3Qgb3ZlcmZsb3dzQm90dG9tID1cbiAgICAgIGZsb29yKHBvcHBlck9mZnNldHMuYm90dG9tKSA+IGZsb29yKGJvdW5kYXJpZXMuYm90dG9tKTtcblxuICAgIGNvbnN0IG92ZXJmbG93c0JvdW5kYXJpZXMgPVxuICAgICAgKHBsYWNlbWVudCA9PT0gJ2xlZnQnICYmIG92ZXJmbG93c0xlZnQpIHx8XG4gICAgICAocGxhY2VtZW50ID09PSAncmlnaHQnICYmIG92ZXJmbG93c1JpZ2h0KSB8fFxuICAgICAgKHBsYWNlbWVudCA9PT0gJ3RvcCcgJiYgb3ZlcmZsb3dzVG9wKSB8fFxuICAgICAgKHBsYWNlbWVudCA9PT0gJ2JvdHRvbScgJiYgb3ZlcmZsb3dzQm90dG9tKTtcblxuICAgIC8vIGZsaXAgdGhlIHZhcmlhdGlvbiBpZiByZXF1aXJlZFxuICAgIGNvbnN0IGlzVmVydGljYWwgPSBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuXG4gICAgLy8gZmxpcHMgdmFyaWF0aW9uIGlmIHJlZmVyZW5jZSBlbGVtZW50IG92ZXJmbG93cyBib3VuZGFyaWVzXG4gICAgY29uc3QgZmxpcHBlZFZhcmlhdGlvbkJ5UmVmID1cbiAgICAgICEhb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyAmJlxuICAgICAgKChpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JyAmJiBvdmVyZmxvd3NMZWZ0KSB8fFxuICAgICAgICAoaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c1JpZ2h0KSB8fFxuICAgICAgICAoIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c1RvcCkgfHxcbiAgICAgICAgKCFpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzQm90dG9tKSk7XG5cbiAgICAvLyBmbGlwcyB2YXJpYXRpb24gaWYgcG9wcGVyIGNvbnRlbnQgb3ZlcmZsb3dzIGJvdW5kYXJpZXNcbiAgICBjb25zdCBmbGlwcGVkVmFyaWF0aW9uQnlDb250ZW50ID1cbiAgICAgICEhb3B0aW9ucy5mbGlwVmFyaWF0aW9uc0J5Q29udGVudCAmJlxuICAgICAgKChpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JyAmJiBvdmVyZmxvd3NSaWdodCkgfHxcbiAgICAgICAgKGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NMZWZ0KSB8fFxuICAgICAgICAoIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c0JvdHRvbSkgfHxcbiAgICAgICAgKCFpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzVG9wKSk7XG5cbiAgICBjb25zdCBmbGlwcGVkVmFyaWF0aW9uID0gZmxpcHBlZFZhcmlhdGlvbkJ5UmVmIHx8IGZsaXBwZWRWYXJpYXRpb25CeUNvbnRlbnQ7XG5cbiAgICBpZiAob3ZlcmxhcHNSZWYgfHwgb3ZlcmZsb3dzQm91bmRhcmllcyB8fCBmbGlwcGVkVmFyaWF0aW9uKSB7XG4gICAgICAvLyB0aGlzIGJvb2xlYW4gdG8gZGV0ZWN0IGFueSBmbGlwIGxvb3BcbiAgICAgIGRhdGEuZmxpcHBlZCA9IHRydWU7XG5cbiAgICAgIGlmIChvdmVybGFwc1JlZiB8fCBvdmVyZmxvd3NCb3VuZGFyaWVzKSB7XG4gICAgICAgIHBsYWNlbWVudCA9IGZsaXBPcmRlcltpbmRleCArIDFdO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmxpcHBlZFZhcmlhdGlvbikge1xuICAgICAgICB2YXJpYXRpb24gPSBnZXRPcHBvc2l0ZVZhcmlhdGlvbih2YXJpYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBkYXRhLnBsYWNlbWVudCA9IHBsYWNlbWVudCArICh2YXJpYXRpb24gPyAnLScgKyB2YXJpYXRpb24gOiAnJyk7XG5cbiAgICAgIC8vIHRoaXMgb2JqZWN0IGNvbnRhaW5zIGBwb3NpdGlvbmAsIHdlIHdhbnQgdG8gcHJlc2VydmUgaXQgYWxvbmcgd2l0aFxuICAgICAgLy8gYW55IGFkZGl0aW9uYWwgcHJvcGVydHkgd2UgbWF5IGFkZCBpbiB0aGUgZnV0dXJlXG4gICAgICBkYXRhLm9mZnNldHMucG9wcGVyID0ge1xuICAgICAgICAuLi5kYXRhLm9mZnNldHMucG9wcGVyLFxuICAgICAgICAuLi5nZXRQb3BwZXJPZmZzZXRzKFxuICAgICAgICAgIGRhdGEuaW5zdGFuY2UucG9wcGVyLFxuICAgICAgICAgIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsXG4gICAgICAgICAgZGF0YS5wbGFjZW1lbnRcbiAgICAgICAgKSxcbiAgICAgIH07XG5cbiAgICAgIGRhdGEgPSBydW5Nb2RpZmllcnMoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsIGRhdGEsICdmbGlwJyk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRhdGE7XG59XG4iLCJpbXBvcnQgaXNOdW1lcmljIGZyb20gJy4uL3V0aWxzL2lzTnVtZXJpYyc7XG5pbXBvcnQgZ2V0Q2xpZW50UmVjdCBmcm9tICcuLi91dGlscy9nZXRDbGllbnRSZWN0JztcbmltcG9ydCBmaW5kIGZyb20gJy4uL3V0aWxzL2ZpbmQnO1xuXG4vKipcbiAqIENvbnZlcnRzIGEgc3RyaW5nIGNvbnRhaW5pbmcgdmFsdWUgKyB1bml0IGludG8gYSBweCB2YWx1ZSBudW1iZXJcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIHttb2RpZmllcnN+b2Zmc2V0fVxuICogQHByaXZhdGVcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBzdHIgLSBWYWx1ZSArIHVuaXQgc3RyaW5nXG4gKiBAYXJndW1lbnQge1N0cmluZ30gbWVhc3VyZW1lbnQgLSBgaGVpZ2h0YCBvciBgd2lkdGhgXG4gKiBAYXJndW1lbnQge09iamVjdH0gcG9wcGVyT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHNcbiAqIEByZXR1cm5zIHtOdW1iZXJ8U3RyaW5nfVxuICogVmFsdWUgaW4gcGl4ZWxzLCBvciBvcmlnaW5hbCBzdHJpbmcgaWYgbm8gdmFsdWVzIHdlcmUgZXh0cmFjdGVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b1ZhbHVlKHN0ciwgbWVhc3VyZW1lbnQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMpIHtcbiAgLy8gc2VwYXJhdGUgdmFsdWUgZnJvbSB1bml0XG4gIGNvbnN0IHNwbGl0ID0gc3RyLm1hdGNoKC8oKD86XFwtfFxcKyk/XFxkKlxcLj9cXGQqKSguKikvKTtcbiAgY29uc3QgdmFsdWUgPSArc3BsaXRbMV07XG4gIGNvbnN0IHVuaXQgPSBzcGxpdFsyXTtcblxuICAvLyBJZiBpdCdzIG5vdCBhIG51bWJlciBpdCdzIGFuIG9wZXJhdG9yLCBJIGd1ZXNzXG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG5cbiAgaWYgKHVuaXQuaW5kZXhPZignJScpID09PSAwKSB7XG4gICAgbGV0IGVsZW1lbnQ7XG4gICAgc3dpdGNoICh1bml0KSB7XG4gICAgICBjYXNlICclcCc6XG4gICAgICAgIGVsZW1lbnQgPSBwb3BwZXJPZmZzZXRzO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJyUnOlxuICAgICAgY2FzZSAnJXInOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgZWxlbWVudCA9IHJlZmVyZW5jZU9mZnNldHM7XG4gICAgfVxuXG4gICAgY29uc3QgcmVjdCA9IGdldENsaWVudFJlY3QoZWxlbWVudCk7XG4gICAgcmV0dXJuIHJlY3RbbWVhc3VyZW1lbnRdIC8gMTAwICogdmFsdWU7XG4gIH0gZWxzZSBpZiAodW5pdCA9PT0gJ3ZoJyB8fCB1bml0ID09PSAndncnKSB7XG4gICAgLy8gaWYgaXMgYSB2aCBvciB2dywgd2UgY2FsY3VsYXRlIHRoZSBzaXplIGJhc2VkIG9uIHRoZSB2aWV3cG9ydFxuICAgIGxldCBzaXplO1xuICAgIGlmICh1bml0ID09PSAndmgnKSB7XG4gICAgICBzaXplID0gTWF0aC5tYXgoXG4gICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQsXG4gICAgICAgIHdpbmRvdy5pbm5lckhlaWdodCB8fCAwXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzaXplID0gTWF0aC5tYXgoXG4gICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCxcbiAgICAgICAgd2luZG93LmlubmVyV2lkdGggfHwgMFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHNpemUgLyAxMDAgKiB2YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBpZiBpcyBhbiBleHBsaWNpdCBwaXhlbCB1bml0LCB3ZSBnZXQgcmlkIG9mIHRoZSB1bml0IGFuZCBrZWVwIHRoZSB2YWx1ZVxuICAgIC8vIGlmIGlzIGFuIGltcGxpY2l0IHVuaXQsIGl0J3MgcHgsIGFuZCB3ZSByZXR1cm4ganVzdCB0aGUgdmFsdWVcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cblxuLyoqXG4gKiBQYXJzZSBhbiBgb2Zmc2V0YCBzdHJpbmcgdG8gZXh0cmFwb2xhdGUgYHhgIGFuZCBgeWAgbnVtZXJpYyBvZmZzZXRzLlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2Yge21vZGlmaWVyc35vZmZzZXR9XG4gKiBAcHJpdmF0ZVxuICogQGFyZ3VtZW50IHtTdHJpbmd9IG9mZnNldFxuICogQGFyZ3VtZW50IHtPYmplY3R9IHBvcHBlck9mZnNldHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSByZWZlcmVuY2VPZmZzZXRzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gYmFzZVBsYWNlbWVudFxuICogQHJldHVybnMge0FycmF5fSBhIHR3byBjZWxscyBhcnJheSB3aXRoIHggYW5kIHkgb2Zmc2V0cyBpbiBudW1iZXJzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU9mZnNldChcbiAgb2Zmc2V0LFxuICBwb3BwZXJPZmZzZXRzLFxuICByZWZlcmVuY2VPZmZzZXRzLFxuICBiYXNlUGxhY2VtZW50XG4pIHtcbiAgY29uc3Qgb2Zmc2V0cyA9IFswLCAwXTtcblxuICAvLyBVc2UgaGVpZ2h0IGlmIHBsYWNlbWVudCBpcyBsZWZ0IG9yIHJpZ2h0IGFuZCBpbmRleCBpcyAwIG90aGVyd2lzZSB1c2Ugd2lkdGhcbiAgLy8gaW4gdGhpcyB3YXkgdGhlIGZpcnN0IG9mZnNldCB3aWxsIHVzZSBhbiBheGlzIGFuZCB0aGUgc2Vjb25kIG9uZVxuICAvLyB3aWxsIHVzZSB0aGUgb3RoZXIgb25lXG4gIGNvbnN0IHVzZUhlaWdodCA9IFsncmlnaHQnLCAnbGVmdCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuXG4gIC8vIFNwbGl0IHRoZSBvZmZzZXQgc3RyaW5nIHRvIG9idGFpbiBhIGxpc3Qgb2YgdmFsdWVzIGFuZCBvcGVyYW5kc1xuICAvLyBUaGUgcmVnZXggYWRkcmVzc2VzIHZhbHVlcyB3aXRoIHRoZSBwbHVzIG9yIG1pbnVzIHNpZ24gaW4gZnJvbnQgKCsxMCwgLTIwLCBldGMpXG4gIGNvbnN0IGZyYWdtZW50cyA9IG9mZnNldC5zcGxpdCgvKFxcK3xcXC0pLykubWFwKGZyYWcgPT4gZnJhZy50cmltKCkpO1xuXG4gIC8vIERldGVjdCBpZiB0aGUgb2Zmc2V0IHN0cmluZyBjb250YWlucyBhIHBhaXIgb2YgdmFsdWVzIG9yIGEgc2luZ2xlIG9uZVxuICAvLyB0aGV5IGNvdWxkIGJlIHNlcGFyYXRlZCBieSBjb21tYSBvciBzcGFjZVxuICBjb25zdCBkaXZpZGVyID0gZnJhZ21lbnRzLmluZGV4T2YoXG4gICAgZmluZChmcmFnbWVudHMsIGZyYWcgPT4gZnJhZy5zZWFyY2goLyx8XFxzLykgIT09IC0xKVxuICApO1xuXG4gIGlmIChmcmFnbWVudHNbZGl2aWRlcl0gJiYgZnJhZ21lbnRzW2RpdmlkZXJdLmluZGV4T2YoJywnKSA9PT0gLTEpIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICAnT2Zmc2V0cyBzZXBhcmF0ZWQgYnkgd2hpdGUgc3BhY2UocykgYXJlIGRlcHJlY2F0ZWQsIHVzZSBhIGNvbW1hICgsKSBpbnN0ZWFkLidcbiAgICApO1xuICB9XG5cbiAgLy8gSWYgZGl2aWRlciBpcyBmb3VuZCwgd2UgZGl2aWRlIHRoZSBsaXN0IG9mIHZhbHVlcyBhbmQgb3BlcmFuZHMgdG8gZGl2aWRlXG4gIC8vIHRoZW0gYnkgb2ZzZXQgWCBhbmQgWS5cbiAgY29uc3Qgc3BsaXRSZWdleCA9IC9cXHMqLFxccyp8XFxzKy87XG4gIGxldCBvcHMgPSBkaXZpZGVyICE9PSAtMVxuICAgID8gW1xuICAgICAgICBmcmFnbWVudHNcbiAgICAgICAgICAuc2xpY2UoMCwgZGl2aWRlcilcbiAgICAgICAgICAuY29uY2F0KFtmcmFnbWVudHNbZGl2aWRlcl0uc3BsaXQoc3BsaXRSZWdleClbMF1dKSxcbiAgICAgICAgW2ZyYWdtZW50c1tkaXZpZGVyXS5zcGxpdChzcGxpdFJlZ2V4KVsxXV0uY29uY2F0KFxuICAgICAgICAgIGZyYWdtZW50cy5zbGljZShkaXZpZGVyICsgMSlcbiAgICAgICAgKSxcbiAgICAgIF1cbiAgICA6IFtmcmFnbWVudHNdO1xuXG4gIC8vIENvbnZlcnQgdGhlIHZhbHVlcyB3aXRoIHVuaXRzIHRvIGFic29sdXRlIHBpeGVscyB0byBhbGxvdyBvdXIgY29tcHV0YXRpb25zXG4gIG9wcyA9IG9wcy5tYXAoKG9wLCBpbmRleCkgPT4ge1xuICAgIC8vIE1vc3Qgb2YgdGhlIHVuaXRzIHJlbHkgb24gdGhlIG9yaWVudGF0aW9uIG9mIHRoZSBwb3BwZXJcbiAgICBjb25zdCBtZWFzdXJlbWVudCA9IChpbmRleCA9PT0gMSA/ICF1c2VIZWlnaHQgOiB1c2VIZWlnaHQpXG4gICAgICA/ICdoZWlnaHQnXG4gICAgICA6ICd3aWR0aCc7XG4gICAgbGV0IG1lcmdlV2l0aFByZXZpb3VzID0gZmFsc2U7XG4gICAgcmV0dXJuIChcbiAgICAgIG9wXG4gICAgICAgIC8vIFRoaXMgYWdncmVnYXRlcyBhbnkgYCtgIG9yIGAtYCBzaWduIHRoYXQgYXJlbid0IGNvbnNpZGVyZWQgb3BlcmF0b3JzXG4gICAgICAgIC8vIGUuZy46IDEwICsgKzUgPT4gWzEwLCArLCArNV1cbiAgICAgICAgLnJlZHVjZSgoYSwgYikgPT4ge1xuICAgICAgICAgIGlmIChhW2EubGVuZ3RoIC0gMV0gPT09ICcnICYmIFsnKycsICctJ10uaW5kZXhPZihiKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIGFbYS5sZW5ndGggLSAxXSA9IGI7XG4gICAgICAgICAgICBtZXJnZVdpdGhQcmV2aW91cyA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG1lcmdlV2l0aFByZXZpb3VzKSB7XG4gICAgICAgICAgICBhW2EubGVuZ3RoIC0gMV0gKz0gYjtcbiAgICAgICAgICAgIG1lcmdlV2l0aFByZXZpb3VzID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGEuY29uY2F0KGIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgW10pXG4gICAgICAgIC8vIEhlcmUgd2UgY29udmVydCB0aGUgc3RyaW5nIHZhbHVlcyBpbnRvIG51bWJlciB2YWx1ZXMgKGluIHB4KVxuICAgICAgICAubWFwKHN0ciA9PiB0b1ZhbHVlKHN0ciwgbWVhc3VyZW1lbnQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMpKVxuICAgICk7XG4gIH0pO1xuXG4gIC8vIExvb3AgdHJvdWdoIHRoZSBvZmZzZXRzIGFycmF5cyBhbmQgZXhlY3V0ZSB0aGUgb3BlcmF0aW9uc1xuICBvcHMuZm9yRWFjaCgob3AsIGluZGV4KSA9PiB7XG4gICAgb3AuZm9yRWFjaCgoZnJhZywgaW5kZXgyKSA9PiB7XG4gICAgICBpZiAoaXNOdW1lcmljKGZyYWcpKSB7XG4gICAgICAgIG9mZnNldHNbaW5kZXhdICs9IGZyYWcgKiAob3BbaW5kZXgyIC0gMV0gPT09ICctJyA/IC0xIDogMSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gb2Zmc2V0cztcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAYXJndW1lbnQge051bWJlcnxTdHJpbmd9IG9wdGlvbnMub2Zmc2V0PTBcbiAqIFRoZSBvZmZzZXQgdmFsdWUgYXMgZGVzY3JpYmVkIGluIHRoZSBtb2RpZmllciBkZXNjcmlwdGlvblxuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvZmZzZXQoZGF0YSwgeyBvZmZzZXQgfSkge1xuICBjb25zdCB7IHBsYWNlbWVudCwgb2Zmc2V0czogeyBwb3BwZXIsIHJlZmVyZW5jZSB9IH0gPSBkYXRhO1xuICBjb25zdCBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG5cbiAgbGV0IG9mZnNldHM7XG4gIGlmIChpc051bWVyaWMoK29mZnNldCkpIHtcbiAgICBvZmZzZXRzID0gWytvZmZzZXQsIDBdO1xuICB9IGVsc2Uge1xuICAgIG9mZnNldHMgPSBwYXJzZU9mZnNldChvZmZzZXQsIHBvcHBlciwgcmVmZXJlbmNlLCBiYXNlUGxhY2VtZW50KTtcbiAgfVxuXG4gIGlmIChiYXNlUGxhY2VtZW50ID09PSAnbGVmdCcpIHtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLmxlZnQgLT0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAncmlnaHQnKSB7XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMV07XG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ3RvcCcpIHtcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci50b3AgLT0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAnYm90dG9tJykge1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzFdO1xuICB9XG5cbiAgZGF0YS5wb3BwZXIgPSBwb3BwZXI7XG4gIHJldHVybiBkYXRhO1xufVxuIiwiaW1wb3J0IGFwcGx5U3R5bGUsIHsgYXBwbHlTdHlsZU9uTG9hZCB9IGZyb20gJy4vYXBwbHlTdHlsZSc7XG5pbXBvcnQgY29tcHV0ZVN0eWxlIGZyb20gJy4vY29tcHV0ZVN0eWxlJztcbmltcG9ydCBhcnJvdyBmcm9tICcuL2Fycm93JztcbmltcG9ydCBmbGlwIGZyb20gJy4vZmxpcCc7XG5pbXBvcnQga2VlcFRvZ2V0aGVyIGZyb20gJy4va2VlcFRvZ2V0aGVyJztcbmltcG9ydCBvZmZzZXQgZnJvbSAnLi9vZmZzZXQnO1xuaW1wb3J0IHByZXZlbnRPdmVyZmxvdyBmcm9tICcuL3ByZXZlbnRPdmVyZmxvdyc7XG5pbXBvcnQgc2hpZnQgZnJvbSAnLi9zaGlmdCc7XG5pbXBvcnQgaGlkZSBmcm9tICcuL2hpZGUnO1xuaW1wb3J0IGlubmVyIGZyb20gJy4vaW5uZXInO1xuXG4vKipcbiAqIE1vZGlmaWVyIGZ1bmN0aW9uLCBlYWNoIG1vZGlmaWVyIGNhbiBoYXZlIGEgZnVuY3Rpb24gb2YgdGhpcyB0eXBlIGFzc2lnbmVkXG4gKiB0byBpdHMgYGZuYCBwcm9wZXJ0eS48YnIgLz5cbiAqIFRoZXNlIGZ1bmN0aW9ucyB3aWxsIGJlIGNhbGxlZCBvbiBlYWNoIHVwZGF0ZSwgdGhpcyBtZWFucyB0aGF0IHlvdSBtdXN0XG4gKiBtYWtlIHN1cmUgdGhleSBhcmUgcGVyZm9ybWFudCBlbm91Z2ggdG8gYXZvaWQgcGVyZm9ybWFuY2UgYm90dGxlbmVja3MuXG4gKlxuICogQGZ1bmN0aW9uIE1vZGlmaWVyRm5cbiAqIEBhcmd1bWVudCB7ZGF0YU9iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7ZGF0YU9iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5cbi8qKlxuICogTW9kaWZpZXJzIGFyZSBwbHVnaW5zIHVzZWQgdG8gYWx0ZXIgdGhlIGJlaGF2aW9yIG9mIHlvdXIgcG9wcGVycy48YnIgLz5cbiAqIFBvcHBlci5qcyB1c2VzIGEgc2V0IG9mIDkgbW9kaWZpZXJzIHRvIHByb3ZpZGUgYWxsIHRoZSBiYXNpYyBmdW5jdGlvbmFsaXRpZXNcbiAqIG5lZWRlZCBieSB0aGUgbGlicmFyeS5cbiAqXG4gKiBVc3VhbGx5IHlvdSBkb24ndCB3YW50IHRvIG92ZXJyaWRlIHRoZSBgb3JkZXJgLCBgZm5gIGFuZCBgb25Mb2FkYCBwcm9wcy5cbiAqIEFsbCB0aGUgb3RoZXIgcHJvcGVydGllcyBhcmUgY29uZmlndXJhdGlvbnMgdGhhdCBjb3VsZCBiZSB0d2Vha2VkLlxuICogQG5hbWVzcGFjZSBtb2RpZmllcnNcbiAqL1xuZXhwb3J0IGRlZmF1bHQge1xuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBzaGlmdCB0aGUgcG9wcGVyIG9uIHRoZSBzdGFydCBvciBlbmQgb2YgaXRzIHJlZmVyZW5jZVxuICAgKiBlbGVtZW50LjxiciAvPlxuICAgKiBJdCB3aWxsIHJlYWQgdGhlIHZhcmlhdGlvbiBvZiB0aGUgYHBsYWNlbWVudGAgcHJvcGVydHkuPGJyIC8+XG4gICAqIEl0IGNhbiBiZSBvbmUgZWl0aGVyIGAtZW5kYCBvciBgLXN0YXJ0YC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIHNoaWZ0OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTEwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogc2hpZnQsXG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoZSBgb2Zmc2V0YCBtb2RpZmllciBjYW4gc2hpZnQgeW91ciBwb3BwZXIgb24gYm90aCBpdHMgYXhpcy5cbiAgICpcbiAgICogSXQgYWNjZXB0cyB0aGUgZm9sbG93aW5nIHVuaXRzOlxuICAgKiAtIGBweGAgb3IgdW5pdC1sZXNzLCBpbnRlcnByZXRlZCBhcyBwaXhlbHNcbiAgICogLSBgJWAgb3IgYCVyYCwgcGVyY2VudGFnZSByZWxhdGl2ZSB0byB0aGUgbGVuZ3RoIG9mIHRoZSByZWZlcmVuY2UgZWxlbWVudFxuICAgKiAtIGAlcGAsIHBlcmNlbnRhZ2UgcmVsYXRpdmUgdG8gdGhlIGxlbmd0aCBvZiB0aGUgcG9wcGVyIGVsZW1lbnRcbiAgICogLSBgdndgLCBDU1Mgdmlld3BvcnQgd2lkdGggdW5pdFxuICAgKiAtIGB2aGAsIENTUyB2aWV3cG9ydCBoZWlnaHQgdW5pdFxuICAgKlxuICAgKiBGb3IgbGVuZ3RoIGlzIGludGVuZGVkIHRoZSBtYWluIGF4aXMgcmVsYXRpdmUgdG8gdGhlIHBsYWNlbWVudCBvZiB0aGUgcG9wcGVyLjxiciAvPlxuICAgKiBUaGlzIG1lYW5zIHRoYXQgaWYgdGhlIHBsYWNlbWVudCBpcyBgdG9wYCBvciBgYm90dG9tYCwgdGhlIGxlbmd0aCB3aWxsIGJlIHRoZVxuICAgKiBgd2lkdGhgLiBJbiBjYXNlIG9mIGBsZWZ0YCBvciBgcmlnaHRgLCBpdCB3aWxsIGJlIHRoZSBgaGVpZ2h0YC5cbiAgICpcbiAgICogWW91IGNhbiBwcm92aWRlIGEgc2luZ2xlIHZhbHVlIChhcyBgTnVtYmVyYCBvciBgU3RyaW5nYCksIG9yIGEgcGFpciBvZiB2YWx1ZXNcbiAgICogYXMgYFN0cmluZ2AgZGl2aWRlZCBieSBhIGNvbW1hIG9yIG9uZSAob3IgbW9yZSkgd2hpdGUgc3BhY2VzLjxiciAvPlxuICAgKiBUaGUgbGF0dGVyIGlzIGEgZGVwcmVjYXRlZCBtZXRob2QgYmVjYXVzZSBpdCBsZWFkcyB0byBjb25mdXNpb24gYW5kIHdpbGwgYmVcbiAgICogcmVtb3ZlZCBpbiB2Mi48YnIgLz5cbiAgICogQWRkaXRpb25hbGx5LCBpdCBhY2NlcHRzIGFkZGl0aW9ucyBhbmQgc3VidHJhY3Rpb25zIGJldHdlZW4gZGlmZmVyZW50IHVuaXRzLlxuICAgKiBOb3RlIHRoYXQgbXVsdGlwbGljYXRpb25zIGFuZCBkaXZpc2lvbnMgYXJlbid0IHN1cHBvcnRlZC5cbiAgICpcbiAgICogVmFsaWQgZXhhbXBsZXMgYXJlOlxuICAgKiBgYGBcbiAgICogMTBcbiAgICogJzEwJSdcbiAgICogJzEwLCAxMCdcbiAgICogJzEwJSwgMTAnXG4gICAqICcxMCArIDEwJSdcbiAgICogJzEwIC0gNXZoICsgMyUnXG4gICAqICctMTBweCArIDV2aCwgNXB4IC0gNiUnXG4gICAqIGBgYFxuICAgKiA+ICoqTkIqKjogSWYgeW91IGRlc2lyZSB0byBhcHBseSBvZmZzZXRzIHRvIHlvdXIgcG9wcGVycyBpbiBhIHdheSB0aGF0IG1heSBtYWtlIHRoZW0gb3ZlcmxhcFxuICAgKiA+IHdpdGggdGhlaXIgcmVmZXJlbmNlIGVsZW1lbnQsIHVuZm9ydHVuYXRlbHksIHlvdSB3aWxsIGhhdmUgdG8gZGlzYWJsZSB0aGUgYGZsaXBgIG1vZGlmaWVyLlxuICAgKiA+IFlvdSBjYW4gcmVhZCBtb3JlIG9uIHRoaXMgYXQgdGhpcyBbaXNzdWVdKGh0dHBzOi8vZ2l0aHViLmNvbS9GZXpWcmFzdGEvcG9wcGVyLmpzL2lzc3Vlcy8zNzMpLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgb2Zmc2V0OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTIwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMjAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogb2Zmc2V0LFxuICAgIC8qKiBAcHJvcCB7TnVtYmVyfFN0cmluZ30gb2Zmc2V0PTBcbiAgICAgKiBUaGUgb2Zmc2V0IHZhbHVlIGFzIGRlc2NyaWJlZCBpbiB0aGUgbW9kaWZpZXIgZGVzY3JpcHRpb25cbiAgICAgKi9cbiAgICBvZmZzZXQ6IDAsXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gcHJldmVudCB0aGUgcG9wcGVyIGZyb20gYmVpbmcgcG9zaXRpb25lZCBvdXRzaWRlIHRoZSBib3VuZGFyeS5cbiAgICpcbiAgICogQSBzY2VuYXJpbyBleGlzdHMgd2hlcmUgdGhlIHJlZmVyZW5jZSBpdHNlbGYgaXMgbm90IHdpdGhpbiB0aGUgYm91bmRhcmllcy48YnIgLz5cbiAgICogV2UgY2FuIHNheSBpdCBoYXMgXCJlc2NhcGVkIHRoZSBib3VuZGFyaWVzXCIg4oCUIG9yIGp1c3QgXCJlc2NhcGVkXCIuPGJyIC8+XG4gICAqIEluIHRoaXMgY2FzZSB3ZSBuZWVkIHRvIGRlY2lkZSB3aGV0aGVyIHRoZSBwb3BwZXIgc2hvdWxkIGVpdGhlcjpcbiAgICpcbiAgICogLSBkZXRhY2ggZnJvbSB0aGUgcmVmZXJlbmNlIGFuZCByZW1haW4gXCJ0cmFwcGVkXCIgaW4gdGhlIGJvdW5kYXJpZXMsIG9yXG4gICAqIC0gaWYgaXQgc2hvdWxkIGlnbm9yZSB0aGUgYm91bmRhcnkgYW5kIFwiZXNjYXBlIHdpdGggaXRzIHJlZmVyZW5jZVwiXG4gICAqXG4gICAqIFdoZW4gYGVzY2FwZVdpdGhSZWZlcmVuY2VgIGlzIHNldCB0b2B0cnVlYCBhbmQgcmVmZXJlbmNlIGlzIGNvbXBsZXRlbHlcbiAgICogb3V0c2lkZSBpdHMgYm91bmRhcmllcywgdGhlIHBvcHBlciB3aWxsIG92ZXJmbG93IChvciBjb21wbGV0ZWx5IGxlYXZlKVxuICAgKiB0aGUgYm91bmRhcmllcyBpbiBvcmRlciB0byByZW1haW4gYXR0YWNoZWQgdG8gdGhlIGVkZ2Ugb2YgdGhlIHJlZmVyZW5jZS5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIHByZXZlbnRPdmVyZmxvdzoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0zMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDMwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IHByZXZlbnRPdmVyZmxvdyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7QXJyYXl9IFtwcmlvcml0eT1bJ2xlZnQnLCdyaWdodCcsJ3RvcCcsJ2JvdHRvbSddXVxuICAgICAqIFBvcHBlciB3aWxsIHRyeSB0byBwcmV2ZW50IG92ZXJmbG93IGZvbGxvd2luZyB0aGVzZSBwcmlvcml0aWVzIGJ5IGRlZmF1bHQsXG4gICAgICogdGhlbiwgaXQgY291bGQgb3ZlcmZsb3cgb24gdGhlIGxlZnQgYW5kIG9uIHRvcCBvZiB0aGUgYGJvdW5kYXJpZXNFbGVtZW50YFxuICAgICAqL1xuICAgIHByaW9yaXR5OiBbJ2xlZnQnLCAncmlnaHQnLCAndG9wJywgJ2JvdHRvbSddLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtudW1iZXJ9IHBhZGRpbmc9NVxuICAgICAqIEFtb3VudCBvZiBwaXhlbCB1c2VkIHRvIGRlZmluZSBhIG1pbmltdW0gZGlzdGFuY2UgYmV0d2VlbiB0aGUgYm91bmRhcmllc1xuICAgICAqIGFuZCB0aGUgcG9wcGVyLiBUaGlzIG1ha2VzIHN1cmUgdGhlIHBvcHBlciBhbHdheXMgaGFzIGEgbGl0dGxlIHBhZGRpbmdcbiAgICAgKiBiZXR3ZWVuIHRoZSBlZGdlcyBvZiBpdHMgY29udGFpbmVyXG4gICAgICovXG4gICAgcGFkZGluZzogNSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudD0nc2Nyb2xsUGFyZW50J1xuICAgICAqIEJvdW5kYXJpZXMgdXNlZCBieSB0aGUgbW9kaWZpZXIuIENhbiBiZSBgc2Nyb2xsUGFyZW50YCwgYHdpbmRvd2AsXG4gICAgICogYHZpZXdwb3J0YCBvciBhbnkgRE9NIGVsZW1lbnQuXG4gICAgICovXG4gICAgYm91bmRhcmllc0VsZW1lbnQ6ICdzY3JvbGxQYXJlbnQnLFxuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIG1ha2Ugc3VyZSB0aGUgcmVmZXJlbmNlIGFuZCBpdHMgcG9wcGVyIHN0YXkgbmVhciBlYWNoIG90aGVyXG4gICAqIHdpdGhvdXQgbGVhdmluZyBhbnkgZ2FwIGJldHdlZW4gdGhlIHR3by4gRXNwZWNpYWxseSB1c2VmdWwgd2hlbiB0aGUgYXJyb3cgaXNcbiAgICogZW5hYmxlZCBhbmQgeW91IHdhbnQgdG8gZW5zdXJlIHRoYXQgaXQgcG9pbnRzIHRvIGl0cyByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogSXQgY2FyZXMgb25seSBhYm91dCB0aGUgZmlyc3QgYXhpcy4gWW91IGNhbiBzdGlsbCBoYXZlIHBvcHBlcnMgd2l0aCBtYXJnaW5cbiAgICogYmV0d2VlbiB0aGUgcG9wcGVyIGFuZCBpdHMgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBrZWVwVG9nZXRoZXI6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NDAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA0MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBrZWVwVG9nZXRoZXIsXG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoaXMgbW9kaWZpZXIgaXMgdXNlZCB0byBtb3ZlIHRoZSBgYXJyb3dFbGVtZW50YCBvZiB0aGUgcG9wcGVyIHRvIG1ha2VcbiAgICogc3VyZSBpdCBpcyBwb3NpdGlvbmVkIGJldHdlZW4gdGhlIHJlZmVyZW5jZSBlbGVtZW50IGFuZCBpdHMgcG9wcGVyIGVsZW1lbnQuXG4gICAqIEl0IHdpbGwgcmVhZCB0aGUgb3V0ZXIgc2l6ZSBvZiB0aGUgYGFycm93RWxlbWVudGAgbm9kZSB0byBkZXRlY3QgaG93IG1hbnlcbiAgICogcGl4ZWxzIG9mIGNvbmp1bmN0aW9uIGFyZSBuZWVkZWQuXG4gICAqXG4gICAqIEl0IGhhcyBubyBlZmZlY3QgaWYgbm8gYGFycm93RWxlbWVudGAgaXMgcHJvdmlkZWQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBhcnJvdzoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj01MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDUwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGFycm93LFxuICAgIC8qKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBlbGVtZW50PSdbeC1hcnJvd10nIC0gU2VsZWN0b3Igb3Igbm9kZSB1c2VkIGFzIGFycm93ICovXG4gICAgZWxlbWVudDogJ1t4LWFycm93XScsXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gZmxpcCB0aGUgcG9wcGVyJ3MgcGxhY2VtZW50IHdoZW4gaXQgc3RhcnRzIHRvIG92ZXJsYXAgaXRzXG4gICAqIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKlxuICAgKiBSZXF1aXJlcyB0aGUgYHByZXZlbnRPdmVyZmxvd2AgbW9kaWZpZXIgYmVmb3JlIGl0IGluIG9yZGVyIHRvIHdvcmsuXG4gICAqXG4gICAqICoqTk9URToqKiB0aGlzIG1vZGlmaWVyIHdpbGwgaW50ZXJydXB0IHRoZSBjdXJyZW50IHVwZGF0ZSBjeWNsZSBhbmQgd2lsbFxuICAgKiByZXN0YXJ0IGl0IGlmIGl0IGRldGVjdHMgdGhlIG5lZWQgdG8gZmxpcCB0aGUgcGxhY2VtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgZmxpcDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj02MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDYwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGZsaXAsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xBcnJheX0gYmVoYXZpb3I9J2ZsaXAnXG4gICAgICogVGhlIGJlaGF2aW9yIHVzZWQgdG8gY2hhbmdlIHRoZSBwb3BwZXIncyBwbGFjZW1lbnQuIEl0IGNhbiBiZSBvbmUgb2ZcbiAgICAgKiBgZmxpcGAsIGBjbG9ja3dpc2VgLCBgY291bnRlcmNsb2Nrd2lzZWAgb3IgYW4gYXJyYXkgd2l0aCBhIGxpc3Qgb2YgdmFsaWRcbiAgICAgKiBwbGFjZW1lbnRzICh3aXRoIG9wdGlvbmFsIHZhcmlhdGlvbnMpXG4gICAgICovXG4gICAgYmVoYXZpb3I6ICdmbGlwJyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7bnVtYmVyfSBwYWRkaW5nPTVcbiAgICAgKiBUaGUgcG9wcGVyIHdpbGwgZmxpcCBpZiBpdCBoaXRzIHRoZSBlZGdlcyBvZiB0aGUgYGJvdW5kYXJpZXNFbGVtZW50YFxuICAgICAqL1xuICAgIHBhZGRpbmc6IDUsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQ9J3ZpZXdwb3J0J1xuICAgICAqIFRoZSBlbGVtZW50IHdoaWNoIHdpbGwgZGVmaW5lIHRoZSBib3VuZGFyaWVzIG9mIHRoZSBwb3BwZXIgcG9zaXRpb24uXG4gICAgICogVGhlIHBvcHBlciB3aWxsIG5ldmVyIGJlIHBsYWNlZCBvdXRzaWRlIG9mIHRoZSBkZWZpbmVkIGJvdW5kYXJpZXNcbiAgICAgKiAoZXhjZXB0IGlmIGBrZWVwVG9nZXRoZXJgIGlzIGVuYWJsZWQpXG4gICAgICovXG4gICAgYm91bmRhcmllc0VsZW1lbnQ6ICd2aWV3cG9ydCcsXG4gICAgLyoqXG4gICAgICogQHByb3Age0Jvb2xlYW59IGZsaXBWYXJpYXRpb25zPWZhbHNlXG4gICAgICogVGhlIHBvcHBlciB3aWxsIHN3aXRjaCBwbGFjZW1lbnQgdmFyaWF0aW9uIGJldHdlZW4gYC1zdGFydGAgYW5kIGAtZW5kYCB3aGVuXG4gICAgICogdGhlIHJlZmVyZW5jZSBlbGVtZW50IG92ZXJsYXBzIGl0cyBib3VuZGFyaWVzLlxuICAgICAqXG4gICAgICogVGhlIG9yaWdpbmFsIHBsYWNlbWVudCBzaG91bGQgaGF2ZSBhIHNldCB2YXJpYXRpb24uXG4gICAgICovXG4gICAgZmxpcFZhcmlhdGlvbnM6IGZhbHNlLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtCb29sZWFufSBmbGlwVmFyaWF0aW9uc0J5Q29udGVudD1mYWxzZVxuICAgICAqIFRoZSBwb3BwZXIgd2lsbCBzd2l0Y2ggcGxhY2VtZW50IHZhcmlhdGlvbiBiZXR3ZWVuIGAtc3RhcnRgIGFuZCBgLWVuZGAgd2hlblxuICAgICAqIHRoZSBwb3BwZXIgZWxlbWVudCBvdmVybGFwcyBpdHMgcmVmZXJlbmNlIGJvdW5kYXJpZXMuXG4gICAgICpcbiAgICAgKiBUaGUgb3JpZ2luYWwgcGxhY2VtZW50IHNob3VsZCBoYXZlIGEgc2V0IHZhcmlhdGlvbi5cbiAgICAgKi9cbiAgICBmbGlwVmFyaWF0aW9uc0J5Q29udGVudDogZmFsc2UsXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gbWFrZSB0aGUgcG9wcGVyIGZsb3cgdG93YXJkIHRoZSBpbm5lciBvZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEJ5IGRlZmF1bHQsIHdoZW4gdGhpcyBtb2RpZmllciBpcyBkaXNhYmxlZCwgdGhlIHBvcHBlciB3aWxsIGJlIHBsYWNlZCBvdXRzaWRlXG4gICAqIHRoZSByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGlubmVyOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTcwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNzAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD1mYWxzZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogZmFsc2UsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBpbm5lcixcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBoaWRlIHRoZSBwb3BwZXIgd2hlbiBpdHMgcmVmZXJlbmNlIGVsZW1lbnQgaXMgb3V0c2lkZSBvZiB0aGVcbiAgICogcG9wcGVyIGJvdW5kYXJpZXMuIEl0IHdpbGwgc2V0IGEgYHgtb3V0LW9mLWJvdW5kYXJpZXNgIGF0dHJpYnV0ZSB3aGljaCBjYW5cbiAgICogYmUgdXNlZCB0byBoaWRlIHdpdGggYSBDU1Mgc2VsZWN0b3IgdGhlIHBvcHBlciB3aGVuIGl0cyByZWZlcmVuY2UgaXNcbiAgICogb3V0IG9mIGJvdW5kYXJpZXMuXG4gICAqXG4gICAqIFJlcXVpcmVzIHRoZSBgcHJldmVudE92ZXJmbG93YCBtb2RpZmllciBiZWZvcmUgaXQgaW4gb3JkZXIgdG8gd29yay5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGhpZGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9ODAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA4MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBoaWRlLFxuICB9LFxuXG4gIC8qKlxuICAgKiBDb21wdXRlcyB0aGUgc3R5bGUgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlciBlbGVtZW50IHRvIGdldHNcbiAgICogcHJvcGVybHkgcG9zaXRpb25lZC5cbiAgICpcbiAgICogTm90ZSB0aGF0IHRoaXMgbW9kaWZpZXIgd2lsbCBub3QgdG91Y2ggdGhlIERPTSwgaXQganVzdCBwcmVwYXJlcyB0aGUgc3R5bGVzXG4gICAqIHNvIHRoYXQgYGFwcGx5U3R5bGVgIG1vZGlmaWVyIGNhbiBhcHBseSBpdC4gVGhpcyBzZXBhcmF0aW9uIGlzIHVzZWZ1bFxuICAgKiBpbiBjYXNlIHlvdSBuZWVkIHRvIHJlcGxhY2UgYGFwcGx5U3R5bGVgIHdpdGggYSBjdXN0b20gaW1wbGVtZW50YXRpb24uXG4gICAqXG4gICAqIFRoaXMgbW9kaWZpZXIgaGFzIGA4NTBgIGFzIGBvcmRlcmAgdmFsdWUgdG8gbWFpbnRhaW4gYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuICAgKiB3aXRoIHByZXZpb3VzIHZlcnNpb25zIG9mIFBvcHBlci5qcy4gRXhwZWN0IHRoZSBtb2RpZmllcnMgb3JkZXJpbmcgbWV0aG9kXG4gICAqIHRvIGNoYW5nZSBpbiBmdXR1cmUgbWFqb3IgdmVyc2lvbnMgb2YgdGhlIGxpYnJhcnkuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBjb21wdXRlU3R5bGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9ODUwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA4NTAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBjb21wdXRlU3R5bGUsXG4gICAgLyoqXG4gICAgICogQHByb3Age0Jvb2xlYW59IGdwdUFjY2VsZXJhdGlvbj10cnVlXG4gICAgICogSWYgdHJ1ZSwgaXQgdXNlcyB0aGUgQ1NTIDNEIHRyYW5zZm9ybWF0aW9uIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIuXG4gICAgICogT3RoZXJ3aXNlLCBpdCB3aWxsIHVzZSB0aGUgYHRvcGAgYW5kIGBsZWZ0YCBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgZ3B1QWNjZWxlcmF0aW9uOiB0cnVlLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtzdHJpbmd9IFt4PSdib3R0b20nXVxuICAgICAqIFdoZXJlIHRvIGFuY2hvciB0aGUgWCBheGlzIChgYm90dG9tYCBvciBgdG9wYCkuIEFLQSBYIG9mZnNldCBvcmlnaW4uXG4gICAgICogQ2hhbmdlIHRoaXMgaWYgeW91ciBwb3BwZXIgc2hvdWxkIGdyb3cgaW4gYSBkaXJlY3Rpb24gZGlmZmVyZW50IGZyb20gYGJvdHRvbWBcbiAgICAgKi9cbiAgICB4OiAnYm90dG9tJyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7c3RyaW5nfSBbeD0nbGVmdCddXG4gICAgICogV2hlcmUgdG8gYW5jaG9yIHRoZSBZIGF4aXMgKGBsZWZ0YCBvciBgcmlnaHRgKS4gQUtBIFkgb2Zmc2V0IG9yaWdpbi5cbiAgICAgKiBDaGFuZ2UgdGhpcyBpZiB5b3VyIHBvcHBlciBzaG91bGQgZ3JvdyBpbiBhIGRpcmVjdGlvbiBkaWZmZXJlbnQgZnJvbSBgcmlnaHRgXG4gICAgICovXG4gICAgeTogJ3JpZ2h0JyxcbiAgfSxcblxuICAvKipcbiAgICogQXBwbGllcyB0aGUgY29tcHV0ZWQgc3R5bGVzIHRvIHRoZSBwb3BwZXIgZWxlbWVudC5cbiAgICpcbiAgICogQWxsIHRoZSBET00gbWFuaXB1bGF0aW9ucyBhcmUgbGltaXRlZCB0byB0aGlzIG1vZGlmaWVyLiBUaGlzIGlzIHVzZWZ1bCBpbiBjYXNlXG4gICAqIHlvdSB3YW50IHRvIGludGVncmF0ZSBQb3BwZXIuanMgaW5zaWRlIGEgZnJhbWV3b3JrIG9yIHZpZXcgbGlicmFyeSBhbmQgeW91XG4gICAqIHdhbnQgdG8gZGVsZWdhdGUgYWxsIHRoZSBET00gbWFuaXB1bGF0aW9ucyB0byBpdC5cbiAgICpcbiAgICogTm90ZSB0aGF0IGlmIHlvdSBkaXNhYmxlIHRoaXMgbW9kaWZpZXIsIHlvdSBtdXN0IG1ha2Ugc3VyZSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAgICogaGFzIGl0cyBwb3NpdGlvbiBzZXQgdG8gYGFic29sdXRlYCBiZWZvcmUgUG9wcGVyLmpzIGNhbiBkbyBpdHMgd29yayFcbiAgICpcbiAgICogSnVzdCBkaXNhYmxlIHRoaXMgbW9kaWZpZXIgYW5kIGRlZmluZSB5b3VyIG93biB0byBhY2hpZXZlIHRoZSBkZXNpcmVkIGVmZmVjdC5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGFwcGx5U3R5bGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9OTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA5MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBhcHBseVN0eWxlLFxuICAgIC8qKiBAcHJvcCB7RnVuY3Rpb259ICovXG4gICAgb25Mb2FkOiBhcHBseVN0eWxlT25Mb2FkLFxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS4xMC4wLCB0aGUgcHJvcGVydHkgbW92ZWQgdG8gYGNvbXB1dGVTdHlsZWAgbW9kaWZpZXJcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZ3B1QWNjZWxlcmF0aW9uPXRydWVcbiAgICAgKiBJZiB0cnVlLCBpdCB1c2VzIHRoZSBDU1MgM0QgdHJhbnNmb3JtYXRpb24gdG8gcG9zaXRpb24gdGhlIHBvcHBlci5cbiAgICAgKiBPdGhlcndpc2UsIGl0IHdpbGwgdXNlIHRoZSBgdG9wYCBhbmQgYGxlZnRgIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBncHVBY2NlbGVyYXRpb246IHVuZGVmaW5lZCxcbiAgfSxcbn07XG5cbi8qKlxuICogVGhlIGBkYXRhT2JqZWN0YCBpcyBhbiBvYmplY3QgY29udGFpbmluZyBhbGwgdGhlIGluZm9ybWF0aW9uIHVzZWQgYnkgUG9wcGVyLmpzLlxuICogVGhpcyBvYmplY3QgaXMgcGFzc2VkIHRvIG1vZGlmaWVycyBhbmQgdG8gdGhlIGBvbkNyZWF0ZWAgYW5kIGBvblVwZGF0ZWAgY2FsbGJhY2tzLlxuICogQG5hbWUgZGF0YU9iamVjdFxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuaW5zdGFuY2UgVGhlIFBvcHBlci5qcyBpbnN0YW5jZVxuICogQHByb3BlcnR5IHtTdHJpbmd9IGRhdGEucGxhY2VtZW50IFBsYWNlbWVudCBhcHBsaWVkIHRvIHBvcHBlclxuICogQHByb3BlcnR5IHtTdHJpbmd9IGRhdGEub3JpZ2luYWxQbGFjZW1lbnQgUGxhY2VtZW50IG9yaWdpbmFsbHkgZGVmaW5lZCBvbiBpbml0XG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IGRhdGEuZmxpcHBlZCBUcnVlIGlmIHBvcHBlciBoYXMgYmVlbiBmbGlwcGVkIGJ5IGZsaXAgbW9kaWZpZXJcbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gZGF0YS5oaWRlIFRydWUgaWYgdGhlIHJlZmVyZW5jZSBlbGVtZW50IGlzIG91dCBvZiBib3VuZGFyaWVzLCB1c2VmdWwgdG8ga25vdyB3aGVuIHRvIGhpZGUgdGhlIHBvcHBlclxuICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gZGF0YS5hcnJvd0VsZW1lbnQgTm9kZSB1c2VkIGFzIGFycm93IGJ5IGFycm93IG1vZGlmaWVyXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5zdHlsZXMgQW55IENTUyBwcm9wZXJ0eSBkZWZpbmVkIGhlcmUgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIuIEl0IGV4cGVjdHMgdGhlIEphdmFTY3JpcHQgbm9tZW5jbGF0dXJlIChlZy4gYG1hcmdpbkJvdHRvbWApXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5hcnJvd1N0eWxlcyBBbnkgQ1NTIHByb3BlcnR5IGRlZmluZWQgaGVyZSB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlciBhcnJvdy4gSXQgZXhwZWN0cyB0aGUgSmF2YVNjcmlwdCBub21lbmNsYXR1cmUgKGVnLiBgbWFyZ2luQm90dG9tYClcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmJvdW5kYXJpZXMgT2Zmc2V0cyBvZiB0aGUgcG9wcGVyIGJvdW5kYXJpZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMgVGhlIG1lYXN1cmVtZW50cyBvZiBwb3BwZXIsIHJlZmVyZW5jZSBhbmQgYXJyb3cgZWxlbWVudHNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMucG9wcGVyIGB0b3BgLCBgbGVmdGAsIGB3aWR0aGAsIGBoZWlnaHRgIHZhbHVlc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgYHRvcGAsIGBsZWZ0YCwgYHdpZHRoYCwgYGhlaWdodGAgdmFsdWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLmFycm93XSBgdG9wYCBhbmQgYGxlZnRgIG9mZnNldHMsIG9ubHkgb25lIG9mIHRoZW0gd2lsbCBiZSBkaWZmZXJlbnQgZnJvbSAwXG4gKi9cbiIsImltcG9ydCBtb2RpZmllcnMgZnJvbSAnLi4vbW9kaWZpZXJzL2luZGV4JztcblxuLyoqXG4gKiBEZWZhdWx0IG9wdGlvbnMgcHJvdmlkZWQgdG8gUG9wcGVyLmpzIGNvbnN0cnVjdG9yLjxiciAvPlxuICogVGhlc2UgY2FuIGJlIG92ZXJyaWRkZW4gdXNpbmcgdGhlIGBvcHRpb25zYCBhcmd1bWVudCBvZiBQb3BwZXIuanMuPGJyIC8+XG4gKiBUbyBvdmVycmlkZSBhbiBvcHRpb24sIHNpbXBseSBwYXNzIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lXG4gKiBzdHJ1Y3R1cmUgb2YgdGhlIGBvcHRpb25zYCBvYmplY3QsIGFzIHRoZSAzcmQgYXJndW1lbnQuIEZvciBleGFtcGxlOlxuICogYGBgXG4gKiBuZXcgUG9wcGVyKHJlZiwgcG9wLCB7XG4gKiAgIG1vZGlmaWVyczoge1xuICogICAgIHByZXZlbnRPdmVyZmxvdzogeyBlbmFibGVkOiBmYWxzZSB9XG4gKiAgIH1cbiAqIH0pXG4gKiBgYGBcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IHtcbiAgLyoqXG4gICAqIFBvcHBlcidzIHBsYWNlbWVudC5cbiAgICogQHByb3Age1BvcHBlci5wbGFjZW1lbnRzfSBwbGFjZW1lbnQ9J2JvdHRvbSdcbiAgICovXG4gIHBsYWNlbWVudDogJ2JvdHRvbScsXG5cbiAgLyoqXG4gICAqIFNldCB0aGlzIHRvIHRydWUgaWYgeW91IHdhbnQgcG9wcGVyIHRvIHBvc2l0aW9uIGl0IHNlbGYgaW4gJ2ZpeGVkJyBtb2RlXG4gICAqIEBwcm9wIHtCb29sZWFufSBwb3NpdGlvbkZpeGVkPWZhbHNlXG4gICAqL1xuICBwb3NpdGlvbkZpeGVkOiBmYWxzZSxcblxuICAvKipcbiAgICogV2hldGhlciBldmVudHMgKHJlc2l6ZSwgc2Nyb2xsKSBhcmUgaW5pdGlhbGx5IGVuYWJsZWQuXG4gICAqIEBwcm9wIHtCb29sZWFufSBldmVudHNFbmFibGVkPXRydWVcbiAgICovXG4gIGV2ZW50c0VuYWJsZWQ6IHRydWUsXG5cbiAgLyoqXG4gICAqIFNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRvIGF1dG9tYXRpY2FsbHkgcmVtb3ZlIHRoZSBwb3BwZXIgd2hlblxuICAgKiB5b3UgY2FsbCB0aGUgYGRlc3Ryb3lgIG1ldGhvZC5cbiAgICogQHByb3Age0Jvb2xlYW59IHJlbW92ZU9uRGVzdHJveT1mYWxzZVxuICAgKi9cbiAgcmVtb3ZlT25EZXN0cm95OiBmYWxzZSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgY2FsbGVkIHdoZW4gdGhlIHBvcHBlciBpcyBjcmVhdGVkLjxiciAvPlxuICAgKiBCeSBkZWZhdWx0LCBpdCBpcyBzZXQgdG8gbm8tb3AuPGJyIC8+XG4gICAqIEFjY2VzcyBQb3BwZXIuanMgaW5zdGFuY2Ugd2l0aCBgZGF0YS5pbnN0YW5jZWAuXG4gICAqIEBwcm9wIHtvbkNyZWF0ZX1cbiAgICovXG4gIG9uQ3JlYXRlOiAoKSA9PiB7fSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgY2FsbGVkIHdoZW4gdGhlIHBvcHBlciBpcyB1cGRhdGVkLiBUaGlzIGNhbGxiYWNrIGlzIG5vdCBjYWxsZWRcbiAgICogb24gdGhlIGluaXRpYWxpemF0aW9uL2NyZWF0aW9uIG9mIHRoZSBwb3BwZXIsIGJ1dCBvbmx5IG9uIHN1YnNlcXVlbnRcbiAgICogdXBkYXRlcy48YnIgLz5cbiAgICogQnkgZGVmYXVsdCwgaXQgaXMgc2V0IHRvIG5vLW9wLjxiciAvPlxuICAgKiBBY2Nlc3MgUG9wcGVyLmpzIGluc3RhbmNlIHdpdGggYGRhdGEuaW5zdGFuY2VgLlxuICAgKiBAcHJvcCB7b25VcGRhdGV9XG4gICAqL1xuICBvblVwZGF0ZTogKCkgPT4ge30sXG5cbiAgLyoqXG4gICAqIExpc3Qgb2YgbW9kaWZpZXJzIHVzZWQgdG8gbW9kaWZ5IHRoZSBvZmZzZXRzIGJlZm9yZSB0aGV5IGFyZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIuXG4gICAqIFRoZXkgcHJvdmlkZSBtb3N0IG9mIHRoZSBmdW5jdGlvbmFsaXRpZXMgb2YgUG9wcGVyLmpzLlxuICAgKiBAcHJvcCB7bW9kaWZpZXJzfVxuICAgKi9cbiAgbW9kaWZpZXJzLFxufTtcblxuLyoqXG4gKiBAY2FsbGJhY2sgb25DcmVhdGVcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIG9uVXBkYXRlXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqL1xuIiwiLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2hpZnQoZGF0YSkge1xuICBjb25zdCBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcbiAgY29uc3QgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICBjb25zdCBzaGlmdHZhcmlhdGlvbiA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xuXG4gIC8vIGlmIHNoaWZ0IHNoaWZ0dmFyaWF0aW9uIGlzIHNwZWNpZmllZCwgcnVuIHRoZSBtb2RpZmllclxuICBpZiAoc2hpZnR2YXJpYXRpb24pIHtcbiAgICBjb25zdCB7IHJlZmVyZW5jZSwgcG9wcGVyIH0gPSBkYXRhLm9mZnNldHM7XG4gICAgY29uc3QgaXNWZXJ0aWNhbCA9IFsnYm90dG9tJywgJ3RvcCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuICAgIGNvbnN0IHNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7XG4gICAgY29uc3QgbWVhc3VyZW1lbnQgPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuXG4gICAgY29uc3Qgc2hpZnRPZmZzZXRzID0ge1xuICAgICAgc3RhcnQ6IHsgW3NpZGVdOiByZWZlcmVuY2Vbc2lkZV0gfSxcbiAgICAgIGVuZDoge1xuICAgICAgICBbc2lkZV06IHJlZmVyZW5jZVtzaWRlXSArIHJlZmVyZW5jZVttZWFzdXJlbWVudF0gLSBwb3BwZXJbbWVhc3VyZW1lbnRdLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IHsgLi4ucG9wcGVyLCAuLi5zaGlmdE9mZnNldHNbc2hpZnR2YXJpYXRpb25dIH07XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cbiIsImltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSAnLi4vdXRpbHMvZ2V0T2Zmc2V0UGFyZW50JztcbmltcG9ydCBnZXRCb3VuZGFyaWVzIGZyb20gJy4uL3V0aWxzL2dldEJvdW5kYXJpZXMnO1xuaW1wb3J0IGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSBmcm9tICcuLi91dGlscy9nZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUnO1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcmV2ZW50T3ZlcmZsb3coZGF0YSwgb3B0aW9ucykge1xuICBsZXQgYm91bmRhcmllc0VsZW1lbnQgPVxuICAgIG9wdGlvbnMuYm91bmRhcmllc0VsZW1lbnQgfHwgZ2V0T2Zmc2V0UGFyZW50KGRhdGEuaW5zdGFuY2UucG9wcGVyKTtcblxuICAvLyBJZiBvZmZzZXRQYXJlbnQgaXMgdGhlIHJlZmVyZW5jZSBlbGVtZW50LCB3ZSByZWFsbHkgd2FudCB0b1xuICAvLyBnbyBvbmUgc3RlcCB1cCBhbmQgdXNlIHRoZSBuZXh0IG9mZnNldFBhcmVudCBhcyByZWZlcmVuY2UgdG9cbiAgLy8gYXZvaWQgdG8gbWFrZSB0aGlzIG1vZGlmaWVyIGNvbXBsZXRlbHkgdXNlbGVzcyBhbmQgbG9vayBsaWtlIGJyb2tlblxuICBpZiAoZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UgPT09IGJvdW5kYXJpZXNFbGVtZW50KSB7XG4gICAgYm91bmRhcmllc0VsZW1lbnQgPSBnZXRPZmZzZXRQYXJlbnQoYm91bmRhcmllc0VsZW1lbnQpO1xuICB9XG5cbiAgLy8gTk9URTogRE9NIGFjY2VzcyBoZXJlXG4gIC8vIHJlc2V0cyB0aGUgcG9wcGVyJ3MgcG9zaXRpb24gc28gdGhhdCB0aGUgZG9jdW1lbnQgc2l6ZSBjYW4gYmUgY2FsY3VsYXRlZCBleGNsdWRpbmdcbiAgLy8gdGhlIHNpemUgb2YgdGhlIHBvcHBlciBlbGVtZW50IGl0c2VsZlxuICBjb25zdCB0cmFuc2Zvcm1Qcm9wID0gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKTtcbiAgY29uc3QgcG9wcGVyU3R5bGVzID0gZGF0YS5pbnN0YW5jZS5wb3BwZXIuc3R5bGU7IC8vIGFzc2lnbm1lbnQgdG8gaGVscCBtaW5pZmljYXRpb25cbiAgY29uc3QgeyB0b3AsIGxlZnQsIFt0cmFuc2Zvcm1Qcm9wXTogdHJhbnNmb3JtIH0gPSBwb3BwZXJTdHlsZXM7XG4gIHBvcHBlclN0eWxlcy50b3AgPSAnJztcbiAgcG9wcGVyU3R5bGVzLmxlZnQgPSAnJztcbiAgcG9wcGVyU3R5bGVzW3RyYW5zZm9ybVByb3BdID0gJyc7XG5cbiAgY29uc3QgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMoXG4gICAgZGF0YS5pbnN0YW5jZS5wb3BwZXIsXG4gICAgZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UsXG4gICAgb3B0aW9ucy5wYWRkaW5nLFxuICAgIGJvdW5kYXJpZXNFbGVtZW50LFxuICAgIGRhdGEucG9zaXRpb25GaXhlZFxuICApO1xuXG4gIC8vIE5PVEU6IERPTSBhY2Nlc3MgaGVyZVxuICAvLyByZXN0b3JlcyB0aGUgb3JpZ2luYWwgc3R5bGUgcHJvcGVydGllcyBhZnRlciB0aGUgb2Zmc2V0cyBoYXZlIGJlZW4gY29tcHV0ZWRcbiAgcG9wcGVyU3R5bGVzLnRvcCA9IHRvcDtcbiAgcG9wcGVyU3R5bGVzLmxlZnQgPSBsZWZ0O1xuICBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm07XG5cbiAgb3B0aW9ucy5ib3VuZGFyaWVzID0gYm91bmRhcmllcztcblxuICBjb25zdCBvcmRlciA9IG9wdGlvbnMucHJpb3JpdHk7XG4gIGxldCBwb3BwZXIgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuXG4gIGNvbnN0IGNoZWNrID0ge1xuICAgIHByaW1hcnkocGxhY2VtZW50KSB7XG4gICAgICBsZXQgdmFsdWUgPSBwb3BwZXJbcGxhY2VtZW50XTtcbiAgICAgIGlmIChcbiAgICAgICAgcG9wcGVyW3BsYWNlbWVudF0gPCBib3VuZGFyaWVzW3BsYWNlbWVudF0gJiZcbiAgICAgICAgIW9wdGlvbnMuZXNjYXBlV2l0aFJlZmVyZW5jZVxuICAgICAgKSB7XG4gICAgICAgIHZhbHVlID0gTWF0aC5tYXgocG9wcGVyW3BsYWNlbWVudF0sIGJvdW5kYXJpZXNbcGxhY2VtZW50XSk7XG4gICAgICB9XG4gICAgICByZXR1cm4geyBbcGxhY2VtZW50XTogdmFsdWUgfTtcbiAgICB9LFxuICAgIHNlY29uZGFyeShwbGFjZW1lbnQpIHtcbiAgICAgIGNvbnN0IG1haW5TaWRlID0gcGxhY2VtZW50ID09PSAncmlnaHQnID8gJ2xlZnQnIDogJ3RvcCc7XG4gICAgICBsZXQgdmFsdWUgPSBwb3BwZXJbbWFpblNpZGVdO1xuICAgICAgaWYgKFxuICAgICAgICBwb3BwZXJbcGxhY2VtZW50XSA+IGJvdW5kYXJpZXNbcGxhY2VtZW50XSAmJlxuICAgICAgICAhb3B0aW9ucy5lc2NhcGVXaXRoUmVmZXJlbmNlXG4gICAgICApIHtcbiAgICAgICAgdmFsdWUgPSBNYXRoLm1pbihcbiAgICAgICAgICBwb3BwZXJbbWFpblNpZGVdLFxuICAgICAgICAgIGJvdW5kYXJpZXNbcGxhY2VtZW50XSAtXG4gICAgICAgICAgICAocGxhY2VtZW50ID09PSAncmlnaHQnID8gcG9wcGVyLndpZHRoIDogcG9wcGVyLmhlaWdodClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IFttYWluU2lkZV06IHZhbHVlIH07XG4gICAgfSxcbiAgfTtcblxuICBvcmRlci5mb3JFYWNoKHBsYWNlbWVudCA9PiB7XG4gICAgY29uc3Qgc2lkZSA9XG4gICAgICBbJ2xlZnQnLCAndG9wJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMSA/ICdwcmltYXJ5JyA6ICdzZWNvbmRhcnknO1xuICAgIHBvcHBlciA9IHsgLi4ucG9wcGVyLCAuLi5jaGVja1tzaWRlXShwbGFjZW1lbnQpIH07XG4gIH0pO1xuXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBwb3BwZXI7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG4iLCIvKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ga2VlcFRvZ2V0aGVyKGRhdGEpIHtcbiAgY29uc3QgeyBwb3BwZXIsIHJlZmVyZW5jZSB9ID0gZGF0YS5vZmZzZXRzO1xuICBjb25zdCBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICBjb25zdCBmbG9vciA9IE1hdGguZmxvb3I7XG4gIGNvbnN0IGlzVmVydGljYWwgPSBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuICBjb25zdCBzaWRlID0gaXNWZXJ0aWNhbCA/ICdyaWdodCcgOiAnYm90dG9tJztcbiAgY29uc3Qgb3BTaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICBjb25zdCBtZWFzdXJlbWVudCA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG5cbiAgaWYgKHBvcHBlcltzaWRlXSA8IGZsb29yKHJlZmVyZW5jZVtvcFNpZGVdKSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbb3BTaWRlXSA9XG4gICAgICBmbG9vcihyZWZlcmVuY2Vbb3BTaWRlXSkgLSBwb3BwZXJbbWVhc3VyZW1lbnRdO1xuICB9XG4gIGlmIChwb3BwZXJbb3BTaWRlXSA+IGZsb29yKHJlZmVyZW5jZVtzaWRlXSkpIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW29wU2lkZV0gPSBmbG9vcihyZWZlcmVuY2Vbc2lkZV0pO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG4iLCJpbXBvcnQgZ2V0Q2xpZW50UmVjdCBmcm9tICcuLi91dGlscy9nZXRDbGllbnRSZWN0JztcbmltcG9ydCBnZXRPdXRlclNpemVzIGZyb20gJy4uL3V0aWxzL2dldE91dGVyU2l6ZXMnO1xuaW1wb3J0IGlzTW9kaWZpZXJSZXF1aXJlZCBmcm9tICcuLi91dGlscy9pc01vZGlmaWVyUmVxdWlyZWQnO1xuaW1wb3J0IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSBmcm9tICcuLi91dGlscy9nZXRTdHlsZUNvbXB1dGVkUHJvcGVydHknO1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXJyb3coZGF0YSwgb3B0aW9ucykge1xuICAvLyBhcnJvdyBkZXBlbmRzIG9uIGtlZXBUb2dldGhlciBpbiBvcmRlciB0byB3b3JrXG4gIGlmICghaXNNb2RpZmllclJlcXVpcmVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnYXJyb3cnLCAna2VlcFRvZ2V0aGVyJykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGxldCBhcnJvd0VsZW1lbnQgPSBvcHRpb25zLmVsZW1lbnQ7XG5cbiAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIGEgc3RyaW5nLCBzdXBwb3NlIGl0J3MgYSBDU1Mgc2VsZWN0b3JcbiAgaWYgKHR5cGVvZiBhcnJvd0VsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgYXJyb3dFbGVtZW50ID0gZGF0YS5pbnN0YW5jZS5wb3BwZXIucXVlcnlTZWxlY3RvcihhcnJvd0VsZW1lbnQpO1xuXG4gICAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIG5vdCBmb3VuZCwgZG9uJ3QgcnVuIHRoZSBtb2RpZmllclxuICAgIGlmICghYXJyb3dFbGVtZW50KSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gaWYgdGhlIGFycm93RWxlbWVudCBpc24ndCBhIHF1ZXJ5IHNlbGVjdG9yIHdlIG11c3QgY2hlY2sgdGhhdCB0aGVcbiAgICAvLyBwcm92aWRlZCBET00gbm9kZSBpcyBjaGlsZCBvZiBpdHMgcG9wcGVyIG5vZGVcbiAgICBpZiAoIWRhdGEuaW5zdGFuY2UucG9wcGVyLmNvbnRhaW5zKGFycm93RWxlbWVudCkpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ1dBUk5JTkc6IGBhcnJvdy5lbGVtZW50YCBtdXN0IGJlIGNoaWxkIG9mIGl0cyBwb3BwZXIgZWxlbWVudCEnXG4gICAgICApO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgY29uc3QgeyBwb3BwZXIsIHJlZmVyZW5jZSB9ID0gZGF0YS5vZmZzZXRzO1xuICBjb25zdCBpc1ZlcnRpY2FsID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcblxuICBjb25zdCBsZW4gPSBpc1ZlcnRpY2FsID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICBjb25zdCBzaWRlQ2FwaXRhbGl6ZWQgPSBpc1ZlcnRpY2FsID8gJ1RvcCcgOiAnTGVmdCc7XG4gIGNvbnN0IHNpZGUgPSBzaWRlQ2FwaXRhbGl6ZWQudG9Mb3dlckNhc2UoKTtcbiAgY29uc3QgYWx0U2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgY29uc3Qgb3BTaWRlID0gaXNWZXJ0aWNhbCA/ICdib3R0b20nIDogJ3JpZ2h0JztcbiAgY29uc3QgYXJyb3dFbGVtZW50U2l6ZSA9IGdldE91dGVyU2l6ZXMoYXJyb3dFbGVtZW50KVtsZW5dO1xuXG4gIC8vXG4gIC8vIGV4dGVuZHMga2VlcFRvZ2V0aGVyIGJlaGF2aW9yIG1ha2luZyBzdXJlIHRoZSBwb3BwZXIgYW5kIGl0c1xuICAvLyByZWZlcmVuY2UgaGF2ZSBlbm91Z2ggcGl4ZWxzIGluIGNvbmp1bmN0aW9uXG4gIC8vXG5cbiAgLy8gdG9wL2xlZnQgc2lkZVxuICBpZiAocmVmZXJlbmNlW29wU2lkZV0gLSBhcnJvd0VsZW1lbnRTaXplIDwgcG9wcGVyW3NpZGVdKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSAtPVxuICAgICAgcG9wcGVyW3NpZGVdIC0gKHJlZmVyZW5jZVtvcFNpZGVdIC0gYXJyb3dFbGVtZW50U2l6ZSk7XG4gIH1cbiAgLy8gYm90dG9tL3JpZ2h0IHNpZGVcbiAgaWYgKHJlZmVyZW5jZVtzaWRlXSArIGFycm93RWxlbWVudFNpemUgPiBwb3BwZXJbb3BTaWRlXSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gKz1cbiAgICAgIHJlZmVyZW5jZVtzaWRlXSArIGFycm93RWxlbWVudFNpemUgLSBwb3BwZXJbb3BTaWRlXTtcbiAgfVxuICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucG9wcGVyKTtcblxuICAvLyBjb21wdXRlIGNlbnRlciBvZiB0aGUgcG9wcGVyXG4gIGNvbnN0IGNlbnRlciA9IHJlZmVyZW5jZVtzaWRlXSArIHJlZmVyZW5jZVtsZW5dIC8gMiAtIGFycm93RWxlbWVudFNpemUgLyAyO1xuXG4gIC8vIENvbXB1dGUgdGhlIHNpZGVWYWx1ZSB1c2luZyB0aGUgdXBkYXRlZCBwb3BwZXIgb2Zmc2V0c1xuICAvLyB0YWtlIHBvcHBlciBtYXJnaW4gaW4gYWNjb3VudCBiZWNhdXNlIHdlIGRvbid0IGhhdmUgdGhpcyBpbmZvIGF2YWlsYWJsZVxuICBjb25zdCBjc3MgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuICBjb25zdCBwb3BwZXJNYXJnaW5TaWRlID0gcGFyc2VGbG9hdChjc3NbYG1hcmdpbiR7c2lkZUNhcGl0YWxpemVkfWBdKTtcbiAgY29uc3QgcG9wcGVyQm9yZGVyU2lkZSA9IHBhcnNlRmxvYXQoY3NzW2Bib3JkZXIke3NpZGVDYXBpdGFsaXplZH1XaWR0aGBdKTtcbiAgbGV0IHNpZGVWYWx1ZSA9XG4gICAgY2VudGVyIC0gZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSAtIHBvcHBlck1hcmdpblNpZGUgLSBwb3BwZXJCb3JkZXJTaWRlO1xuXG4gIC8vIHByZXZlbnQgYXJyb3dFbGVtZW50IGZyb20gYmVpbmcgcGxhY2VkIG5vdCBjb250aWd1b3VzbHkgdG8gaXRzIHBvcHBlclxuICBzaWRlVmFsdWUgPSBNYXRoLm1heChNYXRoLm1pbihwb3BwZXJbbGVuXSAtIGFycm93RWxlbWVudFNpemUsIHNpZGVWYWx1ZSksIDApO1xuXG4gIGRhdGEuYXJyb3dFbGVtZW50ID0gYXJyb3dFbGVtZW50O1xuICBkYXRhLm9mZnNldHMuYXJyb3cgPSB7XG4gICAgW3NpZGVdOiBNYXRoLnJvdW5kKHNpZGVWYWx1ZSksXG4gICAgW2FsdFNpZGVdOiAnJywgLy8gbWFrZSBzdXJlIHRvIHVuc2V0IGFueSBldmVudHVhbCBhbHRTaWRlIHZhbHVlIGZyb20gdGhlIERPTSBub2RlXG4gIH07XG5cbiAgcmV0dXJuIGRhdGE7XG59XG4iLCIvKipcbiAqIEdldCB0aGUgb3Bwb3NpdGUgcGxhY2VtZW50IHZhcmlhdGlvbiBvZiB0aGUgZ2l2ZW4gb25lXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50IHZhcmlhdGlvblxuICogQHJldHVybnMge1N0cmluZ30gZmxpcHBlZCBwbGFjZW1lbnQgdmFyaWF0aW9uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE9wcG9zaXRlVmFyaWF0aW9uKHZhcmlhdGlvbikge1xuICBpZiAodmFyaWF0aW9uID09PSAnZW5kJykge1xuICAgIHJldHVybiAnc3RhcnQnO1xuICB9IGVsc2UgaWYgKHZhcmlhdGlvbiA9PT0gJ3N0YXJ0Jykge1xuICAgIHJldHVybiAnZW5kJztcbiAgfVxuICByZXR1cm4gdmFyaWF0aW9uO1xufVxuIiwiaW1wb3J0IGdldENsaWVudFJlY3QgZnJvbSAnLi4vdXRpbHMvZ2V0Q2xpZW50UmVjdCc7XG5pbXBvcnQgZ2V0T3Bwb3NpdGVQbGFjZW1lbnQgZnJvbSAnLi4vdXRpbHMvZ2V0T3Bwb3NpdGVQbGFjZW1lbnQnO1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbm5lcihkYXRhKSB7XG4gIGNvbnN0IHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuICBjb25zdCBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIGNvbnN0IHsgcG9wcGVyLCByZWZlcmVuY2UgfSA9IGRhdGEub2Zmc2V0cztcbiAgY29uc3QgaXNIb3JpeiA9IFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuXG4gIGNvbnN0IHN1YnRyYWN0TGVuZ3RoID0gWyd0b3AnLCAnbGVmdCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPT09IC0xO1xuXG4gIHBvcHBlcltpc0hvcml6ID8gJ2xlZnQnIDogJ3RvcCddID1cbiAgICByZWZlcmVuY2VbYmFzZVBsYWNlbWVudF0gLVxuICAgIChzdWJ0cmFjdExlbmd0aCA/IHBvcHBlcltpc0hvcml6ID8gJ3dpZHRoJyA6ICdoZWlnaHQnXSA6IDApO1xuXG4gIGRhdGEucGxhY2VtZW50ID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QocG9wcGVyKTtcblxuICByZXR1cm4gZGF0YTtcbn1cbiIsImltcG9ydCBpc01vZGlmaWVyUmVxdWlyZWQgZnJvbSAnLi4vdXRpbHMvaXNNb2RpZmllclJlcXVpcmVkJztcbmltcG9ydCBmaW5kIGZyb20gJy4uL3V0aWxzL2ZpbmQnO1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGlkZShkYXRhKSB7XG4gIGlmICghaXNNb2RpZmllclJlcXVpcmVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnaGlkZScsICdwcmV2ZW50T3ZlcmZsb3cnKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgY29uc3QgcmVmUmVjdCA9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2U7XG4gIGNvbnN0IGJvdW5kID0gZmluZChcbiAgICBkYXRhLmluc3RhbmNlLm1vZGlmaWVycyxcbiAgICBtb2RpZmllciA9PiBtb2RpZmllci5uYW1lID09PSAncHJldmVudE92ZXJmbG93J1xuICApLmJvdW5kYXJpZXM7XG5cbiAgaWYgKFxuICAgIHJlZlJlY3QuYm90dG9tIDwgYm91bmQudG9wIHx8XG4gICAgcmVmUmVjdC5sZWZ0ID4gYm91bmQucmlnaHQgfHxcbiAgICByZWZSZWN0LnRvcCA+IGJvdW5kLmJvdHRvbSB8fFxuICAgIHJlZlJlY3QucmlnaHQgPCBib3VuZC5sZWZ0XG4gICkge1xuICAgIC8vIEF2b2lkIHVubmVjZXNzYXJ5IERPTSBhY2Nlc3MgaWYgdmlzaWJpbGl0eSBoYXNuJ3QgY2hhbmdlZFxuICAgIGlmIChkYXRhLmhpZGUgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIGRhdGEuaGlkZSA9IHRydWU7XG4gICAgZGF0YS5hdHRyaWJ1dGVzWyd4LW91dC1vZi1ib3VuZGFyaWVzJ10gPSAnJztcbiAgfSBlbHNlIHtcbiAgICAvLyBBdm9pZCB1bm5lY2Vzc2FyeSBET00gYWNjZXNzIGlmIHZpc2liaWxpdHkgaGFzbid0IGNoYW5nZWRcbiAgICBpZiAoZGF0YS5oaWRlID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgZGF0YS5oaWRlID0gZmFsc2U7XG4gICAgZGF0YS5hdHRyaWJ1dGVzWyd4LW91dC1vZi1ib3VuZGFyaWVzJ10gPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuIiwiLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7Qm9vbGVhbn0gc2hvdWxkUm91bmQgLSBJZiB0aGUgb2Zmc2V0cyBzaG91bGQgYmUgcm91bmRlZCBhdCBhbGxcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBwb3BwZXIncyBwb3NpdGlvbiBvZmZzZXRzIHJvdW5kZWRcbiAqXG4gKiBUaGUgdGFsZSBvZiBwaXhlbC1wZXJmZWN0IHBvc2l0aW9uaW5nLiBJdCdzIHN0aWxsIG5vdCAxMDAlIHBlcmZlY3QsIGJ1dCBhc1xuICogZ29vZCBhcyBpdCBjYW4gYmUgd2l0aGluIHJlYXNvbi5cbiAqIERpc2N1c3Npb24gaGVyZTogaHR0cHM6Ly9naXRodWIuY29tL0ZlelZyYXN0YS9wb3BwZXIuanMvcHVsbC83MTVcbiAqXG4gKiBMb3cgRFBJIHNjcmVlbnMgY2F1c2UgYSBwb3BwZXIgdG8gYmUgYmx1cnJ5IGlmIG5vdCB1c2luZyBmdWxsIHBpeGVscyAoU2FmYXJpXG4gKiBhcyB3ZWxsIG9uIEhpZ2ggRFBJIHNjcmVlbnMpLlxuICpcbiAqIEZpcmVmb3ggcHJlZmVycyBubyByb3VuZGluZyBmb3IgcG9zaXRpb25pbmcgYW5kIGRvZXMgbm90IGhhdmUgYmx1cnJpbmVzcyBvblxuICogaGlnaCBEUEkgc2NyZWVucy5cbiAqXG4gKiBPbmx5IGhvcml6b250YWwgcGxhY2VtZW50IGFuZCBsZWZ0L3JpZ2h0IHZhbHVlcyBuZWVkIHRvIGJlIGNvbnNpZGVyZWQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFJvdW5kZWRPZmZzZXRzKGRhdGEsIHNob3VsZFJvdW5kKSB7XG4gIGNvbnN0IHsgcG9wcGVyLCByZWZlcmVuY2UgfSA9IGRhdGEub2Zmc2V0cztcbiAgY29uc3QgeyByb3VuZCwgZmxvb3IgfSA9IE1hdGg7XG4gIGNvbnN0IG5vUm91bmQgPSB2ID0+IHY7XG4gIFxuICBjb25zdCByZWZlcmVuY2VXaWR0aCA9IHJvdW5kKHJlZmVyZW5jZS53aWR0aCk7XG4gIGNvbnN0IHBvcHBlcldpZHRoID0gcm91bmQocG9wcGVyLndpZHRoKTtcbiAgXG4gIGNvbnN0IGlzVmVydGljYWwgPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKGRhdGEucGxhY2VtZW50KSAhPT0gLTE7XG4gIGNvbnN0IGlzVmFyaWF0aW9uID0gZGF0YS5wbGFjZW1lbnQuaW5kZXhPZignLScpICE9PSAtMTtcbiAgY29uc3Qgc2FtZVdpZHRoUGFyaXR5ID0gcmVmZXJlbmNlV2lkdGggJSAyID09PSBwb3BwZXJXaWR0aCAlIDI7XG4gIGNvbnN0IGJvdGhPZGRXaWR0aCA9IHJlZmVyZW5jZVdpZHRoICUgMiA9PT0gMSAmJiBwb3BwZXJXaWR0aCAlIDIgPT09IDE7XG5cbiAgY29uc3QgaG9yaXpvbnRhbFRvSW50ZWdlciA9ICFzaG91bGRSb3VuZFxuICAgID8gbm9Sb3VuZFxuICAgIDogaXNWZXJ0aWNhbCB8fCBpc1ZhcmlhdGlvbiB8fCBzYW1lV2lkdGhQYXJpdHlcbiAgICA/IHJvdW5kXG4gICAgOiBmbG9vcjtcbiAgY29uc3QgdmVydGljYWxUb0ludGVnZXIgPSAhc2hvdWxkUm91bmQgPyBub1JvdW5kIDogcm91bmQ7XG5cbiAgcmV0dXJuIHtcbiAgICBsZWZ0OiBob3Jpem9udGFsVG9JbnRlZ2VyKFxuICAgICAgYm90aE9kZFdpZHRoICYmICFpc1ZhcmlhdGlvbiAmJiBzaG91bGRSb3VuZFxuICAgICAgICA/IHBvcHBlci5sZWZ0IC0gMVxuICAgICAgICA6IHBvcHBlci5sZWZ0XG4gICAgKSxcbiAgICB0b3A6IHZlcnRpY2FsVG9JbnRlZ2VyKHBvcHBlci50b3ApLFxuICAgIGJvdHRvbTogdmVydGljYWxUb0ludGVnZXIocG9wcGVyLmJvdHRvbSksXG4gICAgcmlnaHQ6IGhvcml6b250YWxUb0ludGVnZXIocG9wcGVyLnJpZ2h0KSxcbiAgfTtcbn1cbiIsImltcG9ydCBzZXRTdHlsZXMgZnJvbSAnLi4vdXRpbHMvc2V0U3R5bGVzJztcbmltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gJy4uL3V0aWxzL3NldEF0dHJpYnV0ZXMnO1xuaW1wb3J0IGdldFJlZmVyZW5jZU9mZnNldHMgZnJvbSAnLi4vdXRpbHMvZ2V0UmVmZXJlbmNlT2Zmc2V0cyc7XG5pbXBvcnQgY29tcHV0ZUF1dG9QbGFjZW1lbnQgZnJvbSAnLi4vdXRpbHMvY29tcHV0ZUF1dG9QbGFjZW1lbnQnO1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEuc3R5bGVzIC0gTGlzdCBvZiBzdHlsZSBwcm9wZXJ0aWVzIC0gdmFsdWVzIHRvIGFwcGx5IHRvIHBvcHBlciBlbGVtZW50XG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YS5hdHRyaWJ1dGVzIC0gTGlzdCBvZiBhdHRyaWJ1dGUgcHJvcGVydGllcyAtIHZhbHVlcyB0byBhcHBseSB0byBwb3BwZXIgZWxlbWVudFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIHNhbWUgZGF0YSBvYmplY3RcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXBwbHlTdHlsZShkYXRhKSB7XG4gIC8vIGFueSBwcm9wZXJ0eSBwcmVzZW50IGluIGBkYXRhLnN0eWxlc2Agd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIsXG4gIC8vIGluIHRoaXMgd2F5IHdlIGNhbiBtYWtlIHRoZSAzcmQgcGFydHkgbW9kaWZpZXJzIGFkZCBjdXN0b20gc3R5bGVzIHRvIGl0XG4gIC8vIEJlIGF3YXJlLCBtb2RpZmllcnMgY291bGQgb3ZlcnJpZGUgdGhlIHByb3BlcnRpZXMgZGVmaW5lZCBpbiB0aGUgcHJldmlvdXNcbiAgLy8gbGluZXMgb2YgdGhpcyBtb2RpZmllciFcbiAgc2V0U3R5bGVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLnN0eWxlcyk7XG5cbiAgLy8gYW55IHByb3BlcnR5IHByZXNlbnQgaW4gYGRhdGEuYXR0cmlidXRlc2Agd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIsXG4gIC8vIHRoZXkgd2lsbCBiZSBzZXQgYXMgSFRNTCBhdHRyaWJ1dGVzIG9mIHRoZSBlbGVtZW50XG4gIHNldEF0dHJpYnV0ZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuYXR0cmlidXRlcyk7XG5cbiAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIGRlZmluZWQgYW5kIGFycm93U3R5bGVzIGhhcyBzb21lIHByb3BlcnRpZXNcbiAgaWYgKGRhdGEuYXJyb3dFbGVtZW50ICYmIE9iamVjdC5rZXlzKGRhdGEuYXJyb3dTdHlsZXMpLmxlbmd0aCkge1xuICAgIHNldFN0eWxlcyhkYXRhLmFycm93RWxlbWVudCwgZGF0YS5hcnJvd1N0eWxlcyk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIHgtcGxhY2VtZW50IGF0dHJpYnV0ZSBiZWZvcmUgZXZlcnl0aGluZyBlbHNlIGJlY2F1c2UgaXQgY291bGQgYmUgdXNlZFxuICogdG8gYWRkIG1hcmdpbnMgdG8gdGhlIHBvcHBlciBtYXJnaW5zIG5lZWRzIHRvIGJlIGNhbGN1bGF0ZWQgdG8gZ2V0IHRoZVxuICogY29ycmVjdCBwb3BwZXIgb2Zmc2V0cy5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIubW9kaWZpZXJzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByZWZlcmVuY2UgLSBUaGUgcmVmZXJlbmNlIGVsZW1lbnQgdXNlZCB0byBwb3NpdGlvbiB0aGUgcG9wcGVyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXIgLSBUaGUgSFRNTCBlbGVtZW50IHVzZWQgYXMgcG9wcGVyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFBvcHBlci5qcyBvcHRpb25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBseVN0eWxlT25Mb2FkKFxuICByZWZlcmVuY2UsXG4gIHBvcHBlcixcbiAgb3B0aW9ucyxcbiAgbW9kaWZpZXJPcHRpb25zLFxuICBzdGF0ZVxuKSB7XG4gIC8vIGNvbXB1dGUgcmVmZXJlbmNlIGVsZW1lbnQgb2Zmc2V0c1xuICBjb25zdCByZWZlcmVuY2VPZmZzZXRzID0gZ2V0UmVmZXJlbmNlT2Zmc2V0cyhzdGF0ZSwgcG9wcGVyLCByZWZlcmVuY2UsIG9wdGlvbnMucG9zaXRpb25GaXhlZCk7XG5cbiAgLy8gY29tcHV0ZSBhdXRvIHBsYWNlbWVudCwgc3RvcmUgcGxhY2VtZW50IGluc2lkZSB0aGUgZGF0YSBvYmplY3QsXG4gIC8vIG1vZGlmaWVycyB3aWxsIGJlIGFibGUgdG8gZWRpdCBgcGxhY2VtZW50YCBpZiBuZWVkZWRcbiAgLy8gYW5kIHJlZmVyIHRvIG9yaWdpbmFsUGxhY2VtZW50IHRvIGtub3cgdGhlIG9yaWdpbmFsIHZhbHVlXG4gIGNvbnN0IHBsYWNlbWVudCA9IGNvbXB1dGVBdXRvUGxhY2VtZW50KFxuICAgIG9wdGlvbnMucGxhY2VtZW50LFxuICAgIHJlZmVyZW5jZU9mZnNldHMsXG4gICAgcG9wcGVyLFxuICAgIHJlZmVyZW5jZSxcbiAgICBvcHRpb25zLm1vZGlmaWVycy5mbGlwLmJvdW5kYXJpZXNFbGVtZW50LFxuICAgIG9wdGlvbnMubW9kaWZpZXJzLmZsaXAucGFkZGluZ1xuICApO1xuXG4gIHBvcHBlci5zZXRBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50JywgcGxhY2VtZW50KTtcblxuICAvLyBBcHBseSBgcG9zaXRpb25gIHRvIHBvcHBlciBiZWZvcmUgYW55dGhpbmcgZWxzZSBiZWNhdXNlXG4gIC8vIHdpdGhvdXQgdGhlIHBvc2l0aW9uIGFwcGxpZWQgd2UgY2FuJ3QgZ3VhcmFudGVlIGNvcnJlY3QgY29tcHV0YXRpb25zXG4gIHNldFN0eWxlcyhwb3BwZXIsIHsgcG9zaXRpb246IG9wdGlvbnMucG9zaXRpb25GaXhlZCA/ICdmaXhlZCcgOiAnYWJzb2x1dGUnIH0pO1xuXG4gIHJldHVybiBvcHRpb25zO1xufVxuIiwiLyoqXG4gKiBTZXQgdGhlIGF0dHJpYnV0ZXMgdG8gdGhlIGdpdmVuIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50IC0gRWxlbWVudCB0byBhcHBseSB0aGUgYXR0cmlidXRlcyB0b1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHN0eWxlc1xuICogT2JqZWN0IHdpdGggYSBsaXN0IG9mIHByb3BlcnRpZXMgYW5kIHZhbHVlcyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0QXR0cmlidXRlcyhlbGVtZW50LCBhdHRyaWJ1dGVzKSB7XG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24ocHJvcCkge1xuICAgIGNvbnN0IHZhbHVlID0gYXR0cmlidXRlc1twcm9wXTtcbiAgICBpZiAodmFsdWUgIT09IGZhbHNlKSB7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShwcm9wLCBhdHRyaWJ1dGVzW3Byb3BdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUocHJvcCk7XG4gICAgfVxuICB9KTtcbn1cbiIsIi8vIFV0aWxzXG5pbXBvcnQgZGVib3VuY2UgZnJvbSAnLi91dGlscy9kZWJvdW5jZSc7XG5pbXBvcnQgaXNGdW5jdGlvbiBmcm9tICcuL3V0aWxzL2lzRnVuY3Rpb24nO1xuXG4vLyBNZXRob2RzXG5pbXBvcnQgdXBkYXRlIGZyb20gJy4vbWV0aG9kcy91cGRhdGUnO1xuaW1wb3J0IGRlc3Ryb3kgZnJvbSAnLi9tZXRob2RzL2Rlc3Ryb3knO1xuaW1wb3J0IGVuYWJsZUV2ZW50TGlzdGVuZXJzIGZyb20gJy4vbWV0aG9kcy9lbmFibGVFdmVudExpc3RlbmVycyc7XG5pbXBvcnQgZGlzYWJsZUV2ZW50TGlzdGVuZXJzIGZyb20gJy4vbWV0aG9kcy9kaXNhYmxlRXZlbnRMaXN0ZW5lcnMnO1xuaW1wb3J0IERlZmF1bHRzIGZyb20gJy4vbWV0aG9kcy9kZWZhdWx0cyc7XG5pbXBvcnQgcGxhY2VtZW50cyBmcm9tICcuL21ldGhvZHMvcGxhY2VtZW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHBlciB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IFBvcHBlci5qcyBpbnN0YW5jZS5cbiAgICogQGNsYXNzIFBvcHBlclxuICAgKiBAcGFyYW0ge0VsZW1lbnR8cmVmZXJlbmNlT2JqZWN0fSByZWZlcmVuY2UgLSBUaGUgcmVmZXJlbmNlIGVsZW1lbnQgdXNlZCB0byBwb3NpdGlvbiB0aGUgcG9wcGVyXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gcG9wcGVyIC0gVGhlIEhUTUwgLyBYTUwgZWxlbWVudCB1c2VkIGFzIHRoZSBwb3BwZXJcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBZb3VyIGN1c3RvbSBvcHRpb25zIHRvIG92ZXJyaWRlIHRoZSBvbmVzIGRlZmluZWQgaW4gW0RlZmF1bHRzXSgjZGVmYXVsdHMpXG4gICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2UgLSBUaGUgZ2VuZXJhdGVkIFBvcHBlci5qcyBpbnN0YW5jZVxuICAgKi9cbiAgY29uc3RydWN0b3IocmVmZXJlbmNlLCBwb3BwZXIsIG9wdGlvbnMgPSB7fSkge1xuICAgIC8vIG1ha2UgdXBkYXRlKCkgZGVib3VuY2VkLCBzbyB0aGF0IGl0IG9ubHkgcnVucyBhdCBtb3N0IG9uY2UtcGVyLXRpY2tcbiAgICB0aGlzLnVwZGF0ZSA9IGRlYm91bmNlKHRoaXMudXBkYXRlLmJpbmQodGhpcykpO1xuXG4gICAgLy8gd2l0aCB7fSB3ZSBjcmVhdGUgYSBuZXcgb2JqZWN0IHdpdGggdGhlIG9wdGlvbnMgaW5zaWRlIGl0XG4gICAgdGhpcy5vcHRpb25zID0geyAuLi5Qb3BwZXIuRGVmYXVsdHMsIC4uLm9wdGlvbnMgfTtcblxuICAgIC8vIGluaXQgc3RhdGVcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaXNEZXN0cm95ZWQ6IGZhbHNlLFxuICAgICAgaXNDcmVhdGVkOiBmYWxzZSxcbiAgICAgIHNjcm9sbFBhcmVudHM6IFtdLFxuICAgIH07XG5cbiAgICAvLyBnZXQgcmVmZXJlbmNlIGFuZCBwb3BwZXIgZWxlbWVudHMgKGFsbG93IGpRdWVyeSB3cmFwcGVycylcbiAgICB0aGlzLnJlZmVyZW5jZSA9IHJlZmVyZW5jZSAmJiByZWZlcmVuY2UuanF1ZXJ5ID8gcmVmZXJlbmNlWzBdIDogcmVmZXJlbmNlO1xuICAgIHRoaXMucG9wcGVyID0gcG9wcGVyICYmIHBvcHBlci5qcXVlcnkgPyBwb3BwZXJbMF0gOiBwb3BwZXI7XG5cbiAgICAvLyBEZWVwIG1lcmdlIG1vZGlmaWVycyBvcHRpb25zXG4gICAgdGhpcy5vcHRpb25zLm1vZGlmaWVycyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKHtcbiAgICAgIC4uLlBvcHBlci5EZWZhdWx0cy5tb2RpZmllcnMsXG4gICAgICAuLi5vcHRpb25zLm1vZGlmaWVycyxcbiAgICB9KS5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgdGhpcy5vcHRpb25zLm1vZGlmaWVyc1tuYW1lXSA9IHtcbiAgICAgICAgLy8gSWYgaXQncyBhIGJ1aWx0LWluIG1vZGlmaWVyLCB1c2UgaXQgYXMgYmFzZVxuICAgICAgICAuLi4oUG9wcGVyLkRlZmF1bHRzLm1vZGlmaWVyc1tuYW1lXSB8fCB7fSksXG4gICAgICAgIC8vIElmIHRoZXJlIGFyZSBjdXN0b20gb3B0aW9ucywgb3ZlcnJpZGUgYW5kIG1lcmdlIHdpdGggZGVmYXVsdCBvbmVzXG4gICAgICAgIC4uLihvcHRpb25zLm1vZGlmaWVycyA/IG9wdGlvbnMubW9kaWZpZXJzW25hbWVdIDoge30pLFxuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIFJlZmFjdG9yaW5nIG1vZGlmaWVycycgbGlzdCAoT2JqZWN0ID0+IEFycmF5KVxuICAgIHRoaXMubW9kaWZpZXJzID0gT2JqZWN0LmtleXModGhpcy5vcHRpb25zLm1vZGlmaWVycylcbiAgICAgIC5tYXAobmFtZSA9PiAoe1xuICAgICAgICBuYW1lLFxuICAgICAgICAuLi50aGlzLm9wdGlvbnMubW9kaWZpZXJzW25hbWVdLFxuICAgICAgfSkpXG4gICAgICAvLyBzb3J0IHRoZSBtb2RpZmllcnMgYnkgb3JkZXJcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBhLm9yZGVyIC0gYi5vcmRlcik7XG5cbiAgICAvLyBtb2RpZmllcnMgaGF2ZSB0aGUgYWJpbGl0eSB0byBleGVjdXRlIGFyYml0cmFyeSBjb2RlIHdoZW4gUG9wcGVyLmpzIGdldCBpbml0ZWRcbiAgICAvLyBzdWNoIGNvZGUgaXMgZXhlY3V0ZWQgaW4gdGhlIHNhbWUgb3JkZXIgb2YgaXRzIG1vZGlmaWVyXG4gICAgLy8gdGhleSBjb3VsZCBhZGQgbmV3IHByb3BlcnRpZXMgdG8gdGhlaXIgb3B0aW9ucyBjb25maWd1cmF0aW9uXG4gICAgLy8gQkUgQVdBUkU6IGRvbid0IGFkZCBvcHRpb25zIHRvIGBvcHRpb25zLm1vZGlmaWVycy5uYW1lYCBidXQgdG8gYG1vZGlmaWVyT3B0aW9uc2AhXG4gICAgdGhpcy5tb2RpZmllcnMuZm9yRWFjaChtb2RpZmllck9wdGlvbnMgPT4ge1xuICAgICAgaWYgKG1vZGlmaWVyT3B0aW9ucy5lbmFibGVkICYmIGlzRnVuY3Rpb24obW9kaWZpZXJPcHRpb25zLm9uTG9hZCkpIHtcbiAgICAgICAgbW9kaWZpZXJPcHRpb25zLm9uTG9hZChcbiAgICAgICAgICB0aGlzLnJlZmVyZW5jZSxcbiAgICAgICAgICB0aGlzLnBvcHBlcixcbiAgICAgICAgICB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgbW9kaWZpZXJPcHRpb25zLFxuICAgICAgICAgIHRoaXMuc3RhdGVcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIGZpcmUgdGhlIGZpcnN0IHVwZGF0ZSB0byBwb3NpdGlvbiB0aGUgcG9wcGVyIGluIHRoZSByaWdodCBwbGFjZVxuICAgIHRoaXMudXBkYXRlKCk7XG5cbiAgICBjb25zdCBldmVudHNFbmFibGVkID0gdGhpcy5vcHRpb25zLmV2ZW50c0VuYWJsZWQ7XG4gICAgaWYgKGV2ZW50c0VuYWJsZWQpIHtcbiAgICAgIC8vIHNldHVwIGV2ZW50IGxpc3RlbmVycywgdGhleSB3aWxsIHRha2UgY2FyZSBvZiB1cGRhdGUgdGhlIHBvc2l0aW9uIGluIHNwZWNpZmljIHNpdHVhdGlvbnNcbiAgICAgIHRoaXMuZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICB0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQgPSBldmVudHNFbmFibGVkO1xuICB9XG5cbiAgLy8gV2UgY2FuJ3QgdXNlIGNsYXNzIHByb3BlcnRpZXMgYmVjYXVzZSB0aGV5IGRvbid0IGdldCBsaXN0ZWQgaW4gdGhlXG4gIC8vIGNsYXNzIHByb3RvdHlwZSBhbmQgYnJlYWsgc3R1ZmYgbGlrZSBTaW5vbiBzdHVic1xuICB1cGRhdGUoKSB7XG4gICAgcmV0dXJuIHVwZGF0ZS5jYWxsKHRoaXMpO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgcmV0dXJuIGRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgfVxuICBlbmFibGVFdmVudExpc3RlbmVycygpIHtcbiAgICByZXR1cm4gZW5hYmxlRXZlbnRMaXN0ZW5lcnMuY2FsbCh0aGlzKTtcbiAgfVxuICBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgcmV0dXJuIGRpc2FibGVFdmVudExpc3RlbmVycy5jYWxsKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNjaGVkdWxlcyBhbiB1cGRhdGUuIEl0IHdpbGwgcnVuIG9uIHRoZSBuZXh0IFVJIHVwZGF0ZSBhdmFpbGFibGUuXG4gICAqIEBtZXRob2Qgc2NoZWR1bGVVcGRhdGVcbiAgICogQG1lbWJlcm9mIFBvcHBlclxuICAgKi9cbiAgc2NoZWR1bGVVcGRhdGUgPSAoKSA9PiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy51cGRhdGUpO1xuXG4gIC8qKlxuICAgKiBDb2xsZWN0aW9uIG9mIHV0aWxpdGllcyB1c2VmdWwgd2hlbiB3cml0aW5nIGN1c3RvbSBtb2RpZmllcnMuXG4gICAqIFN0YXJ0aW5nIGZyb20gdmVyc2lvbiAxLjcsIHRoaXMgbWV0aG9kIGlzIGF2YWlsYWJsZSBvbmx5IGlmIHlvdVxuICAgKiBpbmNsdWRlIGBwb3BwZXItdXRpbHMuanNgIGJlZm9yZSBgcG9wcGVyLmpzYC5cbiAgICpcbiAgICogKipERVBSRUNBVElPTioqOiBUaGlzIHdheSB0byBhY2Nlc3MgUG9wcGVyVXRpbHMgaXMgZGVwcmVjYXRlZFxuICAgKiBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHYyISBVc2UgdGhlIFBvcHBlclV0aWxzIG1vZHVsZSBkaXJlY3RseSBpbnN0ZWFkLlxuICAgKiBEdWUgdG8gdGhlIGhpZ2ggaW5zdGFiaWxpdHkgb2YgdGhlIG1ldGhvZHMgY29udGFpbmVkIGluIFV0aWxzLCB3ZSBjYW4ndFxuICAgKiBndWFyYW50ZWUgdGhlbSB0byBmb2xsb3cgc2VtdmVyLiBVc2UgdGhlbSBhdCB5b3VyIG93biByaXNrIVxuICAgKiBAc3RhdGljXG4gICAqIEBwcml2YXRlXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS44XG4gICAqIEBtZW1iZXIgVXRpbHNcbiAgICogQG1lbWJlcm9mIFBvcHBlclxuICAgKi9cbiAgc3RhdGljIFV0aWxzID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogZ2xvYmFsKS5Qb3BwZXJVdGlscztcblxuICBzdGF0aWMgcGxhY2VtZW50cyA9IHBsYWNlbWVudHM7XG5cbiAgc3RhdGljIERlZmF1bHRzID0gRGVmYXVsdHM7XG59XG5cbi8qKlxuICogVGhlIGByZWZlcmVuY2VPYmplY3RgIGlzIGFuIG9iamVjdCB0aGF0IHByb3ZpZGVzIGFuIGludGVyZmFjZSBjb21wYXRpYmxlIHdpdGggUG9wcGVyLmpzXG4gKiBhbmQgbGV0cyB5b3UgdXNlIGl0IGFzIHJlcGxhY2VtZW50IG9mIGEgcmVhbCBET00gbm9kZS48YnIgLz5cbiAqIFlvdSBjYW4gdXNlIHRoaXMgbWV0aG9kIHRvIHBvc2l0aW9uIGEgcG9wcGVyIHJlbGF0aXZlbHkgdG8gYSBzZXQgb2YgY29vcmRpbmF0ZXNcbiAqIGluIGNhc2UgeW91IGRvbid0IGhhdmUgYSBET00gbm9kZSB0byB1c2UgYXMgcmVmZXJlbmNlLlxuICpcbiAqIGBgYFxuICogbmV3IFBvcHBlcihyZWZlcmVuY2VPYmplY3QsIHBvcHBlck5vZGUpO1xuICogYGBgXG4gKlxuICogTkI6IFRoaXMgZmVhdHVyZSBpc24ndCBzdXBwb3J0ZWQgaW4gSW50ZXJuZXQgRXhwbG9yZXIgMTAuXG4gKiBAbmFtZSByZWZlcmVuY2VPYmplY3RcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGRhdGEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG4gKiBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHNldCBvZiBjb29yZGluYXRlcyBjb21wYXRpYmxlIHdpdGggdGhlIG5hdGl2ZSBgZ2V0Qm91bmRpbmdDbGllbnRSZWN0YCBtZXRob2QuXG4gKiBAcHJvcGVydHkge251bWJlcn0gZGF0YS5jbGllbnRXaWR0aFxuICogQW4gRVM2IGdldHRlciB0aGF0IHdpbGwgcmV0dXJuIHRoZSB3aWR0aCBvZiB0aGUgdmlydHVhbCByZWZlcmVuY2UgZWxlbWVudC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkYXRhLmNsaWVudEhlaWdodFxuICogQW4gRVM2IGdldHRlciB0aGF0IHdpbGwgcmV0dXJuIHRoZSBoZWlnaHQgb2YgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIGVsZW1lbnQuXG4gKi9cbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIi8qIVxyXG4gKiBJc290b3BlIFBBQ0tBR0VEIHYzLjAuNlxyXG4gKlxyXG4gKiBMaWNlbnNlZCBHUEx2MyBmb3Igb3BlbiBzb3VyY2UgdXNlXHJcbiAqIG9yIElzb3RvcGUgQ29tbWVyY2lhbCBMaWNlbnNlIGZvciBjb21tZXJjaWFsIHVzZVxyXG4gKlxyXG4gKiBodHRwczovL2lzb3RvcGUubWV0YWZpenp5LmNvXHJcbiAqIENvcHlyaWdodCAyMDEwLTIwMTggTWV0YWZpenp5XHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEJyaWRnZXQgbWFrZXMgalF1ZXJ5IHdpZGdldHNcclxuICogdjIuMC4xXHJcbiAqIE1JVCBsaWNlbnNlXHJcbiAqL1xyXG5cclxuLyoganNoaW50IGJyb3dzZXI6IHRydWUsIHN0cmljdDogdHJ1ZSwgdW5kZWY6IHRydWUsIHVudXNlZDogdHJ1ZSAqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xyXG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxyXG4gIC8qanNoaW50IHN0cmljdDogZmFsc2UgKi8gLyogZ2xvYmFscyBkZWZpbmUsIG1vZHVsZSwgcmVxdWlyZSAqL1xyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgICAvLyBBTURcclxuICAgIGRlZmluZSggJ2pxdWVyeS1icmlkZ2V0L2pxdWVyeS1icmlkZ2V0JyxbICdqcXVlcnknIF0sIGZ1bmN0aW9uKCBqUXVlcnkgKSB7XHJcbiAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIGpRdWVyeSApO1xyXG4gICAgfSk7XHJcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcclxuICAgIC8vIENvbW1vbkpTXHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdyxcclxuICAgICAgcmVxdWlyZSgnanF1ZXJ5JylcclxuICAgICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgICB3aW5kb3cualF1ZXJ5QnJpZGdldCA9IGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdyxcclxuICAgICAgd2luZG93LmpRdWVyeVxyXG4gICAgKTtcclxuICB9XHJcblxyXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgalF1ZXJ5ICkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4vLyAtLS0tLSB1dGlscyAtLS0tLSAvL1xyXG5cclxudmFyIGFycmF5U2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XHJcblxyXG4vLyBoZWxwZXIgZnVuY3Rpb24gZm9yIGxvZ2dpbmcgZXJyb3JzXHJcbi8vICQuZXJyb3IgYnJlYWtzIGpRdWVyeSBjaGFpbmluZ1xyXG52YXIgY29uc29sZSA9IHdpbmRvdy5jb25zb2xlO1xyXG52YXIgbG9nRXJyb3IgPSB0eXBlb2YgY29uc29sZSA9PSAndW5kZWZpbmVkJyA/IGZ1bmN0aW9uKCkge30gOlxyXG4gIGZ1bmN0aW9uKCBtZXNzYWdlICkge1xyXG4gICAgY29uc29sZS5lcnJvciggbWVzc2FnZSApO1xyXG4gIH07XHJcblxyXG4vLyAtLS0tLSBqUXVlcnlCcmlkZ2V0IC0tLS0tIC8vXHJcblxyXG5mdW5jdGlvbiBqUXVlcnlCcmlkZ2V0KCBuYW1lc3BhY2UsIFBsdWdpbkNsYXNzLCAkICkge1xyXG4gICQgPSAkIHx8IGpRdWVyeSB8fCB3aW5kb3cualF1ZXJ5O1xyXG4gIGlmICggISQgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvLyBhZGQgb3B0aW9uIG1ldGhvZCAtPiAkKCkucGx1Z2luKCdvcHRpb24nLCB7Li4ufSlcclxuICBpZiAoICFQbHVnaW5DbGFzcy5wcm90b3R5cGUub3B0aW9uICkge1xyXG4gICAgLy8gb3B0aW9uIHNldHRlclxyXG4gICAgUGx1Z2luQ2xhc3MucHJvdG90eXBlLm9wdGlvbiA9IGZ1bmN0aW9uKCBvcHRzICkge1xyXG4gICAgICAvLyBiYWlsIG91dCBpZiBub3QgYW4gb2JqZWN0XHJcbiAgICAgIGlmICggISQuaXNQbGFpbk9iamVjdCggb3B0cyApICl7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKCB0cnVlLCB0aGlzLm9wdGlvbnMsIG9wdHMgKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvLyBtYWtlIGpRdWVyeSBwbHVnaW5cclxuICAkLmZuWyBuYW1lc3BhY2UgXSA9IGZ1bmN0aW9uKCBhcmcwIC8qLCBhcmcxICovICkge1xyXG4gICAgaWYgKCB0eXBlb2YgYXJnMCA9PSAnc3RyaW5nJyApIHtcclxuICAgICAgLy8gbWV0aG9kIGNhbGwgJCgpLnBsdWdpbiggJ21ldGhvZE5hbWUnLCB7IG9wdGlvbnMgfSApXHJcbiAgICAgIC8vIHNoaWZ0IGFyZ3VtZW50cyBieSAxXHJcbiAgICAgIHZhciBhcmdzID0gYXJyYXlTbGljZS5jYWxsKCBhcmd1bWVudHMsIDEgKTtcclxuICAgICAgcmV0dXJuIG1ldGhvZENhbGwoIHRoaXMsIGFyZzAsIGFyZ3MgKTtcclxuICAgIH1cclxuICAgIC8vIGp1c3QgJCgpLnBsdWdpbih7IG9wdGlvbnMgfSlcclxuICAgIHBsYWluQ2FsbCggdGhpcywgYXJnMCApO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfTtcclxuXHJcbiAgLy8gJCgpLnBsdWdpbignbWV0aG9kTmFtZScpXHJcbiAgZnVuY3Rpb24gbWV0aG9kQ2FsbCggJGVsZW1zLCBtZXRob2ROYW1lLCBhcmdzICkge1xyXG4gICAgdmFyIHJldHVyblZhbHVlO1xyXG4gICAgdmFyIHBsdWdpbk1ldGhvZFN0ciA9ICckKCkuJyArIG5hbWVzcGFjZSArICcoXCInICsgbWV0aG9kTmFtZSArICdcIiknO1xyXG5cclxuICAgICRlbGVtcy5lYWNoKCBmdW5jdGlvbiggaSwgZWxlbSApIHtcclxuICAgICAgLy8gZ2V0IGluc3RhbmNlXHJcbiAgICAgIHZhciBpbnN0YW5jZSA9ICQuZGF0YSggZWxlbSwgbmFtZXNwYWNlICk7XHJcbiAgICAgIGlmICggIWluc3RhbmNlICkge1xyXG4gICAgICAgIGxvZ0Vycm9yKCBuYW1lc3BhY2UgKyAnIG5vdCBpbml0aWFsaXplZC4gQ2Fubm90IGNhbGwgbWV0aG9kcywgaS5lLiAnICtcclxuICAgICAgICAgIHBsdWdpbk1ldGhvZFN0ciApO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIG1ldGhvZCA9IGluc3RhbmNlWyBtZXRob2ROYW1lIF07XHJcbiAgICAgIGlmICggIW1ldGhvZCB8fCBtZXRob2ROYW1lLmNoYXJBdCgwKSA9PSAnXycgKSB7XHJcbiAgICAgICAgbG9nRXJyb3IoIHBsdWdpbk1ldGhvZFN0ciArICcgaXMgbm90IGEgdmFsaWQgbWV0aG9kJyApO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gYXBwbHkgbWV0aG9kLCBnZXQgcmV0dXJuIHZhbHVlXHJcbiAgICAgIHZhciB2YWx1ZSA9IG1ldGhvZC5hcHBseSggaW5zdGFuY2UsIGFyZ3MgKTtcclxuICAgICAgLy8gc2V0IHJldHVybiB2YWx1ZSBpZiB2YWx1ZSBpcyByZXR1cm5lZCwgdXNlIG9ubHkgZmlyc3QgdmFsdWVcclxuICAgICAgcmV0dXJuVmFsdWUgPSByZXR1cm5WYWx1ZSA9PT0gdW5kZWZpbmVkID8gdmFsdWUgOiByZXR1cm5WYWx1ZTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiByZXR1cm5WYWx1ZSAhPT0gdW5kZWZpbmVkID8gcmV0dXJuVmFsdWUgOiAkZWxlbXM7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBwbGFpbkNhbGwoICRlbGVtcywgb3B0aW9ucyApIHtcclxuICAgICRlbGVtcy5lYWNoKCBmdW5jdGlvbiggaSwgZWxlbSApIHtcclxuICAgICAgdmFyIGluc3RhbmNlID0gJC5kYXRhKCBlbGVtLCBuYW1lc3BhY2UgKTtcclxuICAgICAgaWYgKCBpbnN0YW5jZSApIHtcclxuICAgICAgICAvLyBzZXQgb3B0aW9ucyAmIGluaXRcclxuICAgICAgICBpbnN0YW5jZS5vcHRpb24oIG9wdGlvbnMgKTtcclxuICAgICAgICBpbnN0YW5jZS5faW5pdCgpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIGluaXRpYWxpemUgbmV3IGluc3RhbmNlXHJcbiAgICAgICAgaW5zdGFuY2UgPSBuZXcgUGx1Z2luQ2xhc3MoIGVsZW0sIG9wdGlvbnMgKTtcclxuICAgICAgICAkLmRhdGEoIGVsZW0sIG5hbWVzcGFjZSwgaW5zdGFuY2UgKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVKUXVlcnkoICQgKTtcclxuXHJcbn1cclxuXHJcbi8vIC0tLS0tIHVwZGF0ZUpRdWVyeSAtLS0tLSAvL1xyXG5cclxuLy8gc2V0ICQuYnJpZGdldCBmb3IgdjEgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcclxuZnVuY3Rpb24gdXBkYXRlSlF1ZXJ5KCAkICkge1xyXG4gIGlmICggISQgfHwgKCAkICYmICQuYnJpZGdldCApICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICAkLmJyaWRnZXQgPSBqUXVlcnlCcmlkZ2V0O1xyXG59XHJcblxyXG51cGRhdGVKUXVlcnkoIGpRdWVyeSB8fCB3aW5kb3cualF1ZXJ5ICk7XHJcblxyXG4vLyAtLS0tLSAgLS0tLS0gLy9cclxuXHJcbnJldHVybiBqUXVlcnlCcmlkZ2V0O1xyXG5cclxufSkpO1xyXG5cclxuLyoqXHJcbiAqIEV2RW1pdHRlciB2MS4xLjBcclxuICogTGlsJyBldmVudCBlbWl0dGVyXHJcbiAqIE1JVCBMaWNlbnNlXHJcbiAqL1xyXG5cclxuLyoganNoaW50IHVudXNlZDogdHJ1ZSwgdW5kZWY6IHRydWUsIHN0cmljdDogdHJ1ZSAqL1xyXG5cclxuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xyXG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxyXG4gIC8qIGpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qIGdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHdpbmRvdyAqL1xyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgICAvLyBBTUQgLSBSZXF1aXJlSlNcclxuICAgIGRlZmluZSggJ2V2LWVtaXR0ZXIvZXYtZW1pdHRlcicsZmFjdG9yeSApO1xyXG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XHJcbiAgICAvLyBDb21tb25KUyAtIEJyb3dzZXJpZnksIFdlYnBhY2tcclxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBCcm93c2VyIGdsb2JhbHNcclxuICAgIGdsb2JhbC5FdkVtaXR0ZXIgPSBmYWN0b3J5KCk7XHJcbiAgfVxyXG5cclxufSggdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCkge1xyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBFdkVtaXR0ZXIoKSB7fVxyXG5cclxudmFyIHByb3RvID0gRXZFbWl0dGVyLnByb3RvdHlwZTtcclxuXHJcbnByb3RvLm9uID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKSB7XHJcbiAgaWYgKCAhZXZlbnROYW1lIHx8ICFsaXN0ZW5lciApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLy8gc2V0IGV2ZW50cyBoYXNoXHJcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cyA9IHRoaXMuX2V2ZW50cyB8fCB7fTtcclxuICAvLyBzZXQgbGlzdGVuZXJzIGFycmF5XHJcbiAgdmFyIGxpc3RlbmVycyA9IGV2ZW50c1sgZXZlbnROYW1lIF0gPSBldmVudHNbIGV2ZW50TmFtZSBdIHx8IFtdO1xyXG4gIC8vIG9ubHkgYWRkIG9uY2VcclxuICBpZiAoIGxpc3RlbmVycy5pbmRleE9mKCBsaXN0ZW5lciApID09IC0xICkge1xyXG4gICAgbGlzdGVuZXJzLnB1c2goIGxpc3RlbmVyICk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbnByb3RvLm9uY2UgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBsaXN0ZW5lciApIHtcclxuICBpZiAoICFldmVudE5hbWUgfHwgIWxpc3RlbmVyICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICAvLyBhZGQgZXZlbnRcclxuICB0aGlzLm9uKCBldmVudE5hbWUsIGxpc3RlbmVyICk7XHJcbiAgLy8gc2V0IG9uY2UgZmxhZ1xyXG4gIC8vIHNldCBvbmNlRXZlbnRzIGhhc2hcclxuICB2YXIgb25jZUV2ZW50cyA9IHRoaXMuX29uY2VFdmVudHMgPSB0aGlzLl9vbmNlRXZlbnRzIHx8IHt9O1xyXG4gIC8vIHNldCBvbmNlTGlzdGVuZXJzIG9iamVjdFxyXG4gIHZhciBvbmNlTGlzdGVuZXJzID0gb25jZUV2ZW50c1sgZXZlbnROYW1lIF0gPSBvbmNlRXZlbnRzWyBldmVudE5hbWUgXSB8fCB7fTtcclxuICAvLyBzZXQgZmxhZ1xyXG4gIG9uY2VMaXN0ZW5lcnNbIGxpc3RlbmVyIF0gPSB0cnVlO1xyXG5cclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbnByb3RvLm9mZiA9IGZ1bmN0aW9uKCBldmVudE5hbWUsIGxpc3RlbmVyICkge1xyXG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHMgJiYgdGhpcy5fZXZlbnRzWyBldmVudE5hbWUgXTtcclxuICBpZiAoICFsaXN0ZW5lcnMgfHwgIWxpc3RlbmVycy5sZW5ndGggKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIHZhciBpbmRleCA9IGxpc3RlbmVycy5pbmRleE9mKCBsaXN0ZW5lciApO1xyXG4gIGlmICggaW5kZXggIT0gLTEgKSB7XHJcbiAgICBsaXN0ZW5lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG5wcm90by5lbWl0RXZlbnQgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBhcmdzICkge1xyXG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHMgJiYgdGhpcy5fZXZlbnRzWyBldmVudE5hbWUgXTtcclxuICBpZiAoICFsaXN0ZW5lcnMgfHwgIWxpc3RlbmVycy5sZW5ndGggKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8vIGNvcHkgb3ZlciB0byBhdm9pZCBpbnRlcmZlcmVuY2UgaWYgLm9mZigpIGluIGxpc3RlbmVyXHJcbiAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLnNsaWNlKDApO1xyXG4gIGFyZ3MgPSBhcmdzIHx8IFtdO1xyXG4gIC8vIG9uY2Ugc3R1ZmZcclxuICB2YXIgb25jZUxpc3RlbmVycyA9IHRoaXMuX29uY2VFdmVudHMgJiYgdGhpcy5fb25jZUV2ZW50c1sgZXZlbnROYW1lIF07XHJcblxyXG4gIGZvciAoIHZhciBpPTA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKysgKSB7XHJcbiAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV1cclxuICAgIHZhciBpc09uY2UgPSBvbmNlTGlzdGVuZXJzICYmIG9uY2VMaXN0ZW5lcnNbIGxpc3RlbmVyIF07XHJcbiAgICBpZiAoIGlzT25jZSApIHtcclxuICAgICAgLy8gcmVtb3ZlIGxpc3RlbmVyXHJcbiAgICAgIC8vIHJlbW92ZSBiZWZvcmUgdHJpZ2dlciB0byBwcmV2ZW50IHJlY3Vyc2lvblxyXG4gICAgICB0aGlzLm9mZiggZXZlbnROYW1lLCBsaXN0ZW5lciApO1xyXG4gICAgICAvLyB1bnNldCBvbmNlIGZsYWdcclxuICAgICAgZGVsZXRlIG9uY2VMaXN0ZW5lcnNbIGxpc3RlbmVyIF07XHJcbiAgICB9XHJcbiAgICAvLyB0cmlnZ2VyIGxpc3RlbmVyXHJcbiAgICBsaXN0ZW5lci5hcHBseSggdGhpcywgYXJncyApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG5wcm90by5hbGxPZmYgPSBmdW5jdGlvbigpIHtcclxuICBkZWxldGUgdGhpcy5fZXZlbnRzO1xyXG4gIGRlbGV0ZSB0aGlzLl9vbmNlRXZlbnRzO1xyXG59O1xyXG5cclxucmV0dXJuIEV2RW1pdHRlcjtcclxuXHJcbn0pKTtcclxuXHJcbi8qIVxyXG4gKiBnZXRTaXplIHYyLjAuM1xyXG4gKiBtZWFzdXJlIHNpemUgb2YgZWxlbWVudHNcclxuICogTUlUIGxpY2Vuc2VcclxuICovXHJcblxyXG4vKiBqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgc3RyaWN0OiB0cnVlLCB1bmRlZjogdHJ1ZSwgdW51c2VkOiB0cnVlICovXHJcbi8qIGdsb2JhbHMgY29uc29sZTogZmFsc2UgKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcclxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKiBnbG9iYWxzIGRlZmluZSwgbW9kdWxlICovXHJcbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAgIC8vIEFNRFxyXG4gICAgZGVmaW5lKCAnZ2V0LXNpemUvZ2V0LXNpemUnLGZhY3RvcnkgKTtcclxuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xyXG4gICAgLy8gQ29tbW9uSlNcclxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBicm93c2VyIGdsb2JhbFxyXG4gICAgd2luZG93LmdldFNpemUgPSBmYWN0b3J5KCk7XHJcbiAgfVxyXG5cclxufSkoIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSgpIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gaGVscGVycyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuLy8gZ2V0IGEgbnVtYmVyIGZyb20gYSBzdHJpbmcsIG5vdCBhIHBlcmNlbnRhZ2VcclxuZnVuY3Rpb24gZ2V0U3R5bGVTaXplKCB2YWx1ZSApIHtcclxuICB2YXIgbnVtID0gcGFyc2VGbG9hdCggdmFsdWUgKTtcclxuICAvLyBub3QgYSBwZXJjZW50IGxpa2UgJzEwMCUnLCBhbmQgYSBudW1iZXJcclxuICB2YXIgaXNWYWxpZCA9IHZhbHVlLmluZGV4T2YoJyUnKSA9PSAtMSAmJiAhaXNOYU4oIG51bSApO1xyXG4gIHJldHVybiBpc1ZhbGlkICYmIG51bTtcclxufVxyXG5cclxuZnVuY3Rpb24gbm9vcCgpIHt9XHJcblxyXG52YXIgbG9nRXJyb3IgPSB0eXBlb2YgY29uc29sZSA9PSAndW5kZWZpbmVkJyA/IG5vb3AgOlxyXG4gIGZ1bmN0aW9uKCBtZXNzYWdlICkge1xyXG4gICAgY29uc29sZS5lcnJvciggbWVzc2FnZSApO1xyXG4gIH07XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBtZWFzdXJlbWVudHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbnZhciBtZWFzdXJlbWVudHMgPSBbXHJcbiAgJ3BhZGRpbmdMZWZ0JyxcclxuICAncGFkZGluZ1JpZ2h0JyxcclxuICAncGFkZGluZ1RvcCcsXHJcbiAgJ3BhZGRpbmdCb3R0b20nLFxyXG4gICdtYXJnaW5MZWZ0JyxcclxuICAnbWFyZ2luUmlnaHQnLFxyXG4gICdtYXJnaW5Ub3AnLFxyXG4gICdtYXJnaW5Cb3R0b20nLFxyXG4gICdib3JkZXJMZWZ0V2lkdGgnLFxyXG4gICdib3JkZXJSaWdodFdpZHRoJyxcclxuICAnYm9yZGVyVG9wV2lkdGgnLFxyXG4gICdib3JkZXJCb3R0b21XaWR0aCdcclxuXTtcclxuXHJcbnZhciBtZWFzdXJlbWVudHNMZW5ndGggPSBtZWFzdXJlbWVudHMubGVuZ3RoO1xyXG5cclxuZnVuY3Rpb24gZ2V0WmVyb1NpemUoKSB7XHJcbiAgdmFyIHNpemUgPSB7XHJcbiAgICB3aWR0aDogMCxcclxuICAgIGhlaWdodDogMCxcclxuICAgIGlubmVyV2lkdGg6IDAsXHJcbiAgICBpbm5lckhlaWdodDogMCxcclxuICAgIG91dGVyV2lkdGg6IDAsXHJcbiAgICBvdXRlckhlaWdodDogMFxyXG4gIH07XHJcbiAgZm9yICggdmFyIGk9MDsgaSA8IG1lYXN1cmVtZW50c0xlbmd0aDsgaSsrICkge1xyXG4gICAgdmFyIG1lYXN1cmVtZW50ID0gbWVhc3VyZW1lbnRzW2ldO1xyXG4gICAgc2l6ZVsgbWVhc3VyZW1lbnQgXSA9IDA7XHJcbiAgfVxyXG4gIHJldHVybiBzaXplO1xyXG59XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBnZXRTdHlsZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuLyoqXHJcbiAqIGdldFN0eWxlLCBnZXQgc3R5bGUgb2YgZWxlbWVudCwgY2hlY2sgZm9yIEZpcmVmb3ggYnVnXHJcbiAqIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTU0ODM5N1xyXG4gKi9cclxuZnVuY3Rpb24gZ2V0U3R5bGUoIGVsZW0gKSB7XHJcbiAgdmFyIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xyXG4gIGlmICggIXN0eWxlICkge1xyXG4gICAgbG9nRXJyb3IoICdTdHlsZSByZXR1cm5lZCAnICsgc3R5bGUgK1xyXG4gICAgICAnLiBBcmUgeW91IHJ1bm5pbmcgdGhpcyBjb2RlIGluIGEgaGlkZGVuIGlmcmFtZSBvbiBGaXJlZm94PyAnICtcclxuICAgICAgJ1NlZSBodHRwczovL2JpdC5seS9nZXRzaXplYnVnMScgKTtcclxuICB9XHJcbiAgcmV0dXJuIHN0eWxlO1xyXG59XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBzZXR1cCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxudmFyIGlzU2V0dXAgPSBmYWxzZTtcclxuXHJcbnZhciBpc0JveFNpemVPdXRlcjtcclxuXHJcbi8qKlxyXG4gKiBzZXR1cFxyXG4gKiBjaGVjayBpc0JveFNpemVyT3V0ZXJcclxuICogZG8gb24gZmlyc3QgZ2V0U2l6ZSgpIHJhdGhlciB0aGFuIG9uIHBhZ2UgbG9hZCBmb3IgRmlyZWZveCBidWdcclxuICovXHJcbmZ1bmN0aW9uIHNldHVwKCkge1xyXG4gIC8vIHNldHVwIG9uY2VcclxuICBpZiAoIGlzU2V0dXAgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIGlzU2V0dXAgPSB0cnVlO1xyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBib3ggc2l6aW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4gIC8qKlxyXG4gICAqIENocm9tZSAmIFNhZmFyaSBtZWFzdXJlIHRoZSBvdXRlci13aWR0aCBvbiBzdHlsZS53aWR0aCBvbiBib3JkZXItYm94IGVsZW1zXHJcbiAgICogSUUxMSAmIEZpcmVmb3g8MjkgbWVhc3VyZXMgdGhlIGlubmVyLXdpZHRoXHJcbiAgICovXHJcbiAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gIGRpdi5zdHlsZS53aWR0aCA9ICcyMDBweCc7XHJcbiAgZGl2LnN0eWxlLnBhZGRpbmcgPSAnMXB4IDJweCAzcHggNHB4JztcclxuICBkaXYuc3R5bGUuYm9yZGVyU3R5bGUgPSAnc29saWQnO1xyXG4gIGRpdi5zdHlsZS5ib3JkZXJXaWR0aCA9ICcxcHggMnB4IDNweCA0cHgnO1xyXG4gIGRpdi5zdHlsZS5ib3hTaXppbmcgPSAnYm9yZGVyLWJveCc7XHJcblxyXG4gIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcbiAgYm9keS5hcHBlbmRDaGlsZCggZGl2ICk7XHJcbiAgdmFyIHN0eWxlID0gZ2V0U3R5bGUoIGRpdiApO1xyXG4gIC8vIHJvdW5kIHZhbHVlIGZvciBicm93c2VyIHpvb20uIGRlc2FuZHJvL21hc29ucnkjOTI4XHJcbiAgaXNCb3hTaXplT3V0ZXIgPSBNYXRoLnJvdW5kKCBnZXRTdHlsZVNpemUoIHN0eWxlLndpZHRoICkgKSA9PSAyMDA7XHJcbiAgZ2V0U2l6ZS5pc0JveFNpemVPdXRlciA9IGlzQm94U2l6ZU91dGVyO1xyXG5cclxuICBib2R5LnJlbW92ZUNoaWxkKCBkaXYgKTtcclxufVxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZ2V0U2l6ZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuZnVuY3Rpb24gZ2V0U2l6ZSggZWxlbSApIHtcclxuICBzZXR1cCgpO1xyXG5cclxuICAvLyB1c2UgcXVlcnlTZWxldG9yIGlmIGVsZW0gaXMgc3RyaW5nXHJcbiAgaWYgKCB0eXBlb2YgZWxlbSA9PSAnc3RyaW5nJyApIHtcclxuICAgIGVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBlbGVtICk7XHJcbiAgfVxyXG5cclxuICAvLyBkbyBub3QgcHJvY2VlZCBvbiBub24tb2JqZWN0c1xyXG4gIGlmICggIWVsZW0gfHwgdHlwZW9mIGVsZW0gIT0gJ29iamVjdCcgfHwgIWVsZW0ubm9kZVR5cGUgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICB2YXIgc3R5bGUgPSBnZXRTdHlsZSggZWxlbSApO1xyXG5cclxuICAvLyBpZiBoaWRkZW4sIGV2ZXJ5dGhpbmcgaXMgMFxyXG4gIGlmICggc3R5bGUuZGlzcGxheSA9PSAnbm9uZScgKSB7XHJcbiAgICByZXR1cm4gZ2V0WmVyb1NpemUoKTtcclxuICB9XHJcblxyXG4gIHZhciBzaXplID0ge307XHJcbiAgc2l6ZS53aWR0aCA9IGVsZW0ub2Zmc2V0V2lkdGg7XHJcbiAgc2l6ZS5oZWlnaHQgPSBlbGVtLm9mZnNldEhlaWdodDtcclxuXHJcbiAgdmFyIGlzQm9yZGVyQm94ID0gc2l6ZS5pc0JvcmRlckJveCA9IHN0eWxlLmJveFNpemluZyA9PSAnYm9yZGVyLWJveCc7XHJcblxyXG4gIC8vIGdldCBhbGwgbWVhc3VyZW1lbnRzXHJcbiAgZm9yICggdmFyIGk9MDsgaSA8IG1lYXN1cmVtZW50c0xlbmd0aDsgaSsrICkge1xyXG4gICAgdmFyIG1lYXN1cmVtZW50ID0gbWVhc3VyZW1lbnRzW2ldO1xyXG4gICAgdmFyIHZhbHVlID0gc3R5bGVbIG1lYXN1cmVtZW50IF07XHJcbiAgICB2YXIgbnVtID0gcGFyc2VGbG9hdCggdmFsdWUgKTtcclxuICAgIC8vIGFueSAnYXV0bycsICdtZWRpdW0nIHZhbHVlIHdpbGwgYmUgMFxyXG4gICAgc2l6ZVsgbWVhc3VyZW1lbnQgXSA9ICFpc05hTiggbnVtICkgPyBudW0gOiAwO1xyXG4gIH1cclxuXHJcbiAgdmFyIHBhZGRpbmdXaWR0aCA9IHNpemUucGFkZGluZ0xlZnQgKyBzaXplLnBhZGRpbmdSaWdodDtcclxuICB2YXIgcGFkZGluZ0hlaWdodCA9IHNpemUucGFkZGluZ1RvcCArIHNpemUucGFkZGluZ0JvdHRvbTtcclxuICB2YXIgbWFyZ2luV2lkdGggPSBzaXplLm1hcmdpbkxlZnQgKyBzaXplLm1hcmdpblJpZ2h0O1xyXG4gIHZhciBtYXJnaW5IZWlnaHQgPSBzaXplLm1hcmdpblRvcCArIHNpemUubWFyZ2luQm90dG9tO1xyXG4gIHZhciBib3JkZXJXaWR0aCA9IHNpemUuYm9yZGVyTGVmdFdpZHRoICsgc2l6ZS5ib3JkZXJSaWdodFdpZHRoO1xyXG4gIHZhciBib3JkZXJIZWlnaHQgPSBzaXplLmJvcmRlclRvcFdpZHRoICsgc2l6ZS5ib3JkZXJCb3R0b21XaWR0aDtcclxuXHJcbiAgdmFyIGlzQm9yZGVyQm94U2l6ZU91dGVyID0gaXNCb3JkZXJCb3ggJiYgaXNCb3hTaXplT3V0ZXI7XHJcblxyXG4gIC8vIG92ZXJ3cml0ZSB3aWR0aCBhbmQgaGVpZ2h0IGlmIHdlIGNhbiBnZXQgaXQgZnJvbSBzdHlsZVxyXG4gIHZhciBzdHlsZVdpZHRoID0gZ2V0U3R5bGVTaXplKCBzdHlsZS53aWR0aCApO1xyXG4gIGlmICggc3R5bGVXaWR0aCAhPT0gZmFsc2UgKSB7XHJcbiAgICBzaXplLndpZHRoID0gc3R5bGVXaWR0aCArXHJcbiAgICAgIC8vIGFkZCBwYWRkaW5nIGFuZCBib3JkZXIgdW5sZXNzIGl0J3MgYWxyZWFkeSBpbmNsdWRpbmcgaXRcclxuICAgICAgKCBpc0JvcmRlckJveFNpemVPdXRlciA/IDAgOiBwYWRkaW5nV2lkdGggKyBib3JkZXJXaWR0aCApO1xyXG4gIH1cclxuXHJcbiAgdmFyIHN0eWxlSGVpZ2h0ID0gZ2V0U3R5bGVTaXplKCBzdHlsZS5oZWlnaHQgKTtcclxuICBpZiAoIHN0eWxlSGVpZ2h0ICE9PSBmYWxzZSApIHtcclxuICAgIHNpemUuaGVpZ2h0ID0gc3R5bGVIZWlnaHQgK1xyXG4gICAgICAvLyBhZGQgcGFkZGluZyBhbmQgYm9yZGVyIHVubGVzcyBpdCdzIGFscmVhZHkgaW5jbHVkaW5nIGl0XHJcbiAgICAgICggaXNCb3JkZXJCb3hTaXplT3V0ZXIgPyAwIDogcGFkZGluZ0hlaWdodCArIGJvcmRlckhlaWdodCApO1xyXG4gIH1cclxuXHJcbiAgc2l6ZS5pbm5lcldpZHRoID0gc2l6ZS53aWR0aCAtICggcGFkZGluZ1dpZHRoICsgYm9yZGVyV2lkdGggKTtcclxuICBzaXplLmlubmVySGVpZ2h0ID0gc2l6ZS5oZWlnaHQgLSAoIHBhZGRpbmdIZWlnaHQgKyBib3JkZXJIZWlnaHQgKTtcclxuXHJcbiAgc2l6ZS5vdXRlcldpZHRoID0gc2l6ZS53aWR0aCArIG1hcmdpbldpZHRoO1xyXG4gIHNpemUub3V0ZXJIZWlnaHQgPSBzaXplLmhlaWdodCArIG1hcmdpbkhlaWdodDtcclxuXHJcbiAgcmV0dXJuIHNpemU7XHJcbn1cclxuXHJcbnJldHVybiBnZXRTaXplO1xyXG5cclxufSk7XHJcblxyXG4vKipcclxuICogbWF0Y2hlc1NlbGVjdG9yIHYyLjAuMlxyXG4gKiBtYXRjaGVzU2VsZWN0b3IoIGVsZW1lbnQsICcuc2VsZWN0b3InIClcclxuICogTUlUIGxpY2Vuc2VcclxuICovXHJcblxyXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCBzdHJpY3Q6IHRydWUsIHVuZGVmOiB0cnVlLCB1bnVzZWQ6IHRydWUgKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcclxuICAvKmdsb2JhbCBkZWZpbmU6IGZhbHNlLCBtb2R1bGU6IGZhbHNlICovXHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgICAvLyBBTURcclxuICAgIGRlZmluZSggJ2Rlc2FuZHJvLW1hdGNoZXMtc2VsZWN0b3IvbWF0Y2hlcy1zZWxlY3RvcicsZmFjdG9yeSApO1xyXG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XHJcbiAgICAvLyBDb21tb25KU1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgICB3aW5kb3cubWF0Y2hlc1NlbGVjdG9yID0gZmFjdG9yeSgpO1xyXG4gIH1cclxuXHJcbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSgpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIHZhciBtYXRjaGVzTWV0aG9kID0gKCBmdW5jdGlvbigpIHtcclxuICAgIHZhciBFbGVtUHJvdG8gPSB3aW5kb3cuRWxlbWVudC5wcm90b3R5cGU7XHJcbiAgICAvLyBjaGVjayBmb3IgdGhlIHN0YW5kYXJkIG1ldGhvZCBuYW1lIGZpcnN0XHJcbiAgICBpZiAoIEVsZW1Qcm90by5tYXRjaGVzICkge1xyXG4gICAgICByZXR1cm4gJ21hdGNoZXMnO1xyXG4gICAgfVxyXG4gICAgLy8gY2hlY2sgdW4tcHJlZml4ZWRcclxuICAgIGlmICggRWxlbVByb3RvLm1hdGNoZXNTZWxlY3RvciApIHtcclxuICAgICAgcmV0dXJuICdtYXRjaGVzU2VsZWN0b3InO1xyXG4gICAgfVxyXG4gICAgLy8gY2hlY2sgdmVuZG9yIHByZWZpeGVzXHJcbiAgICB2YXIgcHJlZml4ZXMgPSBbICd3ZWJraXQnLCAnbW96JywgJ21zJywgJ28nIF07XHJcblxyXG4gICAgZm9yICggdmFyIGk9MDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrICkge1xyXG4gICAgICB2YXIgcHJlZml4ID0gcHJlZml4ZXNbaV07XHJcbiAgICAgIHZhciBtZXRob2QgPSBwcmVmaXggKyAnTWF0Y2hlc1NlbGVjdG9yJztcclxuICAgICAgaWYgKCBFbGVtUHJvdG9bIG1ldGhvZCBdICkge1xyXG4gICAgICAgIHJldHVybiBtZXRob2Q7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KSgpO1xyXG5cclxuICByZXR1cm4gZnVuY3Rpb24gbWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBzZWxlY3RvciApIHtcclxuICAgIHJldHVybiBlbGVtWyBtYXRjaGVzTWV0aG9kIF0oIHNlbGVjdG9yICk7XHJcbiAgfTtcclxuXHJcbn0pKTtcclxuXHJcbi8qKlxyXG4gKiBGaXp6eSBVSSB1dGlscyB2Mi4wLjdcclxuICogTUlUIGxpY2Vuc2VcclxuICovXHJcblxyXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCB1bmRlZjogdHJ1ZSwgdW51c2VkOiB0cnVlLCBzdHJpY3Q6IHRydWUgKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcclxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cclxuICAvKmpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qZ2xvYmFscyBkZWZpbmUsIG1vZHVsZSwgcmVxdWlyZSAqL1xyXG5cclxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG4gICAgLy8gQU1EXHJcbiAgICBkZWZpbmUoICdmaXp6eS11aS11dGlscy91dGlscycsW1xyXG4gICAgICAnZGVzYW5kcm8tbWF0Y2hlcy1zZWxlY3Rvci9tYXRjaGVzLXNlbGVjdG9yJ1xyXG4gICAgXSwgZnVuY3Rpb24oIG1hdGNoZXNTZWxlY3RvciApIHtcclxuICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgbWF0Y2hlc1NlbGVjdG9yICk7XHJcbiAgICB9KTtcclxuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xyXG4gICAgLy8gQ29tbW9uSlNcclxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcclxuICAgICAgd2luZG93LFxyXG4gICAgICByZXF1aXJlKCdkZXNhbmRyby1tYXRjaGVzLXNlbGVjdG9yJylcclxuICAgICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgICB3aW5kb3cuZml6enlVSVV0aWxzID0gZmFjdG9yeShcclxuICAgICAgd2luZG93LFxyXG4gICAgICB3aW5kb3cubWF0Y2hlc1NlbGVjdG9yXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBtYXRjaGVzU2VsZWN0b3IgKSB7XHJcblxyXG5cclxuXHJcbnZhciB1dGlscyA9IHt9O1xyXG5cclxuLy8gLS0tLS0gZXh0ZW5kIC0tLS0tIC8vXHJcblxyXG4vLyBleHRlbmRzIG9iamVjdHNcclxudXRpbHMuZXh0ZW5kID0gZnVuY3Rpb24oIGEsIGIgKSB7XHJcbiAgZm9yICggdmFyIHByb3AgaW4gYiApIHtcclxuICAgIGFbIHByb3AgXSA9IGJbIHByb3AgXTtcclxuICB9XHJcbiAgcmV0dXJuIGE7XHJcbn07XHJcblxyXG4vLyAtLS0tLSBtb2R1bG8gLS0tLS0gLy9cclxuXHJcbnV0aWxzLm1vZHVsbyA9IGZ1bmN0aW9uKCBudW0sIGRpdiApIHtcclxuICByZXR1cm4gKCAoIG51bSAlIGRpdiApICsgZGl2ICkgJSBkaXY7XHJcbn07XHJcblxyXG4vLyAtLS0tLSBtYWtlQXJyYXkgLS0tLS0gLy9cclxuXHJcbnZhciBhcnJheVNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xyXG5cclxuLy8gdHVybiBlbGVtZW50IG9yIG5vZGVMaXN0IGludG8gYW4gYXJyYXlcclxudXRpbHMubWFrZUFycmF5ID0gZnVuY3Rpb24oIG9iaiApIHtcclxuICBpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkge1xyXG4gICAgLy8gdXNlIG9iamVjdCBpZiBhbHJlYWR5IGFuIGFycmF5XHJcbiAgICByZXR1cm4gb2JqO1xyXG4gIH1cclxuICAvLyByZXR1cm4gZW1wdHkgYXJyYXkgaWYgdW5kZWZpbmVkIG9yIG51bGwuICM2XHJcbiAgaWYgKCBvYmogPT09IG51bGwgfHwgb2JqID09PSB1bmRlZmluZWQgKSB7XHJcbiAgICByZXR1cm4gW107XHJcbiAgfVxyXG5cclxuICB2YXIgaXNBcnJheUxpa2UgPSB0eXBlb2Ygb2JqID09ICdvYmplY3QnICYmIHR5cGVvZiBvYmoubGVuZ3RoID09ICdudW1iZXInO1xyXG4gIGlmICggaXNBcnJheUxpa2UgKSB7XHJcbiAgICAvLyBjb252ZXJ0IG5vZGVMaXN0IHRvIGFycmF5XHJcbiAgICByZXR1cm4gYXJyYXlTbGljZS5jYWxsKCBvYmogKTtcclxuICB9XHJcblxyXG4gIC8vIGFycmF5IG9mIHNpbmdsZSBpbmRleFxyXG4gIHJldHVybiBbIG9iaiBdO1xyXG59O1xyXG5cclxuLy8gLS0tLS0gcmVtb3ZlRnJvbSAtLS0tLSAvL1xyXG5cclxudXRpbHMucmVtb3ZlRnJvbSA9IGZ1bmN0aW9uKCBhcnksIG9iaiApIHtcclxuICB2YXIgaW5kZXggPSBhcnkuaW5kZXhPZiggb2JqICk7XHJcbiAgaWYgKCBpbmRleCAhPSAtMSApIHtcclxuICAgIGFyeS5zcGxpY2UoIGluZGV4LCAxICk7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gLS0tLS0gZ2V0UGFyZW50IC0tLS0tIC8vXHJcblxyXG51dGlscy5nZXRQYXJlbnQgPSBmdW5jdGlvbiggZWxlbSwgc2VsZWN0b3IgKSB7XHJcbiAgd2hpbGUgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbSAhPSBkb2N1bWVudC5ib2R5ICkge1xyXG4gICAgZWxlbSA9IGVsZW0ucGFyZW50Tm9kZTtcclxuICAgIGlmICggbWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBzZWxlY3RvciApICkge1xyXG4gICAgICByZXR1cm4gZWxlbTtcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG4vLyAtLS0tLSBnZXRRdWVyeUVsZW1lbnQgLS0tLS0gLy9cclxuXHJcbi8vIHVzZSBlbGVtZW50IGFzIHNlbGVjdG9yIHN0cmluZ1xyXG51dGlscy5nZXRRdWVyeUVsZW1lbnQgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuICBpZiAoIHR5cGVvZiBlbGVtID09ICdzdHJpbmcnICkge1xyXG4gICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIGVsZW0gKTtcclxuICB9XHJcbiAgcmV0dXJuIGVsZW07XHJcbn07XHJcblxyXG4vLyAtLS0tLSBoYW5kbGVFdmVudCAtLS0tLSAvL1xyXG5cclxuLy8gZW5hYmxlIC5vbnR5cGUgdG8gdHJpZ2dlciBmcm9tIC5hZGRFdmVudExpc3RlbmVyKCBlbGVtLCAndHlwZScgKVxyXG51dGlscy5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uKCBldmVudCApIHtcclxuICB2YXIgbWV0aG9kID0gJ29uJyArIGV2ZW50LnR5cGU7XHJcbiAgaWYgKCB0aGlzWyBtZXRob2QgXSApIHtcclxuICAgIHRoaXNbIG1ldGhvZCBdKCBldmVudCApO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIC0tLS0tIGZpbHRlckZpbmRFbGVtZW50cyAtLS0tLSAvL1xyXG5cclxudXRpbHMuZmlsdGVyRmluZEVsZW1lbnRzID0gZnVuY3Rpb24oIGVsZW1zLCBzZWxlY3RvciApIHtcclxuICAvLyBtYWtlIGFycmF5IG9mIGVsZW1zXHJcbiAgZWxlbXMgPSB1dGlscy5tYWtlQXJyYXkoIGVsZW1zICk7XHJcbiAgdmFyIGZmRWxlbXMgPSBbXTtcclxuXHJcbiAgZWxlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgICAvLyBjaGVjayB0aGF0IGVsZW0gaXMgYW4gYWN0dWFsIGVsZW1lbnRcclxuICAgIGlmICggISggZWxlbSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICkgKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIGFkZCBlbGVtIGlmIG5vIHNlbGVjdG9yXHJcbiAgICBpZiAoICFzZWxlY3RvciApIHtcclxuICAgICAgZmZFbGVtcy5wdXNoKCBlbGVtICk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIGZpbHRlciAmIGZpbmQgaXRlbXMgaWYgd2UgaGF2ZSBhIHNlbGVjdG9yXHJcbiAgICAvLyBmaWx0ZXJcclxuICAgIGlmICggbWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBzZWxlY3RvciApICkge1xyXG4gICAgICBmZkVsZW1zLnB1c2goIGVsZW0gKTtcclxuICAgIH1cclxuICAgIC8vIGZpbmQgY2hpbGRyZW5cclxuICAgIHZhciBjaGlsZEVsZW1zID0gZWxlbS5xdWVyeVNlbGVjdG9yQWxsKCBzZWxlY3RvciApO1xyXG4gICAgLy8gY29uY2F0IGNoaWxkRWxlbXMgdG8gZmlsdGVyRm91bmQgYXJyYXlcclxuICAgIGZvciAoIHZhciBpPTA7IGkgPCBjaGlsZEVsZW1zLmxlbmd0aDsgaSsrICkge1xyXG4gICAgICBmZkVsZW1zLnB1c2goIGNoaWxkRWxlbXNbaV0gKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIGZmRWxlbXM7XHJcbn07XHJcblxyXG4vLyAtLS0tLSBkZWJvdW5jZU1ldGhvZCAtLS0tLSAvL1xyXG5cclxudXRpbHMuZGVib3VuY2VNZXRob2QgPSBmdW5jdGlvbiggX2NsYXNzLCBtZXRob2ROYW1lLCB0aHJlc2hvbGQgKSB7XHJcbiAgdGhyZXNob2xkID0gdGhyZXNob2xkIHx8IDEwMDtcclxuICAvLyBvcmlnaW5hbCBtZXRob2RcclxuICB2YXIgbWV0aG9kID0gX2NsYXNzLnByb3RvdHlwZVsgbWV0aG9kTmFtZSBdO1xyXG4gIHZhciB0aW1lb3V0TmFtZSA9IG1ldGhvZE5hbWUgKyAnVGltZW91dCc7XHJcblxyXG4gIF9jbGFzcy5wcm90b3R5cGVbIG1ldGhvZE5hbWUgXSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHRpbWVvdXQgPSB0aGlzWyB0aW1lb3V0TmFtZSBdO1xyXG4gICAgY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XHJcblxyXG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgdGhpc1sgdGltZW91dE5hbWUgXSA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xyXG4gICAgICBtZXRob2QuYXBwbHkoIF90aGlzLCBhcmdzICk7XHJcbiAgICAgIGRlbGV0ZSBfdGhpc1sgdGltZW91dE5hbWUgXTtcclxuICAgIH0sIHRocmVzaG9sZCApO1xyXG4gIH07XHJcbn07XHJcblxyXG4vLyAtLS0tLSBkb2NSZWFkeSAtLS0tLSAvL1xyXG5cclxudXRpbHMuZG9jUmVhZHkgPSBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XHJcbiAgdmFyIHJlYWR5U3RhdGUgPSBkb2N1bWVudC5yZWFkeVN0YXRlO1xyXG4gIGlmICggcmVhZHlTdGF0ZSA9PSAnY29tcGxldGUnIHx8IHJlYWR5U3RhdGUgPT0gJ2ludGVyYWN0aXZlJyApIHtcclxuICAgIC8vIGRvIGFzeW5jIHRvIGFsbG93IGZvciBvdGhlciBzY3JpcHRzIHRvIHJ1bi4gbWV0YWZpenp5L2ZsaWNraXR5IzQ0MVxyXG4gICAgc2V0VGltZW91dCggY2FsbGJhY2sgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ0RPTUNvbnRlbnRMb2FkZWQnLCBjYWxsYmFjayApO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIC0tLS0tIGh0bWxJbml0IC0tLS0tIC8vXHJcblxyXG4vLyBodHRwOi8vamFtZXNyb2JlcnRzLm5hbWUvYmxvZy8yMDEwLzAyLzIyL3N0cmluZy1mdW5jdGlvbnMtZm9yLWphdmFzY3JpcHQtdHJpbS10by1jYW1lbC1jYXNlLXRvLWRhc2hlZC1hbmQtdG8tdW5kZXJzY29yZS9cclxudXRpbHMudG9EYXNoZWQgPSBmdW5jdGlvbiggc3RyICkge1xyXG4gIHJldHVybiBzdHIucmVwbGFjZSggLyguKShbQS1aXSkvZywgZnVuY3Rpb24oIG1hdGNoLCAkMSwgJDIgKSB7XHJcbiAgICByZXR1cm4gJDEgKyAnLScgKyAkMjtcclxuICB9KS50b0xvd2VyQ2FzZSgpO1xyXG59O1xyXG5cclxudmFyIGNvbnNvbGUgPSB3aW5kb3cuY29uc29sZTtcclxuLyoqXHJcbiAqIGFsbG93IHVzZXIgdG8gaW5pdGlhbGl6ZSBjbGFzc2VzIHZpYSBbZGF0YS1uYW1lc3BhY2VdIG9yIC5qcy1uYW1lc3BhY2UgY2xhc3NcclxuICogaHRtbEluaXQoIFdpZGdldCwgJ3dpZGdldE5hbWUnIClcclxuICogb3B0aW9ucyBhcmUgcGFyc2VkIGZyb20gZGF0YS1uYW1lc3BhY2Utb3B0aW9uc1xyXG4gKi9cclxudXRpbHMuaHRtbEluaXQgPSBmdW5jdGlvbiggV2lkZ2V0Q2xhc3MsIG5hbWVzcGFjZSApIHtcclxuICB1dGlscy5kb2NSZWFkeSggZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZGFzaGVkTmFtZXNwYWNlID0gdXRpbHMudG9EYXNoZWQoIG5hbWVzcGFjZSApO1xyXG4gICAgdmFyIGRhdGFBdHRyID0gJ2RhdGEtJyArIGRhc2hlZE5hbWVzcGFjZTtcclxuICAgIHZhciBkYXRhQXR0ckVsZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCggJ1snICsgZGF0YUF0dHIgKyAnXScgKTtcclxuICAgIHZhciBqc0Rhc2hFbGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoICcuanMtJyArIGRhc2hlZE5hbWVzcGFjZSApO1xyXG4gICAgdmFyIGVsZW1zID0gdXRpbHMubWFrZUFycmF5KCBkYXRhQXR0ckVsZW1zIClcclxuICAgICAgLmNvbmNhdCggdXRpbHMubWFrZUFycmF5KCBqc0Rhc2hFbGVtcyApICk7XHJcbiAgICB2YXIgZGF0YU9wdGlvbnNBdHRyID0gZGF0YUF0dHIgKyAnLW9wdGlvbnMnO1xyXG4gICAgdmFyIGpRdWVyeSA9IHdpbmRvdy5qUXVlcnk7XHJcblxyXG4gICAgZWxlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgICAgIHZhciBhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoIGRhdGFBdHRyICkgfHxcclxuICAgICAgICBlbGVtLmdldEF0dHJpYnV0ZSggZGF0YU9wdGlvbnNBdHRyICk7XHJcbiAgICAgIHZhciBvcHRpb25zO1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIG9wdGlvbnMgPSBhdHRyICYmIEpTT04ucGFyc2UoIGF0dHIgKTtcclxuICAgICAgfSBjYXRjaCAoIGVycm9yICkge1xyXG4gICAgICAgIC8vIGxvZyBlcnJvciwgZG8gbm90IGluaXRpYWxpemVcclxuICAgICAgICBpZiAoIGNvbnNvbGUgKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCAnRXJyb3IgcGFyc2luZyAnICsgZGF0YUF0dHIgKyAnIG9uICcgKyBlbGVtLmNsYXNzTmFtZSArXHJcbiAgICAgICAgICAnOiAnICsgZXJyb3IgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIGluaXRpYWxpemVcclxuICAgICAgdmFyIGluc3RhbmNlID0gbmV3IFdpZGdldENsYXNzKCBlbGVtLCBvcHRpb25zICk7XHJcbiAgICAgIC8vIG1ha2UgYXZhaWxhYmxlIHZpYSAkKCkuZGF0YSgnbmFtZXNwYWNlJylcclxuICAgICAgaWYgKCBqUXVlcnkgKSB7XHJcbiAgICAgICAgalF1ZXJ5LmRhdGEoIGVsZW0sIG5hbWVzcGFjZSwgaW5zdGFuY2UgKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gIH0pO1xyXG59O1xyXG5cclxuLy8gLS0tLS0gIC0tLS0tIC8vXHJcblxyXG5yZXR1cm4gdXRpbHM7XHJcblxyXG59KSk7XHJcblxyXG4vKipcclxuICogT3V0bGF5ZXIgSXRlbVxyXG4gKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcclxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cclxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKiBnbG9iYWxzIGRlZmluZSwgbW9kdWxlLCByZXF1aXJlICovXHJcbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAgIC8vIEFNRCAtIFJlcXVpcmVKU1xyXG4gICAgZGVmaW5lKCAnb3V0bGF5ZXIvaXRlbScsW1xyXG4gICAgICAgICdldi1lbWl0dGVyL2V2LWVtaXR0ZXInLFxyXG4gICAgICAgICdnZXQtc2l6ZS9nZXQtc2l6ZSdcclxuICAgICAgXSxcclxuICAgICAgZmFjdG9yeVxyXG4gICAgKTtcclxuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xyXG4gICAgLy8gQ29tbW9uSlMgLSBCcm93c2VyaWZ5LCBXZWJwYWNrXHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXHJcbiAgICAgIHJlcXVpcmUoJ2V2LWVtaXR0ZXInKSxcclxuICAgICAgcmVxdWlyZSgnZ2V0LXNpemUnKVxyXG4gICAgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gYnJvd3NlciBnbG9iYWxcclxuICAgIHdpbmRvdy5PdXRsYXllciA9IHt9O1xyXG4gICAgd2luZG93Lk91dGxheWVyLkl0ZW0gPSBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3cuRXZFbWl0dGVyLFxyXG4gICAgICB3aW5kb3cuZ2V0U2l6ZVxyXG4gICAgKTtcclxuICB9XHJcblxyXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIEV2RW1pdHRlciwgZ2V0U2l6ZSApIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuLy8gLS0tLS0gaGVscGVycyAtLS0tLSAvL1xyXG5cclxuZnVuY3Rpb24gaXNFbXB0eU9iaiggb2JqICkge1xyXG4gIGZvciAoIHZhciBwcm9wIGluIG9iaiApIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbiAgcHJvcCA9IG51bGw7XHJcbiAgcmV0dXJuIHRydWU7XHJcbn1cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENTUzMgc3VwcG9ydCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuXHJcbnZhciBkb2NFbGVtU3R5bGUgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGU7XHJcblxyXG52YXIgdHJhbnNpdGlvblByb3BlcnR5ID0gdHlwZW9mIGRvY0VsZW1TdHlsZS50cmFuc2l0aW9uID09ICdzdHJpbmcnID9cclxuICAndHJhbnNpdGlvbicgOiAnV2Via2l0VHJhbnNpdGlvbic7XHJcbnZhciB0cmFuc2Zvcm1Qcm9wZXJ0eSA9IHR5cGVvZiBkb2NFbGVtU3R5bGUudHJhbnNmb3JtID09ICdzdHJpbmcnID9cclxuICAndHJhbnNmb3JtJyA6ICdXZWJraXRUcmFuc2Zvcm0nO1xyXG5cclxudmFyIHRyYW5zaXRpb25FbmRFdmVudCA9IHtcclxuICBXZWJraXRUcmFuc2l0aW9uOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXHJcbiAgdHJhbnNpdGlvbjogJ3RyYW5zaXRpb25lbmQnXHJcbn1bIHRyYW5zaXRpb25Qcm9wZXJ0eSBdO1xyXG5cclxuLy8gY2FjaGUgYWxsIHZlbmRvciBwcm9wZXJ0aWVzIHRoYXQgY291bGQgaGF2ZSB2ZW5kb3IgcHJlZml4XHJcbnZhciB2ZW5kb3JQcm9wZXJ0aWVzID0ge1xyXG4gIHRyYW5zZm9ybTogdHJhbnNmb3JtUHJvcGVydHksXHJcbiAgdHJhbnNpdGlvbjogdHJhbnNpdGlvblByb3BlcnR5LFxyXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogdHJhbnNpdGlvblByb3BlcnR5ICsgJ0R1cmF0aW9uJyxcclxuICB0cmFuc2l0aW9uUHJvcGVydHk6IHRyYW5zaXRpb25Qcm9wZXJ0eSArICdQcm9wZXJ0eScsXHJcbiAgdHJhbnNpdGlvbkRlbGF5OiB0cmFuc2l0aW9uUHJvcGVydHkgKyAnRGVsYXknXHJcbn07XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBJdGVtIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5mdW5jdGlvbiBJdGVtKCBlbGVtZW50LCBsYXlvdXQgKSB7XHJcbiAgaWYgKCAhZWxlbWVudCApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgLy8gcGFyZW50IGxheW91dCBjbGFzcywgaS5lLiBNYXNvbnJ5LCBJc290b3BlLCBvciBQYWNrZXJ5XHJcbiAgdGhpcy5sYXlvdXQgPSBsYXlvdXQ7XHJcbiAgdGhpcy5wb3NpdGlvbiA9IHtcclxuICAgIHg6IDAsXHJcbiAgICB5OiAwXHJcbiAgfTtcclxuXHJcbiAgdGhpcy5fY3JlYXRlKCk7XHJcbn1cclxuXHJcbi8vIGluaGVyaXQgRXZFbWl0dGVyXHJcbnZhciBwcm90byA9IEl0ZW0ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggRXZFbWl0dGVyLnByb3RvdHlwZSApO1xyXG5wcm90by5jb25zdHJ1Y3RvciA9IEl0ZW07XHJcblxyXG5wcm90by5fY3JlYXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgLy8gdHJhbnNpdGlvbiBvYmplY3RzXHJcbiAgdGhpcy5fdHJhbnNuID0ge1xyXG4gICAgaW5nUHJvcGVydGllczoge30sXHJcbiAgICBjbGVhbjoge30sXHJcbiAgICBvbkVuZDoge31cclxuICB9O1xyXG5cclxuICB0aGlzLmNzcyh7XHJcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xyXG4gIH0pO1xyXG59O1xyXG5cclxuLy8gdHJpZ2dlciBzcGVjaWZpZWQgaGFuZGxlciBmb3IgZXZlbnQgdHlwZVxyXG5wcm90by5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uKCBldmVudCApIHtcclxuICB2YXIgbWV0aG9kID0gJ29uJyArIGV2ZW50LnR5cGU7XHJcbiAgaWYgKCB0aGlzWyBtZXRob2QgXSApIHtcclxuICAgIHRoaXNbIG1ldGhvZCBdKCBldmVudCApO1xyXG4gIH1cclxufTtcclxuXHJcbnByb3RvLmdldFNpemUgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLnNpemUgPSBnZXRTaXplKCB0aGlzLmVsZW1lbnQgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBhcHBseSBDU1Mgc3R5bGVzIHRvIGVsZW1lbnRcclxuICogQHBhcmFtIHtPYmplY3R9IHN0eWxlXHJcbiAqL1xyXG5wcm90by5jc3MgPSBmdW5jdGlvbiggc3R5bGUgKSB7XHJcbiAgdmFyIGVsZW1TdHlsZSA9IHRoaXMuZWxlbWVudC5zdHlsZTtcclxuXHJcbiAgZm9yICggdmFyIHByb3AgaW4gc3R5bGUgKSB7XHJcbiAgICAvLyB1c2UgdmVuZG9yIHByb3BlcnR5IGlmIGF2YWlsYWJsZVxyXG4gICAgdmFyIHN1cHBvcnRlZFByb3AgPSB2ZW5kb3JQcm9wZXJ0aWVzWyBwcm9wIF0gfHwgcHJvcDtcclxuICAgIGVsZW1TdHlsZVsgc3VwcG9ydGVkUHJvcCBdID0gc3R5bGVbIHByb3AgXTtcclxuICB9XHJcbn07XHJcblxyXG4gLy8gbWVhc3VyZSBwb3NpdGlvbiwgYW5kIHNldHMgaXRcclxucHJvdG8uZ2V0UG9zaXRpb24gPSBmdW5jdGlvbigpIHtcclxuICB2YXIgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKCB0aGlzLmVsZW1lbnQgKTtcclxuICB2YXIgaXNPcmlnaW5MZWZ0ID0gdGhpcy5sYXlvdXQuX2dldE9wdGlvbignb3JpZ2luTGVmdCcpO1xyXG4gIHZhciBpc09yaWdpblRvcCA9IHRoaXMubGF5b3V0Ll9nZXRPcHRpb24oJ29yaWdpblRvcCcpO1xyXG4gIHZhciB4VmFsdWUgPSBzdHlsZVsgaXNPcmlnaW5MZWZ0ID8gJ2xlZnQnIDogJ3JpZ2h0JyBdO1xyXG4gIHZhciB5VmFsdWUgPSBzdHlsZVsgaXNPcmlnaW5Ub3AgPyAndG9wJyA6ICdib3R0b20nIF07XHJcbiAgdmFyIHggPSBwYXJzZUZsb2F0KCB4VmFsdWUgKTtcclxuICB2YXIgeSA9IHBhcnNlRmxvYXQoIHlWYWx1ZSApO1xyXG4gIC8vIGNvbnZlcnQgcGVyY2VudCB0byBwaXhlbHNcclxuICB2YXIgbGF5b3V0U2l6ZSA9IHRoaXMubGF5b3V0LnNpemU7XHJcbiAgaWYgKCB4VmFsdWUuaW5kZXhPZignJScpICE9IC0xICkge1xyXG4gICAgeCA9ICggeCAvIDEwMCApICogbGF5b3V0U2l6ZS53aWR0aDtcclxuICB9XHJcbiAgaWYgKCB5VmFsdWUuaW5kZXhPZignJScpICE9IC0xICkge1xyXG4gICAgeSA9ICggeSAvIDEwMCApICogbGF5b3V0U2l6ZS5oZWlnaHQ7XHJcbiAgfVxyXG4gIC8vIGNsZWFuIHVwICdhdXRvJyBvciBvdGhlciBub24taW50ZWdlciB2YWx1ZXNcclxuICB4ID0gaXNOYU4oIHggKSA/IDAgOiB4O1xyXG4gIHkgPSBpc05hTiggeSApID8gMCA6IHk7XHJcbiAgLy8gcmVtb3ZlIHBhZGRpbmcgZnJvbSBtZWFzdXJlbWVudFxyXG4gIHggLT0gaXNPcmlnaW5MZWZ0ID8gbGF5b3V0U2l6ZS5wYWRkaW5nTGVmdCA6IGxheW91dFNpemUucGFkZGluZ1JpZ2h0O1xyXG4gIHkgLT0gaXNPcmlnaW5Ub3AgPyBsYXlvdXRTaXplLnBhZGRpbmdUb3AgOiBsYXlvdXRTaXplLnBhZGRpbmdCb3R0b207XHJcblxyXG4gIHRoaXMucG9zaXRpb24ueCA9IHg7XHJcbiAgdGhpcy5wb3NpdGlvbi55ID0geTtcclxufTtcclxuXHJcbi8vIHNldCBzZXR0bGVkIHBvc2l0aW9uLCBhcHBseSBwYWRkaW5nXHJcbnByb3RvLmxheW91dFBvc2l0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIGxheW91dFNpemUgPSB0aGlzLmxheW91dC5zaXplO1xyXG4gIHZhciBzdHlsZSA9IHt9O1xyXG4gIHZhciBpc09yaWdpbkxlZnQgPSB0aGlzLmxheW91dC5fZ2V0T3B0aW9uKCdvcmlnaW5MZWZ0Jyk7XHJcbiAgdmFyIGlzT3JpZ2luVG9wID0gdGhpcy5sYXlvdXQuX2dldE9wdGlvbignb3JpZ2luVG9wJyk7XHJcblxyXG4gIC8vIHhcclxuICB2YXIgeFBhZGRpbmcgPSBpc09yaWdpbkxlZnQgPyAncGFkZGluZ0xlZnQnIDogJ3BhZGRpbmdSaWdodCc7XHJcbiAgdmFyIHhQcm9wZXJ0eSA9IGlzT3JpZ2luTGVmdCA/ICdsZWZ0JyA6ICdyaWdodCc7XHJcbiAgdmFyIHhSZXNldFByb3BlcnR5ID0gaXNPcmlnaW5MZWZ0ID8gJ3JpZ2h0JyA6ICdsZWZ0JztcclxuXHJcbiAgdmFyIHggPSB0aGlzLnBvc2l0aW9uLnggKyBsYXlvdXRTaXplWyB4UGFkZGluZyBdO1xyXG4gIC8vIHNldCBpbiBwZXJjZW50YWdlIG9yIHBpeGVsc1xyXG4gIHN0eWxlWyB4UHJvcGVydHkgXSA9IHRoaXMuZ2V0WFZhbHVlKCB4ICk7XHJcbiAgLy8gcmVzZXQgb3RoZXIgcHJvcGVydHlcclxuICBzdHlsZVsgeFJlc2V0UHJvcGVydHkgXSA9ICcnO1xyXG5cclxuICAvLyB5XHJcbiAgdmFyIHlQYWRkaW5nID0gaXNPcmlnaW5Ub3AgPyAncGFkZGluZ1RvcCcgOiAncGFkZGluZ0JvdHRvbSc7XHJcbiAgdmFyIHlQcm9wZXJ0eSA9IGlzT3JpZ2luVG9wID8gJ3RvcCcgOiAnYm90dG9tJztcclxuICB2YXIgeVJlc2V0UHJvcGVydHkgPSBpc09yaWdpblRvcCA/ICdib3R0b20nIDogJ3RvcCc7XHJcblxyXG4gIHZhciB5ID0gdGhpcy5wb3NpdGlvbi55ICsgbGF5b3V0U2l6ZVsgeVBhZGRpbmcgXTtcclxuICAvLyBzZXQgaW4gcGVyY2VudGFnZSBvciBwaXhlbHNcclxuICBzdHlsZVsgeVByb3BlcnR5IF0gPSB0aGlzLmdldFlWYWx1ZSggeSApO1xyXG4gIC8vIHJlc2V0IG90aGVyIHByb3BlcnR5XHJcbiAgc3R5bGVbIHlSZXNldFByb3BlcnR5IF0gPSAnJztcclxuXHJcbiAgdGhpcy5jc3MoIHN0eWxlICk7XHJcbiAgdGhpcy5lbWl0RXZlbnQoICdsYXlvdXQnLCBbIHRoaXMgXSApO1xyXG59O1xyXG5cclxucHJvdG8uZ2V0WFZhbHVlID0gZnVuY3Rpb24oIHggKSB7XHJcbiAgdmFyIGlzSG9yaXpvbnRhbCA9IHRoaXMubGF5b3V0Ll9nZXRPcHRpb24oJ2hvcml6b250YWwnKTtcclxuICByZXR1cm4gdGhpcy5sYXlvdXQub3B0aW9ucy5wZXJjZW50UG9zaXRpb24gJiYgIWlzSG9yaXpvbnRhbCA/XHJcbiAgICAoICggeCAvIHRoaXMubGF5b3V0LnNpemUud2lkdGggKSAqIDEwMCApICsgJyUnIDogeCArICdweCc7XHJcbn07XHJcblxyXG5wcm90by5nZXRZVmFsdWUgPSBmdW5jdGlvbiggeSApIHtcclxuICB2YXIgaXNIb3Jpem9udGFsID0gdGhpcy5sYXlvdXQuX2dldE9wdGlvbignaG9yaXpvbnRhbCcpO1xyXG4gIHJldHVybiB0aGlzLmxheW91dC5vcHRpb25zLnBlcmNlbnRQb3NpdGlvbiAmJiBpc0hvcml6b250YWwgP1xyXG4gICAgKCAoIHkgLyB0aGlzLmxheW91dC5zaXplLmhlaWdodCApICogMTAwICkgKyAnJScgOiB5ICsgJ3B4JztcclxufTtcclxuXHJcbnByb3RvLl90cmFuc2l0aW9uVG8gPSBmdW5jdGlvbiggeCwgeSApIHtcclxuICB0aGlzLmdldFBvc2l0aW9uKCk7XHJcbiAgLy8gZ2V0IGN1cnJlbnQgeCAmIHkgZnJvbSB0b3AvbGVmdFxyXG4gIHZhciBjdXJYID0gdGhpcy5wb3NpdGlvbi54O1xyXG4gIHZhciBjdXJZID0gdGhpcy5wb3NpdGlvbi55O1xyXG5cclxuICB2YXIgZGlkTm90TW92ZSA9IHggPT0gdGhpcy5wb3NpdGlvbi54ICYmIHkgPT0gdGhpcy5wb3NpdGlvbi55O1xyXG5cclxuICAvLyBzYXZlIGVuZCBwb3NpdGlvblxyXG4gIHRoaXMuc2V0UG9zaXRpb24oIHgsIHkgKTtcclxuXHJcbiAgLy8gaWYgZGlkIG5vdCBtb3ZlIGFuZCBub3QgdHJhbnNpdGlvbmluZywganVzdCBnbyB0byBsYXlvdXRcclxuICBpZiAoIGRpZE5vdE1vdmUgJiYgIXRoaXMuaXNUcmFuc2l0aW9uaW5nICkge1xyXG4gICAgdGhpcy5sYXlvdXRQb3NpdGlvbigpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgdmFyIHRyYW5zWCA9IHggLSBjdXJYO1xyXG4gIHZhciB0cmFuc1kgPSB5IC0gY3VyWTtcclxuICB2YXIgdHJhbnNpdGlvblN0eWxlID0ge307XHJcbiAgdHJhbnNpdGlvblN0eWxlLnRyYW5zZm9ybSA9IHRoaXMuZ2V0VHJhbnNsYXRlKCB0cmFuc1gsIHRyYW5zWSApO1xyXG5cclxuICB0aGlzLnRyYW5zaXRpb24oe1xyXG4gICAgdG86IHRyYW5zaXRpb25TdHlsZSxcclxuICAgIG9uVHJhbnNpdGlvbkVuZDoge1xyXG4gICAgICB0cmFuc2Zvcm06IHRoaXMubGF5b3V0UG9zaXRpb25cclxuICAgIH0sXHJcbiAgICBpc0NsZWFuaW5nOiB0cnVlXHJcbiAgfSk7XHJcbn07XHJcblxyXG5wcm90by5nZXRUcmFuc2xhdGUgPSBmdW5jdGlvbiggeCwgeSApIHtcclxuICAvLyBmbGlwIGNvb3JpZGluYXRlcyBpZiBvcmlnaW4gb24gcmlnaHQgb3IgYm90dG9tXHJcbiAgdmFyIGlzT3JpZ2luTGVmdCA9IHRoaXMubGF5b3V0Ll9nZXRPcHRpb24oJ29yaWdpbkxlZnQnKTtcclxuICB2YXIgaXNPcmlnaW5Ub3AgPSB0aGlzLmxheW91dC5fZ2V0T3B0aW9uKCdvcmlnaW5Ub3AnKTtcclxuICB4ID0gaXNPcmlnaW5MZWZ0ID8geCA6IC14O1xyXG4gIHkgPSBpc09yaWdpblRvcCA/IHkgOiAteTtcclxuICByZXR1cm4gJ3RyYW5zbGF0ZTNkKCcgKyB4ICsgJ3B4LCAnICsgeSArICdweCwgMCknO1xyXG59O1xyXG5cclxuLy8gbm9uIHRyYW5zaXRpb24gKyB0cmFuc2Zvcm0gc3VwcG9ydFxyXG5wcm90by5nb1RvID0gZnVuY3Rpb24oIHgsIHkgKSB7XHJcbiAgdGhpcy5zZXRQb3NpdGlvbiggeCwgeSApO1xyXG4gIHRoaXMubGF5b3V0UG9zaXRpb24oKTtcclxufTtcclxuXHJcbnByb3RvLm1vdmVUbyA9IHByb3RvLl90cmFuc2l0aW9uVG87XHJcblxyXG5wcm90by5zZXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCB4LCB5ICkge1xyXG4gIHRoaXMucG9zaXRpb24ueCA9IHBhcnNlRmxvYXQoIHggKTtcclxuICB0aGlzLnBvc2l0aW9uLnkgPSBwYXJzZUZsb2F0KCB5ICk7XHJcbn07XHJcblxyXG4vLyAtLS0tLSB0cmFuc2l0aW9uIC0tLS0tIC8vXHJcblxyXG4vKipcclxuICogQHBhcmFtIHtPYmplY3R9IHN0eWxlIC0gQ1NTXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9uVHJhbnNpdGlvbkVuZFxyXG4gKi9cclxuXHJcbi8vIG5vbiB0cmFuc2l0aW9uLCBqdXN0IHRyaWdnZXIgY2FsbGJhY2tcclxucHJvdG8uX25vblRyYW5zaXRpb24gPSBmdW5jdGlvbiggYXJncyApIHtcclxuICB0aGlzLmNzcyggYXJncy50byApO1xyXG4gIGlmICggYXJncy5pc0NsZWFuaW5nICkge1xyXG4gICAgdGhpcy5fcmVtb3ZlU3R5bGVzKCBhcmdzLnRvICk7XHJcbiAgfVxyXG4gIGZvciAoIHZhciBwcm9wIGluIGFyZ3Mub25UcmFuc2l0aW9uRW5kICkge1xyXG4gICAgYXJncy5vblRyYW5zaXRpb25FbmRbIHByb3AgXS5jYWxsKCB0aGlzICk7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIHByb3BlciB0cmFuc2l0aW9uXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBhcmdzIC0gYXJndW1lbnRzXHJcbiAqICAgQHBhcmFtIHtPYmplY3R9IHRvIC0gc3R5bGUgdG8gdHJhbnNpdGlvbiB0b1xyXG4gKiAgIEBwYXJhbSB7T2JqZWN0fSBmcm9tIC0gc3R5bGUgdG8gc3RhcnQgdHJhbnNpdGlvbiBmcm9tXHJcbiAqICAgQHBhcmFtIHtCb29sZWFufSBpc0NsZWFuaW5nIC0gcmVtb3ZlcyB0cmFuc2l0aW9uIHN0eWxlcyBhZnRlciB0cmFuc2l0aW9uXHJcbiAqICAgQHBhcmFtIHtGdW5jdGlvbn0gb25UcmFuc2l0aW9uRW5kIC0gY2FsbGJhY2tcclxuICovXHJcbnByb3RvLnRyYW5zaXRpb24gPSBmdW5jdGlvbiggYXJncyApIHtcclxuICAvLyByZWRpcmVjdCB0byBub25UcmFuc2l0aW9uIGlmIG5vIHRyYW5zaXRpb24gZHVyYXRpb25cclxuICBpZiAoICFwYXJzZUZsb2F0KCB0aGlzLmxheW91dC5vcHRpb25zLnRyYW5zaXRpb25EdXJhdGlvbiApICkge1xyXG4gICAgdGhpcy5fbm9uVHJhbnNpdGlvbiggYXJncyApO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgdmFyIF90cmFuc2l0aW9uID0gdGhpcy5fdHJhbnNuO1xyXG4gIC8vIGtlZXAgdHJhY2sgb2Ygb25UcmFuc2l0aW9uRW5kIGNhbGxiYWNrIGJ5IGNzcyBwcm9wZXJ0eVxyXG4gIGZvciAoIHZhciBwcm9wIGluIGFyZ3Mub25UcmFuc2l0aW9uRW5kICkge1xyXG4gICAgX3RyYW5zaXRpb24ub25FbmRbIHByb3AgXSA9IGFyZ3Mub25UcmFuc2l0aW9uRW5kWyBwcm9wIF07XHJcbiAgfVxyXG4gIC8vIGtlZXAgdHJhY2sgb2YgcHJvcGVydGllcyB0aGF0IGFyZSB0cmFuc2l0aW9uaW5nXHJcbiAgZm9yICggcHJvcCBpbiBhcmdzLnRvICkge1xyXG4gICAgX3RyYW5zaXRpb24uaW5nUHJvcGVydGllc1sgcHJvcCBdID0gdHJ1ZTtcclxuICAgIC8vIGtlZXAgdHJhY2sgb2YgcHJvcGVydGllcyB0byBjbGVhbiB1cCB3aGVuIHRyYW5zaXRpb24gaXMgZG9uZVxyXG4gICAgaWYgKCBhcmdzLmlzQ2xlYW5pbmcgKSB7XHJcbiAgICAgIF90cmFuc2l0aW9uLmNsZWFuWyBwcm9wIF0gPSB0cnVlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gc2V0IGZyb20gc3R5bGVzXHJcbiAgaWYgKCBhcmdzLmZyb20gKSB7XHJcbiAgICB0aGlzLmNzcyggYXJncy5mcm9tICk7XHJcbiAgICAvLyBmb3JjZSByZWRyYXcuIGh0dHA6Ly9ibG9nLmFsZXhtYWNjYXcuY29tL2Nzcy10cmFuc2l0aW9uc1xyXG4gICAgdmFyIGggPSB0aGlzLmVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xyXG4gICAgLy8gaGFjayBmb3IgSlNIaW50IHRvIGh1c2ggYWJvdXQgdW51c2VkIHZhclxyXG4gICAgaCA9IG51bGw7XHJcbiAgfVxyXG4gIC8vIGVuYWJsZSB0cmFuc2l0aW9uXHJcbiAgdGhpcy5lbmFibGVUcmFuc2l0aW9uKCBhcmdzLnRvICk7XHJcbiAgLy8gc2V0IHN0eWxlcyB0aGF0IGFyZSB0cmFuc2l0aW9uaW5nXHJcbiAgdGhpcy5jc3MoIGFyZ3MudG8gKTtcclxuXHJcbiAgdGhpcy5pc1RyYW5zaXRpb25pbmcgPSB0cnVlO1xyXG5cclxufTtcclxuXHJcbi8vIGRhc2ggYmVmb3JlIGFsbCBjYXAgbGV0dGVycywgaW5jbHVkaW5nIGZpcnN0IGZvclxyXG4vLyBXZWJraXRUcmFuc2Zvcm0gPT4gLXdlYmtpdC10cmFuc2Zvcm1cclxuZnVuY3Rpb24gdG9EYXNoZWRBbGwoIHN0ciApIHtcclxuICByZXR1cm4gc3RyLnJlcGxhY2UoIC8oW0EtWl0pL2csIGZ1bmN0aW9uKCAkMSApIHtcclxuICAgIHJldHVybiAnLScgKyAkMS50b0xvd2VyQ2FzZSgpO1xyXG4gIH0pO1xyXG59XHJcblxyXG52YXIgdHJhbnNpdGlvblByb3BzID0gJ29wYWNpdHksJyArIHRvRGFzaGVkQWxsKCB0cmFuc2Zvcm1Qcm9wZXJ0eSApO1xyXG5cclxucHJvdG8uZW5hYmxlVHJhbnNpdGlvbiA9IGZ1bmN0aW9uKC8qIHN0eWxlICovKSB7XHJcbiAgLy8gSEFDSyBjaGFuZ2luZyB0cmFuc2l0aW9uUHJvcGVydHkgZHVyaW5nIGEgdHJhbnNpdGlvblxyXG4gIC8vIHdpbGwgY2F1c2UgdHJhbnNpdGlvbiB0byBqdW1wXHJcbiAgaWYgKCB0aGlzLmlzVHJhbnNpdGlvbmluZyApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8vIG1ha2UgYHRyYW5zaXRpb246IGZvbywgYmFyLCBiYXpgIGZyb20gc3R5bGUgb2JqZWN0XHJcbiAgLy8gSEFDSyB1bi1jb21tZW50IHRoaXMgd2hlbiBlbmFibGVUcmFuc2l0aW9uIGNhbiB3b3JrXHJcbiAgLy8gd2hpbGUgYSB0cmFuc2l0aW9uIGlzIGhhcHBlbmluZ1xyXG4gIC8vIHZhciB0cmFuc2l0aW9uVmFsdWVzID0gW107XHJcbiAgLy8gZm9yICggdmFyIHByb3AgaW4gc3R5bGUgKSB7XHJcbiAgLy8gICAvLyBkYXNoLWlmeSBjYW1lbENhc2VkIHByb3BlcnRpZXMgbGlrZSBXZWJraXRUcmFuc2l0aW9uXHJcbiAgLy8gICBwcm9wID0gdmVuZG9yUHJvcGVydGllc1sgcHJvcCBdIHx8IHByb3A7XHJcbiAgLy8gICB0cmFuc2l0aW9uVmFsdWVzLnB1c2goIHRvRGFzaGVkQWxsKCBwcm9wICkgKTtcclxuICAvLyB9XHJcbiAgLy8gbXVuZ2UgbnVtYmVyIHRvIG1pbGxpc2Vjb25kLCB0byBtYXRjaCBzdGFnZ2VyXHJcbiAgdmFyIGR1cmF0aW9uID0gdGhpcy5sYXlvdXQub3B0aW9ucy50cmFuc2l0aW9uRHVyYXRpb247XHJcbiAgZHVyYXRpb24gPSB0eXBlb2YgZHVyYXRpb24gPT0gJ251bWJlcicgPyBkdXJhdGlvbiArICdtcycgOiBkdXJhdGlvbjtcclxuICAvLyBlbmFibGUgdHJhbnNpdGlvbiBzdHlsZXNcclxuICB0aGlzLmNzcyh7XHJcbiAgICB0cmFuc2l0aW9uUHJvcGVydHk6IHRyYW5zaXRpb25Qcm9wcyxcclxuICAgIHRyYW5zaXRpb25EdXJhdGlvbjogZHVyYXRpb24sXHJcbiAgICB0cmFuc2l0aW9uRGVsYXk6IHRoaXMuc3RhZ2dlckRlbGF5IHx8IDBcclxuICB9KTtcclxuICAvLyBsaXN0ZW4gZm9yIHRyYW5zaXRpb24gZW5kIGV2ZW50XHJcbiAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoIHRyYW5zaXRpb25FbmRFdmVudCwgdGhpcywgZmFsc2UgKTtcclxufTtcclxuXHJcbi8vIC0tLS0tIGV2ZW50cyAtLS0tLSAvL1xyXG5cclxucHJvdG8ub253ZWJraXRUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24oIGV2ZW50ICkge1xyXG4gIHRoaXMub250cmFuc2l0aW9uZW5kKCBldmVudCApO1xyXG59O1xyXG5cclxucHJvdG8ub25vdHJhbnNpdGlvbmVuZCA9IGZ1bmN0aW9uKCBldmVudCApIHtcclxuICB0aGlzLm9udHJhbnNpdGlvbmVuZCggZXZlbnQgKTtcclxufTtcclxuXHJcbi8vIHByb3BlcnRpZXMgdGhhdCBJIG11bmdlIHRvIG1ha2UgbXkgbGlmZSBlYXNpZXJcclxudmFyIGRhc2hlZFZlbmRvclByb3BlcnRpZXMgPSB7XHJcbiAgJy13ZWJraXQtdHJhbnNmb3JtJzogJ3RyYW5zZm9ybSdcclxufTtcclxuXHJcbnByb3RvLm9udHJhbnNpdGlvbmVuZCA9IGZ1bmN0aW9uKCBldmVudCApIHtcclxuICAvLyBkaXNyZWdhcmQgYnViYmxlZCBldmVudHMgZnJvbSBjaGlsZHJlblxyXG4gIGlmICggZXZlbnQudGFyZ2V0ICE9PSB0aGlzLmVsZW1lbnQgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIHZhciBfdHJhbnNpdGlvbiA9IHRoaXMuX3RyYW5zbjtcclxuICAvLyBnZXQgcHJvcGVydHkgbmFtZSBvZiB0cmFuc2l0aW9uZWQgcHJvcGVydHksIGNvbnZlcnQgdG8gcHJlZml4LWZyZWVcclxuICB2YXIgcHJvcGVydHlOYW1lID0gZGFzaGVkVmVuZG9yUHJvcGVydGllc1sgZXZlbnQucHJvcGVydHlOYW1lIF0gfHwgZXZlbnQucHJvcGVydHlOYW1lO1xyXG5cclxuICAvLyByZW1vdmUgcHJvcGVydHkgdGhhdCBoYXMgY29tcGxldGVkIHRyYW5zaXRpb25pbmdcclxuICBkZWxldGUgX3RyYW5zaXRpb24uaW5nUHJvcGVydGllc1sgcHJvcGVydHlOYW1lIF07XHJcbiAgLy8gY2hlY2sgaWYgYW55IHByb3BlcnRpZXMgYXJlIHN0aWxsIHRyYW5zaXRpb25pbmdcclxuICBpZiAoIGlzRW1wdHlPYmooIF90cmFuc2l0aW9uLmluZ1Byb3BlcnRpZXMgKSApIHtcclxuICAgIC8vIGFsbCBwcm9wZXJ0aWVzIGhhdmUgY29tcGxldGVkIHRyYW5zaXRpb25pbmdcclxuICAgIHRoaXMuZGlzYWJsZVRyYW5zaXRpb24oKTtcclxuICB9XHJcbiAgLy8gY2xlYW4gc3R5bGVcclxuICBpZiAoIHByb3BlcnR5TmFtZSBpbiBfdHJhbnNpdGlvbi5jbGVhbiApIHtcclxuICAgIC8vIGNsZWFuIHVwIHN0eWxlXHJcbiAgICB0aGlzLmVsZW1lbnQuc3R5bGVbIGV2ZW50LnByb3BlcnR5TmFtZSBdID0gJyc7XHJcbiAgICBkZWxldGUgX3RyYW5zaXRpb24uY2xlYW5bIHByb3BlcnR5TmFtZSBdO1xyXG4gIH1cclxuICAvLyB0cmlnZ2VyIG9uVHJhbnNpdGlvbkVuZCBjYWxsYmFja1xyXG4gIGlmICggcHJvcGVydHlOYW1lIGluIF90cmFuc2l0aW9uLm9uRW5kICkge1xyXG4gICAgdmFyIG9uVHJhbnNpdGlvbkVuZCA9IF90cmFuc2l0aW9uLm9uRW5kWyBwcm9wZXJ0eU5hbWUgXTtcclxuICAgIG9uVHJhbnNpdGlvbkVuZC5jYWxsKCB0aGlzICk7XHJcbiAgICBkZWxldGUgX3RyYW5zaXRpb24ub25FbmRbIHByb3BlcnR5TmFtZSBdO1xyXG4gIH1cclxuXHJcbiAgdGhpcy5lbWl0RXZlbnQoICd0cmFuc2l0aW9uRW5kJywgWyB0aGlzIF0gKTtcclxufTtcclxuXHJcbnByb3RvLmRpc2FibGVUcmFuc2l0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5yZW1vdmVUcmFuc2l0aW9uU3R5bGVzKCk7XHJcbiAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIHRyYW5zaXRpb25FbmRFdmVudCwgdGhpcywgZmFsc2UgKTtcclxuICB0aGlzLmlzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIHJlbW92ZXMgc3R5bGUgcHJvcGVydHkgZnJvbSBlbGVtZW50XHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZVxyXG4qKi9cclxucHJvdG8uX3JlbW92ZVN0eWxlcyA9IGZ1bmN0aW9uKCBzdHlsZSApIHtcclxuICAvLyBjbGVhbiB1cCB0cmFuc2l0aW9uIHN0eWxlc1xyXG4gIHZhciBjbGVhblN0eWxlID0ge307XHJcbiAgZm9yICggdmFyIHByb3AgaW4gc3R5bGUgKSB7XHJcbiAgICBjbGVhblN0eWxlWyBwcm9wIF0gPSAnJztcclxuICB9XHJcbiAgdGhpcy5jc3MoIGNsZWFuU3R5bGUgKTtcclxufTtcclxuXHJcbnZhciBjbGVhblRyYW5zaXRpb25TdHlsZSA9IHtcclxuICB0cmFuc2l0aW9uUHJvcGVydHk6ICcnLFxyXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogJycsXHJcbiAgdHJhbnNpdGlvbkRlbGF5OiAnJ1xyXG59O1xyXG5cclxucHJvdG8ucmVtb3ZlVHJhbnNpdGlvblN0eWxlcyA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIHJlbW92ZSB0cmFuc2l0aW9uXHJcbiAgdGhpcy5jc3MoIGNsZWFuVHJhbnNpdGlvblN0eWxlICk7XHJcbn07XHJcblxyXG4vLyAtLS0tLSBzdGFnZ2VyIC0tLS0tIC8vXHJcblxyXG5wcm90by5zdGFnZ2VyID0gZnVuY3Rpb24oIGRlbGF5ICkge1xyXG4gIGRlbGF5ID0gaXNOYU4oIGRlbGF5ICkgPyAwIDogZGVsYXk7XHJcbiAgdGhpcy5zdGFnZ2VyRGVsYXkgPSBkZWxheSArICdtcyc7XHJcbn07XHJcblxyXG4vLyAtLS0tLSBzaG93L2hpZGUvcmVtb3ZlIC0tLS0tIC8vXHJcblxyXG4vLyByZW1vdmUgZWxlbWVudCBmcm9tIERPTVxyXG5wcm90by5yZW1vdmVFbGVtID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRoaXMuZWxlbWVudCApO1xyXG4gIC8vIHJlbW92ZSBkaXNwbGF5OiBub25lXHJcbiAgdGhpcy5jc3MoeyBkaXNwbGF5OiAnJyB9KTtcclxuICB0aGlzLmVtaXRFdmVudCggJ3JlbW92ZScsIFsgdGhpcyBdICk7XHJcbn07XHJcblxyXG5wcm90by5yZW1vdmUgPSBmdW5jdGlvbigpIHtcclxuICAvLyBqdXN0IHJlbW92ZSBlbGVtZW50IGlmIG5vIHRyYW5zaXRpb24gc3VwcG9ydCBvciBubyB0cmFuc2l0aW9uXHJcbiAgaWYgKCAhdHJhbnNpdGlvblByb3BlcnR5IHx8ICFwYXJzZUZsb2F0KCB0aGlzLmxheW91dC5vcHRpb25zLnRyYW5zaXRpb25EdXJhdGlvbiApICkge1xyXG4gICAgdGhpcy5yZW1vdmVFbGVtKCk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvLyBzdGFydCB0cmFuc2l0aW9uXHJcbiAgdGhpcy5vbmNlKCAndHJhbnNpdGlvbkVuZCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5yZW1vdmVFbGVtKCk7XHJcbiAgfSk7XHJcbiAgdGhpcy5oaWRlKCk7XHJcbn07XHJcblxyXG5wcm90by5yZXZlYWwgPSBmdW5jdGlvbigpIHtcclxuICBkZWxldGUgdGhpcy5pc0hpZGRlbjtcclxuICAvLyByZW1vdmUgZGlzcGxheTogbm9uZVxyXG4gIHRoaXMuY3NzKHsgZGlzcGxheTogJycgfSk7XHJcblxyXG4gIHZhciBvcHRpb25zID0gdGhpcy5sYXlvdXQub3B0aW9ucztcclxuXHJcbiAgdmFyIG9uVHJhbnNpdGlvbkVuZCA9IHt9O1xyXG4gIHZhciB0cmFuc2l0aW9uRW5kUHJvcGVydHkgPSB0aGlzLmdldEhpZGVSZXZlYWxUcmFuc2l0aW9uRW5kUHJvcGVydHkoJ3Zpc2libGVTdHlsZScpO1xyXG4gIG9uVHJhbnNpdGlvbkVuZFsgdHJhbnNpdGlvbkVuZFByb3BlcnR5IF0gPSB0aGlzLm9uUmV2ZWFsVHJhbnNpdGlvbkVuZDtcclxuXHJcbiAgdGhpcy50cmFuc2l0aW9uKHtcclxuICAgIGZyb206IG9wdGlvbnMuaGlkZGVuU3R5bGUsXHJcbiAgICB0bzogb3B0aW9ucy52aXNpYmxlU3R5bGUsXHJcbiAgICBpc0NsZWFuaW5nOiB0cnVlLFxyXG4gICAgb25UcmFuc2l0aW9uRW5kOiBvblRyYW5zaXRpb25FbmRcclxuICB9KTtcclxufTtcclxuXHJcbnByb3RvLm9uUmV2ZWFsVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIGNoZWNrIGlmIHN0aWxsIHZpc2libGVcclxuICAvLyBkdXJpbmcgdHJhbnNpdGlvbiwgaXRlbSBtYXkgaGF2ZSBiZWVuIGhpZGRlblxyXG4gIGlmICggIXRoaXMuaXNIaWRkZW4gKSB7XHJcbiAgICB0aGlzLmVtaXRFdmVudCgncmV2ZWFsJyk7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIGdldCBzdHlsZSBwcm9wZXJ0eSB1c2UgZm9yIGhpZGUvcmV2ZWFsIHRyYW5zaXRpb24gZW5kXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHlsZVByb3BlcnR5IC0gaGlkZGVuU3R5bGUvdmlzaWJsZVN0eWxlXHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9XHJcbiAqL1xyXG5wcm90by5nZXRIaWRlUmV2ZWFsVHJhbnNpdGlvbkVuZFByb3BlcnR5ID0gZnVuY3Rpb24oIHN0eWxlUHJvcGVydHkgKSB7XHJcbiAgdmFyIG9wdGlvblN0eWxlID0gdGhpcy5sYXlvdXQub3B0aW9uc1sgc3R5bGVQcm9wZXJ0eSBdO1xyXG4gIC8vIHVzZSBvcGFjaXR5XHJcbiAgaWYgKCBvcHRpb25TdHlsZS5vcGFjaXR5ICkge1xyXG4gICAgcmV0dXJuICdvcGFjaXR5JztcclxuICB9XHJcbiAgLy8gZ2V0IGZpcnN0IHByb3BlcnR5XHJcbiAgZm9yICggdmFyIHByb3AgaW4gb3B0aW9uU3R5bGUgKSB7XHJcbiAgICByZXR1cm4gcHJvcDtcclxuICB9XHJcbn07XHJcblxyXG5wcm90by5oaWRlID0gZnVuY3Rpb24oKSB7XHJcbiAgLy8gc2V0IGZsYWdcclxuICB0aGlzLmlzSGlkZGVuID0gdHJ1ZTtcclxuICAvLyByZW1vdmUgZGlzcGxheTogbm9uZVxyXG4gIHRoaXMuY3NzKHsgZGlzcGxheTogJycgfSk7XHJcblxyXG4gIHZhciBvcHRpb25zID0gdGhpcy5sYXlvdXQub3B0aW9ucztcclxuXHJcbiAgdmFyIG9uVHJhbnNpdGlvbkVuZCA9IHt9O1xyXG4gIHZhciB0cmFuc2l0aW9uRW5kUHJvcGVydHkgPSB0aGlzLmdldEhpZGVSZXZlYWxUcmFuc2l0aW9uRW5kUHJvcGVydHkoJ2hpZGRlblN0eWxlJyk7XHJcbiAgb25UcmFuc2l0aW9uRW5kWyB0cmFuc2l0aW9uRW5kUHJvcGVydHkgXSA9IHRoaXMub25IaWRlVHJhbnNpdGlvbkVuZDtcclxuXHJcbiAgdGhpcy50cmFuc2l0aW9uKHtcclxuICAgIGZyb206IG9wdGlvbnMudmlzaWJsZVN0eWxlLFxyXG4gICAgdG86IG9wdGlvbnMuaGlkZGVuU3R5bGUsXHJcbiAgICAvLyBrZWVwIGhpZGRlbiBzdHVmZiBoaWRkZW5cclxuICAgIGlzQ2xlYW5pbmc6IHRydWUsXHJcbiAgICBvblRyYW5zaXRpb25FbmQ6IG9uVHJhbnNpdGlvbkVuZFxyXG4gIH0pO1xyXG59O1xyXG5cclxucHJvdG8ub25IaWRlVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIGNoZWNrIGlmIHN0aWxsIGhpZGRlblxyXG4gIC8vIGR1cmluZyB0cmFuc2l0aW9uLCBpdGVtIG1heSBoYXZlIGJlZW4gdW4taGlkZGVuXHJcbiAgaWYgKCB0aGlzLmlzSGlkZGVuICkge1xyXG4gICAgdGhpcy5jc3MoeyBkaXNwbGF5OiAnbm9uZScgfSk7XHJcbiAgICB0aGlzLmVtaXRFdmVudCgnaGlkZScpO1xyXG4gIH1cclxufTtcclxuXHJcbnByb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLmNzcyh7XHJcbiAgICBwb3NpdGlvbjogJycsXHJcbiAgICBsZWZ0OiAnJyxcclxuICAgIHJpZ2h0OiAnJyxcclxuICAgIHRvcDogJycsXHJcbiAgICBib3R0b206ICcnLFxyXG4gICAgdHJhbnNpdGlvbjogJycsXHJcbiAgICB0cmFuc2Zvcm06ICcnXHJcbiAgfSk7XHJcbn07XHJcblxyXG5yZXR1cm4gSXRlbTtcclxuXHJcbn0pKTtcclxuXHJcbi8qIVxyXG4gKiBPdXRsYXllciB2Mi4xLjFcclxuICogdGhlIGJyYWlucyBhbmQgZ3V0cyBvZiBhIGxheW91dCBsaWJyYXJ5XHJcbiAqIE1JVCBsaWNlbnNlXHJcbiAqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cclxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKiBnbG9iYWxzIGRlZmluZSwgbW9kdWxlLCByZXF1aXJlICovXHJcbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAgIC8vIEFNRCAtIFJlcXVpcmVKU1xyXG4gICAgZGVmaW5lKCAnb3V0bGF5ZXIvb3V0bGF5ZXInLFtcclxuICAgICAgICAnZXYtZW1pdHRlci9ldi1lbWl0dGVyJyxcclxuICAgICAgICAnZ2V0LXNpemUvZ2V0LXNpemUnLFxyXG4gICAgICAgICdmaXp6eS11aS11dGlscy91dGlscycsXHJcbiAgICAgICAgJy4vaXRlbSdcclxuICAgICAgXSxcclxuICAgICAgZnVuY3Rpb24oIEV2RW1pdHRlciwgZ2V0U2l6ZSwgdXRpbHMsIEl0ZW0gKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgRXZFbWl0dGVyLCBnZXRTaXplLCB1dGlscywgSXRlbSk7XHJcbiAgICAgIH1cclxuICAgICk7XHJcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcclxuICAgIC8vIENvbW1vbkpTIC0gQnJvd3NlcmlmeSwgV2VicGFja1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3csXHJcbiAgICAgIHJlcXVpcmUoJ2V2LWVtaXR0ZXInKSxcclxuICAgICAgcmVxdWlyZSgnZ2V0LXNpemUnKSxcclxuICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKSxcclxuICAgICAgcmVxdWlyZSgnLi9pdGVtJylcclxuICAgICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgICB3aW5kb3cuT3V0bGF5ZXIgPSBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3csXHJcbiAgICAgIHdpbmRvdy5FdkVtaXR0ZXIsXHJcbiAgICAgIHdpbmRvdy5nZXRTaXplLFxyXG4gICAgICB3aW5kb3cuZml6enlVSVV0aWxzLFxyXG4gICAgICB3aW5kb3cuT3V0bGF5ZXIuSXRlbVxyXG4gICAgKTtcclxuICB9XHJcblxyXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgRXZFbWl0dGVyLCBnZXRTaXplLCB1dGlscywgSXRlbSApIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuLy8gLS0tLS0gdmFycyAtLS0tLSAvL1xyXG5cclxudmFyIGNvbnNvbGUgPSB3aW5kb3cuY29uc29sZTtcclxudmFyIGpRdWVyeSA9IHdpbmRvdy5qUXVlcnk7XHJcbnZhciBub29wID0gZnVuY3Rpb24oKSB7fTtcclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIE91dGxheWVyIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4vLyBnbG9iYWxseSB1bmlxdWUgaWRlbnRpZmllcnNcclxudmFyIEdVSUQgPSAwO1xyXG4vLyBpbnRlcm5hbCBzdG9yZSBvZiBhbGwgT3V0bGF5ZXIgaW50YW5jZXNcclxudmFyIGluc3RhbmNlcyA9IHt9O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge0VsZW1lbnQsIFN0cmluZ30gZWxlbWVudFxyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbmZ1bmN0aW9uIE91dGxheWVyKCBlbGVtZW50LCBvcHRpb25zICkge1xyXG4gIHZhciBxdWVyeUVsZW1lbnQgPSB1dGlscy5nZXRRdWVyeUVsZW1lbnQoIGVsZW1lbnQgKTtcclxuICBpZiAoICFxdWVyeUVsZW1lbnQgKSB7XHJcbiAgICBpZiAoIGNvbnNvbGUgKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoICdCYWQgZWxlbWVudCBmb3IgJyArIHRoaXMuY29uc3RydWN0b3IubmFtZXNwYWNlICtcclxuICAgICAgICAnOiAnICsgKCBxdWVyeUVsZW1lbnQgfHwgZWxlbWVudCApICk7XHJcbiAgICB9XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIHRoaXMuZWxlbWVudCA9IHF1ZXJ5RWxlbWVudDtcclxuICAvLyBhZGQgalF1ZXJ5XHJcbiAgaWYgKCBqUXVlcnkgKSB7XHJcbiAgICB0aGlzLiRlbGVtZW50ID0galF1ZXJ5KCB0aGlzLmVsZW1lbnQgKTtcclxuICB9XHJcblxyXG4gIC8vIG9wdGlvbnNcclxuICB0aGlzLm9wdGlvbnMgPSB1dGlscy5leHRlbmQoIHt9LCB0aGlzLmNvbnN0cnVjdG9yLmRlZmF1bHRzICk7XHJcbiAgdGhpcy5vcHRpb24oIG9wdGlvbnMgKTtcclxuXHJcbiAgLy8gYWRkIGlkIGZvciBPdXRsYXllci5nZXRGcm9tRWxlbWVudFxyXG4gIHZhciBpZCA9ICsrR1VJRDtcclxuICB0aGlzLmVsZW1lbnQub3V0bGF5ZXJHVUlEID0gaWQ7IC8vIGV4cGFuZG9cclxuICBpbnN0YW5jZXNbIGlkIF0gPSB0aGlzOyAvLyBhc3NvY2lhdGUgdmlhIGlkXHJcblxyXG4gIC8vIGtpY2sgaXQgb2ZmXHJcbiAgdGhpcy5fY3JlYXRlKCk7XHJcblxyXG4gIHZhciBpc0luaXRMYXlvdXQgPSB0aGlzLl9nZXRPcHRpb24oJ2luaXRMYXlvdXQnKTtcclxuICBpZiAoIGlzSW5pdExheW91dCApIHtcclxuICAgIHRoaXMubGF5b3V0KCk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBzZXR0aW5ncyBhcmUgZm9yIGludGVybmFsIHVzZSBvbmx5XHJcbk91dGxheWVyLm5hbWVzcGFjZSA9ICdvdXRsYXllcic7XHJcbk91dGxheWVyLkl0ZW0gPSBJdGVtO1xyXG5cclxuLy8gZGVmYXVsdCBvcHRpb25zXHJcbk91dGxheWVyLmRlZmF1bHRzID0ge1xyXG4gIGNvbnRhaW5lclN0eWxlOiB7XHJcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xyXG4gIH0sXHJcbiAgaW5pdExheW91dDogdHJ1ZSxcclxuICBvcmlnaW5MZWZ0OiB0cnVlLFxyXG4gIG9yaWdpblRvcDogdHJ1ZSxcclxuICByZXNpemU6IHRydWUsXHJcbiAgcmVzaXplQ29udGFpbmVyOiB0cnVlLFxyXG4gIC8vIGl0ZW0gb3B0aW9uc1xyXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogJzAuNHMnLFxyXG4gIGhpZGRlblN0eWxlOiB7XHJcbiAgICBvcGFjaXR5OiAwLFxyXG4gICAgdHJhbnNmb3JtOiAnc2NhbGUoMC4wMDEpJ1xyXG4gIH0sXHJcbiAgdmlzaWJsZVN0eWxlOiB7XHJcbiAgICBvcGFjaXR5OiAxLFxyXG4gICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknXHJcbiAgfVxyXG59O1xyXG5cclxudmFyIHByb3RvID0gT3V0bGF5ZXIucHJvdG90eXBlO1xyXG4vLyBpbmhlcml0IEV2RW1pdHRlclxyXG51dGlscy5leHRlbmQoIHByb3RvLCBFdkVtaXR0ZXIucHJvdG90eXBlICk7XHJcblxyXG4vKipcclxuICogc2V0IG9wdGlvbnNcclxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcclxuICovXHJcbnByb3RvLm9wdGlvbiA9IGZ1bmN0aW9uKCBvcHRzICkge1xyXG4gIHV0aWxzLmV4dGVuZCggdGhpcy5vcHRpb25zLCBvcHRzICk7XHJcbn07XHJcblxyXG4vKipcclxuICogZ2V0IGJhY2t3YXJkcyBjb21wYXRpYmxlIG9wdGlvbiB2YWx1ZSwgY2hlY2sgb2xkIG5hbWVcclxuICovXHJcbnByb3RvLl9nZXRPcHRpb24gPSBmdW5jdGlvbiggb3B0aW9uICkge1xyXG4gIHZhciBvbGRPcHRpb24gPSB0aGlzLmNvbnN0cnVjdG9yLmNvbXBhdE9wdGlvbnNbIG9wdGlvbiBdO1xyXG4gIHJldHVybiBvbGRPcHRpb24gJiYgdGhpcy5vcHRpb25zWyBvbGRPcHRpb24gXSAhPT0gdW5kZWZpbmVkID9cclxuICAgIHRoaXMub3B0aW9uc1sgb2xkT3B0aW9uIF0gOiB0aGlzLm9wdGlvbnNbIG9wdGlvbiBdO1xyXG59O1xyXG5cclxuT3V0bGF5ZXIuY29tcGF0T3B0aW9ucyA9IHtcclxuICAvLyBjdXJyZW50TmFtZTogb2xkTmFtZVxyXG4gIGluaXRMYXlvdXQ6ICdpc0luaXRMYXlvdXQnLFxyXG4gIGhvcml6b250YWw6ICdpc0hvcml6b250YWwnLFxyXG4gIGxheW91dEluc3RhbnQ6ICdpc0xheW91dEluc3RhbnQnLFxyXG4gIG9yaWdpbkxlZnQ6ICdpc09yaWdpbkxlZnQnLFxyXG4gIG9yaWdpblRvcDogJ2lzT3JpZ2luVG9wJyxcclxuICByZXNpemU6ICdpc1Jlc2l6ZUJvdW5kJyxcclxuICByZXNpemVDb250YWluZXI6ICdpc1Jlc2l6aW5nQ29udGFpbmVyJ1xyXG59O1xyXG5cclxucHJvdG8uX2NyZWF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIGdldCBpdGVtcyBmcm9tIGNoaWxkcmVuXHJcbiAgdGhpcy5yZWxvYWRJdGVtcygpO1xyXG4gIC8vIGVsZW1lbnRzIHRoYXQgYWZmZWN0IGxheW91dCwgYnV0IGFyZSBub3QgbGFpZCBvdXRcclxuICB0aGlzLnN0YW1wcyA9IFtdO1xyXG4gIHRoaXMuc3RhbXAoIHRoaXMub3B0aW9ucy5zdGFtcCApO1xyXG4gIC8vIHNldCBjb250YWluZXIgc3R5bGVcclxuICB1dGlscy5leHRlbmQoIHRoaXMuZWxlbWVudC5zdHlsZSwgdGhpcy5vcHRpb25zLmNvbnRhaW5lclN0eWxlICk7XHJcblxyXG4gIC8vIGJpbmQgcmVzaXplIG1ldGhvZFxyXG4gIHZhciBjYW5CaW5kUmVzaXplID0gdGhpcy5fZ2V0T3B0aW9uKCdyZXNpemUnKTtcclxuICBpZiAoIGNhbkJpbmRSZXNpemUgKSB7XHJcbiAgICB0aGlzLmJpbmRSZXNpemUoKTtcclxuICB9XHJcbn07XHJcblxyXG4vLyBnb2VzIHRocm91Z2ggYWxsIGNoaWxkcmVuIGFnYWluIGFuZCBnZXRzIGJyaWNrcyBpbiBwcm9wZXIgb3JkZXJcclxucHJvdG8ucmVsb2FkSXRlbXMgPSBmdW5jdGlvbigpIHtcclxuICAvLyBjb2xsZWN0aW9uIG9mIGl0ZW0gZWxlbWVudHNcclxuICB0aGlzLml0ZW1zID0gdGhpcy5faXRlbWl6ZSggdGhpcy5lbGVtZW50LmNoaWxkcmVuICk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIHR1cm4gZWxlbWVudHMgaW50byBPdXRsYXllci5JdGVtcyB0byBiZSB1c2VkIGluIGxheW91dFxyXG4gKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEhUTUxFbGVtZW50fSBlbGVtc1xyXG4gKiBAcmV0dXJucyB7QXJyYXl9IGl0ZW1zIC0gY29sbGVjdGlvbiBvZiBuZXcgT3V0bGF5ZXIgSXRlbXNcclxuICovXHJcbnByb3RvLl9pdGVtaXplID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG5cclxuICB2YXIgaXRlbUVsZW1zID0gdGhpcy5fZmlsdGVyRmluZEl0ZW1FbGVtZW50cyggZWxlbXMgKTtcclxuICB2YXIgSXRlbSA9IHRoaXMuY29uc3RydWN0b3IuSXRlbTtcclxuXHJcbiAgLy8gY3JlYXRlIG5ldyBPdXRsYXllciBJdGVtcyBmb3IgY29sbGVjdGlvblxyXG4gIHZhciBpdGVtcyA9IFtdO1xyXG4gIGZvciAoIHZhciBpPTA7IGkgPCBpdGVtRWxlbXMubGVuZ3RoOyBpKysgKSB7XHJcbiAgICB2YXIgZWxlbSA9IGl0ZW1FbGVtc1tpXTtcclxuICAgIHZhciBpdGVtID0gbmV3IEl0ZW0oIGVsZW0sIHRoaXMgKTtcclxuICAgIGl0ZW1zLnB1c2goIGl0ZW0gKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBpdGVtcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBnZXQgaXRlbSBlbGVtZW50cyB0byBiZSB1c2VkIGluIGxheW91dFxyXG4gKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEhUTUxFbGVtZW50fSBlbGVtc1xyXG4gKiBAcmV0dXJucyB7QXJyYXl9IGl0ZW1zIC0gaXRlbSBlbGVtZW50c1xyXG4gKi9cclxucHJvdG8uX2ZpbHRlckZpbmRJdGVtRWxlbWVudHMgPSBmdW5jdGlvbiggZWxlbXMgKSB7XHJcbiAgcmV0dXJuIHV0aWxzLmZpbHRlckZpbmRFbGVtZW50cyggZWxlbXMsIHRoaXMub3B0aW9ucy5pdGVtU2VsZWN0b3IgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBnZXR0ZXIgbWV0aG9kIGZvciBnZXR0aW5nIGl0ZW0gZWxlbWVudHNcclxuICogQHJldHVybnMge0FycmF5fSBlbGVtcyAtIGNvbGxlY3Rpb24gb2YgaXRlbSBlbGVtZW50c1xyXG4gKi9cclxucHJvdG8uZ2V0SXRlbUVsZW1lbnRzID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuaXRlbXMubWFwKCBmdW5jdGlvbiggaXRlbSApIHtcclxuICAgIHJldHVybiBpdGVtLmVsZW1lbnQ7XHJcbiAgfSk7XHJcbn07XHJcblxyXG4vLyAtLS0tLSBpbml0ICYgbGF5b3V0IC0tLS0tIC8vXHJcblxyXG4vKipcclxuICogbGF5cyBvdXQgYWxsIGl0ZW1zXHJcbiAqL1xyXG5wcm90by5sYXlvdXQgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLl9yZXNldExheW91dCgpO1xyXG4gIHRoaXMuX21hbmFnZVN0YW1wcygpO1xyXG5cclxuICAvLyBkb24ndCBhbmltYXRlIGZpcnN0IGxheW91dFxyXG4gIHZhciBsYXlvdXRJbnN0YW50ID0gdGhpcy5fZ2V0T3B0aW9uKCdsYXlvdXRJbnN0YW50Jyk7XHJcbiAgdmFyIGlzSW5zdGFudCA9IGxheW91dEluc3RhbnQgIT09IHVuZGVmaW5lZCA/XHJcbiAgICBsYXlvdXRJbnN0YW50IDogIXRoaXMuX2lzTGF5b3V0SW5pdGVkO1xyXG4gIHRoaXMubGF5b3V0SXRlbXMoIHRoaXMuaXRlbXMsIGlzSW5zdGFudCApO1xyXG5cclxuICAvLyBmbGFnIGZvciBpbml0YWxpemVkXHJcbiAgdGhpcy5faXNMYXlvdXRJbml0ZWQgPSB0cnVlO1xyXG59O1xyXG5cclxuLy8gX2luaXQgaXMgYWxpYXMgZm9yIGxheW91dFxyXG5wcm90by5faW5pdCA9IHByb3RvLmxheW91dDtcclxuXHJcbi8qKlxyXG4gKiBsb2dpYyBiZWZvcmUgYW55IG5ldyBsYXlvdXRcclxuICovXHJcbnByb3RvLl9yZXNldExheW91dCA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMuZ2V0U2l6ZSgpO1xyXG59O1xyXG5cclxuXHJcbnByb3RvLmdldFNpemUgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLnNpemUgPSBnZXRTaXplKCB0aGlzLmVsZW1lbnQgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBnZXQgbWVhc3VyZW1lbnQgZnJvbSBvcHRpb24sIGZvciBjb2x1bW5XaWR0aCwgcm93SGVpZ2h0LCBndXR0ZXJcclxuICogaWYgb3B0aW9uIGlzIFN0cmluZyAtPiBnZXQgZWxlbWVudCBmcm9tIHNlbGVjdG9yIHN0cmluZywgJiBnZXQgc2l6ZSBvZiBlbGVtZW50XHJcbiAqIGlmIG9wdGlvbiBpcyBFbGVtZW50IC0+IGdldCBzaXplIG9mIGVsZW1lbnRcclxuICogZWxzZSB1c2Ugb3B0aW9uIGFzIGEgbnVtYmVyXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZWFzdXJlbWVudFxyXG4gKiBAcGFyYW0ge1N0cmluZ30gc2l6ZSAtIHdpZHRoIG9yIGhlaWdodFxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxucHJvdG8uX2dldE1lYXN1cmVtZW50ID0gZnVuY3Rpb24oIG1lYXN1cmVtZW50LCBzaXplICkge1xyXG4gIHZhciBvcHRpb24gPSB0aGlzLm9wdGlvbnNbIG1lYXN1cmVtZW50IF07XHJcbiAgdmFyIGVsZW07XHJcbiAgaWYgKCAhb3B0aW9uICkge1xyXG4gICAgLy8gZGVmYXVsdCB0byAwXHJcbiAgICB0aGlzWyBtZWFzdXJlbWVudCBdID0gMDtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gdXNlIG9wdGlvbiBhcyBhbiBlbGVtZW50XHJcbiAgICBpZiAoIHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycgKSB7XHJcbiAgICAgIGVsZW0gPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3Rvciggb3B0aW9uICk7XHJcbiAgICB9IGVsc2UgaWYgKCBvcHRpb24gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCApIHtcclxuICAgICAgZWxlbSA9IG9wdGlvbjtcclxuICAgIH1cclxuICAgIC8vIHVzZSBzaXplIG9mIGVsZW1lbnQsIGlmIGVsZW1lbnRcclxuICAgIHRoaXNbIG1lYXN1cmVtZW50IF0gPSBlbGVtID8gZ2V0U2l6ZSggZWxlbSApWyBzaXplIF0gOiBvcHRpb247XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIGxheW91dCBhIGNvbGxlY3Rpb24gb2YgaXRlbSBlbGVtZW50c1xyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxucHJvdG8ubGF5b3V0SXRlbXMgPSBmdW5jdGlvbiggaXRlbXMsIGlzSW5zdGFudCApIHtcclxuICBpdGVtcyA9IHRoaXMuX2dldEl0ZW1zRm9yTGF5b3V0KCBpdGVtcyApO1xyXG5cclxuICB0aGlzLl9sYXlvdXRJdGVtcyggaXRlbXMsIGlzSW5zdGFudCApO1xyXG5cclxuICB0aGlzLl9wb3N0TGF5b3V0KCk7XHJcbn07XHJcblxyXG4vKipcclxuICogZ2V0IHRoZSBpdGVtcyB0byBiZSBsYWlkIG91dFxyXG4gKiB5b3UgbWF5IHdhbnQgdG8gc2tpcCBvdmVyIHNvbWUgaXRlbXNcclxuICogQHBhcmFtIHtBcnJheX0gaXRlbXNcclxuICogQHJldHVybnMge0FycmF5fSBpdGVtc1xyXG4gKi9cclxucHJvdG8uX2dldEl0ZW1zRm9yTGF5b3V0ID0gZnVuY3Rpb24oIGl0ZW1zICkge1xyXG4gIHJldHVybiBpdGVtcy5maWx0ZXIoIGZ1bmN0aW9uKCBpdGVtICkge1xyXG4gICAgcmV0dXJuICFpdGVtLmlzSWdub3JlZDtcclxuICB9KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBsYXlvdXQgaXRlbXNcclxuICogQHBhcmFtIHtBcnJheX0gaXRlbXNcclxuICogQHBhcmFtIHtCb29sZWFufSBpc0luc3RhbnRcclxuICovXHJcbnByb3RvLl9sYXlvdXRJdGVtcyA9IGZ1bmN0aW9uKCBpdGVtcywgaXNJbnN0YW50ICkge1xyXG4gIHRoaXMuX2VtaXRDb21wbGV0ZU9uSXRlbXMoICdsYXlvdXQnLCBpdGVtcyApO1xyXG5cclxuICBpZiAoICFpdGVtcyB8fCAhaXRlbXMubGVuZ3RoICkge1xyXG4gICAgLy8gbm8gaXRlbXMsIGVtaXQgZXZlbnQgd2l0aCBlbXB0eSBhcnJheVxyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgdmFyIHF1ZXVlID0gW107XHJcblxyXG4gIGl0ZW1zLmZvckVhY2goIGZ1bmN0aW9uKCBpdGVtICkge1xyXG4gICAgLy8gZ2V0IHgveSBvYmplY3QgZnJvbSBtZXRob2RcclxuICAgIHZhciBwb3NpdGlvbiA9IHRoaXMuX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiggaXRlbSApO1xyXG4gICAgLy8gZW5xdWV1ZVxyXG4gICAgcG9zaXRpb24uaXRlbSA9IGl0ZW07XHJcbiAgICBwb3NpdGlvbi5pc0luc3RhbnQgPSBpc0luc3RhbnQgfHwgaXRlbS5pc0xheW91dEluc3RhbnQ7XHJcbiAgICBxdWV1ZS5wdXNoKCBwb3NpdGlvbiApO1xyXG4gIH0sIHRoaXMgKTtcclxuXHJcbiAgdGhpcy5fcHJvY2Vzc0xheW91dFF1ZXVlKCBxdWV1ZSApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIGdldCBpdGVtIGxheW91dCBwb3NpdGlvblxyXG4gKiBAcGFyYW0ge091dGxheWVyLkl0ZW19IGl0ZW1cclxuICogQHJldHVybnMge09iamVjdH0geCBhbmQgeSBwb3NpdGlvblxyXG4gKi9cclxucHJvdG8uX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCAvKiBpdGVtICovICkge1xyXG4gIHJldHVybiB7XHJcbiAgICB4OiAwLFxyXG4gICAgeTogMFxyXG4gIH07XHJcbn07XHJcblxyXG4vKipcclxuICogaXRlcmF0ZSBvdmVyIGFycmF5IGFuZCBwb3NpdGlvbiBlYWNoIGl0ZW1cclxuICogUmVhc29uIGJlaW5nIC0gc2VwYXJhdGluZyB0aGlzIGxvZ2ljIHByZXZlbnRzICdsYXlvdXQgaW52YWxpZGF0aW9uJ1xyXG4gKiB0aHggQHBhdWxfaXJpc2hcclxuICogQHBhcmFtIHtBcnJheX0gcXVldWVcclxuICovXHJcbnByb3RvLl9wcm9jZXNzTGF5b3V0UXVldWUgPSBmdW5jdGlvbiggcXVldWUgKSB7XHJcbiAgdGhpcy51cGRhdGVTdGFnZ2VyKCk7XHJcbiAgcXVldWUuZm9yRWFjaCggZnVuY3Rpb24oIG9iaiwgaSApIHtcclxuICAgIHRoaXMuX3Bvc2l0aW9uSXRlbSggb2JqLml0ZW0sIG9iai54LCBvYmoueSwgb2JqLmlzSW5zdGFudCwgaSApO1xyXG4gIH0sIHRoaXMgKTtcclxufTtcclxuXHJcbi8vIHNldCBzdGFnZ2VyIGZyb20gb3B0aW9uIGluIG1pbGxpc2Vjb25kcyBudW1iZXJcclxucHJvdG8udXBkYXRlU3RhZ2dlciA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciBzdGFnZ2VyID0gdGhpcy5vcHRpb25zLnN0YWdnZXI7XHJcbiAgaWYgKCBzdGFnZ2VyID09PSBudWxsIHx8IHN0YWdnZXIgPT09IHVuZGVmaW5lZCApIHtcclxuICAgIHRoaXMuc3RhZ2dlciA9IDA7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIHRoaXMuc3RhZ2dlciA9IGdldE1pbGxpc2Vjb25kcyggc3RhZ2dlciApO1xyXG4gIHJldHVybiB0aGlzLnN0YWdnZXI7XHJcbn07XHJcblxyXG4vKipcclxuICogU2V0cyBwb3NpdGlvbiBvZiBpdGVtIGluIERPTVxyXG4gKiBAcGFyYW0ge091dGxheWVyLkl0ZW19IGl0ZW1cclxuICogQHBhcmFtIHtOdW1iZXJ9IHggLSBob3Jpem9udGFsIHBvc2l0aW9uXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IC0gdmVydGljYWwgcG9zaXRpb25cclxuICogQHBhcmFtIHtCb29sZWFufSBpc0luc3RhbnQgLSBkaXNhYmxlcyB0cmFuc2l0aW9uc1xyXG4gKi9cclxucHJvdG8uX3Bvc2l0aW9uSXRlbSA9IGZ1bmN0aW9uKCBpdGVtLCB4LCB5LCBpc0luc3RhbnQsIGkgKSB7XHJcbiAgaWYgKCBpc0luc3RhbnQgKSB7XHJcbiAgICAvLyBpZiBub3QgdHJhbnNpdGlvbiwganVzdCBzZXQgQ1NTXHJcbiAgICBpdGVtLmdvVG8oIHgsIHkgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgaXRlbS5zdGFnZ2VyKCBpICogdGhpcy5zdGFnZ2VyICk7XHJcbiAgICBpdGVtLm1vdmVUbyggeCwgeSApO1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBBbnkgbG9naWMgeW91IHdhbnQgdG8gZG8gYWZ0ZXIgZWFjaCBsYXlvdXQsXHJcbiAqIGkuZS4gc2l6ZSB0aGUgY29udGFpbmVyXHJcbiAqL1xyXG5wcm90by5fcG9zdExheW91dCA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMucmVzaXplQ29udGFpbmVyKCk7XHJcbn07XHJcblxyXG5wcm90by5yZXNpemVDb250YWluZXIgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgaXNSZXNpemluZ0NvbnRhaW5lciA9IHRoaXMuX2dldE9wdGlvbigncmVzaXplQ29udGFpbmVyJyk7XHJcbiAgaWYgKCAhaXNSZXNpemluZ0NvbnRhaW5lciApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgdmFyIHNpemUgPSB0aGlzLl9nZXRDb250YWluZXJTaXplKCk7XHJcbiAgaWYgKCBzaXplICkge1xyXG4gICAgdGhpcy5fc2V0Q29udGFpbmVyTWVhc3VyZSggc2l6ZS53aWR0aCwgdHJ1ZSApO1xyXG4gICAgdGhpcy5fc2V0Q29udGFpbmVyTWVhc3VyZSggc2l6ZS5oZWlnaHQsIGZhbHNlICk7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIFNldHMgd2lkdGggb3IgaGVpZ2h0IG9mIGNvbnRhaW5lciBpZiByZXR1cm5lZFxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBzaXplXHJcbiAqICAgQHBhcmFtIHtOdW1iZXJ9IHdpZHRoXHJcbiAqICAgQHBhcmFtIHtOdW1iZXJ9IGhlaWdodFxyXG4gKi9cclxucHJvdG8uX2dldENvbnRhaW5lclNpemUgPSBub29wO1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtZWFzdXJlIC0gc2l6ZSBvZiB3aWR0aCBvciBoZWlnaHRcclxuICogQHBhcmFtIHtCb29sZWFufSBpc1dpZHRoXHJcbiAqL1xyXG5wcm90by5fc2V0Q29udGFpbmVyTWVhc3VyZSA9IGZ1bmN0aW9uKCBtZWFzdXJlLCBpc1dpZHRoICkge1xyXG4gIGlmICggbWVhc3VyZSA9PT0gdW5kZWZpbmVkICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgdmFyIGVsZW1TaXplID0gdGhpcy5zaXplO1xyXG4gIC8vIGFkZCBwYWRkaW5nIGFuZCBib3JkZXIgd2lkdGggaWYgYm9yZGVyIGJveFxyXG4gIGlmICggZWxlbVNpemUuaXNCb3JkZXJCb3ggKSB7XHJcbiAgICBtZWFzdXJlICs9IGlzV2lkdGggPyBlbGVtU2l6ZS5wYWRkaW5nTGVmdCArIGVsZW1TaXplLnBhZGRpbmdSaWdodCArXHJcbiAgICAgIGVsZW1TaXplLmJvcmRlckxlZnRXaWR0aCArIGVsZW1TaXplLmJvcmRlclJpZ2h0V2lkdGggOlxyXG4gICAgICBlbGVtU2l6ZS5wYWRkaW5nQm90dG9tICsgZWxlbVNpemUucGFkZGluZ1RvcCArXHJcbiAgICAgIGVsZW1TaXplLmJvcmRlclRvcFdpZHRoICsgZWxlbVNpemUuYm9yZGVyQm90dG9tV2lkdGg7XHJcbiAgfVxyXG5cclxuICBtZWFzdXJlID0gTWF0aC5tYXgoIG1lYXN1cmUsIDAgKTtcclxuICB0aGlzLmVsZW1lbnQuc3R5bGVbIGlzV2lkdGggPyAnd2lkdGgnIDogJ2hlaWdodCcgXSA9IG1lYXN1cmUgKyAncHgnO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIGVtaXQgZXZlbnRDb21wbGV0ZSBvbiBhIGNvbGxlY3Rpb24gb2YgaXRlbXMgZXZlbnRzXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudE5hbWVcclxuICogQHBhcmFtIHtBcnJheX0gaXRlbXMgLSBPdXRsYXllci5JdGVtc1xyXG4gKi9cclxucHJvdG8uX2VtaXRDb21wbGV0ZU9uSXRlbXMgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBpdGVtcyApIHtcclxuICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gIGZ1bmN0aW9uIG9uQ29tcGxldGUoKSB7XHJcbiAgICBfdGhpcy5kaXNwYXRjaEV2ZW50KCBldmVudE5hbWUgKyAnQ29tcGxldGUnLCBudWxsLCBbIGl0ZW1zIF0gKTtcclxuICB9XHJcblxyXG4gIHZhciBjb3VudCA9IGl0ZW1zLmxlbmd0aDtcclxuICBpZiAoICFpdGVtcyB8fCAhY291bnQgKSB7XHJcbiAgICBvbkNvbXBsZXRlKCk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICB2YXIgZG9uZUNvdW50ID0gMDtcclxuICBmdW5jdGlvbiB0aWNrKCkge1xyXG4gICAgZG9uZUNvdW50Kys7XHJcbiAgICBpZiAoIGRvbmVDb3VudCA9PSBjb3VudCApIHtcclxuICAgICAgb25Db21wbGV0ZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gYmluZCBjYWxsYmFja1xyXG4gIGl0ZW1zLmZvckVhY2goIGZ1bmN0aW9uKCBpdGVtICkge1xyXG4gICAgaXRlbS5vbmNlKCBldmVudE5hbWUsIHRpY2sgKTtcclxuICB9KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBlbWl0cyBldmVudHMgdmlhIEV2RW1pdHRlciBhbmQgalF1ZXJ5IGV2ZW50c1xyXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZSAtIG5hbWUgb2YgZXZlbnRcclxuICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSBvcmlnaW5hbCBldmVudFxyXG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzIC0gZXh0cmEgYXJndW1lbnRzXHJcbiAqL1xyXG5wcm90by5kaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24oIHR5cGUsIGV2ZW50LCBhcmdzICkge1xyXG4gIC8vIGFkZCBvcmlnaW5hbCBldmVudCB0byBhcmd1bWVudHNcclxuICB2YXIgZW1pdEFyZ3MgPSBldmVudCA/IFsgZXZlbnQgXS5jb25jYXQoIGFyZ3MgKSA6IGFyZ3M7XHJcbiAgdGhpcy5lbWl0RXZlbnQoIHR5cGUsIGVtaXRBcmdzICk7XHJcblxyXG4gIGlmICggalF1ZXJ5ICkge1xyXG4gICAgLy8gc2V0IHRoaXMuJGVsZW1lbnRcclxuICAgIHRoaXMuJGVsZW1lbnQgPSB0aGlzLiRlbGVtZW50IHx8IGpRdWVyeSggdGhpcy5lbGVtZW50ICk7XHJcbiAgICBpZiAoIGV2ZW50ICkge1xyXG4gICAgICAvLyBjcmVhdGUgalF1ZXJ5IGV2ZW50XHJcbiAgICAgIHZhciAkZXZlbnQgPSBqUXVlcnkuRXZlbnQoIGV2ZW50ICk7XHJcbiAgICAgICRldmVudC50eXBlID0gdHlwZTtcclxuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCAkZXZlbnQsIGFyZ3MgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIGp1c3QgdHJpZ2dlciB3aXRoIHR5cGUgaWYgbm8gZXZlbnQgYXZhaWxhYmxlXHJcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlciggdHlwZSwgYXJncyApO1xyXG4gICAgfVxyXG4gIH1cclxufTtcclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGlnbm9yZSAmIHN0YW1wcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuXHJcbi8qKlxyXG4gKiBrZWVwIGl0ZW0gaW4gY29sbGVjdGlvbiwgYnV0IGRvIG5vdCBsYXkgaXQgb3V0XHJcbiAqIGlnbm9yZWQgaXRlbXMgZG8gbm90IGdldCBza2lwcGVkIGluIGxheW91dFxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1cclxuICovXHJcbnByb3RvLmlnbm9yZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG4gIHZhciBpdGVtID0gdGhpcy5nZXRJdGVtKCBlbGVtICk7XHJcbiAgaWYgKCBpdGVtICkge1xyXG4gICAgaXRlbS5pc0lnbm9yZWQgPSB0cnVlO1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiByZXR1cm4gaXRlbSB0byBsYXlvdXQgY29sbGVjdGlvblxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1cclxuICovXHJcbnByb3RvLnVuaWdub3JlID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgdmFyIGl0ZW0gPSB0aGlzLmdldEl0ZW0oIGVsZW0gKTtcclxuICBpZiAoIGl0ZW0gKSB7XHJcbiAgICBkZWxldGUgaXRlbS5pc0lnbm9yZWQ7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIGFkZHMgZWxlbWVudHMgdG8gc3RhbXBzXHJcbiAqIEBwYXJhbSB7Tm9kZUxpc3QsIEFycmF5LCBFbGVtZW50LCBvciBTdHJpbmd9IGVsZW1zXHJcbiAqL1xyXG5wcm90by5zdGFtcCA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuICBlbGVtcyA9IHRoaXMuX2ZpbmQoIGVsZW1zICk7XHJcbiAgaWYgKCAhZWxlbXMgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICB0aGlzLnN0YW1wcyA9IHRoaXMuc3RhbXBzLmNvbmNhdCggZWxlbXMgKTtcclxuICAvLyBpZ25vcmVcclxuICBlbGVtcy5mb3JFYWNoKCB0aGlzLmlnbm9yZSwgdGhpcyApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIHJlbW92ZXMgZWxlbWVudHMgdG8gc3RhbXBzXHJcbiAqIEBwYXJhbSB7Tm9kZUxpc3QsIEFycmF5LCBvciBFbGVtZW50fSBlbGVtc1xyXG4gKi9cclxucHJvdG8udW5zdGFtcCA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuICBlbGVtcyA9IHRoaXMuX2ZpbmQoIGVsZW1zICk7XHJcbiAgaWYgKCAhZWxlbXMgKXtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGVsZW1zLmZvckVhY2goIGZ1bmN0aW9uKCBlbGVtICkge1xyXG4gICAgLy8gZmlsdGVyIG91dCByZW1vdmVkIHN0YW1wIGVsZW1lbnRzXHJcbiAgICB1dGlscy5yZW1vdmVGcm9tKCB0aGlzLnN0YW1wcywgZWxlbSApO1xyXG4gICAgdGhpcy51bmlnbm9yZSggZWxlbSApO1xyXG4gIH0sIHRoaXMgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBmaW5kcyBjaGlsZCBlbGVtZW50c1xyXG4gKiBAcGFyYW0ge05vZGVMaXN0LCBBcnJheSwgRWxlbWVudCwgb3IgU3RyaW5nfSBlbGVtc1xyXG4gKiBAcmV0dXJucyB7QXJyYXl9IGVsZW1zXHJcbiAqL1xyXG5wcm90by5fZmluZCA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuICBpZiAoICFlbGVtcyApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLy8gaWYgc3RyaW5nLCB1c2UgYXJndW1lbnQgYXMgc2VsZWN0b3Igc3RyaW5nXHJcbiAgaWYgKCB0eXBlb2YgZWxlbXMgPT0gJ3N0cmluZycgKSB7XHJcbiAgICBlbGVtcyA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCBlbGVtcyApO1xyXG4gIH1cclxuICBlbGVtcyA9IHV0aWxzLm1ha2VBcnJheSggZWxlbXMgKTtcclxuICByZXR1cm4gZWxlbXM7XHJcbn07XHJcblxyXG5wcm90by5fbWFuYWdlU3RhbXBzID0gZnVuY3Rpb24oKSB7XHJcbiAgaWYgKCAhdGhpcy5zdGFtcHMgfHwgIXRoaXMuc3RhbXBzLmxlbmd0aCApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHRoaXMuX2dldEJvdW5kaW5nUmVjdCgpO1xyXG5cclxuICB0aGlzLnN0YW1wcy5mb3JFYWNoKCB0aGlzLl9tYW5hZ2VTdGFtcCwgdGhpcyApO1xyXG59O1xyXG5cclxuLy8gdXBkYXRlIGJvdW5kaW5nTGVmdCAvIFRvcFxyXG5wcm90by5fZ2V0Qm91bmRpbmdSZWN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgLy8gZ2V0IGJvdW5kaW5nIHJlY3QgZm9yIGNvbnRhaW5lciBlbGVtZW50XHJcbiAgdmFyIGJvdW5kaW5nUmVjdCA9IHRoaXMuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICB2YXIgc2l6ZSA9IHRoaXMuc2l6ZTtcclxuICB0aGlzLl9ib3VuZGluZ1JlY3QgPSB7XHJcbiAgICBsZWZ0OiBib3VuZGluZ1JlY3QubGVmdCArIHNpemUucGFkZGluZ0xlZnQgKyBzaXplLmJvcmRlckxlZnRXaWR0aCxcclxuICAgIHRvcDogYm91bmRpbmdSZWN0LnRvcCArIHNpemUucGFkZGluZ1RvcCArIHNpemUuYm9yZGVyVG9wV2lkdGgsXHJcbiAgICByaWdodDogYm91bmRpbmdSZWN0LnJpZ2h0IC0gKCBzaXplLnBhZGRpbmdSaWdodCArIHNpemUuYm9yZGVyUmlnaHRXaWR0aCApLFxyXG4gICAgYm90dG9tOiBib3VuZGluZ1JlY3QuYm90dG9tIC0gKCBzaXplLnBhZGRpbmdCb3R0b20gKyBzaXplLmJvcmRlckJvdHRvbVdpZHRoIClcclxuICB9O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gc3RhbXBcclxuKiovXHJcbnByb3RvLl9tYW5hZ2VTdGFtcCA9IG5vb3A7XHJcblxyXG4vKipcclxuICogZ2V0IHgveSBwb3NpdGlvbiBvZiBlbGVtZW50IHJlbGF0aXZlIHRvIGNvbnRhaW5lciBlbGVtZW50XHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbVxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBvZmZzZXQgLSBoYXMgbGVmdCwgdG9wLCByaWdodCwgYm90dG9tXHJcbiAqL1xyXG5wcm90by5fZ2V0RWxlbWVudE9mZnNldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG4gIHZhciBib3VuZGluZ1JlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gIHZhciB0aGlzUmVjdCA9IHRoaXMuX2JvdW5kaW5nUmVjdDtcclxuICB2YXIgc2l6ZSA9IGdldFNpemUoIGVsZW0gKTtcclxuICB2YXIgb2Zmc2V0ID0ge1xyXG4gICAgbGVmdDogYm91bmRpbmdSZWN0LmxlZnQgLSB0aGlzUmVjdC5sZWZ0IC0gc2l6ZS5tYXJnaW5MZWZ0LFxyXG4gICAgdG9wOiBib3VuZGluZ1JlY3QudG9wIC0gdGhpc1JlY3QudG9wIC0gc2l6ZS5tYXJnaW5Ub3AsXHJcbiAgICByaWdodDogdGhpc1JlY3QucmlnaHQgLSBib3VuZGluZ1JlY3QucmlnaHQgLSBzaXplLm1hcmdpblJpZ2h0LFxyXG4gICAgYm90dG9tOiB0aGlzUmVjdC5ib3R0b20gLSBib3VuZGluZ1JlY3QuYm90dG9tIC0gc2l6ZS5tYXJnaW5Cb3R0b21cclxuICB9O1xyXG4gIHJldHVybiBvZmZzZXQ7XHJcbn07XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSByZXNpemUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbi8vIGVuYWJsZSBldmVudCBoYW5kbGVycyBmb3IgbGlzdGVuZXJzXHJcbi8vIGkuZS4gcmVzaXplIC0+IG9ucmVzaXplXHJcbnByb3RvLmhhbmRsZUV2ZW50ID0gdXRpbHMuaGFuZGxlRXZlbnQ7XHJcblxyXG4vKipcclxuICogQmluZCBsYXlvdXQgdG8gd2luZG93IHJlc2l6aW5nXHJcbiAqL1xyXG5wcm90by5iaW5kUmVzaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICdyZXNpemUnLCB0aGlzICk7XHJcbiAgdGhpcy5pc1Jlc2l6ZUJvdW5kID0gdHJ1ZTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBVbmJpbmQgbGF5b3V0IHRvIHdpbmRvdyByZXNpemluZ1xyXG4gKi9cclxucHJvdG8udW5iaW5kUmVzaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdyZXNpemUnLCB0aGlzICk7XHJcbiAgdGhpcy5pc1Jlc2l6ZUJvdW5kID0gZmFsc2U7XHJcbn07XHJcblxyXG5wcm90by5vbnJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMucmVzaXplKCk7XHJcbn07XHJcblxyXG51dGlscy5kZWJvdW5jZU1ldGhvZCggT3V0bGF5ZXIsICdvbnJlc2l6ZScsIDEwMCApO1xyXG5cclxucHJvdG8ucmVzaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgLy8gZG9uJ3QgdHJpZ2dlciBpZiBzaXplIGRpZCBub3QgY2hhbmdlXHJcbiAgLy8gb3IgaWYgcmVzaXplIHdhcyB1bmJvdW5kLiBTZWUgIzlcclxuICBpZiAoICF0aGlzLmlzUmVzaXplQm91bmQgfHwgIXRoaXMubmVlZHNSZXNpemVMYXlvdXQoKSApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHRoaXMubGF5b3V0KCk7XHJcbn07XHJcblxyXG4vKipcclxuICogY2hlY2sgaWYgbGF5b3V0IGlzIG5lZWRlZCBwb3N0IGxheW91dFxyXG4gKiBAcmV0dXJucyBCb29sZWFuXHJcbiAqL1xyXG5wcm90by5uZWVkc1Jlc2l6ZUxheW91dCA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciBzaXplID0gZ2V0U2l6ZSggdGhpcy5lbGVtZW50ICk7XHJcbiAgLy8gY2hlY2sgdGhhdCB0aGlzLnNpemUgYW5kIHNpemUgYXJlIHRoZXJlXHJcbiAgLy8gSUU4IHRyaWdnZXJzIHJlc2l6ZSBvbiBib2R5IHNpemUgY2hhbmdlLCBzbyB0aGV5IG1pZ2h0IG5vdCBiZVxyXG4gIHZhciBoYXNTaXplcyA9IHRoaXMuc2l6ZSAmJiBzaXplO1xyXG4gIHJldHVybiBoYXNTaXplcyAmJiBzaXplLmlubmVyV2lkdGggIT09IHRoaXMuc2l6ZS5pbm5lcldpZHRoO1xyXG59O1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gbWV0aG9kcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuLyoqXHJcbiAqIGFkZCBpdGVtcyB0byBPdXRsYXllciBpbnN0YW5jZVxyXG4gKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEVsZW1lbnR9IGVsZW1zXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gaXRlbXMgLSBPdXRsYXllci5JdGVtc1xyXG4qKi9cclxucHJvdG8uYWRkSXRlbXMgPSBmdW5jdGlvbiggZWxlbXMgKSB7XHJcbiAgdmFyIGl0ZW1zID0gdGhpcy5faXRlbWl6ZSggZWxlbXMgKTtcclxuICAvLyBhZGQgaXRlbXMgdG8gY29sbGVjdGlvblxyXG4gIGlmICggaXRlbXMubGVuZ3RoICkge1xyXG4gICAgdGhpcy5pdGVtcyA9IHRoaXMuaXRlbXMuY29uY2F0KCBpdGVtcyApO1xyXG4gIH1cclxuICByZXR1cm4gaXRlbXM7XHJcbn07XHJcblxyXG4vKipcclxuICogTGF5b3V0IG5ld2x5LWFwcGVuZGVkIGl0ZW0gZWxlbWVudHNcclxuICogQHBhcmFtIHtBcnJheSBvciBOb2RlTGlzdCBvciBFbGVtZW50fSBlbGVtc1xyXG4gKi9cclxucHJvdG8uYXBwZW5kZWQgPSBmdW5jdGlvbiggZWxlbXMgKSB7XHJcbiAgdmFyIGl0ZW1zID0gdGhpcy5hZGRJdGVtcyggZWxlbXMgKTtcclxuICBpZiAoICFpdGVtcy5sZW5ndGggKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8vIGxheW91dCBhbmQgcmV2ZWFsIGp1c3QgdGhlIG5ldyBpdGVtc1xyXG4gIHRoaXMubGF5b3V0SXRlbXMoIGl0ZW1zLCB0cnVlICk7XHJcbiAgdGhpcy5yZXZlYWwoIGl0ZW1zICk7XHJcbn07XHJcblxyXG4vKipcclxuICogTGF5b3V0IHByZXBlbmRlZCBlbGVtZW50c1xyXG4gKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEVsZW1lbnR9IGVsZW1zXHJcbiAqL1xyXG5wcm90by5wcmVwZW5kZWQgPSBmdW5jdGlvbiggZWxlbXMgKSB7XHJcbiAgdmFyIGl0ZW1zID0gdGhpcy5faXRlbWl6ZSggZWxlbXMgKTtcclxuICBpZiAoICFpdGVtcy5sZW5ndGggKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8vIGFkZCBpdGVtcyB0byBiZWdpbm5pbmcgb2YgY29sbGVjdGlvblxyXG4gIHZhciBwcmV2aW91c0l0ZW1zID0gdGhpcy5pdGVtcy5zbGljZSgwKTtcclxuICB0aGlzLml0ZW1zID0gaXRlbXMuY29uY2F0KCBwcmV2aW91c0l0ZW1zICk7XHJcbiAgLy8gc3RhcnQgbmV3IGxheW91dFxyXG4gIHRoaXMuX3Jlc2V0TGF5b3V0KCk7XHJcbiAgdGhpcy5fbWFuYWdlU3RhbXBzKCk7XHJcbiAgLy8gbGF5b3V0IG5ldyBzdHVmZiB3aXRob3V0IHRyYW5zaXRpb25cclxuICB0aGlzLmxheW91dEl0ZW1zKCBpdGVtcywgdHJ1ZSApO1xyXG4gIHRoaXMucmV2ZWFsKCBpdGVtcyApO1xyXG4gIC8vIGxheW91dCBwcmV2aW91cyBpdGVtc1xyXG4gIHRoaXMubGF5b3V0SXRlbXMoIHByZXZpb3VzSXRlbXMgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiByZXZlYWwgYSBjb2xsZWN0aW9uIG9mIGl0ZW1zXHJcbiAqIEBwYXJhbSB7QXJyYXkgb2YgT3V0bGF5ZXIuSXRlbXN9IGl0ZW1zXHJcbiAqL1xyXG5wcm90by5yZXZlYWwgPSBmdW5jdGlvbiggaXRlbXMgKSB7XHJcbiAgdGhpcy5fZW1pdENvbXBsZXRlT25JdGVtcyggJ3JldmVhbCcsIGl0ZW1zICk7XHJcbiAgaWYgKCAhaXRlbXMgfHwgIWl0ZW1zLmxlbmd0aCApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgdmFyIHN0YWdnZXIgPSB0aGlzLnVwZGF0ZVN0YWdnZXIoKTtcclxuICBpdGVtcy5mb3JFYWNoKCBmdW5jdGlvbiggaXRlbSwgaSApIHtcclxuICAgIGl0ZW0uc3RhZ2dlciggaSAqIHN0YWdnZXIgKTtcclxuICAgIGl0ZW0ucmV2ZWFsKCk7XHJcbiAgfSk7XHJcbn07XHJcblxyXG4vKipcclxuICogaGlkZSBhIGNvbGxlY3Rpb24gb2YgaXRlbXNcclxuICogQHBhcmFtIHtBcnJheSBvZiBPdXRsYXllci5JdGVtc30gaXRlbXNcclxuICovXHJcbnByb3RvLmhpZGUgPSBmdW5jdGlvbiggaXRlbXMgKSB7XHJcbiAgdGhpcy5fZW1pdENvbXBsZXRlT25JdGVtcyggJ2hpZGUnLCBpdGVtcyApO1xyXG4gIGlmICggIWl0ZW1zIHx8ICFpdGVtcy5sZW5ndGggKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIHZhciBzdGFnZ2VyID0gdGhpcy51cGRhdGVTdGFnZ2VyKCk7XHJcbiAgaXRlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGl0ZW0sIGkgKSB7XHJcbiAgICBpdGVtLnN0YWdnZXIoIGkgKiBzdGFnZ2VyICk7XHJcbiAgICBpdGVtLmhpZGUoKTtcclxuICB9KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiByZXZlYWwgaXRlbSBlbGVtZW50c1xyXG4gKiBAcGFyYW0ge0FycmF5fSwge0VsZW1lbnR9LCB7Tm9kZUxpc3R9IGl0ZW1zXHJcbiAqL1xyXG5wcm90by5yZXZlYWxJdGVtRWxlbWVudHMgPSBmdW5jdGlvbiggZWxlbXMgKSB7XHJcbiAgdmFyIGl0ZW1zID0gdGhpcy5nZXRJdGVtcyggZWxlbXMgKTtcclxuICB0aGlzLnJldmVhbCggaXRlbXMgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBoaWRlIGl0ZW0gZWxlbWVudHNcclxuICogQHBhcmFtIHtBcnJheX0sIHtFbGVtZW50fSwge05vZGVMaXN0fSBpdGVtc1xyXG4gKi9cclxucHJvdG8uaGlkZUl0ZW1FbGVtZW50cyA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuICB2YXIgaXRlbXMgPSB0aGlzLmdldEl0ZW1zKCBlbGVtcyApO1xyXG4gIHRoaXMuaGlkZSggaXRlbXMgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBnZXQgT3V0bGF5ZXIuSXRlbSwgZ2l2ZW4gYW4gRWxlbWVudFxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1cclxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcclxuICogQHJldHVybnMge091dGxheWVyLkl0ZW19IGl0ZW1cclxuICovXHJcbnByb3RvLmdldEl0ZW0gPSBmdW5jdGlvbiggZWxlbSApIHtcclxuICAvLyBsb29wIHRocm91Z2ggaXRlbXMgdG8gZ2V0IHRoZSBvbmUgdGhhdCBtYXRjaGVzXHJcbiAgZm9yICggdmFyIGk9MDsgaSA8IHRoaXMuaXRlbXMubGVuZ3RoOyBpKysgKSB7XHJcbiAgICB2YXIgaXRlbSA9IHRoaXMuaXRlbXNbaV07XHJcbiAgICBpZiAoIGl0ZW0uZWxlbWVudCA9PSBlbGVtICkge1xyXG4gICAgICAvLyByZXR1cm4gaXRlbVxyXG4gICAgICByZXR1cm4gaXRlbTtcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogZ2V0IGNvbGxlY3Rpb24gb2YgT3V0bGF5ZXIuSXRlbXMsIGdpdmVuIEVsZW1lbnRzXHJcbiAqIEBwYXJhbSB7QXJyYXl9IGVsZW1zXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gaXRlbXMgLSBPdXRsYXllci5JdGVtc1xyXG4gKi9cclxucHJvdG8uZ2V0SXRlbXMgPSBmdW5jdGlvbiggZWxlbXMgKSB7XHJcbiAgZWxlbXMgPSB1dGlscy5tYWtlQXJyYXkoIGVsZW1zICk7XHJcbiAgdmFyIGl0ZW1zID0gW107XHJcbiAgZWxlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgICB2YXIgaXRlbSA9IHRoaXMuZ2V0SXRlbSggZWxlbSApO1xyXG4gICAgaWYgKCBpdGVtICkge1xyXG4gICAgICBpdGVtcy5wdXNoKCBpdGVtICk7XHJcbiAgICB9XHJcbiAgfSwgdGhpcyApO1xyXG5cclxuICByZXR1cm4gaXRlbXM7XHJcbn07XHJcblxyXG4vKipcclxuICogcmVtb3ZlIGVsZW1lbnQocykgZnJvbSBpbnN0YW5jZSBhbmQgRE9NXHJcbiAqIEBwYXJhbSB7QXJyYXkgb3IgTm9kZUxpc3Qgb3IgRWxlbWVudH0gZWxlbXNcclxuICovXHJcbnByb3RvLnJlbW92ZSA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuICB2YXIgcmVtb3ZlSXRlbXMgPSB0aGlzLmdldEl0ZW1zKCBlbGVtcyApO1xyXG5cclxuICB0aGlzLl9lbWl0Q29tcGxldGVPbkl0ZW1zKCAncmVtb3ZlJywgcmVtb3ZlSXRlbXMgKTtcclxuXHJcbiAgLy8gYmFpbCBpZiBubyBpdGVtcyB0byByZW1vdmVcclxuICBpZiAoICFyZW1vdmVJdGVtcyB8fCAhcmVtb3ZlSXRlbXMubGVuZ3RoICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlSXRlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGl0ZW0gKSB7XHJcbiAgICBpdGVtLnJlbW92ZSgpO1xyXG4gICAgLy8gcmVtb3ZlIGl0ZW0gZnJvbSBjb2xsZWN0aW9uXHJcbiAgICB1dGlscy5yZW1vdmVGcm9tKCB0aGlzLml0ZW1zLCBpdGVtICk7XHJcbiAgfSwgdGhpcyApO1xyXG59O1xyXG5cclxuLy8gLS0tLS0gZGVzdHJveSAtLS0tLSAvL1xyXG5cclxuLy8gcmVtb3ZlIGFuZCBkaXNhYmxlIE91dGxheWVyIGluc3RhbmNlXHJcbnByb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuICAvLyBjbGVhbiB1cCBkeW5hbWljIHN0eWxlc1xyXG4gIHZhciBzdHlsZSA9IHRoaXMuZWxlbWVudC5zdHlsZTtcclxuICBzdHlsZS5oZWlnaHQgPSAnJztcclxuICBzdHlsZS5wb3NpdGlvbiA9ICcnO1xyXG4gIHN0eWxlLndpZHRoID0gJyc7XHJcbiAgLy8gZGVzdHJveSBpdGVtc1xyXG4gIHRoaXMuaXRlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGl0ZW0gKSB7XHJcbiAgICBpdGVtLmRlc3Ryb3koKTtcclxuICB9KTtcclxuXHJcbiAgdGhpcy51bmJpbmRSZXNpemUoKTtcclxuXHJcbiAgdmFyIGlkID0gdGhpcy5lbGVtZW50Lm91dGxheWVyR1VJRDtcclxuICBkZWxldGUgaW5zdGFuY2VzWyBpZCBdOyAvLyByZW1vdmUgcmVmZXJlbmNlIHRvIGluc3RhbmNlIGJ5IGlkXHJcbiAgZGVsZXRlIHRoaXMuZWxlbWVudC5vdXRsYXllckdVSUQ7XHJcbiAgLy8gcmVtb3ZlIGRhdGEgZm9yIGpRdWVyeVxyXG4gIGlmICggalF1ZXJ5ICkge1xyXG4gICAgalF1ZXJ5LnJlbW92ZURhdGEoIHRoaXMuZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lc3BhY2UgKTtcclxuICB9XHJcblxyXG59O1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZGF0YSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuLyoqXHJcbiAqIGdldCBPdXRsYXllciBpbnN0YW5jZSBmcm9tIGVsZW1lbnRcclxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtXHJcbiAqIEByZXR1cm5zIHtPdXRsYXllcn1cclxuICovXHJcbk91dGxheWVyLmRhdGEgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuICBlbGVtID0gdXRpbHMuZ2V0UXVlcnlFbGVtZW50KCBlbGVtICk7XHJcbiAgdmFyIGlkID0gZWxlbSAmJiBlbGVtLm91dGxheWVyR1VJRDtcclxuICByZXR1cm4gaWQgJiYgaW5zdGFuY2VzWyBpZCBdO1xyXG59O1xyXG5cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGNyZWF0ZSBPdXRsYXllciBjbGFzcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuLyoqXHJcbiAqIGNyZWF0ZSBhIGxheW91dCBjbGFzc1xyXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXHJcbiAqL1xyXG5PdXRsYXllci5jcmVhdGUgPSBmdW5jdGlvbiggbmFtZXNwYWNlLCBvcHRpb25zICkge1xyXG4gIC8vIHN1Yi1jbGFzcyBPdXRsYXllclxyXG4gIHZhciBMYXlvdXQgPSBzdWJjbGFzcyggT3V0bGF5ZXIgKTtcclxuICAvLyBhcHBseSBuZXcgb3B0aW9ucyBhbmQgY29tcGF0T3B0aW9uc1xyXG4gIExheW91dC5kZWZhdWx0cyA9IHV0aWxzLmV4dGVuZCgge30sIE91dGxheWVyLmRlZmF1bHRzICk7XHJcbiAgdXRpbHMuZXh0ZW5kKCBMYXlvdXQuZGVmYXVsdHMsIG9wdGlvbnMgKTtcclxuICBMYXlvdXQuY29tcGF0T3B0aW9ucyA9IHV0aWxzLmV4dGVuZCgge30sIE91dGxheWVyLmNvbXBhdE9wdGlvbnMgICk7XHJcblxyXG4gIExheW91dC5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XHJcblxyXG4gIExheW91dC5kYXRhID0gT3V0bGF5ZXIuZGF0YTtcclxuXHJcbiAgLy8gc3ViLWNsYXNzIEl0ZW1cclxuICBMYXlvdXQuSXRlbSA9IHN1YmNsYXNzKCBJdGVtICk7XHJcblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGRlY2xhcmF0aXZlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4gIHV0aWxzLmh0bWxJbml0KCBMYXlvdXQsIG5hbWVzcGFjZSApO1xyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBqUXVlcnkgYnJpZGdlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4gIC8vIG1ha2UgaW50byBqUXVlcnkgcGx1Z2luXHJcbiAgaWYgKCBqUXVlcnkgJiYgalF1ZXJ5LmJyaWRnZXQgKSB7XHJcbiAgICBqUXVlcnkuYnJpZGdldCggbmFtZXNwYWNlLCBMYXlvdXQgKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBMYXlvdXQ7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBzdWJjbGFzcyggUGFyZW50ICkge1xyXG4gIGZ1bmN0aW9uIFN1YkNsYXNzKCkge1xyXG4gICAgUGFyZW50LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuICB9XHJcblxyXG4gIFN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFBhcmVudC5wcm90b3R5cGUgKTtcclxuICBTdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTdWJDbGFzcztcclxuXHJcbiAgcmV0dXJuIFN1YkNsYXNzO1xyXG59XHJcblxyXG4vLyAtLS0tLSBoZWxwZXJzIC0tLS0tIC8vXHJcblxyXG4vLyBob3cgbWFueSBtaWxsaXNlY29uZHMgYXJlIGluIGVhY2ggdW5pdFxyXG52YXIgbXNVbml0cyA9IHtcclxuICBtczogMSxcclxuICBzOiAxMDAwXHJcbn07XHJcblxyXG4vLyBtdW5nZSB0aW1lLWxpa2UgcGFyYW1ldGVyIGludG8gbWlsbGlzZWNvbmQgbnVtYmVyXHJcbi8vICcwLjRzJyAtPiA0MFxyXG5mdW5jdGlvbiBnZXRNaWxsaXNlY29uZHMoIHRpbWUgKSB7XHJcbiAgaWYgKCB0eXBlb2YgdGltZSA9PSAnbnVtYmVyJyApIHtcclxuICAgIHJldHVybiB0aW1lO1xyXG4gIH1cclxuICB2YXIgbWF0Y2hlcyA9IHRpbWUubWF0Y2goIC8oXlxcZCpcXC4/XFxkKikoXFx3KikvICk7XHJcbiAgdmFyIG51bSA9IG1hdGNoZXMgJiYgbWF0Y2hlc1sxXTtcclxuICB2YXIgdW5pdCA9IG1hdGNoZXMgJiYgbWF0Y2hlc1syXTtcclxuICBpZiAoICFudW0ubGVuZ3RoICkge1xyXG4gICAgcmV0dXJuIDA7XHJcbiAgfVxyXG4gIG51bSA9IHBhcnNlRmxvYXQoIG51bSApO1xyXG4gIHZhciBtdWx0ID0gbXNVbml0c1sgdW5pdCBdIHx8IDE7XHJcbiAgcmV0dXJuIG51bSAqIG11bHQ7XHJcbn1cclxuXHJcbi8vIC0tLS0tIGZpbiAtLS0tLSAvL1xyXG5cclxuLy8gYmFjayBpbiBnbG9iYWxcclxuT3V0bGF5ZXIuSXRlbSA9IEl0ZW07XHJcblxyXG5yZXR1cm4gT3V0bGF5ZXI7XHJcblxyXG59KSk7XHJcblxyXG4vKipcclxuICogSXNvdG9wZSBJdGVtXHJcbioqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xyXG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxyXG4gIC8qIGpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qZ2xvYmFscyBkZWZpbmUsIG1vZHVsZSwgcmVxdWlyZSAqL1xyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgICAvLyBBTURcclxuICAgIGRlZmluZSggJ2lzb3RvcGUtbGF5b3V0L2pzL2l0ZW0nLFtcclxuICAgICAgICAnb3V0bGF5ZXIvb3V0bGF5ZXInXHJcbiAgICAgIF0sXHJcbiAgICAgIGZhY3RvcnkgKTtcclxuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xyXG4gICAgLy8gQ29tbW9uSlNcclxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcclxuICAgICAgcmVxdWlyZSgnb3V0bGF5ZXInKVxyXG4gICAgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gYnJvd3NlciBnbG9iYWxcclxuICAgIHdpbmRvdy5Jc290b3BlID0gd2luZG93Lklzb3RvcGUgfHwge307XHJcbiAgICB3aW5kb3cuSXNvdG9wZS5JdGVtID0gZmFjdG9yeShcclxuICAgICAgd2luZG93Lk91dGxheWVyXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggT3V0bGF5ZXIgKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEl0ZW0gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbi8vIHN1Yi1jbGFzcyBPdXRsYXllciBJdGVtXHJcbmZ1bmN0aW9uIEl0ZW0oKSB7XHJcbiAgT3V0bGF5ZXIuSXRlbS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XHJcbn1cclxuXHJcbnZhciBwcm90byA9IEl0ZW0ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggT3V0bGF5ZXIuSXRlbS5wcm90b3R5cGUgKTtcclxuXHJcbnZhciBfY3JlYXRlID0gcHJvdG8uX2NyZWF0ZTtcclxucHJvdG8uX2NyZWF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIGFzc2lnbiBpZCwgdXNlZCBmb3Igb3JpZ2luYWwtb3JkZXIgc29ydGluZ1xyXG4gIHRoaXMuaWQgPSB0aGlzLmxheW91dC5pdGVtR1VJRCsrO1xyXG4gIF9jcmVhdGUuY2FsbCggdGhpcyApO1xyXG4gIHRoaXMuc29ydERhdGEgPSB7fTtcclxufTtcclxuXHJcbnByb3RvLnVwZGF0ZVNvcnREYXRhID0gZnVuY3Rpb24oKSB7XHJcbiAgaWYgKCB0aGlzLmlzSWdub3JlZCApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLy8gZGVmYXVsdCBzb3J0ZXJzXHJcbiAgdGhpcy5zb3J0RGF0YS5pZCA9IHRoaXMuaWQ7XHJcbiAgLy8gZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcclxuICB0aGlzLnNvcnREYXRhWydvcmlnaW5hbC1vcmRlciddID0gdGhpcy5pZDtcclxuICB0aGlzLnNvcnREYXRhLnJhbmRvbSA9IE1hdGgucmFuZG9tKCk7XHJcbiAgLy8gZ28gdGhydSBnZXRTb3J0RGF0YSBvYmogYW5kIGFwcGx5IHRoZSBzb3J0ZXJzXHJcbiAgdmFyIGdldFNvcnREYXRhID0gdGhpcy5sYXlvdXQub3B0aW9ucy5nZXRTb3J0RGF0YTtcclxuICB2YXIgc29ydGVycyA9IHRoaXMubGF5b3V0Ll9zb3J0ZXJzO1xyXG4gIGZvciAoIHZhciBrZXkgaW4gZ2V0U29ydERhdGEgKSB7XHJcbiAgICB2YXIgc29ydGVyID0gc29ydGVyc1sga2V5IF07XHJcbiAgICB0aGlzLnNvcnREYXRhWyBrZXkgXSA9IHNvcnRlciggdGhpcy5lbGVtZW50LCB0aGlzICk7XHJcbiAgfVxyXG59O1xyXG5cclxudmFyIF9kZXN0cm95ID0gcHJvdG8uZGVzdHJveTtcclxucHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIGNhbGwgc3VwZXJcclxuICBfZGVzdHJveS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XHJcbiAgLy8gcmVzZXQgZGlzcGxheSwgIzc0MVxyXG4gIHRoaXMuY3NzKHtcclxuICAgIGRpc3BsYXk6ICcnXHJcbiAgfSk7XHJcbn07XHJcblxyXG5yZXR1cm4gSXRlbTtcclxuXHJcbn0pKTtcclxuXHJcbi8qKlxyXG4gKiBJc290b3BlIExheW91dE1vZGVcclxuICovXHJcblxyXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XHJcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXHJcbiAgLyoganNoaW50IHN0cmljdDogZmFsc2UgKi8gLypnbG9iYWxzIGRlZmluZSwgbW9kdWxlLCByZXF1aXJlICovXHJcbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAgIC8vIEFNRFxyXG4gICAgZGVmaW5lKCAnaXNvdG9wZS1sYXlvdXQvanMvbGF5b3V0LW1vZGUnLFtcclxuICAgICAgICAnZ2V0LXNpemUvZ2V0LXNpemUnLFxyXG4gICAgICAgICdvdXRsYXllci9vdXRsYXllcidcclxuICAgICAgXSxcclxuICAgICAgZmFjdG9yeSApO1xyXG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XHJcbiAgICAvLyBDb21tb25KU1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxyXG4gICAgICByZXF1aXJlKCdnZXQtc2l6ZScpLFxyXG4gICAgICByZXF1aXJlKCdvdXRsYXllcicpXHJcbiAgICApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBicm93c2VyIGdsb2JhbFxyXG4gICAgd2luZG93Lklzb3RvcGUgPSB3aW5kb3cuSXNvdG9wZSB8fCB7fTtcclxuICAgIHdpbmRvdy5Jc290b3BlLkxheW91dE1vZGUgPSBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3cuZ2V0U2l6ZSxcclxuICAgICAgd2luZG93Lk91dGxheWVyXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggZ2V0U2l6ZSwgT3V0bGF5ZXIgKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAvLyBsYXlvdXQgbW9kZSBjbGFzc1xyXG4gIGZ1bmN0aW9uIExheW91dE1vZGUoIGlzb3RvcGUgKSB7XHJcbiAgICB0aGlzLmlzb3RvcGUgPSBpc290b3BlO1xyXG4gICAgLy8gbGluayBwcm9wZXJ0aWVzXHJcbiAgICBpZiAoIGlzb3RvcGUgKSB7XHJcbiAgICAgIHRoaXMub3B0aW9ucyA9IGlzb3RvcGUub3B0aW9uc1sgdGhpcy5uYW1lc3BhY2UgXTtcclxuICAgICAgdGhpcy5lbGVtZW50ID0gaXNvdG9wZS5lbGVtZW50O1xyXG4gICAgICB0aGlzLml0ZW1zID0gaXNvdG9wZS5maWx0ZXJlZEl0ZW1zO1xyXG4gICAgICB0aGlzLnNpemUgPSBpc290b3BlLnNpemU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB2YXIgcHJvdG8gPSBMYXlvdXRNb2RlLnByb3RvdHlwZTtcclxuXHJcbiAgLyoqXHJcbiAgICogc29tZSBtZXRob2RzIHNob3VsZCBqdXN0IGRlZmVyIHRvIGRlZmF1bHQgT3V0bGF5ZXIgbWV0aG9kXHJcbiAgICogYW5kIHJlZmVyZW5jZSB0aGUgSXNvdG9wZSBpbnN0YW5jZSBhcyBgdGhpc2BcclxuICAqKi9cclxuICB2YXIgZmFjYWRlTWV0aG9kcyA9IFtcclxuICAgICdfcmVzZXRMYXlvdXQnLFxyXG4gICAgJ19nZXRJdGVtTGF5b3V0UG9zaXRpb24nLFxyXG4gICAgJ19tYW5hZ2VTdGFtcCcsXHJcbiAgICAnX2dldENvbnRhaW5lclNpemUnLFxyXG4gICAgJ19nZXRFbGVtZW50T2Zmc2V0JyxcclxuICAgICduZWVkc1Jlc2l6ZUxheW91dCcsXHJcbiAgICAnX2dldE9wdGlvbidcclxuICBdO1xyXG5cclxuICBmYWNhZGVNZXRob2RzLmZvckVhY2goIGZ1bmN0aW9uKCBtZXRob2ROYW1lICkge1xyXG4gICAgcHJvdG9bIG1ldGhvZE5hbWUgXSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gT3V0bGF5ZXIucHJvdG90eXBlWyBtZXRob2ROYW1lIF0uYXBwbHkoIHRoaXMuaXNvdG9wZSwgYXJndW1lbnRzICk7XHJcbiAgICB9O1xyXG4gIH0pO1xyXG5cclxuICAvLyAtLS0tLSAgLS0tLS0gLy9cclxuXHJcbiAgLy8gZm9yIGhvcml6b250YWwgbGF5b3V0IG1vZGVzLCBjaGVjayB2ZXJ0aWNhbCBzaXplXHJcbiAgcHJvdG8ubmVlZHNWZXJ0aWNhbFJlc2l6ZUxheW91dCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gZG9uJ3QgdHJpZ2dlciBpZiBzaXplIGRpZCBub3QgY2hhbmdlXHJcbiAgICB2YXIgc2l6ZSA9IGdldFNpemUoIHRoaXMuaXNvdG9wZS5lbGVtZW50ICk7XHJcbiAgICAvLyBjaGVjayB0aGF0IHRoaXMuc2l6ZSBhbmQgc2l6ZSBhcmUgdGhlcmVcclxuICAgIC8vIElFOCB0cmlnZ2VycyByZXNpemUgb24gYm9keSBzaXplIGNoYW5nZSwgc28gdGhleSBtaWdodCBub3QgYmVcclxuICAgIHZhciBoYXNTaXplcyA9IHRoaXMuaXNvdG9wZS5zaXplICYmIHNpemU7XHJcbiAgICByZXR1cm4gaGFzU2l6ZXMgJiYgc2l6ZS5pbm5lckhlaWdodCAhPSB0aGlzLmlzb3RvcGUuc2l6ZS5pbm5lckhlaWdodDtcclxuICB9O1xyXG5cclxuICAvLyAtLS0tLSBtZWFzdXJlbWVudHMgLS0tLS0gLy9cclxuXHJcbiAgcHJvdG8uX2dldE1lYXN1cmVtZW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB0aGlzLmlzb3RvcGUuX2dldE1lYXN1cmVtZW50LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuICB9O1xyXG5cclxuICBwcm90by5nZXRDb2x1bW5XaWR0aCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5nZXRTZWdtZW50U2l6ZSggJ2NvbHVtbicsICdXaWR0aCcgKTtcclxuICB9O1xyXG5cclxuICBwcm90by5nZXRSb3dIZWlnaHQgPSBmdW5jdGlvbigpIHtcclxuICAgIHRoaXMuZ2V0U2VnbWVudFNpemUoICdyb3cnLCAnSGVpZ2h0JyApO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIGdldCBjb2x1bW5XaWR0aCBvciByb3dIZWlnaHRcclxuICAgKiBzZWdtZW50OiAnY29sdW1uJyBvciAncm93J1xyXG4gICAqIHNpemUgJ1dpZHRoJyBvciAnSGVpZ2h0J1xyXG4gICoqL1xyXG4gIHByb3RvLmdldFNlZ21lbnRTaXplID0gZnVuY3Rpb24oIHNlZ21lbnQsIHNpemUgKSB7XHJcbiAgICB2YXIgc2VnbWVudE5hbWUgPSBzZWdtZW50ICsgc2l6ZTtcclxuICAgIHZhciBvdXRlclNpemUgPSAnb3V0ZXInICsgc2l6ZTtcclxuICAgIC8vIGNvbHVtbldpZHRoIC8gb3V0ZXJXaWR0aCAvLyByb3dIZWlnaHQgLyBvdXRlckhlaWdodFxyXG4gICAgdGhpcy5fZ2V0TWVhc3VyZW1lbnQoIHNlZ21lbnROYW1lLCBvdXRlclNpemUgKTtcclxuICAgIC8vIGdvdCByb3dIZWlnaHQgb3IgY29sdW1uV2lkdGgsIHdlIGNhbiBjaGlsbFxyXG4gICAgaWYgKCB0aGlzWyBzZWdtZW50TmFtZSBdICkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyBmYWxsIGJhY2sgdG8gaXRlbSBvZiBmaXJzdCBlbGVtZW50XHJcbiAgICB2YXIgZmlyc3RJdGVtU2l6ZSA9IHRoaXMuZ2V0Rmlyc3RJdGVtU2l6ZSgpO1xyXG4gICAgdGhpc1sgc2VnbWVudE5hbWUgXSA9IGZpcnN0SXRlbVNpemUgJiYgZmlyc3RJdGVtU2l6ZVsgb3V0ZXJTaXplIF0gfHxcclxuICAgICAgLy8gb3Igc2l6ZSBvZiBjb250YWluZXJcclxuICAgICAgdGhpcy5pc290b3BlLnNpemVbICdpbm5lcicgKyBzaXplIF07XHJcbiAgfTtcclxuXHJcbiAgcHJvdG8uZ2V0Rmlyc3RJdGVtU2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGZpcnN0SXRlbSA9IHRoaXMuaXNvdG9wZS5maWx0ZXJlZEl0ZW1zWzBdO1xyXG4gICAgcmV0dXJuIGZpcnN0SXRlbSAmJiBmaXJzdEl0ZW0uZWxlbWVudCAmJiBnZXRTaXplKCBmaXJzdEl0ZW0uZWxlbWVudCApO1xyXG4gIH07XHJcblxyXG4gIC8vIC0tLS0tIG1ldGhvZHMgdGhhdCBzaG91bGQgcmVmZXJlbmNlIGlzb3RvcGUgLS0tLS0gLy9cclxuXHJcbiAgcHJvdG8ubGF5b3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB0aGlzLmlzb3RvcGUubGF5b3V0LmFwcGx5KCB0aGlzLmlzb3RvcGUsIGFyZ3VtZW50cyApO1xyXG4gIH07XHJcblxyXG4gIHByb3RvLmdldFNpemUgPSBmdW5jdGlvbigpIHtcclxuICAgIHRoaXMuaXNvdG9wZS5nZXRTaXplKCk7XHJcbiAgICB0aGlzLnNpemUgPSB0aGlzLmlzb3RvcGUuc2l6ZTtcclxuICB9O1xyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBjcmVhdGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbiAgTGF5b3V0TW9kZS5tb2RlcyA9IHt9O1xyXG5cclxuICBMYXlvdXRNb2RlLmNyZWF0ZSA9IGZ1bmN0aW9uKCBuYW1lc3BhY2UsIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgZnVuY3Rpb24gTW9kZSgpIHtcclxuICAgICAgTGF5b3V0TW9kZS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XHJcbiAgICB9XHJcblxyXG4gICAgTW9kZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBwcm90byApO1xyXG4gICAgTW9kZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNb2RlO1xyXG5cclxuICAgIC8vIGRlZmF1bHQgb3B0aW9uc1xyXG4gICAgaWYgKCBvcHRpb25zICkge1xyXG4gICAgICBNb2RlLm9wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgfVxyXG5cclxuICAgIE1vZGUucHJvdG90eXBlLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcclxuICAgIC8vIHJlZ2lzdGVyIGluIElzb3RvcGVcclxuICAgIExheW91dE1vZGUubW9kZXNbIG5hbWVzcGFjZSBdID0gTW9kZTtcclxuXHJcbiAgICByZXR1cm4gTW9kZTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gTGF5b3V0TW9kZTtcclxuXHJcbn0pKTtcclxuXHJcbi8qIVxyXG4gKiBNYXNvbnJ5IHY0LjIuMVxyXG4gKiBDYXNjYWRpbmcgZ3JpZCBsYXlvdXQgbGlicmFyeVxyXG4gKiBodHRwczovL21hc29ucnkuZGVzYW5kcm8uY29tXHJcbiAqIE1JVCBMaWNlbnNlXHJcbiAqIGJ5IERhdmlkIERlU2FuZHJvXHJcbiAqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xyXG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxyXG4gIC8qIGpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qZ2xvYmFscyBkZWZpbmUsIG1vZHVsZSwgcmVxdWlyZSAqL1xyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgICAvLyBBTURcclxuICAgIGRlZmluZSggJ21hc29ucnktbGF5b3V0L21hc29ucnknLFtcclxuICAgICAgICAnb3V0bGF5ZXIvb3V0bGF5ZXInLFxyXG4gICAgICAgICdnZXQtc2l6ZS9nZXQtc2l6ZSdcclxuICAgICAgXSxcclxuICAgICAgZmFjdG9yeSApO1xyXG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XHJcbiAgICAvLyBDb21tb25KU1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxyXG4gICAgICByZXF1aXJlKCdvdXRsYXllcicpLFxyXG4gICAgICByZXF1aXJlKCdnZXQtc2l6ZScpXHJcbiAgICApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBicm93c2VyIGdsb2JhbFxyXG4gICAgd2luZG93Lk1hc29ucnkgPSBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3cuT3V0bGF5ZXIsXHJcbiAgICAgIHdpbmRvdy5nZXRTaXplXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggT3V0bGF5ZXIsIGdldFNpemUgKSB7XHJcblxyXG5cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIG1hc29ucnlEZWZpbml0aW9uIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4gIC8vIGNyZWF0ZSBhbiBPdXRsYXllciBsYXlvdXQgY2xhc3NcclxuICB2YXIgTWFzb25yeSA9IE91dGxheWVyLmNyZWF0ZSgnbWFzb25yeScpO1xyXG4gIC8vIGlzRml0V2lkdGggLT4gZml0V2lkdGhcclxuICBNYXNvbnJ5LmNvbXBhdE9wdGlvbnMuZml0V2lkdGggPSAnaXNGaXRXaWR0aCc7XHJcblxyXG4gIHZhciBwcm90byA9IE1hc29ucnkucHJvdG90eXBlO1xyXG5cclxuICBwcm90by5fcmVzZXRMYXlvdXQgPSBmdW5jdGlvbigpIHtcclxuICAgIHRoaXMuZ2V0U2l6ZSgpO1xyXG4gICAgdGhpcy5fZ2V0TWVhc3VyZW1lbnQoICdjb2x1bW5XaWR0aCcsICdvdXRlcldpZHRoJyApO1xyXG4gICAgdGhpcy5fZ2V0TWVhc3VyZW1lbnQoICdndXR0ZXInLCAnb3V0ZXJXaWR0aCcgKTtcclxuICAgIHRoaXMubWVhc3VyZUNvbHVtbnMoKTtcclxuXHJcbiAgICAvLyByZXNldCBjb2x1bW4gWVxyXG4gICAgdGhpcy5jb2xZcyA9IFtdO1xyXG4gICAgZm9yICggdmFyIGk9MDsgaSA8IHRoaXMuY29sczsgaSsrICkge1xyXG4gICAgICB0aGlzLmNvbFlzLnB1c2goIDAgKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLm1heFkgPSAwO1xyXG4gICAgdGhpcy5ob3Jpem9udGFsQ29sSW5kZXggPSAwO1xyXG4gIH07XHJcblxyXG4gIHByb3RvLm1lYXN1cmVDb2x1bW5zID0gZnVuY3Rpb24oKSB7XHJcbiAgICB0aGlzLmdldENvbnRhaW5lcldpZHRoKCk7XHJcbiAgICAvLyBpZiBjb2x1bW5XaWR0aCBpcyAwLCBkZWZhdWx0IHRvIG91dGVyV2lkdGggb2YgZmlyc3QgaXRlbVxyXG4gICAgaWYgKCAhdGhpcy5jb2x1bW5XaWR0aCApIHtcclxuICAgICAgdmFyIGZpcnN0SXRlbSA9IHRoaXMuaXRlbXNbMF07XHJcbiAgICAgIHZhciBmaXJzdEl0ZW1FbGVtID0gZmlyc3RJdGVtICYmIGZpcnN0SXRlbS5lbGVtZW50O1xyXG4gICAgICAvLyBjb2x1bW5XaWR0aCBmYWxsIGJhY2sgdG8gaXRlbSBvZiBmaXJzdCBlbGVtZW50XHJcbiAgICAgIHRoaXMuY29sdW1uV2lkdGggPSBmaXJzdEl0ZW1FbGVtICYmIGdldFNpemUoIGZpcnN0SXRlbUVsZW0gKS5vdXRlcldpZHRoIHx8XHJcbiAgICAgICAgLy8gaWYgZmlyc3QgZWxlbSBoYXMgbm8gd2lkdGgsIGRlZmF1bHQgdG8gc2l6ZSBvZiBjb250YWluZXJcclxuICAgICAgICB0aGlzLmNvbnRhaW5lcldpZHRoO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBjb2x1bW5XaWR0aCA9IHRoaXMuY29sdW1uV2lkdGggKz0gdGhpcy5ndXR0ZXI7XHJcblxyXG4gICAgLy8gY2FsY3VsYXRlIGNvbHVtbnNcclxuICAgIHZhciBjb250YWluZXJXaWR0aCA9IHRoaXMuY29udGFpbmVyV2lkdGggKyB0aGlzLmd1dHRlcjtcclxuICAgIHZhciBjb2xzID0gY29udGFpbmVyV2lkdGggLyBjb2x1bW5XaWR0aDtcclxuICAgIC8vIGZpeCByb3VuZGluZyBlcnJvcnMsIHR5cGljYWxseSB3aXRoIGd1dHRlcnNcclxuICAgIHZhciBleGNlc3MgPSBjb2x1bW5XaWR0aCAtIGNvbnRhaW5lcldpZHRoICUgY29sdW1uV2lkdGg7XHJcbiAgICAvLyBpZiBvdmVyc2hvb3QgaXMgbGVzcyB0aGFuIGEgcGl4ZWwsIHJvdW5kIHVwLCBvdGhlcndpc2UgZmxvb3IgaXRcclxuICAgIHZhciBtYXRoTWV0aG9kID0gZXhjZXNzICYmIGV4Y2VzcyA8IDEgPyAncm91bmQnIDogJ2Zsb29yJztcclxuICAgIGNvbHMgPSBNYXRoWyBtYXRoTWV0aG9kIF0oIGNvbHMgKTtcclxuICAgIHRoaXMuY29scyA9IE1hdGgubWF4KCBjb2xzLCAxICk7XHJcbiAgfTtcclxuXHJcbiAgcHJvdG8uZ2V0Q29udGFpbmVyV2lkdGggPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIGNvbnRhaW5lciBpcyBwYXJlbnQgaWYgZml0IHdpZHRoXHJcbiAgICB2YXIgaXNGaXRXaWR0aCA9IHRoaXMuX2dldE9wdGlvbignZml0V2lkdGgnKTtcclxuICAgIHZhciBjb250YWluZXIgPSBpc0ZpdFdpZHRoID8gdGhpcy5lbGVtZW50LnBhcmVudE5vZGUgOiB0aGlzLmVsZW1lbnQ7XHJcbiAgICAvLyBjaGVjayB0aGF0IHRoaXMuc2l6ZSBhbmQgc2l6ZSBhcmUgdGhlcmVcclxuICAgIC8vIElFOCB0cmlnZ2VycyByZXNpemUgb24gYm9keSBzaXplIGNoYW5nZSwgc28gdGhleSBtaWdodCBub3QgYmVcclxuICAgIHZhciBzaXplID0gZ2V0U2l6ZSggY29udGFpbmVyICk7XHJcbiAgICB0aGlzLmNvbnRhaW5lcldpZHRoID0gc2l6ZSAmJiBzaXplLmlubmVyV2lkdGg7XHJcbiAgfTtcclxuXHJcbiAgcHJvdG8uX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCBpdGVtICkge1xyXG4gICAgaXRlbS5nZXRTaXplKCk7XHJcbiAgICAvLyBob3cgbWFueSBjb2x1bW5zIGRvZXMgdGhpcyBicmljayBzcGFuXHJcbiAgICB2YXIgcmVtYWluZGVyID0gaXRlbS5zaXplLm91dGVyV2lkdGggJSB0aGlzLmNvbHVtbldpZHRoO1xyXG4gICAgdmFyIG1hdGhNZXRob2QgPSByZW1haW5kZXIgJiYgcmVtYWluZGVyIDwgMSA/ICdyb3VuZCcgOiAnY2VpbCc7XHJcbiAgICAvLyByb3VuZCBpZiBvZmYgYnkgMSBwaXhlbCwgb3RoZXJ3aXNlIHVzZSBjZWlsXHJcbiAgICB2YXIgY29sU3BhbiA9IE1hdGhbIG1hdGhNZXRob2QgXSggaXRlbS5zaXplLm91dGVyV2lkdGggLyB0aGlzLmNvbHVtbldpZHRoICk7XHJcbiAgICBjb2xTcGFuID0gTWF0aC5taW4oIGNvbFNwYW4sIHRoaXMuY29scyApO1xyXG4gICAgLy8gdXNlIGhvcml6b250YWwgb3IgdG9wIGNvbHVtbiBwb3NpdGlvblxyXG4gICAgdmFyIGNvbFBvc01ldGhvZCA9IHRoaXMub3B0aW9ucy5ob3Jpem9udGFsT3JkZXIgP1xyXG4gICAgICAnX2dldEhvcml6b250YWxDb2xQb3NpdGlvbicgOiAnX2dldFRvcENvbFBvc2l0aW9uJztcclxuICAgIHZhciBjb2xQb3NpdGlvbiA9IHRoaXNbIGNvbFBvc01ldGhvZCBdKCBjb2xTcGFuLCBpdGVtICk7XHJcbiAgICAvLyBwb3NpdGlvbiB0aGUgYnJpY2tcclxuICAgIHZhciBwb3NpdGlvbiA9IHtcclxuICAgICAgeDogdGhpcy5jb2x1bW5XaWR0aCAqIGNvbFBvc2l0aW9uLmNvbCxcclxuICAgICAgeTogY29sUG9zaXRpb24ueVxyXG4gICAgfTtcclxuICAgIC8vIGFwcGx5IHNldEhlaWdodCB0byBuZWNlc3NhcnkgY29sdW1uc1xyXG4gICAgdmFyIHNldEhlaWdodCA9IGNvbFBvc2l0aW9uLnkgKyBpdGVtLnNpemUub3V0ZXJIZWlnaHQ7XHJcbiAgICB2YXIgc2V0TWF4ID0gY29sU3BhbiArIGNvbFBvc2l0aW9uLmNvbDtcclxuICAgIGZvciAoIHZhciBpID0gY29sUG9zaXRpb24uY29sOyBpIDwgc2V0TWF4OyBpKysgKSB7XHJcbiAgICAgIHRoaXMuY29sWXNbaV0gPSBzZXRIZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHBvc2l0aW9uO1xyXG4gIH07XHJcblxyXG4gIHByb3RvLl9nZXRUb3BDb2xQb3NpdGlvbiA9IGZ1bmN0aW9uKCBjb2xTcGFuICkge1xyXG4gICAgdmFyIGNvbEdyb3VwID0gdGhpcy5fZ2V0VG9wQ29sR3JvdXAoIGNvbFNwYW4gKTtcclxuICAgIC8vIGdldCB0aGUgbWluaW11bSBZIHZhbHVlIGZyb20gdGhlIGNvbHVtbnNcclxuICAgIHZhciBtaW5pbXVtWSA9IE1hdGgubWluLmFwcGx5KCBNYXRoLCBjb2xHcm91cCApO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGNvbDogY29sR3JvdXAuaW5kZXhPZiggbWluaW11bVkgKSxcclxuICAgICAgeTogbWluaW11bVksXHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBjb2xTcGFuIC0gbnVtYmVyIG9mIGNvbHVtbnMgdGhlIGVsZW1lbnQgc3BhbnNcclxuICAgKiBAcmV0dXJucyB7QXJyYXl9IGNvbEdyb3VwXHJcbiAgICovXHJcbiAgcHJvdG8uX2dldFRvcENvbEdyb3VwID0gZnVuY3Rpb24oIGNvbFNwYW4gKSB7XHJcbiAgICBpZiAoIGNvbFNwYW4gPCAyICkge1xyXG4gICAgICAvLyBpZiBicmljayBzcGFucyBvbmx5IG9uZSBjb2x1bW4sIHVzZSBhbGwgdGhlIGNvbHVtbiBZc1xyXG4gICAgICByZXR1cm4gdGhpcy5jb2xZcztcclxuICAgIH1cclxuXHJcbiAgICB2YXIgY29sR3JvdXAgPSBbXTtcclxuICAgIC8vIGhvdyBtYW55IGRpZmZlcmVudCBwbGFjZXMgY291bGQgdGhpcyBicmljayBmaXQgaG9yaXpvbnRhbGx5XHJcbiAgICB2YXIgZ3JvdXBDb3VudCA9IHRoaXMuY29scyArIDEgLSBjb2xTcGFuO1xyXG4gICAgLy8gZm9yIGVhY2ggZ3JvdXAgcG90ZW50aWFsIGhvcml6b250YWwgcG9zaXRpb25cclxuICAgIGZvciAoIHZhciBpID0gMDsgaSA8IGdyb3VwQ291bnQ7IGkrKyApIHtcclxuICAgICAgY29sR3JvdXBbaV0gPSB0aGlzLl9nZXRDb2xHcm91cFkoIGksIGNvbFNwYW4gKTtcclxuICAgIH1cclxuICAgIHJldHVybiBjb2xHcm91cDtcclxuICB9O1xyXG5cclxuICBwcm90by5fZ2V0Q29sR3JvdXBZID0gZnVuY3Rpb24oIGNvbCwgY29sU3BhbiApIHtcclxuICAgIGlmICggY29sU3BhbiA8IDIgKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmNvbFlzWyBjb2wgXTtcclxuICAgIH1cclxuICAgIC8vIG1ha2UgYW4gYXJyYXkgb2YgY29sWSB2YWx1ZXMgZm9yIHRoYXQgb25lIGdyb3VwXHJcbiAgICB2YXIgZ3JvdXBDb2xZcyA9IHRoaXMuY29sWXMuc2xpY2UoIGNvbCwgY29sICsgY29sU3BhbiApO1xyXG4gICAgLy8gYW5kIGdldCB0aGUgbWF4IHZhbHVlIG9mIHRoZSBhcnJheVxyXG4gICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KCBNYXRoLCBncm91cENvbFlzICk7XHJcbiAgfTtcclxuXHJcbiAgLy8gZ2V0IGNvbHVtbiBwb3NpdGlvbiBiYXNlZCBvbiBob3Jpem9udGFsIGluZGV4LiAjODczXHJcbiAgcHJvdG8uX2dldEhvcml6b250YWxDb2xQb3NpdGlvbiA9IGZ1bmN0aW9uKCBjb2xTcGFuLCBpdGVtICkge1xyXG4gICAgdmFyIGNvbCA9IHRoaXMuaG9yaXpvbnRhbENvbEluZGV4ICUgdGhpcy5jb2xzO1xyXG4gICAgdmFyIGlzT3ZlciA9IGNvbFNwYW4gPiAxICYmIGNvbCArIGNvbFNwYW4gPiB0aGlzLmNvbHM7XHJcbiAgICAvLyBzaGlmdCB0byBuZXh0IHJvdyBpZiBpdGVtIGNhbid0IGZpdCBvbiBjdXJyZW50IHJvd1xyXG4gICAgY29sID0gaXNPdmVyID8gMCA6IGNvbDtcclxuICAgIC8vIGRvbid0IGxldCB6ZXJvLXNpemUgaXRlbXMgdGFrZSB1cCBzcGFjZVxyXG4gICAgdmFyIGhhc1NpemUgPSBpdGVtLnNpemUub3V0ZXJXaWR0aCAmJiBpdGVtLnNpemUub3V0ZXJIZWlnaHQ7XHJcbiAgICB0aGlzLmhvcml6b250YWxDb2xJbmRleCA9IGhhc1NpemUgPyBjb2wgKyBjb2xTcGFuIDogdGhpcy5ob3Jpem9udGFsQ29sSW5kZXg7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgY29sOiBjb2wsXHJcbiAgICAgIHk6IHRoaXMuX2dldENvbEdyb3VwWSggY29sLCBjb2xTcGFuICksXHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG4gIHByb3RvLl9tYW5hZ2VTdGFtcCA9IGZ1bmN0aW9uKCBzdGFtcCApIHtcclxuICAgIHZhciBzdGFtcFNpemUgPSBnZXRTaXplKCBzdGFtcCApO1xyXG4gICAgdmFyIG9mZnNldCA9IHRoaXMuX2dldEVsZW1lbnRPZmZzZXQoIHN0YW1wICk7XHJcbiAgICAvLyBnZXQgdGhlIGNvbHVtbnMgdGhhdCB0aGlzIHN0YW1wIGFmZmVjdHNcclxuICAgIHZhciBpc09yaWdpbkxlZnQgPSB0aGlzLl9nZXRPcHRpb24oJ29yaWdpbkxlZnQnKTtcclxuICAgIHZhciBmaXJzdFggPSBpc09yaWdpbkxlZnQgPyBvZmZzZXQubGVmdCA6IG9mZnNldC5yaWdodDtcclxuICAgIHZhciBsYXN0WCA9IGZpcnN0WCArIHN0YW1wU2l6ZS5vdXRlcldpZHRoO1xyXG4gICAgdmFyIGZpcnN0Q29sID0gTWF0aC5mbG9vciggZmlyc3RYIC8gdGhpcy5jb2x1bW5XaWR0aCApO1xyXG4gICAgZmlyc3RDb2wgPSBNYXRoLm1heCggMCwgZmlyc3RDb2wgKTtcclxuICAgIHZhciBsYXN0Q29sID0gTWF0aC5mbG9vciggbGFzdFggLyB0aGlzLmNvbHVtbldpZHRoICk7XHJcbiAgICAvLyBsYXN0Q29sIHNob3VsZCBub3QgZ28gb3ZlciBpZiBtdWx0aXBsZSBvZiBjb2x1bW5XaWR0aCAjNDI1XHJcbiAgICBsYXN0Q29sIC09IGxhc3RYICUgdGhpcy5jb2x1bW5XaWR0aCA/IDAgOiAxO1xyXG4gICAgbGFzdENvbCA9IE1hdGgubWluKCB0aGlzLmNvbHMgLSAxLCBsYXN0Q29sICk7XHJcbiAgICAvLyBzZXQgY29sWXMgdG8gYm90dG9tIG9mIHRoZSBzdGFtcFxyXG5cclxuICAgIHZhciBpc09yaWdpblRvcCA9IHRoaXMuX2dldE9wdGlvbignb3JpZ2luVG9wJyk7XHJcbiAgICB2YXIgc3RhbXBNYXhZID0gKCBpc09yaWdpblRvcCA/IG9mZnNldC50b3AgOiBvZmZzZXQuYm90dG9tICkgK1xyXG4gICAgICBzdGFtcFNpemUub3V0ZXJIZWlnaHQ7XHJcbiAgICBmb3IgKCB2YXIgaSA9IGZpcnN0Q29sOyBpIDw9IGxhc3RDb2w7IGkrKyApIHtcclxuICAgICAgdGhpcy5jb2xZc1tpXSA9IE1hdGgubWF4KCBzdGFtcE1heFksIHRoaXMuY29sWXNbaV0gKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBwcm90by5fZ2V0Q29udGFpbmVyU2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5tYXhZID0gTWF0aC5tYXguYXBwbHkoIE1hdGgsIHRoaXMuY29sWXMgKTtcclxuICAgIHZhciBzaXplID0ge1xyXG4gICAgICBoZWlnaHQ6IHRoaXMubWF4WVxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAoIHRoaXMuX2dldE9wdGlvbignZml0V2lkdGgnKSApIHtcclxuICAgICAgc2l6ZS53aWR0aCA9IHRoaXMuX2dldENvbnRhaW5lckZpdFdpZHRoKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHNpemU7XHJcbiAgfTtcclxuXHJcbiAgcHJvdG8uX2dldENvbnRhaW5lckZpdFdpZHRoID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgdW51c2VkQ29scyA9IDA7XHJcbiAgICAvLyBjb3VudCB1bnVzZWQgY29sdW1uc1xyXG4gICAgdmFyIGkgPSB0aGlzLmNvbHM7XHJcbiAgICB3aGlsZSAoIC0taSApIHtcclxuICAgICAgaWYgKCB0aGlzLmNvbFlzW2ldICE9PSAwICkge1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIHVudXNlZENvbHMrKztcclxuICAgIH1cclxuICAgIC8vIGZpdCBjb250YWluZXIgdG8gY29sdW1ucyB0aGF0IGhhdmUgYmVlbiB1c2VkXHJcbiAgICByZXR1cm4gKCB0aGlzLmNvbHMgLSB1bnVzZWRDb2xzICkgKiB0aGlzLmNvbHVtbldpZHRoIC0gdGhpcy5ndXR0ZXI7XHJcbiAgfTtcclxuXHJcbiAgcHJvdG8ubmVlZHNSZXNpemVMYXlvdXQgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBwcmV2aW91c1dpZHRoID0gdGhpcy5jb250YWluZXJXaWR0aDtcclxuICAgIHRoaXMuZ2V0Q29udGFpbmVyV2lkdGgoKTtcclxuICAgIHJldHVybiBwcmV2aW91c1dpZHRoICE9IHRoaXMuY29udGFpbmVyV2lkdGg7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIE1hc29ucnk7XHJcblxyXG59KSk7XHJcblxyXG4vKiFcclxuICogTWFzb25yeSBsYXlvdXQgbW9kZVxyXG4gKiBzdWItY2xhc3NlcyBNYXNvbnJ5XHJcbiAqIGh0dHBzOi8vbWFzb25yeS5kZXNhbmRyby5jb21cclxuICovXHJcblxyXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XHJcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXHJcbiAgLyoganNoaW50IHN0cmljdDogZmFsc2UgKi8gLypnbG9iYWxzIGRlZmluZSwgbW9kdWxlLCByZXF1aXJlICovXHJcbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAgIC8vIEFNRFxyXG4gICAgZGVmaW5lKCAnaXNvdG9wZS1sYXlvdXQvanMvbGF5b3V0LW1vZGVzL21hc29ucnknLFtcclxuICAgICAgICAnLi4vbGF5b3V0LW1vZGUnLFxyXG4gICAgICAgICdtYXNvbnJ5LWxheW91dC9tYXNvbnJ5J1xyXG4gICAgICBdLFxyXG4gICAgICBmYWN0b3J5ICk7XHJcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcclxuICAgIC8vIENvbW1vbkpTXHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXHJcbiAgICAgIHJlcXVpcmUoJy4uL2xheW91dC1tb2RlJyksXHJcbiAgICAgIHJlcXVpcmUoJ21hc29ucnktbGF5b3V0JylcclxuICAgICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgICBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3cuSXNvdG9wZS5MYXlvdXRNb2RlLFxyXG4gICAgICB3aW5kb3cuTWFzb25yeVxyXG4gICAgKTtcclxuICB9XHJcblxyXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIExheW91dE1vZGUsIE1hc29ucnkgKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIG1hc29ucnlEZWZpbml0aW9uIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4gIC8vIGNyZWF0ZSBhbiBPdXRsYXllciBsYXlvdXQgY2xhc3NcclxuICB2YXIgTWFzb25yeU1vZGUgPSBMYXlvdXRNb2RlLmNyZWF0ZSgnbWFzb25yeScpO1xyXG5cclxuICB2YXIgcHJvdG8gPSBNYXNvbnJ5TW9kZS5wcm90b3R5cGU7XHJcblxyXG4gIHZhciBrZWVwTW9kZU1ldGhvZHMgPSB7XHJcbiAgICBfZ2V0RWxlbWVudE9mZnNldDogdHJ1ZSxcclxuICAgIGxheW91dDogdHJ1ZSxcclxuICAgIF9nZXRNZWFzdXJlbWVudDogdHJ1ZVxyXG4gIH07XHJcblxyXG4gIC8vIGluaGVyaXQgTWFzb25yeSBwcm90b3R5cGVcclxuICBmb3IgKCB2YXIgbWV0aG9kIGluIE1hc29ucnkucHJvdG90eXBlICkge1xyXG4gICAgLy8gZG8gbm90IGluaGVyaXQgbW9kZSBtZXRob2RzXHJcbiAgICBpZiAoICFrZWVwTW9kZU1ldGhvZHNbIG1ldGhvZCBdICkge1xyXG4gICAgICBwcm90b1sgbWV0aG9kIF0gPSBNYXNvbnJ5LnByb3RvdHlwZVsgbWV0aG9kIF07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB2YXIgbWVhc3VyZUNvbHVtbnMgPSBwcm90by5tZWFzdXJlQ29sdW1ucztcclxuICBwcm90by5tZWFzdXJlQ29sdW1ucyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gc2V0IGl0ZW1zLCB1c2VkIGlmIG1lYXN1cmluZyBmaXJzdCBpdGVtXHJcbiAgICB0aGlzLml0ZW1zID0gdGhpcy5pc290b3BlLmZpbHRlcmVkSXRlbXM7XHJcbiAgICBtZWFzdXJlQ29sdW1ucy5jYWxsKCB0aGlzICk7XHJcbiAgfTtcclxuXHJcbiAgLy8gcG9pbnQgdG8gbW9kZSBvcHRpb25zIGZvciBmaXRXaWR0aFxyXG4gIHZhciBfZ2V0T3B0aW9uID0gcHJvdG8uX2dldE9wdGlvbjtcclxuICBwcm90by5fZ2V0T3B0aW9uID0gZnVuY3Rpb24oIG9wdGlvbiApIHtcclxuICAgIGlmICggb3B0aW9uID09ICdmaXRXaWR0aCcgKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuaXNGaXRXaWR0aCAhPT0gdW5kZWZpbmVkID9cclxuICAgICAgICB0aGlzLm9wdGlvbnMuaXNGaXRXaWR0aCA6IHRoaXMub3B0aW9ucy5maXRXaWR0aDtcclxuICAgIH1cclxuICAgIHJldHVybiBfZ2V0T3B0aW9uLmFwcGx5KCB0aGlzLmlzb3RvcGUsIGFyZ3VtZW50cyApO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBNYXNvbnJ5TW9kZTtcclxuXHJcbn0pKTtcclxuXHJcbi8qKlxyXG4gKiBmaXRSb3dzIGxheW91dCBtb2RlXHJcbiAqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xyXG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxyXG4gIC8qIGpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qZ2xvYmFscyBkZWZpbmUsIG1vZHVsZSwgcmVxdWlyZSAqL1xyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgICAvLyBBTURcclxuICAgIGRlZmluZSggJ2lzb3RvcGUtbGF5b3V0L2pzL2xheW91dC1tb2Rlcy9maXQtcm93cycsW1xyXG4gICAgICAgICcuLi9sYXlvdXQtbW9kZSdcclxuICAgICAgXSxcclxuICAgICAgZmFjdG9yeSApO1xyXG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICkge1xyXG4gICAgLy8gQ29tbW9uSlNcclxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcclxuICAgICAgcmVxdWlyZSgnLi4vbGF5b3V0LW1vZGUnKVxyXG4gICAgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gYnJvd3NlciBnbG9iYWxcclxuICAgIGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdy5Jc290b3BlLkxheW91dE1vZGVcclxuICAgICk7XHJcbiAgfVxyXG5cclxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCBMYXlvdXRNb2RlICkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG52YXIgRml0Um93cyA9IExheW91dE1vZGUuY3JlYXRlKCdmaXRSb3dzJyk7XHJcblxyXG52YXIgcHJvdG8gPSBGaXRSb3dzLnByb3RvdHlwZTtcclxuXHJcbnByb3RvLl9yZXNldExheW91dCA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMueCA9IDA7XHJcbiAgdGhpcy55ID0gMDtcclxuICB0aGlzLm1heFkgPSAwO1xyXG4gIHRoaXMuX2dldE1lYXN1cmVtZW50KCAnZ3V0dGVyJywgJ291dGVyV2lkdGgnICk7XHJcbn07XHJcblxyXG5wcm90by5fZ2V0SXRlbUxheW91dFBvc2l0aW9uID0gZnVuY3Rpb24oIGl0ZW0gKSB7XHJcbiAgaXRlbS5nZXRTaXplKCk7XHJcblxyXG4gIHZhciBpdGVtV2lkdGggPSBpdGVtLnNpemUub3V0ZXJXaWR0aCArIHRoaXMuZ3V0dGVyO1xyXG4gIC8vIGlmIHRoaXMgZWxlbWVudCBjYW5ub3QgZml0IGluIHRoZSBjdXJyZW50IHJvd1xyXG4gIHZhciBjb250YWluZXJXaWR0aCA9IHRoaXMuaXNvdG9wZS5zaXplLmlubmVyV2lkdGggKyB0aGlzLmd1dHRlcjtcclxuICBpZiAoIHRoaXMueCAhPT0gMCAmJiBpdGVtV2lkdGggKyB0aGlzLnggPiBjb250YWluZXJXaWR0aCApIHtcclxuICAgIHRoaXMueCA9IDA7XHJcbiAgICB0aGlzLnkgPSB0aGlzLm1heFk7XHJcbiAgfVxyXG5cclxuICB2YXIgcG9zaXRpb24gPSB7XHJcbiAgICB4OiB0aGlzLngsXHJcbiAgICB5OiB0aGlzLnlcclxuICB9O1xyXG5cclxuICB0aGlzLm1heFkgPSBNYXRoLm1heCggdGhpcy5tYXhZLCB0aGlzLnkgKyBpdGVtLnNpemUub3V0ZXJIZWlnaHQgKTtcclxuICB0aGlzLnggKz0gaXRlbVdpZHRoO1xyXG5cclxuICByZXR1cm4gcG9zaXRpb247XHJcbn07XHJcblxyXG5wcm90by5fZ2V0Q29udGFpbmVyU2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7IGhlaWdodDogdGhpcy5tYXhZIH07XHJcbn07XHJcblxyXG5yZXR1cm4gRml0Um93cztcclxuXHJcbn0pKTtcclxuXHJcbi8qKlxyXG4gKiB2ZXJ0aWNhbCBsYXlvdXQgbW9kZVxyXG4gKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcclxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cclxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKmdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHJlcXVpcmUgKi9cclxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG4gICAgLy8gQU1EXHJcbiAgICBkZWZpbmUoICdpc290b3BlLWxheW91dC9qcy9sYXlvdXQtbW9kZXMvdmVydGljYWwnLFtcclxuICAgICAgICAnLi4vbGF5b3V0LW1vZGUnXHJcbiAgICAgIF0sXHJcbiAgICAgIGZhY3RvcnkgKTtcclxuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xyXG4gICAgLy8gQ29tbW9uSlNcclxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcclxuICAgICAgcmVxdWlyZSgnLi4vbGF5b3V0LW1vZGUnKVxyXG4gICAgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gYnJvd3NlciBnbG9iYWxcclxuICAgIGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdy5Jc290b3BlLkxheW91dE1vZGVcclxuICAgICk7XHJcbiAgfVxyXG5cclxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCBMYXlvdXRNb2RlICkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG52YXIgVmVydGljYWwgPSBMYXlvdXRNb2RlLmNyZWF0ZSggJ3ZlcnRpY2FsJywge1xyXG4gIGhvcml6b250YWxBbGlnbm1lbnQ6IDBcclxufSk7XHJcblxyXG52YXIgcHJvdG8gPSBWZXJ0aWNhbC5wcm90b3R5cGU7XHJcblxyXG5wcm90by5fcmVzZXRMYXlvdXQgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLnkgPSAwO1xyXG59O1xyXG5cclxucHJvdG8uX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCBpdGVtICkge1xyXG4gIGl0ZW0uZ2V0U2l6ZSgpO1xyXG4gIHZhciB4ID0gKCB0aGlzLmlzb3RvcGUuc2l6ZS5pbm5lcldpZHRoIC0gaXRlbS5zaXplLm91dGVyV2lkdGggKSAqXHJcbiAgICB0aGlzLm9wdGlvbnMuaG9yaXpvbnRhbEFsaWdubWVudDtcclxuICB2YXIgeSA9IHRoaXMueTtcclxuICB0aGlzLnkgKz0gaXRlbS5zaXplLm91dGVySGVpZ2h0O1xyXG4gIHJldHVybiB7IHg6IHgsIHk6IHkgfTtcclxufTtcclxuXHJcbnByb3RvLl9nZXRDb250YWluZXJTaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHsgaGVpZ2h0OiB0aGlzLnkgfTtcclxufTtcclxuXHJcbnJldHVybiBWZXJ0aWNhbDtcclxuXHJcbn0pKTtcclxuXHJcbi8qIVxyXG4gKiBJc290b3BlIHYzLjAuNlxyXG4gKlxyXG4gKiBMaWNlbnNlZCBHUEx2MyBmb3Igb3BlbiBzb3VyY2UgdXNlXHJcbiAqIG9yIElzb3RvcGUgQ29tbWVyY2lhbCBMaWNlbnNlIGZvciBjb21tZXJjaWFsIHVzZVxyXG4gKlxyXG4gKiBodHRwczovL2lzb3RvcGUubWV0YWZpenp5LmNvXHJcbiAqIENvcHlyaWdodCAyMDEwLTIwMTggTWV0YWZpenp5XHJcbiAqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xyXG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxyXG4gIC8qIGpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qZ2xvYmFscyBkZWZpbmUsIG1vZHVsZSwgcmVxdWlyZSAqL1xyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgICAvLyBBTURcclxuICAgIGRlZmluZSggW1xyXG4gICAgICAgICdvdXRsYXllci9vdXRsYXllcicsXHJcbiAgICAgICAgJ2dldC1zaXplL2dldC1zaXplJyxcclxuICAgICAgICAnZGVzYW5kcm8tbWF0Y2hlcy1zZWxlY3Rvci9tYXRjaGVzLXNlbGVjdG9yJyxcclxuICAgICAgICAnZml6enktdWktdXRpbHMvdXRpbHMnLFxyXG4gICAgICAgICdpc290b3BlLWxheW91dC9qcy9pdGVtJyxcclxuICAgICAgICAnaXNvdG9wZS1sYXlvdXQvanMvbGF5b3V0LW1vZGUnLFxyXG4gICAgICAgIC8vIGluY2x1ZGUgZGVmYXVsdCBsYXlvdXQgbW9kZXNcclxuICAgICAgICAnaXNvdG9wZS1sYXlvdXQvanMvbGF5b3V0LW1vZGVzL21hc29ucnknLFxyXG4gICAgICAgICdpc290b3BlLWxheW91dC9qcy9sYXlvdXQtbW9kZXMvZml0LXJvd3MnLFxyXG4gICAgICAgICdpc290b3BlLWxheW91dC9qcy9sYXlvdXQtbW9kZXMvdmVydGljYWwnXHJcbiAgICAgIF0sXHJcbiAgICAgIGZ1bmN0aW9uKCBPdXRsYXllciwgZ2V0U2l6ZSwgbWF0Y2hlc1NlbGVjdG9yLCB1dGlscywgSXRlbSwgTGF5b3V0TW9kZSApIHtcclxuICAgICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBPdXRsYXllciwgZ2V0U2l6ZSwgbWF0Y2hlc1NlbGVjdG9yLCB1dGlscywgSXRlbSwgTGF5b3V0TW9kZSApO1xyXG4gICAgICB9KTtcclxuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xyXG4gICAgLy8gQ29tbW9uSlNcclxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcclxuICAgICAgd2luZG93LFxyXG4gICAgICByZXF1aXJlKCdvdXRsYXllcicpLFxyXG4gICAgICByZXF1aXJlKCdnZXQtc2l6ZScpLFxyXG4gICAgICByZXF1aXJlKCdkZXNhbmRyby1tYXRjaGVzLXNlbGVjdG9yJyksXHJcbiAgICAgIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJyksXHJcbiAgICAgIHJlcXVpcmUoJ2lzb3RvcGUtbGF5b3V0L2pzL2l0ZW0nKSxcclxuICAgICAgcmVxdWlyZSgnaXNvdG9wZS1sYXlvdXQvanMvbGF5b3V0LW1vZGUnKSxcclxuICAgICAgLy8gaW5jbHVkZSBkZWZhdWx0IGxheW91dCBtb2Rlc1xyXG4gICAgICByZXF1aXJlKCdpc290b3BlLWxheW91dC9qcy9sYXlvdXQtbW9kZXMvbWFzb25yeScpLFxyXG4gICAgICByZXF1aXJlKCdpc290b3BlLWxheW91dC9qcy9sYXlvdXQtbW9kZXMvZml0LXJvd3MnKSxcclxuICAgICAgcmVxdWlyZSgnaXNvdG9wZS1sYXlvdXQvanMvbGF5b3V0LW1vZGVzL3ZlcnRpY2FsJylcclxuICAgICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgICB3aW5kb3cuSXNvdG9wZSA9IGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdyxcclxuICAgICAgd2luZG93Lk91dGxheWVyLFxyXG4gICAgICB3aW5kb3cuZ2V0U2l6ZSxcclxuICAgICAgd2luZG93Lm1hdGNoZXNTZWxlY3RvcixcclxuICAgICAgd2luZG93LmZpenp5VUlVdGlscyxcclxuICAgICAgd2luZG93Lklzb3RvcGUuSXRlbSxcclxuICAgICAgd2luZG93Lklzb3RvcGUuTGF5b3V0TW9kZVxyXG4gICAgKTtcclxuICB9XHJcblxyXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgT3V0bGF5ZXIsIGdldFNpemUsIG1hdGNoZXNTZWxlY3RvciwgdXRpbHMsXHJcbiAgSXRlbSwgTGF5b3V0TW9kZSApIHtcclxuXHJcblxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gdmFycyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxudmFyIGpRdWVyeSA9IHdpbmRvdy5qUXVlcnk7XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBoZWxwZXJzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG52YXIgdHJpbSA9IFN0cmluZy5wcm90b3R5cGUudHJpbSA/XHJcbiAgZnVuY3Rpb24oIHN0ciApIHtcclxuICAgIHJldHVybiBzdHIudHJpbSgpO1xyXG4gIH0gOlxyXG4gIGZ1bmN0aW9uKCBzdHIgKSB7XHJcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoIC9eXFxzK3xcXHMrJC9nLCAnJyApO1xyXG4gIH07XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBpc290b3BlRGVmaW5pdGlvbiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuICAvLyBjcmVhdGUgYW4gT3V0bGF5ZXIgbGF5b3V0IGNsYXNzXHJcbiAgdmFyIElzb3RvcGUgPSBPdXRsYXllci5jcmVhdGUoICdpc290b3BlJywge1xyXG4gICAgbGF5b3V0TW9kZTogJ21hc29ucnknLFxyXG4gICAgaXNKUXVlcnlGaWx0ZXJpbmc6IHRydWUsXHJcbiAgICBzb3J0QXNjZW5kaW5nOiB0cnVlXHJcbiAgfSk7XHJcblxyXG4gIElzb3RvcGUuSXRlbSA9IEl0ZW07XHJcbiAgSXNvdG9wZS5MYXlvdXRNb2RlID0gTGF5b3V0TW9kZTtcclxuXHJcbiAgdmFyIHByb3RvID0gSXNvdG9wZS5wcm90b3R5cGU7XHJcblxyXG4gIHByb3RvLl9jcmVhdGUgPSBmdW5jdGlvbigpIHtcclxuICAgIHRoaXMuaXRlbUdVSUQgPSAwO1xyXG4gICAgLy8gZnVuY3Rpb25zIHRoYXQgc29ydCBpdGVtc1xyXG4gICAgdGhpcy5fc29ydGVycyA9IHt9O1xyXG4gICAgdGhpcy5fZ2V0U29ydGVycygpO1xyXG4gICAgLy8gY2FsbCBzdXBlclxyXG4gICAgT3V0bGF5ZXIucHJvdG90eXBlLl9jcmVhdGUuY2FsbCggdGhpcyApO1xyXG5cclxuICAgIC8vIGNyZWF0ZSBsYXlvdXQgbW9kZXNcclxuICAgIHRoaXMubW9kZXMgPSB7fTtcclxuICAgIC8vIHN0YXJ0IGZpbHRlcmVkSXRlbXMgd2l0aCBhbGwgaXRlbXNcclxuICAgIHRoaXMuZmlsdGVyZWRJdGVtcyA9IHRoaXMuaXRlbXM7XHJcbiAgICAvLyBrZWVwIG9mIHRyYWNrIG9mIHNvcnRCeXNcclxuICAgIHRoaXMuc29ydEhpc3RvcnkgPSBbICdvcmlnaW5hbC1vcmRlcicgXTtcclxuICAgIC8vIGNyZWF0ZSBmcm9tIHJlZ2lzdGVyZWQgbGF5b3V0IG1vZGVzXHJcbiAgICBmb3IgKCB2YXIgbmFtZSBpbiBMYXlvdXRNb2RlLm1vZGVzICkge1xyXG4gICAgICB0aGlzLl9pbml0TGF5b3V0TW9kZSggbmFtZSApO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHByb3RvLnJlbG9hZEl0ZW1zID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyByZXNldCBpdGVtIElEIGNvdW50ZXJcclxuICAgIHRoaXMuaXRlbUdVSUQgPSAwO1xyXG4gICAgLy8gY2FsbCBzdXBlclxyXG4gICAgT3V0bGF5ZXIucHJvdG90eXBlLnJlbG9hZEl0ZW1zLmNhbGwoIHRoaXMgKTtcclxuICB9O1xyXG5cclxuICBwcm90by5faXRlbWl6ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGl0ZW1zID0gT3V0bGF5ZXIucHJvdG90eXBlLl9pdGVtaXplLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuICAgIC8vIGFzc2lnbiBJRCBmb3Igb3JpZ2luYWwtb3JkZXJcclxuICAgIGZvciAoIHZhciBpPTA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKyApIHtcclxuICAgICAgdmFyIGl0ZW0gPSBpdGVtc1tpXTtcclxuICAgICAgaXRlbS5pZCA9IHRoaXMuaXRlbUdVSUQrKztcclxuICAgIH1cclxuICAgIHRoaXMuX3VwZGF0ZUl0ZW1zU29ydERhdGEoIGl0ZW1zICk7XHJcbiAgICByZXR1cm4gaXRlbXM7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGxheW91dCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuICBwcm90by5faW5pdExheW91dE1vZGUgPSBmdW5jdGlvbiggbmFtZSApIHtcclxuICAgIHZhciBNb2RlID0gTGF5b3V0TW9kZS5tb2Rlc1sgbmFtZSBdO1xyXG4gICAgLy8gc2V0IG1vZGUgb3B0aW9uc1xyXG4gICAgLy8gSEFDSyBleHRlbmQgaW5pdGlhbCBvcHRpb25zLCBiYWNrLWZpbGwgaW4gZGVmYXVsdCBvcHRpb25zXHJcbiAgICB2YXIgaW5pdGlhbE9wdHMgPSB0aGlzLm9wdGlvbnNbIG5hbWUgXSB8fCB7fTtcclxuICAgIHRoaXMub3B0aW9uc1sgbmFtZSBdID0gTW9kZS5vcHRpb25zID9cclxuICAgICAgdXRpbHMuZXh0ZW5kKCBNb2RlLm9wdGlvbnMsIGluaXRpYWxPcHRzICkgOiBpbml0aWFsT3B0cztcclxuICAgIC8vIGluaXQgbGF5b3V0IG1vZGUgaW5zdGFuY2VcclxuICAgIHRoaXMubW9kZXNbIG5hbWUgXSA9IG5ldyBNb2RlKCB0aGlzICk7XHJcbiAgfTtcclxuXHJcblxyXG4gIHByb3RvLmxheW91dCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gaWYgZmlyc3QgdGltZSBkb2luZyBsYXlvdXQsIGRvIGFsbCBtYWdpY1xyXG4gICAgaWYgKCAhdGhpcy5faXNMYXlvdXRJbml0ZWQgJiYgdGhpcy5fZ2V0T3B0aW9uKCdpbml0TGF5b3V0JykgKSB7XHJcbiAgICAgIHRoaXMuYXJyYW5nZSgpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLl9sYXlvdXQoKTtcclxuICB9O1xyXG5cclxuICAvLyBwcml2YXRlIG1ldGhvZCB0byBiZSB1c2VkIGluIGxheW91dCgpICYgbWFnaWMoKVxyXG4gIHByb3RvLl9sYXlvdXQgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIGRvbid0IGFuaW1hdGUgZmlyc3QgbGF5b3V0XHJcbiAgICB2YXIgaXNJbnN0YW50ID0gdGhpcy5fZ2V0SXNJbnN0YW50KCk7XHJcbiAgICAvLyBsYXlvdXQgZmxvd1xyXG4gICAgdGhpcy5fcmVzZXRMYXlvdXQoKTtcclxuICAgIHRoaXMuX21hbmFnZVN0YW1wcygpO1xyXG4gICAgdGhpcy5sYXlvdXRJdGVtcyggdGhpcy5maWx0ZXJlZEl0ZW1zLCBpc0luc3RhbnQgKTtcclxuXHJcbiAgICAvLyBmbGFnIGZvciBpbml0YWxpemVkXHJcbiAgICB0aGlzLl9pc0xheW91dEluaXRlZCA9IHRydWU7XHJcbiAgfTtcclxuXHJcbiAgLy8gZmlsdGVyICsgc29ydCArIGxheW91dFxyXG4gIHByb3RvLmFycmFuZ2UgPSBmdW5jdGlvbiggb3B0cyApIHtcclxuICAgIC8vIHNldCBhbnkgb3B0aW9ucyBwYXNzXHJcbiAgICB0aGlzLm9wdGlvbiggb3B0cyApO1xyXG4gICAgdGhpcy5fZ2V0SXNJbnN0YW50KCk7XHJcbiAgICAvLyBmaWx0ZXIsIHNvcnQsIGFuZCBsYXlvdXRcclxuXHJcbiAgICAvLyBmaWx0ZXJcclxuICAgIHZhciBmaWx0ZXJlZCA9IHRoaXMuX2ZpbHRlciggdGhpcy5pdGVtcyApO1xyXG4gICAgdGhpcy5maWx0ZXJlZEl0ZW1zID0gZmlsdGVyZWQubWF0Y2hlcztcclxuXHJcbiAgICB0aGlzLl9iaW5kQXJyYW5nZUNvbXBsZXRlKCk7XHJcblxyXG4gICAgaWYgKCB0aGlzLl9pc0luc3RhbnQgKSB7XHJcbiAgICAgIHRoaXMuX25vVHJhbnNpdGlvbiggdGhpcy5faGlkZVJldmVhbCwgWyBmaWx0ZXJlZCBdICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9oaWRlUmV2ZWFsKCBmaWx0ZXJlZCApO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX3NvcnQoKTtcclxuICAgIHRoaXMuX2xheW91dCgpO1xyXG4gIH07XHJcbiAgLy8gYWxpYXMgdG8gX2luaXQgZm9yIG1haW4gcGx1Z2luIG1ldGhvZFxyXG4gIHByb3RvLl9pbml0ID0gcHJvdG8uYXJyYW5nZTtcclxuXHJcbiAgcHJvdG8uX2hpZGVSZXZlYWwgPSBmdW5jdGlvbiggZmlsdGVyZWQgKSB7XHJcbiAgICB0aGlzLnJldmVhbCggZmlsdGVyZWQubmVlZFJldmVhbCApO1xyXG4gICAgdGhpcy5oaWRlKCBmaWx0ZXJlZC5uZWVkSGlkZSApO1xyXG4gIH07XHJcblxyXG4gIC8vIEhBQ0tcclxuICAvLyBEb24ndCBhbmltYXRlL3RyYW5zaXRpb24gZmlyc3QgbGF5b3V0XHJcbiAgLy8gT3IgZG9uJ3QgYW5pbWF0ZS90cmFuc2l0aW9uIG90aGVyIGxheW91dHNcclxuICBwcm90by5fZ2V0SXNJbnN0YW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgaXNMYXlvdXRJbnN0YW50ID0gdGhpcy5fZ2V0T3B0aW9uKCdsYXlvdXRJbnN0YW50Jyk7XHJcbiAgICB2YXIgaXNJbnN0YW50ID0gaXNMYXlvdXRJbnN0YW50ICE9PSB1bmRlZmluZWQgPyBpc0xheW91dEluc3RhbnQgOlxyXG4gICAgICAhdGhpcy5faXNMYXlvdXRJbml0ZWQ7XHJcbiAgICB0aGlzLl9pc0luc3RhbnQgPSBpc0luc3RhbnQ7XHJcbiAgICByZXR1cm4gaXNJbnN0YW50O1xyXG4gIH07XHJcblxyXG4gIC8vIGxpc3RlbiBmb3IgbGF5b3V0Q29tcGxldGUsIGhpZGVDb21wbGV0ZSBhbmQgcmV2ZWFsQ29tcGxldGVcclxuICAvLyB0byB0cmlnZ2VyIGFycmFuZ2VDb21wbGV0ZVxyXG4gIHByb3RvLl9iaW5kQXJyYW5nZUNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBsaXN0ZW4gZm9yIDMgZXZlbnRzIHRvIHRyaWdnZXIgYXJyYW5nZUNvbXBsZXRlXHJcbiAgICB2YXIgaXNMYXlvdXRDb21wbGV0ZSwgaXNIaWRlQ29tcGxldGUsIGlzUmV2ZWFsQ29tcGxldGU7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgZnVuY3Rpb24gYXJyYW5nZVBhcmFsbGVsQ2FsbGJhY2soKSB7XHJcbiAgICAgIGlmICggaXNMYXlvdXRDb21wbGV0ZSAmJiBpc0hpZGVDb21wbGV0ZSAmJiBpc1JldmVhbENvbXBsZXRlICkge1xyXG4gICAgICAgIF90aGlzLmRpc3BhdGNoRXZlbnQoICdhcnJhbmdlQ29tcGxldGUnLCBudWxsLCBbIF90aGlzLmZpbHRlcmVkSXRlbXMgXSApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0aGlzLm9uY2UoICdsYXlvdXRDb21wbGV0ZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICBpc0xheW91dENvbXBsZXRlID0gdHJ1ZTtcclxuICAgICAgYXJyYW5nZVBhcmFsbGVsQ2FsbGJhY2soKTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5vbmNlKCAnaGlkZUNvbXBsZXRlJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlzSGlkZUNvbXBsZXRlID0gdHJ1ZTtcclxuICAgICAgYXJyYW5nZVBhcmFsbGVsQ2FsbGJhY2soKTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5vbmNlKCAncmV2ZWFsQ29tcGxldGUnLCBmdW5jdGlvbigpIHtcclxuICAgICAgaXNSZXZlYWxDb21wbGV0ZSA9IHRydWU7XHJcbiAgICAgIGFycmFuZ2VQYXJhbGxlbENhbGxiYWNrKCk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBmaWx0ZXIgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbiAgcHJvdG8uX2ZpbHRlciA9IGZ1bmN0aW9uKCBpdGVtcyApIHtcclxuICAgIHZhciBmaWx0ZXIgPSB0aGlzLm9wdGlvbnMuZmlsdGVyO1xyXG4gICAgZmlsdGVyID0gZmlsdGVyIHx8ICcqJztcclxuICAgIHZhciBtYXRjaGVzID0gW107XHJcbiAgICB2YXIgaGlkZGVuTWF0Y2hlZCA9IFtdO1xyXG4gICAgdmFyIHZpc2libGVVbm1hdGNoZWQgPSBbXTtcclxuXHJcbiAgICB2YXIgdGVzdCA9IHRoaXMuX2dldEZpbHRlclRlc3QoIGZpbHRlciApO1xyXG5cclxuICAgIC8vIHRlc3QgZWFjaCBpdGVtXHJcbiAgICBmb3IgKCB2YXIgaT0wOyBpIDwgaXRlbXMubGVuZ3RoOyBpKysgKSB7XHJcbiAgICAgIHZhciBpdGVtID0gaXRlbXNbaV07XHJcbiAgICAgIGlmICggaXRlbS5pc0lnbm9yZWQgKSB7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuICAgICAgLy8gYWRkIGl0ZW0gdG8gZWl0aGVyIG1hdGNoZWQgb3IgdW5tYXRjaGVkIGdyb3VwXHJcbiAgICAgIHZhciBpc01hdGNoZWQgPSB0ZXN0KCBpdGVtICk7XHJcbiAgICAgIC8vIGl0ZW0uaXNGaWx0ZXJNYXRjaGVkID0gaXNNYXRjaGVkO1xyXG4gICAgICAvLyBhZGQgdG8gbWF0Y2hlcyBpZiBpdHMgYSBtYXRjaFxyXG4gICAgICBpZiAoIGlzTWF0Y2hlZCApIHtcclxuICAgICAgICBtYXRjaGVzLnB1c2goIGl0ZW0gKTtcclxuICAgICAgfVxyXG4gICAgICAvLyBhZGQgdG8gYWRkaXRpb25hbCBncm91cCBpZiBpdGVtIG5lZWRzIHRvIGJlIGhpZGRlbiBvciByZXZlYWxlZFxyXG4gICAgICBpZiAoIGlzTWF0Y2hlZCAmJiBpdGVtLmlzSGlkZGVuICkge1xyXG4gICAgICAgIGhpZGRlbk1hdGNoZWQucHVzaCggaXRlbSApO1xyXG4gICAgICB9IGVsc2UgaWYgKCAhaXNNYXRjaGVkICYmICFpdGVtLmlzSGlkZGVuICkge1xyXG4gICAgICAgIHZpc2libGVVbm1hdGNoZWQucHVzaCggaXRlbSApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmV0dXJuIGNvbGxlY3Rpb25zIG9mIGl0ZW1zIHRvIGJlIG1hbmlwdWxhdGVkXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBtYXRjaGVzOiBtYXRjaGVzLFxyXG4gICAgICBuZWVkUmV2ZWFsOiBoaWRkZW5NYXRjaGVkLFxyXG4gICAgICBuZWVkSGlkZTogdmlzaWJsZVVubWF0Y2hlZFxyXG4gICAgfTtcclxuICB9O1xyXG5cclxuICAvLyBnZXQgYSBqUXVlcnksIGZ1bmN0aW9uLCBvciBhIG1hdGNoZXNTZWxlY3RvciB0ZXN0IGdpdmVuIHRoZSBmaWx0ZXJcclxuICBwcm90by5fZ2V0RmlsdGVyVGVzdCA9IGZ1bmN0aW9uKCBmaWx0ZXIgKSB7XHJcbiAgICBpZiAoIGpRdWVyeSAmJiB0aGlzLm9wdGlvbnMuaXNKUXVlcnlGaWx0ZXJpbmcgKSB7XHJcbiAgICAgIC8vIHVzZSBqUXVlcnlcclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCBpdGVtICkge1xyXG4gICAgICAgIHJldHVybiBqUXVlcnkoIGl0ZW0uZWxlbWVudCApLmlzKCBmaWx0ZXIgKTtcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIGlmICggdHlwZW9mIGZpbHRlciA9PSAnZnVuY3Rpb24nICkge1xyXG4gICAgICAvLyB1c2UgZmlsdGVyIGFzIGZ1bmN0aW9uXHJcbiAgICAgIHJldHVybiBmdW5jdGlvbiggaXRlbSApIHtcclxuICAgICAgICByZXR1cm4gZmlsdGVyKCBpdGVtLmVsZW1lbnQgKTtcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIC8vIGRlZmF1bHQsIHVzZSBmaWx0ZXIgYXMgc2VsZWN0b3Igc3RyaW5nXHJcbiAgICByZXR1cm4gZnVuY3Rpb24oIGl0ZW0gKSB7XHJcbiAgICAgIHJldHVybiBtYXRjaGVzU2VsZWN0b3IoIGl0ZW0uZWxlbWVudCwgZmlsdGVyICk7XHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHNvcnRpbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtcyB7QXJyYXl9IGVsZW1zXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIHByb3RvLnVwZGF0ZVNvcnREYXRhID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG4gICAgLy8gZ2V0IGl0ZW1zXHJcbiAgICB2YXIgaXRlbXM7XHJcbiAgICBpZiAoIGVsZW1zICkge1xyXG4gICAgICBlbGVtcyA9IHV0aWxzLm1ha2VBcnJheSggZWxlbXMgKTtcclxuICAgICAgaXRlbXMgPSB0aGlzLmdldEl0ZW1zKCBlbGVtcyApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gdXBkYXRlIGFsbCBpdGVtcyBpZiBubyBlbGVtcyBwcm92aWRlZFxyXG4gICAgICBpdGVtcyA9IHRoaXMuaXRlbXM7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fZ2V0U29ydGVycygpO1xyXG4gICAgdGhpcy5fdXBkYXRlSXRlbXNTb3J0RGF0YSggaXRlbXMgKTtcclxuICB9O1xyXG5cclxuICBwcm90by5fZ2V0U29ydGVycyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGdldFNvcnREYXRhID0gdGhpcy5vcHRpb25zLmdldFNvcnREYXRhO1xyXG4gICAgZm9yICggdmFyIGtleSBpbiBnZXRTb3J0RGF0YSApIHtcclxuICAgICAgdmFyIHNvcnRlciA9IGdldFNvcnREYXRhWyBrZXkgXTtcclxuICAgICAgdGhpcy5fc29ydGVyc1sga2V5IF0gPSBtdW5nZVNvcnRlciggc29ydGVyICk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtcyB7QXJyYXl9IGl0ZW1zIC0gb2YgSXNvdG9wZS5JdGVtc1xyXG4gICAqIEBwcml2YXRlXHJcbiAgICovXHJcbiAgcHJvdG8uX3VwZGF0ZUl0ZW1zU29ydERhdGEgPSBmdW5jdGlvbiggaXRlbXMgKSB7XHJcbiAgICAvLyBkbyBub3QgdXBkYXRlIGlmIG5vIGl0ZW1zXHJcbiAgICB2YXIgbGVuID0gaXRlbXMgJiYgaXRlbXMubGVuZ3RoO1xyXG5cclxuICAgIGZvciAoIHZhciBpPTA7IGxlbiAmJiBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICAgIHZhciBpdGVtID0gaXRlbXNbaV07XHJcbiAgICAgIGl0ZW0udXBkYXRlU29ydERhdGEoKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyAtLS0tLSBtdW5nZSBzb3J0ZXIgLS0tLS0gLy9cclxuXHJcbiAgLy8gZW5jYXBzdWxhdGUgdGhpcywgYXMgd2UganVzdCBuZWVkIG11bmdlU29ydGVyXHJcbiAgLy8gb3RoZXIgZnVuY3Rpb25zIGluIGhlcmUgYXJlIGp1c3QgZm9yIG11bmdpbmdcclxuICB2YXIgbXVuZ2VTb3J0ZXIgPSAoIGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gYWRkIGEgbWFnaWMgbGF5ZXIgdG8gc29ydGVycyBmb3IgY29udmllbmVudCBzaG9ydGhhbmRzXHJcbiAgICAvLyBgLmZvby1iYXJgIHdpbGwgdXNlIHRoZSB0ZXh0IG9mIC5mb28tYmFyIHF1ZXJ5U2VsZWN0b3JcclxuICAgIC8vIGBbZm9vLWJhcl1gIHdpbGwgdXNlIGF0dHJpYnV0ZVxyXG4gICAgLy8geW91IGNhbiBhbHNvIGFkZCBwYXJzZXJcclxuICAgIC8vIGAuZm9vLWJhciBwYXJzZUludGAgd2lsbCBwYXJzZSB0aGF0IGFzIGEgbnVtYmVyXHJcbiAgICBmdW5jdGlvbiBtdW5nZVNvcnRlciggc29ydGVyICkge1xyXG4gICAgICAvLyBpZiBub3QgYSBzdHJpbmcsIHJldHVybiBmdW5jdGlvbiBvciB3aGF0ZXZlciBpdCBpc1xyXG4gICAgICBpZiAoIHR5cGVvZiBzb3J0ZXIgIT0gJ3N0cmluZycgKSB7XHJcbiAgICAgICAgcmV0dXJuIHNvcnRlcjtcclxuICAgICAgfVxyXG4gICAgICAvLyBwYXJzZSB0aGUgc29ydGVyIHN0cmluZ1xyXG4gICAgICB2YXIgYXJncyA9IHRyaW0oIHNvcnRlciApLnNwbGl0KCcgJyk7XHJcbiAgICAgIHZhciBxdWVyeSA9IGFyZ3NbMF07XHJcbiAgICAgIC8vIGNoZWNrIGlmIHF1ZXJ5IGxvb2tzIGxpa2UgW2FuLWF0dHJpYnV0ZV1cclxuICAgICAgdmFyIGF0dHJNYXRjaCA9IHF1ZXJ5Lm1hdGNoKCAvXlxcWyguKylcXF0kLyApO1xyXG4gICAgICB2YXIgYXR0ciA9IGF0dHJNYXRjaCAmJiBhdHRyTWF0Y2hbMV07XHJcbiAgICAgIHZhciBnZXRWYWx1ZSA9IGdldFZhbHVlR2V0dGVyKCBhdHRyLCBxdWVyeSApO1xyXG4gICAgICAvLyB1c2Ugc2Vjb25kIGFyZ3VtZW50IGFzIGEgcGFyc2VyXHJcbiAgICAgIHZhciBwYXJzZXIgPSBJc290b3BlLnNvcnREYXRhUGFyc2Vyc1sgYXJnc1sxXSBdO1xyXG4gICAgICAvLyBwYXJzZSB0aGUgdmFsdWUsIGlmIHRoZXJlIHdhcyBhIHBhcnNlclxyXG4gICAgICBzb3J0ZXIgPSBwYXJzZXIgPyBmdW5jdGlvbiggZWxlbSApIHtcclxuICAgICAgICByZXR1cm4gZWxlbSAmJiBwYXJzZXIoIGdldFZhbHVlKCBlbGVtICkgKTtcclxuICAgICAgfSA6XHJcbiAgICAgIC8vIG90aGVyd2lzZSBqdXN0IHJldHVybiB2YWx1ZVxyXG4gICAgICBmdW5jdGlvbiggZWxlbSApIHtcclxuICAgICAgICByZXR1cm4gZWxlbSAmJiBnZXRWYWx1ZSggZWxlbSApO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgcmV0dXJuIHNvcnRlcjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBnZXQgYW4gYXR0cmlidXRlIGdldHRlciwgb3IgZ2V0IHRleHQgb2YgdGhlIHF1ZXJ5U2VsZWN0b3JcclxuICAgIGZ1bmN0aW9uIGdldFZhbHVlR2V0dGVyKCBhdHRyLCBxdWVyeSApIHtcclxuICAgICAgLy8gaWYgcXVlcnkgbG9va3MgbGlrZSBbZm9vLWJhcl0sIGdldCBhdHRyaWJ1dGVcclxuICAgICAgaWYgKCBhdHRyICkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBnZXRBdHRyaWJ1dGUoIGVsZW0gKSB7XHJcbiAgICAgICAgICByZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIGF0dHIgKTtcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBvdGhlcndpc2UsIGFzc3VtZSBpdHMgYSBxdWVyeVNlbGVjdG9yLCBhbmQgZ2V0IGl0cyB0ZXh0XHJcbiAgICAgIHJldHVybiBmdW5jdGlvbiBnZXRDaGlsZFRleHQoIGVsZW0gKSB7XHJcbiAgICAgICAgdmFyIGNoaWxkID0gZWxlbS5xdWVyeVNlbGVjdG9yKCBxdWVyeSApO1xyXG4gICAgICAgIHJldHVybiBjaGlsZCAmJiBjaGlsZC50ZXh0Q29udGVudDtcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbXVuZ2VTb3J0ZXI7XHJcbiAgfSkoKTtcclxuXHJcbiAgLy8gcGFyc2VycyB1c2VkIGluIGdldFNvcnREYXRhIHNob3J0Y3V0IHN0cmluZ3NcclxuICBJc290b3BlLnNvcnREYXRhUGFyc2VycyA9IHtcclxuICAgICdwYXJzZUludCc6IGZ1bmN0aW9uKCB2YWwgKSB7XHJcbiAgICAgIHJldHVybiBwYXJzZUludCggdmFsLCAxMCApO1xyXG4gICAgfSxcclxuICAgICdwYXJzZUZsb2F0JzogZnVuY3Rpb24oIHZhbCApIHtcclxuICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoIHZhbCApO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8vIC0tLS0tIHNvcnQgbWV0aG9kIC0tLS0tIC8vXHJcblxyXG4gIC8vIHNvcnQgZmlsdGVyZWRJdGVtIG9yZGVyXHJcbiAgcHJvdG8uX3NvcnQgPSBmdW5jdGlvbigpIHtcclxuICAgIGlmICggIXRoaXMub3B0aW9ucy5zb3J0QnkgKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIGtlZXAgdHJhY2sgb2Ygc29ydEJ5IEhpc3RvcnlcclxuICAgIHZhciBzb3J0QnlzID0gdXRpbHMubWFrZUFycmF5KCB0aGlzLm9wdGlvbnMuc29ydEJ5ICk7XHJcbiAgICBpZiAoICF0aGlzLl9nZXRJc1NhbWVTb3J0QnkoIHNvcnRCeXMgKSApIHtcclxuICAgICAgLy8gY29uY2F0IGFsbCBzb3J0QnkgYW5kIHNvcnRIaXN0b3J5LCBhZGQgdG8gZnJvbnQsIG9sZGVzdCBnb2VzIGluIGxhc3RcclxuICAgICAgdGhpcy5zb3J0SGlzdG9yeSA9IHNvcnRCeXMuY29uY2F0KCB0aGlzLnNvcnRIaXN0b3J5ICk7XHJcbiAgICB9XHJcbiAgICAvLyBzb3J0IG1hZ2ljXHJcbiAgICB2YXIgaXRlbVNvcnRlciA9IGdldEl0ZW1Tb3J0ZXIoIHRoaXMuc29ydEhpc3RvcnksIHRoaXMub3B0aW9ucy5zb3J0QXNjZW5kaW5nICk7XHJcbiAgICB0aGlzLmZpbHRlcmVkSXRlbXMuc29ydCggaXRlbVNvcnRlciApO1xyXG4gIH07XHJcblxyXG4gIC8vIGNoZWNrIGlmIHNvcnRCeXMgaXMgc2FtZSBhcyBzdGFydCBvZiBzb3J0SGlzdG9yeVxyXG4gIHByb3RvLl9nZXRJc1NhbWVTb3J0QnkgPSBmdW5jdGlvbiggc29ydEJ5cyApIHtcclxuICAgIGZvciAoIHZhciBpPTA7IGkgPCBzb3J0QnlzLmxlbmd0aDsgaSsrICkge1xyXG4gICAgICBpZiAoIHNvcnRCeXNbaV0gIT0gdGhpcy5zb3J0SGlzdG9yeVtpXSApIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH07XHJcblxyXG4gIC8vIHJldHVybnMgYSBmdW5jdGlvbiB1c2VkIGZvciBzb3J0aW5nXHJcbiAgZnVuY3Rpb24gZ2V0SXRlbVNvcnRlciggc29ydEJ5cywgc29ydEFzYyApIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiBzb3J0ZXIoIGl0ZW1BLCBpdGVtQiApIHtcclxuICAgICAgLy8gY3ljbGUgdGhyb3VnaCBhbGwgc29ydEtleXNcclxuICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgc29ydEJ5cy5sZW5ndGg7IGkrKyApIHtcclxuICAgICAgICB2YXIgc29ydEJ5ID0gc29ydEJ5c1tpXTtcclxuICAgICAgICB2YXIgYSA9IGl0ZW1BLnNvcnREYXRhWyBzb3J0QnkgXTtcclxuICAgICAgICB2YXIgYiA9IGl0ZW1CLnNvcnREYXRhWyBzb3J0QnkgXTtcclxuICAgICAgICBpZiAoIGEgPiBiIHx8IGEgPCBiICkge1xyXG4gICAgICAgICAgLy8gaWYgc29ydEFzYyBpcyBhbiBvYmplY3QsIHVzZSB0aGUgdmFsdWUgZ2l2ZW4gdGhlIHNvcnRCeSBrZXlcclxuICAgICAgICAgIHZhciBpc0FzY2VuZGluZyA9IHNvcnRBc2NbIHNvcnRCeSBdICE9PSB1bmRlZmluZWQgPyBzb3J0QXNjWyBzb3J0QnkgXSA6IHNvcnRBc2M7XHJcbiAgICAgICAgICB2YXIgZGlyZWN0aW9uID0gaXNBc2NlbmRpbmcgPyAxIDogLTE7XHJcbiAgICAgICAgICByZXR1cm4gKCBhID4gYiA/IDEgOiAtMSApICogZGlyZWN0aW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gMDtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBtZXRob2RzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4gIC8vIGdldCBsYXlvdXQgbW9kZVxyXG4gIHByb3RvLl9tb2RlID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgbGF5b3V0TW9kZSA9IHRoaXMub3B0aW9ucy5sYXlvdXRNb2RlO1xyXG4gICAgdmFyIG1vZGUgPSB0aGlzLm1vZGVzWyBsYXlvdXRNb2RlIF07XHJcbiAgICBpZiAoICFtb2RlICkge1xyXG4gICAgICAvLyBUT0RPIGNvbnNvbGUuZXJyb3JcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCAnTm8gbGF5b3V0IG1vZGU6ICcgKyBsYXlvdXRNb2RlICk7XHJcbiAgICB9XHJcbiAgICAvLyBIQUNLIHN5bmMgbW9kZSdzIG9wdGlvbnNcclxuICAgIC8vIGFueSBvcHRpb25zIHNldCBhZnRlciBpbml0IGZvciBsYXlvdXQgbW9kZSBuZWVkIHRvIGJlIHN5bmNlZFxyXG4gICAgbW9kZS5vcHRpb25zID0gdGhpcy5vcHRpb25zWyBsYXlvdXRNb2RlIF07XHJcbiAgICByZXR1cm4gbW9kZTtcclxuICB9O1xyXG5cclxuICBwcm90by5fcmVzZXRMYXlvdXQgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIHRyaWdnZXIgb3JpZ2luYWwgcmVzZXQgbGF5b3V0XHJcbiAgICBPdXRsYXllci5wcm90b3R5cGUuX3Jlc2V0TGF5b3V0LmNhbGwoIHRoaXMgKTtcclxuICAgIHRoaXMuX21vZGUoKS5fcmVzZXRMYXlvdXQoKTtcclxuICB9O1xyXG5cclxuICBwcm90by5fZ2V0SXRlbUxheW91dFBvc2l0aW9uID0gZnVuY3Rpb24oIGl0ZW0gICkge1xyXG4gICAgcmV0dXJuIHRoaXMuX21vZGUoKS5fZ2V0SXRlbUxheW91dFBvc2l0aW9uKCBpdGVtICk7XHJcbiAgfTtcclxuXHJcbiAgcHJvdG8uX21hbmFnZVN0YW1wID0gZnVuY3Rpb24oIHN0YW1wICkge1xyXG4gICAgdGhpcy5fbW9kZSgpLl9tYW5hZ2VTdGFtcCggc3RhbXAgKTtcclxuICB9O1xyXG5cclxuICBwcm90by5fZ2V0Q29udGFpbmVyU2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX21vZGUoKS5fZ2V0Q29udGFpbmVyU2l6ZSgpO1xyXG4gIH07XHJcblxyXG4gIHByb3RvLm5lZWRzUmVzaXplTGF5b3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fbW9kZSgpLm5lZWRzUmVzaXplTGF5b3V0KCk7XHJcbiAgfTtcclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gYWRkaW5nICYgcmVtb3ZpbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbiAgLy8gSEVBRFMgVVAgb3ZlcndyaXRlcyBkZWZhdWx0IE91dGxheWVyIGFwcGVuZGVkXHJcbiAgcHJvdG8uYXBwZW5kZWQgPSBmdW5jdGlvbiggZWxlbXMgKSB7XHJcbiAgICB2YXIgaXRlbXMgPSB0aGlzLmFkZEl0ZW1zKCBlbGVtcyApO1xyXG4gICAgaWYgKCAhaXRlbXMubGVuZ3RoICkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyBmaWx0ZXIsIGxheW91dCwgcmV2ZWFsIG5ldyBpdGVtc1xyXG4gICAgdmFyIGZpbHRlcmVkSXRlbXMgPSB0aGlzLl9maWx0ZXJSZXZlYWxBZGRlZCggaXRlbXMgKTtcclxuICAgIC8vIGFkZCB0byBmaWx0ZXJlZEl0ZW1zXHJcbiAgICB0aGlzLmZpbHRlcmVkSXRlbXMgPSB0aGlzLmZpbHRlcmVkSXRlbXMuY29uY2F0KCBmaWx0ZXJlZEl0ZW1zICk7XHJcbiAgfTtcclxuXHJcbiAgLy8gSEVBRFMgVVAgb3ZlcndyaXRlcyBkZWZhdWx0IE91dGxheWVyIHByZXBlbmRlZFxyXG4gIHByb3RvLnByZXBlbmRlZCA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuICAgIHZhciBpdGVtcyA9IHRoaXMuX2l0ZW1pemUoIGVsZW1zICk7XHJcbiAgICBpZiAoICFpdGVtcy5sZW5ndGggKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIHN0YXJ0IG5ldyBsYXlvdXRcclxuICAgIHRoaXMuX3Jlc2V0TGF5b3V0KCk7XHJcbiAgICB0aGlzLl9tYW5hZ2VTdGFtcHMoKTtcclxuICAgIC8vIGZpbHRlciwgbGF5b3V0LCByZXZlYWwgbmV3IGl0ZW1zXHJcbiAgICB2YXIgZmlsdGVyZWRJdGVtcyA9IHRoaXMuX2ZpbHRlclJldmVhbEFkZGVkKCBpdGVtcyApO1xyXG4gICAgLy8gbGF5b3V0IHByZXZpb3VzIGl0ZW1zXHJcbiAgICB0aGlzLmxheW91dEl0ZW1zKCB0aGlzLmZpbHRlcmVkSXRlbXMgKTtcclxuICAgIC8vIGFkZCB0byBpdGVtcyBhbmQgZmlsdGVyZWRJdGVtc1xyXG4gICAgdGhpcy5maWx0ZXJlZEl0ZW1zID0gZmlsdGVyZWRJdGVtcy5jb25jYXQoIHRoaXMuZmlsdGVyZWRJdGVtcyApO1xyXG4gICAgdGhpcy5pdGVtcyA9IGl0ZW1zLmNvbmNhdCggdGhpcy5pdGVtcyApO1xyXG4gIH07XHJcblxyXG4gIHByb3RvLl9maWx0ZXJSZXZlYWxBZGRlZCA9IGZ1bmN0aW9uKCBpdGVtcyApIHtcclxuICAgIHZhciBmaWx0ZXJlZCA9IHRoaXMuX2ZpbHRlciggaXRlbXMgKTtcclxuICAgIHRoaXMuaGlkZSggZmlsdGVyZWQubmVlZEhpZGUgKTtcclxuICAgIC8vIHJldmVhbCBhbGwgbmV3IGl0ZW1zXHJcbiAgICB0aGlzLnJldmVhbCggZmlsdGVyZWQubWF0Y2hlcyApO1xyXG4gICAgLy8gbGF5b3V0IG5ldyBpdGVtcywgbm8gdHJhbnNpdGlvblxyXG4gICAgdGhpcy5sYXlvdXRJdGVtcyggZmlsdGVyZWQubWF0Y2hlcywgdHJ1ZSApO1xyXG4gICAgcmV0dXJuIGZpbHRlcmVkLm1hdGNoZXM7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogRmlsdGVyLCBzb3J0LCBhbmQgbGF5b3V0IG5ld2x5LWFwcGVuZGVkIGl0ZW0gZWxlbWVudHNcclxuICAgKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEVsZW1lbnR9IGVsZW1zXHJcbiAgICovXHJcbiAgcHJvdG8uaW5zZXJ0ID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG4gICAgdmFyIGl0ZW1zID0gdGhpcy5hZGRJdGVtcyggZWxlbXMgKTtcclxuICAgIGlmICggIWl0ZW1zLmxlbmd0aCApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy8gYXBwZW5kIGl0ZW0gZWxlbWVudHNcclxuICAgIHZhciBpLCBpdGVtO1xyXG4gICAgdmFyIGxlbiA9IGl0ZW1zLmxlbmd0aDtcclxuICAgIGZvciAoIGk9MDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgICBpdGVtID0gaXRlbXNbaV07XHJcbiAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCggaXRlbS5lbGVtZW50ICk7XHJcbiAgICB9XHJcbiAgICAvLyBmaWx0ZXIgbmV3IHN0dWZmXHJcbiAgICB2YXIgZmlsdGVyZWRJbnNlcnRJdGVtcyA9IHRoaXMuX2ZpbHRlciggaXRlbXMgKS5tYXRjaGVzO1xyXG4gICAgLy8gc2V0IGZsYWdcclxuICAgIGZvciAoIGk9MDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgICBpdGVtc1tpXS5pc0xheW91dEluc3RhbnQgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgdGhpcy5hcnJhbmdlKCk7XHJcbiAgICAvLyByZXNldCBmbGFnXHJcbiAgICBmb3IgKCBpPTA7IGkgPCBsZW47IGkrKyApIHtcclxuICAgICAgZGVsZXRlIGl0ZW1zW2ldLmlzTGF5b3V0SW5zdGFudDtcclxuICAgIH1cclxuICAgIHRoaXMucmV2ZWFsKCBmaWx0ZXJlZEluc2VydEl0ZW1zICk7XHJcbiAgfTtcclxuXHJcbiAgdmFyIF9yZW1vdmUgPSBwcm90by5yZW1vdmU7XHJcbiAgcHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG4gICAgZWxlbXMgPSB1dGlscy5tYWtlQXJyYXkoIGVsZW1zICk7XHJcbiAgICB2YXIgcmVtb3ZlSXRlbXMgPSB0aGlzLmdldEl0ZW1zKCBlbGVtcyApO1xyXG4gICAgLy8gZG8gcmVndWxhciB0aGluZ1xyXG4gICAgX3JlbW92ZS5jYWxsKCB0aGlzLCBlbGVtcyApO1xyXG4gICAgLy8gYmFpbCBpZiBubyBpdGVtcyB0byByZW1vdmVcclxuICAgIHZhciBsZW4gPSByZW1vdmVJdGVtcyAmJiByZW1vdmVJdGVtcy5sZW5ndGg7XHJcbiAgICAvLyByZW1vdmUgZWxlbXMgZnJvbSBmaWx0ZXJlZEl0ZW1zXHJcbiAgICBmb3IgKCB2YXIgaT0wOyBsZW4gJiYgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgICB2YXIgaXRlbSA9IHJlbW92ZUl0ZW1zW2ldO1xyXG4gICAgICAvLyByZW1vdmUgaXRlbSBmcm9tIGNvbGxlY3Rpb25cclxuICAgICAgdXRpbHMucmVtb3ZlRnJvbSggdGhpcy5maWx0ZXJlZEl0ZW1zLCBpdGVtICk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgcHJvdG8uc2h1ZmZsZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gdXBkYXRlIHJhbmRvbSBzb3J0RGF0YVxyXG4gICAgZm9yICggdmFyIGk9MDsgaSA8IHRoaXMuaXRlbXMubGVuZ3RoOyBpKysgKSB7XHJcbiAgICAgIHZhciBpdGVtID0gdGhpcy5pdGVtc1tpXTtcclxuICAgICAgaXRlbS5zb3J0RGF0YS5yYW5kb20gPSBNYXRoLnJhbmRvbSgpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5vcHRpb25zLnNvcnRCeSA9ICdyYW5kb20nO1xyXG4gICAgdGhpcy5fc29ydCgpO1xyXG4gICAgdGhpcy5fbGF5b3V0KCk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogdHJpZ2dlciBmbiB3aXRob3V0IHRyYW5zaXRpb25cclxuICAgKiBraW5kIG9mIGhhY2t5IHRvIGhhdmUgdGhpcyBpbiB0aGUgZmlyc3QgcGxhY2VcclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3NcclxuICAgKiBAcmV0dXJucyByZXRcclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIHByb3RvLl9ub1RyYW5zaXRpb24gPSBmdW5jdGlvbiggZm4sIGFyZ3MgKSB7XHJcbiAgICAvLyBzYXZlIHRyYW5zaXRpb25EdXJhdGlvbiBiZWZvcmUgZGlzYWJsaW5nXHJcbiAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gdGhpcy5vcHRpb25zLnRyYW5zaXRpb25EdXJhdGlvbjtcclxuICAgIC8vIGRpc2FibGUgdHJhbnNpdGlvblxyXG4gICAgdGhpcy5vcHRpb25zLnRyYW5zaXRpb25EdXJhdGlvbiA9IDA7XHJcbiAgICAvLyBkbyBpdFxyXG4gICAgdmFyIHJldHVyblZhbHVlID0gZm4uYXBwbHkoIHRoaXMsIGFyZ3MgKTtcclxuICAgIC8vIHJlLWVuYWJsZSB0cmFuc2l0aW9uIGZvciByZXZlYWxcclxuICAgIHRoaXMub3B0aW9ucy50cmFuc2l0aW9uRHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb247XHJcbiAgICByZXR1cm4gcmV0dXJuVmFsdWU7XHJcbiAgfTtcclxuXHJcbiAgLy8gLS0tLS0gaGVscGVyIG1ldGhvZHMgLS0tLS0gLy9cclxuXHJcbiAgLyoqXHJcbiAgICogZ2V0dGVyIG1ldGhvZCBmb3IgZ2V0dGluZyBmaWx0ZXJlZCBpdGVtIGVsZW1lbnRzXHJcbiAgICogQHJldHVybnMge0FycmF5fSBlbGVtcyAtIGNvbGxlY3Rpb24gb2YgaXRlbSBlbGVtZW50c1xyXG4gICAqL1xyXG4gIHByb3RvLmdldEZpbHRlcmVkSXRlbUVsZW1lbnRzID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5maWx0ZXJlZEl0ZW1zLm1hcCggZnVuY3Rpb24oIGl0ZW0gKSB7XHJcbiAgICAgIHJldHVybiBpdGVtLmVsZW1lbnQ7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICAvLyAtLS0tLSAgLS0tLS0gLy9cclxuXHJcbiAgcmV0dXJuIElzb3RvcGU7XHJcblxyXG59KSk7XHJcblxyXG4iLCJ2YXIgVmFuaWxsYVRpbHQgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZWQgYnkgU2VyZ2l1IMiYYW5kb3IgKG1pY2t1N3p1KSBvbiAxLzI3LzIwMTcuXHJcbiAgICAgKiBPcmlnaW5hbCBpZGVhOiBodHRwczovL2dpdGh1Yi5jb20vZ2lqc3JvZ2UvdGlsdC5qc1xyXG4gICAgICogTUlUIExpY2Vuc2UuXHJcbiAgICAgKiBWZXJzaW9uIDEuNy4wXHJcbiAgICAgKi9cclxuICAgIFxyXG4gICAgY2xhc3MgVmFuaWxsYVRpbHQge1xyXG4gICAgICBjb25zdHJ1Y3RvcihlbGVtZW50LCBzZXR0aW5ncyA9IHt9KSB7XHJcbiAgICAgICAgaWYgKCEoZWxlbWVudCBpbnN0YW5jZW9mIE5vZGUpKSB7XHJcbiAgICAgICAgICB0aHJvdyAoXCJDYW4ndCBpbml0aWFsaXplIFZhbmlsbGFUaWx0IGJlY2F1c2UgXCIgKyBlbGVtZW50ICsgXCIgaXMgbm90IGEgTm9kZS5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgdGhpcy53aWR0aCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY2xpZW50V2lkdGggPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY2xpZW50SGVpZ2h0ID0gbnVsbDtcclxuICAgICAgICB0aGlzLmxlZnQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMudG9wID0gbnVsbDtcclxuICAgIFxyXG4gICAgICAgIC8vIGZvciBHeXJvc2NvcGUgc2FtcGxpbmdcclxuICAgICAgICB0aGlzLmdhbW1hemVybyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5iZXRhemVybyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5sYXN0Z2FtbWF6ZXJvID0gbnVsbDtcclxuICAgICAgICB0aGlzLmxhc3RiZXRhemVybyA9IG51bGw7XHJcbiAgICBcclxuICAgICAgICB0aGlzLnRyYW5zaXRpb25UaW1lb3V0ID0gbnVsbDtcclxuICAgICAgICB0aGlzLnVwZGF0ZUNhbGwgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZXZlbnQgPSBudWxsO1xyXG4gICAgXHJcbiAgICAgICAgdGhpcy51cGRhdGVCaW5kID0gdGhpcy51cGRhdGUuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLnJlc2V0QmluZCA9IHRoaXMucmVzZXQuYmluZCh0aGlzKTtcclxuICAgIFxyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IHRoaXMuZXh0ZW5kU2V0dGluZ3Moc2V0dGluZ3MpO1xyXG4gICAgXHJcbiAgICAgICAgdGhpcy5yZXZlcnNlID0gdGhpcy5zZXR0aW5ncy5yZXZlcnNlID8gLTEgOiAxO1xyXG4gICAgICAgIHRoaXMuZ2xhcmUgPSBWYW5pbGxhVGlsdC5pc1NldHRpbmdUcnVlKHRoaXMuc2V0dGluZ3MuZ2xhcmUpO1xyXG4gICAgICAgIHRoaXMuZ2xhcmVQcmVyZW5kZXIgPSBWYW5pbGxhVGlsdC5pc1NldHRpbmdUcnVlKHRoaXMuc2V0dGluZ3NbXCJnbGFyZS1wcmVyZW5kZXJcIl0pO1xyXG4gICAgICAgIHRoaXMuZnVsbFBhZ2VMaXN0ZW5pbmcgPSBWYW5pbGxhVGlsdC5pc1NldHRpbmdUcnVlKHRoaXMuc2V0dGluZ3NbXCJmdWxsLXBhZ2UtbGlzdGVuaW5nXCJdKTtcclxuICAgICAgICB0aGlzLmd5cm9zY29wZSA9IFZhbmlsbGFUaWx0LmlzU2V0dGluZ1RydWUodGhpcy5zZXR0aW5ncy5neXJvc2NvcGUpO1xyXG4gICAgICAgIHRoaXMuZ3lyb3Njb3BlU2FtcGxlcyA9IHRoaXMuc2V0dGluZ3MuZ3lyb3Njb3BlU2FtcGxlcztcclxuICAgIFxyXG4gICAgICAgIHRoaXMuZWxlbWVudExpc3RlbmVyID0gdGhpcy5nZXRFbGVtZW50TGlzdGVuZXIoKTtcclxuICAgIFxyXG4gICAgICAgIGlmICh0aGlzLmdsYXJlKSB7XHJcbiAgICAgICAgICB0aGlzLnByZXBhcmVHbGFyZSgpO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIGlmICh0aGlzLmZ1bGxQYWdlTGlzdGVuaW5nKSB7XHJcbiAgICAgICAgICB0aGlzLnVwZGF0ZUNsaWVudFNpemUoKTtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVJbml0aWFsUG9zaXRpb24oKTtcclxuICAgICAgfVxyXG4gICAgXHJcbiAgICAgIHN0YXRpYyBpc1NldHRpbmdUcnVlKHNldHRpbmcpIHtcclxuICAgICAgICByZXR1cm4gc2V0dGluZyA9PT0gXCJcIiB8fCBzZXR0aW5nID09PSB0cnVlIHx8IHNldHRpbmcgPT09IDE7XHJcbiAgICAgIH1cclxuICAgIFxyXG4gICAgICAvKipcclxuICAgICAgICogTWV0aG9kIHJldHVybnMgZWxlbWVudCB3aGF0IHdpbGwgYmUgbGlzdGVuIG1vdXNlIGV2ZW50c1xyXG4gICAgICAgKiBAcmV0dXJuIHtOb2RlfVxyXG4gICAgICAgKi9cclxuICAgICAgZ2V0RWxlbWVudExpc3RlbmVyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmZ1bGxQYWdlTGlzdGVuaW5nKSB7XHJcbiAgICAgICAgICByZXR1cm4gd2luZG93LmRvY3VtZW50O1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5zZXR0aW5nc1tcIm1vdXNlLWV2ZW50LWVsZW1lbnRcIl0gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgIGNvbnN0IG1vdXNlRXZlbnRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLnNldHRpbmdzW1wibW91c2UtZXZlbnQtZWxlbWVudFwiXSk7XHJcbiAgICBcclxuICAgICAgICAgIGlmIChtb3VzZUV2ZW50RWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbW91c2VFdmVudEVsZW1lbnQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3NbXCJtb3VzZS1ldmVudC1lbGVtZW50XCJdIGluc3RhbmNlb2YgTm9kZSkge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3NbXCJtb3VzZS1ldmVudC1lbGVtZW50XCJdO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQ7XHJcbiAgICAgIH1cclxuICAgIFxyXG4gICAgICAvKipcclxuICAgICAgICogTWV0aG9kIHNldCBsaXN0ZW4gbWV0aG9kcyBmb3IgdGhpcy5lbGVtZW50TGlzdGVuZXJcclxuICAgICAgICogQHJldHVybiB7Tm9kZX1cclxuICAgICAgICovXHJcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgICAgIHRoaXMub25Nb3VzZUVudGVyQmluZCA9IHRoaXMub25Nb3VzZUVudGVyLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5vbk1vdXNlTW92ZUJpbmQgPSB0aGlzLm9uTW91c2VNb3ZlLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5vbk1vdXNlTGVhdmVCaW5kID0gdGhpcy5vbk1vdXNlTGVhdmUuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLm9uV2luZG93UmVzaXplQmluZCA9IHRoaXMub25XaW5kb3dSZXNpemUuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLm9uRGV2aWNlT3JpZW50YXRpb25CaW5kID0gdGhpcy5vbkRldmljZU9yaWVudGF0aW9uLmJpbmQodGhpcyk7XHJcbiAgICBcclxuICAgICAgICB0aGlzLmVsZW1lbnRMaXN0ZW5lci5hZGRFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLCB0aGlzLm9uTW91c2VFbnRlckJpbmQpO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudExpc3RlbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsIHRoaXMub25Nb3VzZUxlYXZlQmluZCk7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50TGlzdGVuZXIuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLm9uTW91c2VNb3ZlQmluZCk7XHJcbiAgICBcclxuICAgICAgICBpZiAodGhpcy5nbGFyZSB8fCB0aGlzLmZ1bGxQYWdlTGlzdGVuaW5nKSB7XHJcbiAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLm9uV2luZG93UmVzaXplQmluZCk7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgaWYgKHRoaXMuZ3lyb3Njb3BlKSB7XHJcbiAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImRldmljZW9yaWVudGF0aW9uXCIsIHRoaXMub25EZXZpY2VPcmllbnRhdGlvbkJpbmQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBNZXRob2QgcmVtb3ZlIGV2ZW50IGxpc3RlbmVycyBmcm9tIGN1cnJlbnQgdGhpcy5lbGVtZW50TGlzdGVuZXJcclxuICAgICAgICovXHJcbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudExpc3RlbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsIHRoaXMub25Nb3VzZUVudGVyQmluZCk7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50TGlzdGVuZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgdGhpcy5vbk1vdXNlTGVhdmVCaW5kKTtcclxuICAgICAgICB0aGlzLmVsZW1lbnRMaXN0ZW5lci5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMub25Nb3VzZU1vdmVCaW5kKTtcclxuICAgIFxyXG4gICAgICAgIGlmICh0aGlzLmd5cm9zY29wZSkge1xyXG4gICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJkZXZpY2VvcmllbnRhdGlvblwiLCB0aGlzLm9uRGV2aWNlT3JpZW50YXRpb25CaW5kKTtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBpZiAodGhpcy5nbGFyZSB8fCB0aGlzLmZ1bGxQYWdlTGlzdGVuaW5nKSB7XHJcbiAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLm9uV2luZG93UmVzaXplQmluZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICBcclxuICAgICAgZGVzdHJveSgpIHtcclxuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50cmFuc2l0aW9uVGltZW91dCk7XHJcbiAgICAgICAgaWYgKHRoaXMudXBkYXRlQ2FsbCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy51cGRhdGVDYWxsKTtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICB0aGlzLnJlc2V0KCk7XHJcbiAgICBcclxuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LnZhbmlsbGFUaWx0ID0gbnVsbDtcclxuICAgICAgICBkZWxldGUgdGhpcy5lbGVtZW50LnZhbmlsbGFUaWx0O1xyXG4gICAgXHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gbnVsbDtcclxuICAgICAgfVxyXG4gICAgXHJcbiAgICAgIG9uRGV2aWNlT3JpZW50YXRpb24oZXZlbnQpIHtcclxuICAgICAgICBpZiAoZXZlbnQuZ2FtbWEgPT09IG51bGwgfHwgZXZlbnQuYmV0YSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIHRoaXMudXBkYXRlRWxlbWVudFBvc2l0aW9uKCk7XHJcbiAgICBcclxuICAgICAgICBpZiAodGhpcy5neXJvc2NvcGVTYW1wbGVzID4gMCkge1xyXG4gICAgICAgICAgdGhpcy5sYXN0Z2FtbWF6ZXJvID0gdGhpcy5nYW1tYXplcm87XHJcbiAgICAgICAgICB0aGlzLmxhc3RiZXRhemVybyA9IHRoaXMuYmV0YXplcm87XHJcbiAgICBcclxuICAgICAgICAgIGlmICh0aGlzLmdhbW1hemVybyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmdhbW1hemVybyA9IGV2ZW50LmdhbW1hO1xyXG4gICAgICAgICAgICB0aGlzLmJldGF6ZXJvID0gZXZlbnQuYmV0YTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtbWF6ZXJvID0gKGV2ZW50LmdhbW1hICsgdGhpcy5sYXN0Z2FtbWF6ZXJvKSAvIDI7XHJcbiAgICAgICAgICAgIHRoaXMuYmV0YXplcm8gPSAoZXZlbnQuYmV0YSArIHRoaXMubGFzdGJldGF6ZXJvKSAvIDI7XHJcbiAgICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAgIHRoaXMuZ3lyb3Njb3BlU2FtcGxlcyAtPSAxO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIGNvbnN0IHRvdGFsQW5nbGVYID0gdGhpcy5zZXR0aW5ncy5neXJvc2NvcGVNYXhBbmdsZVggLSB0aGlzLnNldHRpbmdzLmd5cm9zY29wZU1pbkFuZ2xlWDtcclxuICAgICAgICBjb25zdCB0b3RhbEFuZ2xlWSA9IHRoaXMuc2V0dGluZ3MuZ3lyb3Njb3BlTWF4QW5nbGVZIC0gdGhpcy5zZXR0aW5ncy5neXJvc2NvcGVNaW5BbmdsZVk7XHJcbiAgICBcclxuICAgICAgICBjb25zdCBkZWdyZWVzUGVyUGl4ZWxYID0gdG90YWxBbmdsZVggLyB0aGlzLndpZHRoO1xyXG4gICAgICAgIGNvbnN0IGRlZ3JlZXNQZXJQaXhlbFkgPSB0b3RhbEFuZ2xlWSAvIHRoaXMuaGVpZ2h0O1xyXG4gICAgXHJcbiAgICAgICAgY29uc3QgYW5nbGVYID0gZXZlbnQuZ2FtbWEgLSAodGhpcy5zZXR0aW5ncy5neXJvc2NvcGVNaW5BbmdsZVggKyB0aGlzLmdhbW1hemVybyk7XHJcbiAgICAgICAgY29uc3QgYW5nbGVZID0gZXZlbnQuYmV0YSAtICh0aGlzLnNldHRpbmdzLmd5cm9zY29wZU1pbkFuZ2xlWSArIHRoaXMuYmV0YXplcm8pO1xyXG4gICAgXHJcbiAgICAgICAgY29uc3QgcG9zWCA9IGFuZ2xlWCAvIGRlZ3JlZXNQZXJQaXhlbFg7XHJcbiAgICAgICAgY29uc3QgcG9zWSA9IGFuZ2xlWSAvIGRlZ3JlZXNQZXJQaXhlbFk7XHJcbiAgICBcclxuICAgICAgICBpZiAodGhpcy51cGRhdGVDYWxsICE9PSBudWxsKSB7XHJcbiAgICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLnVwZGF0ZUNhbGwpO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIHRoaXMuZXZlbnQgPSB7XHJcbiAgICAgICAgICBjbGllbnRYOiBwb3NYICsgdGhpcy5sZWZ0LFxyXG4gICAgICAgICAgY2xpZW50WTogcG9zWSArIHRoaXMudG9wLFxyXG4gICAgICAgIH07XHJcbiAgICBcclxuICAgICAgICB0aGlzLnVwZGF0ZUNhbGwgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy51cGRhdGVCaW5kKTtcclxuICAgICAgfVxyXG4gICAgXHJcbiAgICAgIG9uTW91c2VFbnRlcigpIHtcclxuICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnRQb3NpdGlvbigpO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS53aWxsQ2hhbmdlID0gXCJ0cmFuc2Zvcm1cIjtcclxuICAgICAgICB0aGlzLnNldFRyYW5zaXRpb24oKTtcclxuICAgICAgfVxyXG4gICAgXHJcbiAgICAgIG9uTW91c2VNb3ZlKGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKHRoaXMudXBkYXRlQ2FsbCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy51cGRhdGVDYWxsKTtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICB0aGlzLmV2ZW50ID0gZXZlbnQ7XHJcbiAgICAgICAgdGhpcy51cGRhdGVDYWxsID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMudXBkYXRlQmluZCk7XHJcbiAgICAgIH1cclxuICAgIFxyXG4gICAgICBvbk1vdXNlTGVhdmUoKSB7XHJcbiAgICAgICAgdGhpcy5zZXRUcmFuc2l0aW9uKCk7XHJcbiAgICBcclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5yZXNldCkge1xyXG4gICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMucmVzZXRCaW5kKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIFxyXG4gICAgICByZXNldCgpIHtcclxuICAgICAgICB0aGlzLmV2ZW50ID0ge1xyXG4gICAgICAgICAgY2xpZW50WDogdGhpcy5sZWZ0ICsgdGhpcy53aWR0aCAvIDIsXHJcbiAgICAgICAgICBjbGllbnRZOiB0aGlzLnRvcCArIHRoaXMuaGVpZ2h0IC8gMlxyXG4gICAgICAgIH07XHJcbiAgICBcclxuICAgICAgICBpZiAodGhpcy5lbGVtZW50ICYmIHRoaXMuZWxlbWVudC5zdHlsZSkge1xyXG4gICAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9IGBwZXJzcGVjdGl2ZSgke3RoaXMuc2V0dGluZ3MucGVyc3BlY3RpdmV9cHgpIGAgK1xyXG4gICAgICAgICAgICBgcm90YXRlWCgwZGVnKSBgICtcclxuICAgICAgICAgICAgYHJvdGF0ZVkoMGRlZykgYCArXHJcbiAgICAgICAgICAgIGBzY2FsZTNkKDEsIDEsIDEpYDtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICB0aGlzLnJlc2V0R2xhcmUoKTtcclxuICAgICAgfVxyXG4gICAgXHJcbiAgICAgIHJlc2V0R2xhcmUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZ2xhcmUpIHtcclxuICAgICAgICAgIHRoaXMuZ2xhcmVFbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9IFwicm90YXRlKDE4MGRlZykgdHJhbnNsYXRlKC01MCUsIC01MCUpXCI7XHJcbiAgICAgICAgICB0aGlzLmdsYXJlRWxlbWVudC5zdHlsZS5vcGFjaXR5ID0gXCIwXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICBcclxuICAgICAgdXBkYXRlSW5pdGlhbFBvc2l0aW9uKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnN0YXJ0WCA9PT0gMCAmJiB0aGlzLnNldHRpbmdzLnN0YXJ0WSA9PT0gMCkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIHRoaXMub25Nb3VzZUVudGVyKCk7XHJcbiAgICBcclxuICAgICAgICBpZiAodGhpcy5mdWxsUGFnZUxpc3RlbmluZykge1xyXG4gICAgICAgICAgdGhpcy5ldmVudCA9IHtcclxuICAgICAgICAgICAgY2xpZW50WDogKHRoaXMuc2V0dGluZ3Muc3RhcnRYICsgdGhpcy5zZXR0aW5ncy5tYXgpIC8gKDIgKiB0aGlzLnNldHRpbmdzLm1heCkgKiB0aGlzLmNsaWVudFdpZHRoLFxyXG4gICAgICAgICAgICBjbGllbnRZOiAodGhpcy5zZXR0aW5ncy5zdGFydFkgKyB0aGlzLnNldHRpbmdzLm1heCkgLyAoMiAqIHRoaXMuc2V0dGluZ3MubWF4KSAqIHRoaXMuY2xpZW50SGVpZ2h0XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLmV2ZW50ID0ge1xyXG4gICAgICAgICAgICBjbGllbnRYOiB0aGlzLmxlZnQgKyAoKHRoaXMuc2V0dGluZ3Muc3RhcnRYICsgdGhpcy5zZXR0aW5ncy5tYXgpIC8gKDIgKiB0aGlzLnNldHRpbmdzLm1heCkgKiB0aGlzLndpZHRoKSxcclxuICAgICAgICAgICAgY2xpZW50WTogdGhpcy50b3AgKyAoKHRoaXMuc2V0dGluZ3Muc3RhcnRZICsgdGhpcy5zZXR0aW5ncy5tYXgpIC8gKDIgKiB0aGlzLnNldHRpbmdzLm1heCkgKiB0aGlzLmhlaWdodClcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICBcclxuICAgICAgICBsZXQgYmFja3VwU2NhbGUgPSB0aGlzLnNldHRpbmdzLnNjYWxlO1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3Muc2NhbGUgPSAxO1xyXG4gICAgICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5ncy5zY2FsZSA9IGJhY2t1cFNjYWxlO1xyXG4gICAgICAgIHRoaXMucmVzZXRHbGFyZSgpO1xyXG4gICAgICB9XHJcbiAgICBcclxuICAgICAgZ2V0VmFsdWVzKCkge1xyXG4gICAgICAgIGxldCB4LCB5O1xyXG4gICAgXHJcbiAgICAgICAgaWYgKHRoaXMuZnVsbFBhZ2VMaXN0ZW5pbmcpIHtcclxuICAgICAgICAgIHggPSB0aGlzLmV2ZW50LmNsaWVudFggLyB0aGlzLmNsaWVudFdpZHRoO1xyXG4gICAgICAgICAgeSA9IHRoaXMuZXZlbnQuY2xpZW50WSAvIHRoaXMuY2xpZW50SGVpZ2h0O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB4ID0gKHRoaXMuZXZlbnQuY2xpZW50WCAtIHRoaXMubGVmdCkgLyB0aGlzLndpZHRoO1xyXG4gICAgICAgICAgeSA9ICh0aGlzLmV2ZW50LmNsaWVudFkgLSB0aGlzLnRvcCkgLyB0aGlzLmhlaWdodDtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICB4ID0gTWF0aC5taW4oTWF0aC5tYXgoeCwgMCksIDEpO1xyXG4gICAgICAgIHkgPSBNYXRoLm1pbihNYXRoLm1heCh5LCAwKSwgMSk7XHJcbiAgICBcclxuICAgICAgICBsZXQgdGlsdFggPSAodGhpcy5yZXZlcnNlICogKHRoaXMuc2V0dGluZ3MubWF4IC0geCAqIHRoaXMuc2V0dGluZ3MubWF4ICogMikpLnRvRml4ZWQoMik7XHJcbiAgICAgICAgbGV0IHRpbHRZID0gKHRoaXMucmV2ZXJzZSAqICh5ICogdGhpcy5zZXR0aW5ncy5tYXggKiAyIC0gdGhpcy5zZXR0aW5ncy5tYXgpKS50b0ZpeGVkKDIpO1xyXG4gICAgICAgIGxldCBhbmdsZSA9IE1hdGguYXRhbjIodGhpcy5ldmVudC5jbGllbnRYIC0gKHRoaXMubGVmdCArIHRoaXMud2lkdGggLyAyKSwgLSh0aGlzLmV2ZW50LmNsaWVudFkgLSAodGhpcy50b3AgKyB0aGlzLmhlaWdodCAvIDIpKSkgKiAoMTgwIC8gTWF0aC5QSSk7XHJcbiAgICBcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgdGlsdFg6IHRpbHRYLFxyXG4gICAgICAgICAgdGlsdFk6IHRpbHRZLFxyXG4gICAgICAgICAgcGVyY2VudGFnZVg6IHggKiAxMDAsXHJcbiAgICAgICAgICBwZXJjZW50YWdlWTogeSAqIDEwMCxcclxuICAgICAgICAgIGFuZ2xlOiBhbmdsZVxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIFxyXG4gICAgICB1cGRhdGVFbGVtZW50UG9zaXRpb24oKSB7XHJcbiAgICAgICAgbGV0IHJlY3QgPSB0aGlzLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICBcclxuICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5lbGVtZW50Lm9mZnNldFdpZHRoO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5lbGVtZW50Lm9mZnNldEhlaWdodDtcclxuICAgICAgICB0aGlzLmxlZnQgPSByZWN0LmxlZnQ7XHJcbiAgICAgICAgdGhpcy50b3AgPSByZWN0LnRvcDtcclxuICAgICAgfVxyXG4gICAgXHJcbiAgICAgIHVwZGF0ZSgpIHtcclxuICAgICAgICBsZXQgdmFsdWVzID0gdGhpcy5nZXRWYWx1ZXMoKTtcclxuICAgIFxyXG4gICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSBcInBlcnNwZWN0aXZlKFwiICsgdGhpcy5zZXR0aW5ncy5wZXJzcGVjdGl2ZSArIFwicHgpIFwiICtcclxuICAgICAgICAgIFwicm90YXRlWChcIiArICh0aGlzLnNldHRpbmdzLmF4aXMgPT09IFwieFwiID8gMCA6IHZhbHVlcy50aWx0WSkgKyBcImRlZykgXCIgK1xyXG4gICAgICAgICAgXCJyb3RhdGVZKFwiICsgKHRoaXMuc2V0dGluZ3MuYXhpcyA9PT0gXCJ5XCIgPyAwIDogdmFsdWVzLnRpbHRYKSArIFwiZGVnKSBcIiArXHJcbiAgICAgICAgICBcInNjYWxlM2QoXCIgKyB0aGlzLnNldHRpbmdzLnNjYWxlICsgXCIsIFwiICsgdGhpcy5zZXR0aW5ncy5zY2FsZSArIFwiLCBcIiArIHRoaXMuc2V0dGluZ3Muc2NhbGUgKyBcIilcIjtcclxuICAgIFxyXG4gICAgICAgIGlmICh0aGlzLmdsYXJlKSB7XHJcbiAgICAgICAgICB0aGlzLmdsYXJlRWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSBgcm90YXRlKCR7dmFsdWVzLmFuZ2xlfWRlZykgdHJhbnNsYXRlKC01MCUsIC01MCUpYDtcclxuICAgICAgICAgIHRoaXMuZ2xhcmVFbGVtZW50LnN0eWxlLm9wYWNpdHkgPSBgJHt2YWx1ZXMucGVyY2VudGFnZVkgKiB0aGlzLnNldHRpbmdzW1wibWF4LWdsYXJlXCJdIC8gMTAwfWA7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgdGhpcy5lbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFwidGlsdENoYW5nZVwiLCB7XHJcbiAgICAgICAgICBcImRldGFpbFwiOiB2YWx1ZXNcclxuICAgICAgICB9KSk7XHJcbiAgICBcclxuICAgICAgICB0aGlzLnVwZGF0ZUNhbGwgPSBudWxsO1xyXG4gICAgICB9XHJcbiAgICBcclxuICAgICAgLyoqXHJcbiAgICAgICAqIEFwcGVuZHMgdGhlIGdsYXJlIGVsZW1lbnQgKGlmIGdsYXJlUHJlcmVuZGVyIGVxdWFscyBmYWxzZSlcclxuICAgICAgICogYW5kIHNldHMgdGhlIGRlZmF1bHQgc3R5bGVcclxuICAgICAgICovXHJcbiAgICAgIHByZXBhcmVHbGFyZSgpIHtcclxuICAgICAgICAvLyBJZiBvcHRpb24gcHJlLXJlbmRlciBpcyBlbmFibGVkIHdlIGFzc3VtZSBhbGwgaHRtbC9jc3MgaXMgcHJlc2VudCBmb3IgYW4gb3B0aW1hbCBnbGFyZSBlZmZlY3QuXHJcbiAgICAgICAgaWYgKCF0aGlzLmdsYXJlUHJlcmVuZGVyKSB7XHJcbiAgICAgICAgICAvLyBDcmVhdGUgZ2xhcmUgZWxlbWVudFxyXG4gICAgICAgICAgY29uc3QganNUaWx0R2xhcmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAganNUaWx0R2xhcmUuY2xhc3NMaXN0LmFkZChcImpzLXRpbHQtZ2xhcmVcIik7XHJcbiAgICBcclxuICAgICAgICAgIGNvbnN0IGpzVGlsdEdsYXJlSW5uZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAganNUaWx0R2xhcmVJbm5lci5jbGFzc0xpc3QuYWRkKFwianMtdGlsdC1nbGFyZS1pbm5lclwiKTtcclxuICAgIFxyXG4gICAgICAgICAganNUaWx0R2xhcmUuYXBwZW5kQ2hpbGQoanNUaWx0R2xhcmVJbm5lcik7XHJcbiAgICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoanNUaWx0R2xhcmUpO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIHRoaXMuZ2xhcmVFbGVtZW50V3JhcHBlciA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmpzLXRpbHQtZ2xhcmVcIik7XHJcbiAgICAgICAgdGhpcy5nbGFyZUVsZW1lbnQgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5qcy10aWx0LWdsYXJlLWlubmVyXCIpO1xyXG4gICAgXHJcbiAgICAgICAgaWYgKHRoaXMuZ2xhcmVQcmVyZW5kZXIpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMuZ2xhcmVFbGVtZW50V3JhcHBlci5zdHlsZSwge1xyXG4gICAgICAgICAgXCJwb3NpdGlvblwiOiBcImFic29sdXRlXCIsXHJcbiAgICAgICAgICBcInRvcFwiOiBcIjBcIixcclxuICAgICAgICAgIFwibGVmdFwiOiBcIjBcIixcclxuICAgICAgICAgIFwid2lkdGhcIjogXCIxMDAlXCIsXHJcbiAgICAgICAgICBcImhlaWdodFwiOiBcIjEwMCVcIixcclxuICAgICAgICAgIFwib3ZlcmZsb3dcIjogXCJoaWRkZW5cIixcclxuICAgICAgICAgIFwicG9pbnRlci1ldmVudHNcIjogXCJub25lXCJcclxuICAgICAgICB9KTtcclxuICAgIFxyXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5nbGFyZUVsZW1lbnQuc3R5bGUsIHtcclxuICAgICAgICAgIFwicG9zaXRpb25cIjogXCJhYnNvbHV0ZVwiLFxyXG4gICAgICAgICAgXCJ0b3BcIjogXCI1MCVcIixcclxuICAgICAgICAgIFwibGVmdFwiOiBcIjUwJVwiLFxyXG4gICAgICAgICAgXCJwb2ludGVyLWV2ZW50c1wiOiBcIm5vbmVcIixcclxuICAgICAgICAgIFwiYmFja2dyb3VuZC1pbWFnZVwiOiBgbGluZWFyLWdyYWRpZW50KDBkZWcsIHJnYmEoMjU1LDI1NSwyNTUsMCkgMCUsIHJnYmEoMjU1LDI1NSwyNTUsMSkgMTAwJSlgLFxyXG4gICAgICAgICAgXCJ3aWR0aFwiOiBgJHt0aGlzLmVsZW1lbnQub2Zmc2V0V2lkdGggKiAyfXB4YCxcclxuICAgICAgICAgIFwiaGVpZ2h0XCI6IGAke3RoaXMuZWxlbWVudC5vZmZzZXRXaWR0aCAqIDJ9cHhgLFxyXG4gICAgICAgICAgXCJ0cmFuc2Zvcm1cIjogXCJyb3RhdGUoMTgwZGVnKSB0cmFuc2xhdGUoLTUwJSwgLTUwJSlcIixcclxuICAgICAgICAgIFwidHJhbnNmb3JtLW9yaWdpblwiOiBcIjAlIDAlXCIsXHJcbiAgICAgICAgICBcIm9wYWNpdHlcIjogXCIwXCIsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIFxyXG4gICAgICB1cGRhdGVHbGFyZVNpemUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZ2xhcmUpIHtcclxuICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5nbGFyZUVsZW1lbnQuc3R5bGUsIHtcclxuICAgICAgICAgICAgXCJ3aWR0aFwiOiBgJHt0aGlzLmVsZW1lbnQub2Zmc2V0V2lkdGggKiAyfWAsXHJcbiAgICAgICAgICAgIFwiaGVpZ2h0XCI6IGAke3RoaXMuZWxlbWVudC5vZmZzZXRXaWR0aCAqIDJ9YCxcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgXHJcbiAgICAgIHVwZGF0ZUNsaWVudFNpemUoKSB7XHJcbiAgICAgICAgdGhpcy5jbGllbnRXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoXHJcbiAgICAgICAgICB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGhcclxuICAgICAgICAgIHx8IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGg7XHJcbiAgICBcclxuICAgICAgICB0aGlzLmNsaWVudEhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodFxyXG4gICAgICAgICAgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodFxyXG4gICAgICAgICAgfHwgZG9jdW1lbnQuYm9keS5jbGllbnRIZWlnaHQ7XHJcbiAgICAgIH1cclxuICAgIFxyXG4gICAgICBvbldpbmRvd1Jlc2l6ZSgpIHtcclxuICAgICAgICB0aGlzLnVwZGF0ZUdsYXJlU2l6ZSgpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlQ2xpZW50U2l6ZSgpO1xyXG4gICAgICB9XHJcbiAgICBcclxuICAgICAgc2V0VHJhbnNpdGlvbigpIHtcclxuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50cmFuc2l0aW9uVGltZW91dCk7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLnRyYW5zaXRpb24gPSB0aGlzLnNldHRpbmdzLnNwZWVkICsgXCJtcyBcIiArIHRoaXMuc2V0dGluZ3MuZWFzaW5nO1xyXG4gICAgICAgIGlmICh0aGlzLmdsYXJlKSB0aGlzLmdsYXJlRWxlbWVudC5zdHlsZS50cmFuc2l0aW9uID0gYG9wYWNpdHkgJHt0aGlzLnNldHRpbmdzLnNwZWVkfW1zICR7dGhpcy5zZXR0aW5ncy5lYXNpbmd9YDtcclxuICAgIFxyXG4gICAgICAgIHRoaXMudHJhbnNpdGlvblRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS50cmFuc2l0aW9uID0gXCJcIjtcclxuICAgICAgICAgIGlmICh0aGlzLmdsYXJlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2xhcmVFbGVtZW50LnN0eWxlLnRyYW5zaXRpb24gPSBcIlwiO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sIHRoaXMuc2V0dGluZ3Muc3BlZWQpO1xyXG4gICAgXHJcbiAgICAgIH1cclxuICAgIFxyXG4gICAgICAvKipcclxuICAgICAgICogTWV0aG9kIHJldHVybiBwYXRjaGVkIHNldHRpbmdzIG9mIGluc3RhbmNlXHJcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gc2V0dGluZ3MucmV2ZXJzZSAtIHJldmVyc2UgdGhlIHRpbHQgZGlyZWN0aW9uXHJcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzZXR0aW5ncy5tYXggLSBtYXggdGlsdCByb3RhdGlvbiAoZGVncmVlcylcclxuICAgICAgICogQHBhcmFtIHtzdGFydFh9IHNldHRpbmdzLnN0YXJ0WCAtIHRoZSBzdGFydGluZyB0aWx0IG9uIHRoZSBYIGF4aXMsIGluIGRlZ3JlZXMuIERlZmF1bHQ6IDBcclxuICAgICAgICogQHBhcmFtIHtzdGFydFl9IHNldHRpbmdzLnN0YXJ0WSAtIHRoZSBzdGFydGluZyB0aWx0IG9uIHRoZSBZIGF4aXMsIGluIGRlZ3JlZXMuIERlZmF1bHQ6IDBcclxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHNldHRpbmdzLnBlcnNwZWN0aXZlIC0gVHJhbnNmb3JtIHBlcnNwZWN0aXZlLCB0aGUgbG93ZXIgdGhlIG1vcmUgZXh0cmVtZSB0aGUgdGlsdCBnZXRzXHJcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzZXR0aW5ncy5lYXNpbmcgLSBFYXNpbmcgb24gZW50ZXIvZXhpdFxyXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gc2V0dGluZ3Muc2NhbGUgLSAyID0gMjAwJSwgMS41ID0gMTUwJSwgZXRjLi5cclxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHNldHRpbmdzLnNwZWVkIC0gU3BlZWQgb2YgdGhlIGVudGVyL2V4aXQgdHJhbnNpdGlvblxyXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHNldHRpbmdzLnRyYW5zaXRpb24gLSBTZXQgYSB0cmFuc2l0aW9uIG9uIGVudGVyL2V4aXRcclxuICAgICAgICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gc2V0dGluZ3MuYXhpcyAtIFdoYXQgYXhpcyBzaG91bGQgYmUgZGlzYWJsZWQuIENhbiBiZSBYIG9yIFlcclxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBzZXR0aW5ncy5nbGFyZSAtIFdoYXQgYXhpcyBzaG91bGQgYmUgZGlzYWJsZWQuIENhbiBiZSBYIG9yIFlcclxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHNldHRpbmdzLm1heC1nbGFyZSAtIHRoZSBtYXhpbXVtIFwiZ2xhcmVcIiBvcGFjaXR5ICgxID0gMTAwJSwgMC41ID0gNTAlKVxyXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHNldHRpbmdzLmdsYXJlLXByZXJlbmRlciAtIGZhbHNlID0gVmFuaWxsYVRpbHQgY3JlYXRlcyB0aGUgZ2xhcmUgZWxlbWVudHMgZm9yIHlvdSwgb3RoZXJ3aXNlXHJcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gc2V0dGluZ3MuZnVsbC1wYWdlLWxpc3RlbmluZyAtIElmIHRydWUsIHBhcmFsbGF4IGVmZmVjdCB3aWxsIGxpc3RlbiB0byBtb3VzZSBtb3ZlIGV2ZW50cyBvbiB0aGUgd2hvbGUgZG9jdW1lbnQsIG5vdCBvbmx5IHRoZSBzZWxlY3RlZCBlbGVtZW50XHJcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gc2V0dGluZ3MubW91c2UtZXZlbnQtZWxlbWVudCAtIFN0cmluZyBzZWxlY3RvciBvciBsaW5rIHRvIEhUTUwtZWxlbWVudCB3aGF0IHdpbGwgYmUgbGlzdGVuIG1vdXNlIGV2ZW50c1xyXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHNldHRpbmdzLnJlc2V0IC0gZmFsc2UgPSBJZiB0aGUgdGlsdCBlZmZlY3QgaGFzIHRvIGJlIHJlc2V0IG9uIGV4aXRcclxuICAgICAgICogQHBhcmFtIHtneXJvc2NvcGV9IHNldHRpbmdzLmd5cm9zY29wZSAtIEVuYWJsZSB0aWx0aW5nIGJ5IGRldmljZW9yaWVudGF0aW9uIGV2ZW50c1xyXG4gICAgICAgKiBAcGFyYW0ge2d5cm9zY29wZVNlbnNpdGl2aXR5fSBzZXR0aW5ncy5neXJvc2NvcGVTZW5zaXRpdml0eSAtIEJldHdlZW4gMCBhbmQgMSAtIFRoZSBhbmdsZSBhdCB3aGljaCBtYXggdGlsdCBwb3NpdGlvbiBpcyByZWFjaGVkLiAxID0gOTBkZWcsIDAuNSA9IDQ1ZGVnLCBldGMuLlxyXG4gICAgICAgKiBAcGFyYW0ge2d5cm9zY29wZVNhbXBsZXN9IHNldHRpbmdzLmd5cm9zY29wZVNhbXBsZXMgLSBIb3cgbWFueSBneXJvc2NvcGUgbW92ZXMgdG8gZGVjaWRlIHRoZSBzdGFydGluZyBwb3NpdGlvbi5cclxuICAgICAgICovXHJcbiAgICAgIGV4dGVuZFNldHRpbmdzKHNldHRpbmdzKSB7XHJcbiAgICAgICAgbGV0IGRlZmF1bHRTZXR0aW5ncyA9IHtcclxuICAgICAgICAgIHJldmVyc2U6IGZhbHNlLFxyXG4gICAgICAgICAgbWF4OiAxNSxcclxuICAgICAgICAgIHN0YXJ0WDogMCxcclxuICAgICAgICAgIHN0YXJ0WTogMCxcclxuICAgICAgICAgIHBlcnNwZWN0aXZlOiAxMDAwLFxyXG4gICAgICAgICAgZWFzaW5nOiBcImN1YmljLWJlemllciguMDMsLjk4LC41MiwuOTkpXCIsXHJcbiAgICAgICAgICBzY2FsZTogMSxcclxuICAgICAgICAgIHNwZWVkOiAzMDAsXHJcbiAgICAgICAgICB0cmFuc2l0aW9uOiB0cnVlLFxyXG4gICAgICAgICAgYXhpczogbnVsbCxcclxuICAgICAgICAgIGdsYXJlOiBmYWxzZSxcclxuICAgICAgICAgIFwibWF4LWdsYXJlXCI6IDEsXHJcbiAgICAgICAgICBcImdsYXJlLXByZXJlbmRlclwiOiBmYWxzZSxcclxuICAgICAgICAgIFwiZnVsbC1wYWdlLWxpc3RlbmluZ1wiOiBmYWxzZSxcclxuICAgICAgICAgIFwibW91c2UtZXZlbnQtZWxlbWVudFwiOiBudWxsLFxyXG4gICAgICAgICAgcmVzZXQ6IHRydWUsXHJcbiAgICAgICAgICBneXJvc2NvcGU6IHRydWUsXHJcbiAgICAgICAgICBneXJvc2NvcGVNaW5BbmdsZVg6IC00NSxcclxuICAgICAgICAgIGd5cm9zY29wZU1heEFuZ2xlWDogNDUsXHJcbiAgICAgICAgICBneXJvc2NvcGVNaW5BbmdsZVk6IC00NSxcclxuICAgICAgICAgIGd5cm9zY29wZU1heEFuZ2xlWTogNDUsXHJcbiAgICAgICAgICBneXJvc2NvcGVTYW1wbGVzOiAxMFxyXG4gICAgICAgIH07XHJcbiAgICBcclxuICAgICAgICBsZXQgbmV3U2V0dGluZ3MgPSB7fTtcclxuICAgICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBkZWZhdWx0U2V0dGluZ3MpIHtcclxuICAgICAgICAgIGlmIChwcm9wZXJ0eSBpbiBzZXR0aW5ncykge1xyXG4gICAgICAgICAgICBuZXdTZXR0aW5nc1twcm9wZXJ0eV0gPSBzZXR0aW5nc1twcm9wZXJ0eV07XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZWxlbWVudC5oYXNBdHRyaWJ1dGUoXCJkYXRhLXRpbHQtXCIgKyBwcm9wZXJ0eSkpIHtcclxuICAgICAgICAgICAgbGV0IGF0dHJpYnV0ZSA9IHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXRpbHQtXCIgKyBwcm9wZXJ0eSk7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgbmV3U2V0dGluZ3NbcHJvcGVydHldID0gSlNPTi5wYXJzZShhdHRyaWJ1dGUpO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgbmV3U2V0dGluZ3NbcHJvcGVydHldID0gYXR0cmlidXRlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG5ld1NldHRpbmdzW3Byb3BlcnR5XSA9IGRlZmF1bHRTZXR0aW5nc1twcm9wZXJ0eV07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgcmV0dXJuIG5ld1NldHRpbmdzO1xyXG4gICAgICB9XHJcbiAgICBcclxuICAgICAgc3RhdGljIGluaXQoZWxlbWVudHMsIHNldHRpbmdzKSB7XHJcbiAgICAgICAgaWYgKGVsZW1lbnRzIGluc3RhbmNlb2YgTm9kZSkge1xyXG4gICAgICAgICAgZWxlbWVudHMgPSBbZWxlbWVudHNdO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIGlmIChlbGVtZW50cyBpbnN0YW5jZW9mIE5vZGVMaXN0KSB7XHJcbiAgICAgICAgICBlbGVtZW50cyA9IFtdLnNsaWNlLmNhbGwoZWxlbWVudHMpO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIGlmICghKGVsZW1lbnRzIGluc3RhbmNlb2YgQXJyYXkpKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgZWxlbWVudHMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgaWYgKCEoXCJ2YW5pbGxhVGlsdFwiIGluIGVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQudmFuaWxsYVRpbHQgPSBuZXcgVmFuaWxsYVRpbHQoZWxlbWVudCwgc2V0dGluZ3MpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgLyogZXhwb3NlIHRoZSBjbGFzcyB0byB3aW5kb3cgKi9cclxuICAgICAgd2luZG93LlZhbmlsbGFUaWx0ID0gVmFuaWxsYVRpbHQ7XHJcbiAgICBcclxuICAgICAgLyoqXHJcbiAgICAgICAqIEF1dG8gbG9hZFxyXG4gICAgICAgKi9cclxuICAgICAgVmFuaWxsYVRpbHQuaW5pdChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtdGlsdF1cIikpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gVmFuaWxsYVRpbHQ7XHJcbiAgICBcclxuICAgIH0oKSk7XHJcbiAgICAiLCJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUmVsbGF4LmpzXG4vLyBCdXR0ZXJ5IHNtb290aCBwYXJhbGxheCBsaWJyYXJ5XG4vLyBDb3B5cmlnaHQgKGMpIDIwMTYgTW9lIEFtYXlhIChAbW9lYW1heWEpXG4vLyBNSVQgbGljZW5zZVxuLy9cbi8vIFRoYW5rcyB0byBQYXJheGlmeS5qcyBhbmQgSmFpbWUgQ2FibGxlcm9cbi8vIGZvciBwYXJhbGxheCBjb25jZXB0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuICAgIGRlZmluZShbXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAvLyBOb2RlLiBEb2VzIG5vdCB3b3JrIHdpdGggc3RyaWN0IENvbW1vbkpTLCBidXRcbiAgICAvLyBvbmx5IENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHRoYXQgc3VwcG9ydCBtb2R1bGUuZXhwb3J0cyxcbiAgICAvLyBsaWtlIE5vZGUuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gQnJvd3NlciBnbG9iYWxzIChyb290IGlzIHdpbmRvdylcbiAgICByb290LlJlbGxheCA9IGZhY3RvcnkoKTtcbiAgfVxufSh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gIHZhciBSZWxsYXggPSBmdW5jdGlvbihlbCwgb3B0aW9ucyl7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICB2YXIgc2VsZiA9IE9iamVjdC5jcmVhdGUoUmVsbGF4LnByb3RvdHlwZSk7XG5cbiAgICB2YXIgcG9zWSA9IDA7XG4gICAgdmFyIHNjcmVlblkgPSAwO1xuICAgIHZhciBwb3NYID0gMDtcbiAgICB2YXIgc2NyZWVuWCA9IDA7XG4gICAgdmFyIGJsb2NrcyA9IFtdO1xuICAgIHZhciBwYXVzZSA9IHRydWU7XG5cbiAgICAvLyBjaGVjayB3aGF0IHJlcXVlc3RBbmltYXRpb25GcmFtZSB0byB1c2UsIGFuZCBpZlxuICAgIC8vIGl0J3Mgbm90IHN1cHBvcnRlZCwgdXNlIHRoZSBvbnNjcm9sbCBldmVudFxuICAgIHZhciBsb29wID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgd2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgd2luZG93Lm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICB3aW5kb3cub1JlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgZnVuY3Rpb24oY2FsbGJhY2speyByZXR1cm4gc2V0VGltZW91dChjYWxsYmFjaywgMTAwMCAvIDYwKTsgfTtcblxuICAgIC8vIHN0b3JlIHRoZSBpZCBmb3IgbGF0ZXIgdXNlXG4gICAgdmFyIGxvb3BJZCA9IG51bGw7XG5cbiAgICAvLyBUZXN0IHZpYSBhIGdldHRlciBpbiB0aGUgb3B0aW9ucyBvYmplY3QgdG8gc2VlIGlmIHRoZSBwYXNzaXZlIHByb3BlcnR5IGlzIGFjY2Vzc2VkXG4gICAgdmFyIHN1cHBvcnRzUGFzc2l2ZSA9IGZhbHNlO1xuICAgIHRyeSB7XG4gICAgICB2YXIgb3B0cyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3Bhc3NpdmUnLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RQYXNzaXZlXCIsIG51bGwsIG9wdHMpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0UGFzc2l2ZVwiLCBudWxsLCBvcHRzKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgLy8gY2hlY2sgd2hhdCBjYW5jZWxBbmltYXRpb24gbWV0aG9kIHRvIHVzZVxuICAgIHZhciBjbGVhckxvb3AgPSB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgfHwgd2luZG93Lm1vekNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8IGNsZWFyVGltZW91dDtcblxuICAgIC8vIGNoZWNrIHdoaWNoIHRyYW5zZm9ybSBwcm9wZXJ0eSB0byB1c2VcbiAgICB2YXIgdHJhbnNmb3JtUHJvcCA9IHdpbmRvdy50cmFuc2Zvcm1Qcm9wIHx8IChmdW5jdGlvbigpe1xuICAgICAgICB2YXIgdGVzdEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGlmICh0ZXN0RWwuc3R5bGUudHJhbnNmb3JtID09PSBudWxsKSB7XG4gICAgICAgICAgdmFyIHZlbmRvcnMgPSBbJ1dlYmtpdCcsICdNb3onLCAnbXMnXTtcbiAgICAgICAgICBmb3IgKHZhciB2ZW5kb3IgaW4gdmVuZG9ycykge1xuICAgICAgICAgICAgaWYgKHRlc3RFbC5zdHlsZVsgdmVuZG9yc1t2ZW5kb3JdICsgJ1RyYW5zZm9ybScgXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIHJldHVybiB2ZW5kb3JzW3ZlbmRvcl0gKyAnVHJhbnNmb3JtJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICd0cmFuc2Zvcm0nO1xuICAgICAgfSkoKTtcblxuICAgIC8vIERlZmF1bHQgU2V0dGluZ3NcbiAgICBzZWxmLm9wdGlvbnMgPSB7XG4gICAgICBzcGVlZDogLTIsXG5cdCAgICB2ZXJ0aWNhbFNwZWVkOiBudWxsLFxuXHQgICAgaG9yaXpvbnRhbFNwZWVkOiBudWxsLFxuICAgICAgYnJlYWtwb2ludHM6IFs1NzYsIDc2OCwgMTIwMV0sXG4gICAgICBjZW50ZXI6IGZhbHNlLFxuICAgICAgd3JhcHBlcjogbnVsbCxcbiAgICAgIHJlbGF0aXZlVG9XcmFwcGVyOiBmYWxzZSxcbiAgICAgIHJvdW5kOiB0cnVlLFxuICAgICAgdmVydGljYWw6IHRydWUsXG4gICAgICBob3Jpem9udGFsOiBmYWxzZSxcbiAgICAgIHZlcnRpY2FsU2Nyb2xsQXhpczogXCJ5XCIsXG4gICAgICBob3Jpem9udGFsU2Nyb2xsQXhpczogXCJ4XCIsXG4gICAgICBjYWxsYmFjazogZnVuY3Rpb24oKSB7fSxcbiAgICB9O1xuXG4gICAgLy8gVXNlciBkZWZpbmVkIG9wdGlvbnMgKG1pZ2h0IGhhdmUgbW9yZSBpbiB0aGUgZnV0dXJlKVxuICAgIGlmIChvcHRpb25zKXtcbiAgICAgIE9iamVjdC5rZXlzKG9wdGlvbnMpLmZvckVhY2goZnVuY3Rpb24oa2V5KXtcbiAgICAgICAgc2VsZi5vcHRpb25zW2tleV0gPSBvcHRpb25zW2tleV07XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZUN1c3RvbUJyZWFrcG9pbnRzICgpIHtcbiAgICAgIGlmIChzZWxmLm9wdGlvbnMuYnJlYWtwb2ludHMubGVuZ3RoID09PSAzICYmIEFycmF5LmlzQXJyYXkoc2VsZi5vcHRpb25zLmJyZWFrcG9pbnRzKSkge1xuICAgICAgICB2YXIgaXNBc2NlbmRpbmcgPSB0cnVlO1xuICAgICAgICB2YXIgaXNOdW1lcmljYWwgPSB0cnVlO1xuICAgICAgICB2YXIgbGFzdFZhbDtcbiAgICAgICAgc2VsZi5vcHRpb25zLmJyZWFrcG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGkgIT09ICdudW1iZXInKSBpc051bWVyaWNhbCA9IGZhbHNlO1xuICAgICAgICAgIGlmIChsYXN0VmFsICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoaSA8IGxhc3RWYWwpIGlzQXNjZW5kaW5nID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxhc3RWYWwgPSBpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGlzQXNjZW5kaW5nICYmIGlzTnVtZXJpY2FsKSByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyByZXZlcnQgZGVmYXVsdHMgaWYgc2V0IGluY29ycmVjdGx5XG4gICAgICBzZWxmLm9wdGlvbnMuYnJlYWtwb2ludHMgPSBbNTc2LCA3NjgsIDEyMDFdO1xuICAgICAgY29uc29sZS53YXJuKFwiUmVsbGF4OiBZb3UgbXVzdCBwYXNzIGFuIGFycmF5IG9mIDMgbnVtYmVycyBpbiBhc2NlbmRpbmcgb3JkZXIgdG8gdGhlIGJyZWFrcG9pbnRzIG9wdGlvbi4gRGVmYXVsdHMgcmV2ZXJ0ZWRcIik7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5icmVha3BvaW50cykge1xuICAgICAgdmFsaWRhdGVDdXN0b21CcmVha3BvaW50cygpO1xuICAgIH1cblxuICAgIC8vIEJ5IGRlZmF1bHQsIHJlbGxheCBjbGFzc1xuICAgIGlmICghZWwpIHtcbiAgICAgIGVsID0gJy5yZWxsYXgnO1xuICAgIH1cblxuICAgIC8vIGNoZWNrIGlmIGVsIGlzIGEgY2xhc3NOYW1lIG9yIGEgbm9kZVxuICAgIHZhciBlbGVtZW50cyA9IHR5cGVvZiBlbCA9PT0gJ3N0cmluZycgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGVsKSA6IFtlbF07XG5cbiAgICAvLyBOb3cgcXVlcnkgc2VsZWN0b3JcbiAgICBpZiAoZWxlbWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgc2VsZi5lbGVtcyA9IGVsZW1lbnRzO1xuICAgIH1cblxuICAgIC8vIFRoZSBlbGVtZW50cyBkb24ndCBleGlzdFxuICAgIGVsc2Uge1xuICAgICAgY29uc29sZS53YXJuKFwiUmVsbGF4OiBUaGUgZWxlbWVudHMgeW91J3JlIHRyeWluZyB0byBzZWxlY3QgZG9uJ3QgZXhpc3QuXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEhhcyBhIHdyYXBwZXIgYW5kIGl0IGV4aXN0c1xuICAgIGlmIChzZWxmLm9wdGlvbnMud3JhcHBlcikge1xuICAgICAgaWYgKCFzZWxmLm9wdGlvbnMud3JhcHBlci5ub2RlVHlwZSkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZi5vcHRpb25zLndyYXBwZXIpO1xuXG4gICAgICAgIGlmICh3cmFwcGVyKSB7XG4gICAgICAgICAgc2VsZi5vcHRpb25zLndyYXBwZXIgPSB3cmFwcGVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcIlJlbGxheDogVGhlIHdyYXBwZXIgeW91J3JlIHRyeWluZyB0byB1c2UgZG9lc24ndCBleGlzdC5cIik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gc2V0IGEgcGxhY2Vob2xkZXIgZm9yIHRoZSBjdXJyZW50IGJyZWFrcG9pbnRcbiAgICB2YXIgY3VycmVudEJyZWFrcG9pbnQ7XG5cbiAgICAvLyBoZWxwZXIgdG8gZGV0ZXJtaW5lIGN1cnJlbnQgYnJlYWtwb2ludFxuICAgIHZhciBnZXRDdXJyZW50QnJlYWtwb2ludCA9IGZ1bmN0aW9uICh3KSB7XG4gICAgICB2YXIgYnAgPSBzZWxmLm9wdGlvbnMuYnJlYWtwb2ludHM7XG4gICAgICBpZiAodyA8IGJwWzBdKSByZXR1cm4gJ3hzJztcbiAgICAgIGlmICh3ID49IGJwWzBdICYmIHcgPCBicFsxXSkgcmV0dXJuICdzbSc7XG4gICAgICBpZiAodyA+PSBicFsxXSAmJiB3IDwgYnBbMl0pIHJldHVybiAnbWQnO1xuICAgICAgcmV0dXJuICdsZyc7XG4gICAgfTtcblxuICAgIC8vIEdldCBhbmQgY2FjaGUgaW5pdGlhbCBwb3NpdGlvbiBvZiBhbGwgZWxlbWVudHNcbiAgICB2YXIgY2FjaGVCbG9ja3MgPSBmdW5jdGlvbigpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5lbGVtcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIHZhciBibG9jayA9IGNyZWF0ZUJsb2NrKHNlbGYuZWxlbXNbaV0pO1xuICAgICAgICBibG9ja3MucHVzaChibG9jayk7XG4gICAgICB9XG4gICAgfTtcblxuXG4gICAgLy8gTGV0J3Mga2ljayB0aGlzIHNjcmlwdCBvZmZcbiAgICAvLyBCdWlsZCBhcnJheSBmb3IgY2FjaGVkIGVsZW1lbnQgdmFsdWVzXG4gICAgdmFyIGluaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgc2VsZi5lbGVtc1tpXS5zdHlsZS5jc3NUZXh0ID0gYmxvY2tzW2ldLnN0eWxlO1xuICAgICAgfVxuXG4gICAgICBibG9ja3MgPSBbXTtcblxuICAgICAgc2NyZWVuWSA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgIHNjcmVlblggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgIGN1cnJlbnRCcmVha3BvaW50ID0gZ2V0Q3VycmVudEJyZWFrcG9pbnQoc2NyZWVuWCk7XG5cbiAgICAgIHNldFBvc2l0aW9uKCk7XG5cbiAgICAgIGNhY2hlQmxvY2tzKCk7XG5cbiAgICAgIGFuaW1hdGUoKTtcblxuICAgICAgLy8gSWYgcGF1c2VkLCB1bnBhdXNlIGFuZCBzZXQgbGlzdGVuZXIgZm9yIHdpbmRvdyByZXNpemluZyBldmVudHNcbiAgICAgIGlmIChwYXVzZSkge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaW5pdCk7XG4gICAgICAgIHBhdXNlID0gZmFsc2U7XG4gICAgICAgIC8vIFN0YXJ0IHRoZSBsb29wXG4gICAgICAgIHVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBXZSB3YW50IHRvIGNhY2hlIHRoZSBwYXJhbGxheCBibG9ja3MnXG4gICAgLy8gdmFsdWVzOiBiYXNlLCB0b3AsIGhlaWdodCwgc3BlZWRcbiAgICAvLyBlbDogaXMgZG9tIG9iamVjdCwgcmV0dXJuOiBlbCBjYWNoZSB2YWx1ZXNcbiAgICB2YXIgY3JlYXRlQmxvY2sgPSBmdW5jdGlvbihlbCkge1xuICAgICAgdmFyIGRhdGFQZXJjZW50YWdlID0gZWwuZ2V0QXR0cmlidXRlKCAnZGF0YS1yZWxsYXgtcGVyY2VudGFnZScgKTtcbiAgICAgIHZhciBkYXRhU3BlZWQgPSBlbC5nZXRBdHRyaWJ1dGUoICdkYXRhLXJlbGxheC1zcGVlZCcgKTtcbiAgICAgIHZhciBkYXRhWHNTcGVlZCA9IGVsLmdldEF0dHJpYnV0ZSggJ2RhdGEtcmVsbGF4LXhzLXNwZWVkJyApO1xuICAgICAgdmFyIGRhdGFNb2JpbGVTcGVlZCA9IGVsLmdldEF0dHJpYnV0ZSggJ2RhdGEtcmVsbGF4LW1vYmlsZS1zcGVlZCcgKTtcbiAgICAgIHZhciBkYXRhVGFibGV0U3BlZWQgPSBlbC5nZXRBdHRyaWJ1dGUoICdkYXRhLXJlbGxheC10YWJsZXQtc3BlZWQnICk7XG4gICAgICB2YXIgZGF0YURlc2t0b3BTcGVlZCA9IGVsLmdldEF0dHJpYnV0ZSggJ2RhdGEtcmVsbGF4LWRlc2t0b3Atc3BlZWQnICk7XG4gICAgICB2YXIgZGF0YVZlcnRpY2FsU3BlZWQgPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcmVsbGF4LXZlcnRpY2FsLXNwZWVkJyk7XG4gICAgICB2YXIgZGF0YUhvcml6b250YWxTcGVlZCA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1yZWxsYXgtaG9yaXpvbnRhbC1zcGVlZCcpO1xuICAgICAgdmFyIGRhdGFWZXJpY2FsU2Nyb2xsQXhpcyA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1yZWxsYXgtdmVydGljYWwtc2Nyb2xsLWF4aXMnKTtcbiAgICAgIHZhciBkYXRhSG9yaXpvbnRhbFNjcm9sbEF4aXMgPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcmVsbGF4LWhvcml6b250YWwtc2Nyb2xsLWF4aXMnKTtcbiAgICAgIHZhciBkYXRhWmluZGV4ID0gZWwuZ2V0QXR0cmlidXRlKCAnZGF0YS1yZWxsYXgtemluZGV4JyApIHx8IDA7XG4gICAgICB2YXIgZGF0YU1pbiA9IGVsLmdldEF0dHJpYnV0ZSggJ2RhdGEtcmVsbGF4LW1pbicgKTtcbiAgICAgIHZhciBkYXRhTWF4ID0gZWwuZ2V0QXR0cmlidXRlKCAnZGF0YS1yZWxsYXgtbWF4JyApO1xuICAgICAgdmFyIGRhdGFNaW5YID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLXJlbGxheC1taW4teCcpO1xuICAgICAgdmFyIGRhdGFNYXhYID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLXJlbGxheC1tYXgteCcpO1xuICAgICAgdmFyIGRhdGFNaW5ZID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLXJlbGxheC1taW4teScpO1xuICAgICAgdmFyIGRhdGFNYXhZID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLXJlbGxheC1tYXgteScpO1xuICAgICAgdmFyIG1hcEJyZWFrcG9pbnRzO1xuICAgICAgdmFyIGJyZWFrcG9pbnRzID0gdHJ1ZTtcblxuICAgICAgaWYgKCFkYXRhWHNTcGVlZCAmJiAhZGF0YU1vYmlsZVNwZWVkICYmICFkYXRhVGFibGV0U3BlZWQgJiYgIWRhdGFEZXNrdG9wU3BlZWQpIHtcbiAgICAgICAgYnJlYWtwb2ludHMgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1hcEJyZWFrcG9pbnRzID0ge1xuICAgICAgICAgICd4cyc6IGRhdGFYc1NwZWVkLFxuICAgICAgICAgICdzbSc6IGRhdGFNb2JpbGVTcGVlZCxcbiAgICAgICAgICAnbWQnOiBkYXRhVGFibGV0U3BlZWQsXG4gICAgICAgICAgJ2xnJzogZGF0YURlc2t0b3BTcGVlZFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICAvLyBpbml0aWFsaXppbmcgYXQgc2Nyb2xsWSA9IDAgKHRvcCBvZiBicm93c2VyKSwgc2Nyb2xsWCA9IDAgKGxlZnQgb2YgYnJvd3NlcilcbiAgICAgIC8vIGVuc3VyZXMgZWxlbWVudHMgYXJlIHBvc2l0aW9uZWQgYmFzZWQgb24gSFRNTCBsYXlvdXQuXG4gICAgICAvL1xuICAgICAgLy8gSWYgdGhlIGVsZW1lbnQgaGFzIHRoZSBwZXJjZW50YWdlIGF0dHJpYnV0ZSwgdGhlIHBvc1kgYW5kIHBvc1ggbmVlZHMgdG8gYmVcbiAgICAgIC8vIHRoZSBjdXJyZW50IHNjcm9sbCBwb3NpdGlvbidzIHZhbHVlLCBzbyB0aGF0IHRoZSBlbGVtZW50cyBhcmUgc3RpbGwgcG9zaXRpb25lZCBiYXNlZCBvbiBIVE1MIGxheW91dFxuICAgICAgdmFyIHdyYXBwZXJQb3NZID0gc2VsZi5vcHRpb25zLndyYXBwZXIgPyBzZWxmLm9wdGlvbnMud3JhcHBlci5zY3JvbGxUb3AgOiAod2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3ApO1xuICAgICAgLy8gSWYgdGhlIG9wdGlvbiByZWxhdGl2ZVRvV3JhcHBlciBpcyB0cnVlLCB1c2UgdGhlIHdyYXBwZXJzIG9mZnNldCB0byB0b3AsIHN1YnRyYWN0ZWQgZnJvbSB0aGUgY3VycmVudCBwYWdlIHNjcm9sbC5cbiAgICAgIGlmIChzZWxmLm9wdGlvbnMucmVsYXRpdmVUb1dyYXBwZXIpIHtcbiAgICAgICAgdmFyIHNjcm9sbFBvc1kgPSAod2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3ApO1xuICAgICAgICB3cmFwcGVyUG9zWSA9IHNjcm9sbFBvc1kgLSBzZWxmLm9wdGlvbnMud3JhcHBlci5vZmZzZXRUb3A7XG4gICAgICB9XG4gICAgICB2YXIgcG9zWSA9IHNlbGYub3B0aW9ucy52ZXJ0aWNhbCA/ICggZGF0YVBlcmNlbnRhZ2UgfHwgc2VsZi5vcHRpb25zLmNlbnRlciA/IHdyYXBwZXJQb3NZIDogMCApIDogMDtcbiAgICAgIHZhciBwb3NYID0gc2VsZi5vcHRpb25zLmhvcml6b250YWwgPyAoIGRhdGFQZXJjZW50YWdlIHx8IHNlbGYub3B0aW9ucy5jZW50ZXIgPyBzZWxmLm9wdGlvbnMud3JhcHBlciA/IHNlbGYub3B0aW9ucy53cmFwcGVyLnNjcm9sbExlZnQgOiAod2luZG93LnBhZ2VYT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0IHx8IGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCkgOiAwICkgOiAwO1xuXG4gICAgICB2YXIgYmxvY2tUb3AgPSBwb3NZICsgZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuICAgICAgdmFyIGJsb2NrSGVpZ2h0ID0gZWwuY2xpZW50SGVpZ2h0IHx8IGVsLm9mZnNldEhlaWdodCB8fCBlbC5zY3JvbGxIZWlnaHQ7XG5cbiAgICAgIHZhciBibG9ja0xlZnQgPSBwb3NYICsgZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcbiAgICAgIHZhciBibG9ja1dpZHRoID0gZWwuY2xpZW50V2lkdGggfHwgZWwub2Zmc2V0V2lkdGggfHwgZWwuc2Nyb2xsV2lkdGg7XG5cbiAgICAgIC8vIGFwcGFyZW50bHkgcGFyYWxsYXggZXF1YXRpb24gZXZlcnlvbmUgdXNlc1xuICAgICAgdmFyIHBlcmNlbnRhZ2VZID0gZGF0YVBlcmNlbnRhZ2UgPyBkYXRhUGVyY2VudGFnZSA6IChwb3NZIC0gYmxvY2tUb3AgKyBzY3JlZW5ZKSAvIChibG9ja0hlaWdodCArIHNjcmVlblkpO1xuICAgICAgdmFyIHBlcmNlbnRhZ2VYID0gZGF0YVBlcmNlbnRhZ2UgPyBkYXRhUGVyY2VudGFnZSA6IChwb3NYIC0gYmxvY2tMZWZ0ICsgc2NyZWVuWCkgLyAoYmxvY2tXaWR0aCArIHNjcmVlblgpO1xuICAgICAgaWYoc2VsZi5vcHRpb25zLmNlbnRlcil7IHBlcmNlbnRhZ2VYID0gMC41OyBwZXJjZW50YWdlWSA9IDAuNTsgfVxuXG4gICAgICAvLyBPcHRpb25hbCBpbmRpdmlkdWFsIGJsb2NrIHNwZWVkIGFzIGRhdGEgYXR0ciwgb3RoZXJ3aXNlIGdsb2JhbCBzcGVlZFxuICAgICAgdmFyIHNwZWVkID0gKGJyZWFrcG9pbnRzICYmIG1hcEJyZWFrcG9pbnRzW2N1cnJlbnRCcmVha3BvaW50XSAhPT0gbnVsbCkgPyBOdW1iZXIobWFwQnJlYWtwb2ludHNbY3VycmVudEJyZWFrcG9pbnRdKSA6IChkYXRhU3BlZWQgPyBkYXRhU3BlZWQgOiBzZWxmLm9wdGlvbnMuc3BlZWQpO1xuICAgICAgdmFyIHZlcnRpY2FsU3BlZWQgPSBkYXRhVmVydGljYWxTcGVlZCA/IGRhdGFWZXJ0aWNhbFNwZWVkIDogc2VsZi5vcHRpb25zLnZlcnRpY2FsU3BlZWQ7XG4gICAgICB2YXIgaG9yaXpvbnRhbFNwZWVkID0gZGF0YUhvcml6b250YWxTcGVlZCA/IGRhdGFIb3Jpem9udGFsU3BlZWQgOiBzZWxmLm9wdGlvbnMuaG9yaXpvbnRhbFNwZWVkO1xuXG4gICAgICAvLyBPcHRpb25hbCBpbmRpdmlkdWFsIGJsb2NrIG1vdmVtZW50IGF4aXMgZGlyZWN0aW9uIGFzIGRhdGEgYXR0ciwgb3RoZXJ3aXNlIGdvYmFsIG1vdmVtZW50IGRpcmVjdGlvblxuICAgICAgdmFyIHZlcnRpY2FsU2Nyb2xsQXhpcyA9IGRhdGFWZXJpY2FsU2Nyb2xsQXhpcyA/IGRhdGFWZXJpY2FsU2Nyb2xsQXhpcyA6IHNlbGYub3B0aW9ucy52ZXJ0aWNhbFNjcm9sbEF4aXM7XG4gICAgICB2YXIgaG9yaXpvbnRhbFNjcm9sbEF4aXMgPSBkYXRhSG9yaXpvbnRhbFNjcm9sbEF4aXMgPyBkYXRhSG9yaXpvbnRhbFNjcm9sbEF4aXMgOiBzZWxmLm9wdGlvbnMuaG9yaXpvbnRhbFNjcm9sbEF4aXM7XG5cbiAgICAgIHZhciBiYXNlcyA9IHVwZGF0ZVBvc2l0aW9uKHBlcmNlbnRhZ2VYLCBwZXJjZW50YWdlWSwgc3BlZWQsIHZlcnRpY2FsU3BlZWQsIGhvcml6b250YWxTcGVlZCk7XG5cbiAgICAgIC8vIH5+U3RvcmUgbm9uLXRyYW5zbGF0ZTNkIHRyYW5zZm9ybXN+flxuICAgICAgLy8gU3RvcmUgaW5saW5lIHN0eWxlcyBhbmQgZXh0cmFjdCB0cmFuc2Zvcm1zXG4gICAgICB2YXIgc3R5bGUgPSBlbC5zdHlsZS5jc3NUZXh0O1xuICAgICAgdmFyIHRyYW5zZm9ybSA9ICcnO1xuXG4gICAgICAvLyBDaGVjayBpZiB0aGVyZSdzIGFuIGlubGluZSBzdHlsZWQgdHJhbnNmb3JtXG4gICAgICB2YXIgc2VhcmNoUmVzdWx0ID0gL3RyYW5zZm9ybVxccyo6L2kuZXhlYyhzdHlsZSk7XG4gICAgICBpZiAoc2VhcmNoUmVzdWx0KSB7XG4gICAgICAgIC8vIEdldCB0aGUgaW5kZXggb2YgdGhlIHRyYW5zZm9ybVxuICAgICAgICB2YXIgaW5kZXggPSBzZWFyY2hSZXN1bHQuaW5kZXg7XG5cbiAgICAgICAgLy8gVHJpbSB0aGUgc3R5bGUgdG8gdGhlIHRyYW5zZm9ybSBwb2ludCBhbmQgZ2V0IHRoZSBmb2xsb3dpbmcgc2VtaS1jb2xvbiBpbmRleFxuICAgICAgICB2YXIgdHJpbW1lZFN0eWxlID0gc3R5bGUuc2xpY2UoaW5kZXgpO1xuICAgICAgICB2YXIgZGVsaW1pdGVyID0gdHJpbW1lZFN0eWxlLmluZGV4T2YoJzsnKTtcblxuICAgICAgICAvLyBSZW1vdmUgXCJ0cmFuc2Zvcm1cIiBzdHJpbmcgYW5kIHNhdmUgdGhlIGF0dHJpYnV0ZVxuICAgICAgICBpZiAoZGVsaW1pdGVyKSB7XG4gICAgICAgICAgdHJhbnNmb3JtID0gXCIgXCIgKyB0cmltbWVkU3R5bGUuc2xpY2UoMTEsIGRlbGltaXRlcikucmVwbGFjZSgvXFxzL2csJycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRyYW5zZm9ybSA9IFwiIFwiICsgdHJpbW1lZFN0eWxlLnNsaWNlKDExKS5yZXBsYWNlKC9cXHMvZywnJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYmFzZVg6IGJhc2VzLngsXG4gICAgICAgIGJhc2VZOiBiYXNlcy55LFxuICAgICAgICB0b3A6IGJsb2NrVG9wLFxuICAgICAgICBsZWZ0OiBibG9ja0xlZnQsXG4gICAgICAgIGhlaWdodDogYmxvY2tIZWlnaHQsXG4gICAgICAgIHdpZHRoOiBibG9ja1dpZHRoLFxuICAgICAgICBzcGVlZDogc3BlZWQsXG4gICAgICAgIHZlcnRpY2FsU3BlZWQ6IHZlcnRpY2FsU3BlZWQsXG4gICAgICAgIGhvcml6b250YWxTcGVlZDogaG9yaXpvbnRhbFNwZWVkLFxuICAgICAgICB2ZXJ0aWNhbFNjcm9sbEF4aXM6IHZlcnRpY2FsU2Nyb2xsQXhpcyxcbiAgICAgICAgaG9yaXpvbnRhbFNjcm9sbEF4aXM6IGhvcml6b250YWxTY3JvbGxBeGlzLFxuICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICAgICAgICB6aW5kZXg6IGRhdGFaaW5kZXgsXG4gICAgICAgIG1pbjogZGF0YU1pbixcbiAgICAgICAgbWF4OiBkYXRhTWF4LFxuICAgICAgICBtaW5YOiBkYXRhTWluWCxcbiAgICAgICAgbWF4WDogZGF0YU1heFgsXG4gICAgICAgIG1pblk6IGRhdGFNaW5ZLFxuICAgICAgICBtYXhZOiBkYXRhTWF4WVxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgLy8gc2V0IHNjcm9sbCBwb3NpdGlvbiAocG9zWSwgcG9zWClcbiAgICAvLyBzaWRlIGVmZmVjdCBtZXRob2QgaXMgbm90IGlkZWFsLCBidXQgb2theSBmb3Igbm93XG4gICAgLy8gcmV0dXJucyB0cnVlIGlmIHRoZSBzY3JvbGwgY2hhbmdlZCwgZmFsc2UgaWYgbm90aGluZyBoYXBwZW5lZFxuICAgIHZhciBzZXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG9sZFkgPSBwb3NZO1xuICAgICAgdmFyIG9sZFggPSBwb3NYO1xuXG4gICAgICBwb3NZID0gc2VsZi5vcHRpb25zLndyYXBwZXIgPyBzZWxmLm9wdGlvbnMud3JhcHBlci5zY3JvbGxUb3AgOiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IHx8IGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZSB8fCBkb2N1bWVudC5ib2R5KS5zY3JvbGxUb3AgfHwgd2luZG93LnBhZ2VZT2Zmc2V0O1xuICAgICAgcG9zWCA9IHNlbGYub3B0aW9ucy53cmFwcGVyID8gc2VsZi5vcHRpb25zLndyYXBwZXIuc2Nyb2xsTGVmdCA6IChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgfHwgZG9jdW1lbnQuYm9keS5wYXJlbnROb2RlIHx8IGRvY3VtZW50LmJvZHkpLnNjcm9sbExlZnQgfHwgd2luZG93LnBhZ2VYT2Zmc2V0O1xuICAgICAgLy8gSWYgb3B0aW9uIHJlbGF0aXZlVG9XcmFwcGVyIGlzIHRydWUsIHVzZSByZWxhdGl2ZSB3cmFwcGVyIHZhbHVlIGluc3RlYWQuXG4gICAgICBpZiAoc2VsZi5vcHRpb25zLnJlbGF0aXZlVG9XcmFwcGVyKSB7XG4gICAgICAgIHZhciBzY3JvbGxQb3NZID0gKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCB8fCBkb2N1bWVudC5ib2R5LnBhcmVudE5vZGUgfHwgZG9jdW1lbnQuYm9keSkuc2Nyb2xsVG9wIHx8IHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgICAgICAgcG9zWSA9IHNjcm9sbFBvc1kgLSBzZWxmLm9wdGlvbnMud3JhcHBlci5vZmZzZXRUb3A7XG4gICAgICB9XG5cblxuICAgICAgaWYgKG9sZFkgIT0gcG9zWSAmJiBzZWxmLm9wdGlvbnMudmVydGljYWwpIHtcbiAgICAgICAgLy8gc2Nyb2xsIGNoYW5nZWQsIHJldHVybiB0cnVlXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAob2xkWCAhPSBwb3NYICYmIHNlbGYub3B0aW9ucy5ob3Jpem9udGFsKSB7XG4gICAgICAgIC8vIHNjcm9sbCBjaGFuZ2VkLCByZXR1cm4gdHJ1ZVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLy8gc2Nyb2xsIGRpZCBub3QgY2hhbmdlXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIC8vIEFoaCBhIHB1cmUgZnVuY3Rpb24sIGdldHMgbmV3IHRyYW5zZm9ybSB2YWx1ZVxuICAgIC8vIGJhc2VkIG9uIHNjcm9sbFBvc2l0aW9uIGFuZCBzcGVlZFxuICAgIC8vIEFsbG93IGZvciBkZWNpbWFsIHBpeGVsIHZhbHVlc1xuICAgIHZhciB1cGRhdGVQb3NpdGlvbiA9IGZ1bmN0aW9uKHBlcmNlbnRhZ2VYLCBwZXJjZW50YWdlWSwgc3BlZWQsIHZlcnRpY2FsU3BlZWQsIGhvcml6b250YWxTcGVlZCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgdmFyIHZhbHVlWCA9ICgoaG9yaXpvbnRhbFNwZWVkID8gaG9yaXpvbnRhbFNwZWVkIDogc3BlZWQpICogKDEwMCAqICgxIC0gcGVyY2VudGFnZVgpKSk7XG4gICAgICB2YXIgdmFsdWVZID0gKCh2ZXJ0aWNhbFNwZWVkID8gdmVydGljYWxTcGVlZCA6IHNwZWVkKSAqICgxMDAgKiAoMSAtIHBlcmNlbnRhZ2VZKSkpO1xuXG4gICAgICByZXN1bHQueCA9IHNlbGYub3B0aW9ucy5yb3VuZCA/IE1hdGgucm91bmQodmFsdWVYKSA6IE1hdGgucm91bmQodmFsdWVYICogMTAwKSAvIDEwMDtcbiAgICAgIHJlc3VsdC55ID0gc2VsZi5vcHRpb25zLnJvdW5kID8gTWF0aC5yb3VuZCh2YWx1ZVkpIDogTWF0aC5yb3VuZCh2YWx1ZVkgKiAxMDApIC8gMTAwO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICAvLyBSZW1vdmUgZXZlbnQgbGlzdGVuZXJzIGFuZCBsb29wIGFnYWluXG4gICAgdmFyIGRlZmVycmVkVXBkYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZGVmZXJyZWRVcGRhdGUpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgZGVmZXJyZWRVcGRhdGUpO1xuICAgICAgKHNlbGYub3B0aW9ucy53cmFwcGVyID8gc2VsZi5vcHRpb25zLndyYXBwZXIgOiB3aW5kb3cpLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGRlZmVycmVkVXBkYXRlKTtcbiAgICAgIChzZWxmLm9wdGlvbnMud3JhcHBlciA/IHNlbGYub3B0aW9ucy53cmFwcGVyIDogZG9jdW1lbnQpLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIGRlZmVycmVkVXBkYXRlKTtcblxuICAgICAgLy8gbG9vcCBhZ2FpblxuICAgICAgbG9vcElkID0gbG9vcCh1cGRhdGUpO1xuICAgIH07XG5cbiAgICAvLyBMb29wXG4gICAgdmFyIHVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHNldFBvc2l0aW9uKCkgJiYgcGF1c2UgPT09IGZhbHNlKSB7XG4gICAgICAgIGFuaW1hdGUoKTtcblxuICAgICAgICAvLyBsb29wIGFnYWluXG4gICAgICAgIGxvb3BJZCA9IGxvb3AodXBkYXRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvb3BJZCA9IG51bGw7XG5cbiAgICAgICAgLy8gRG9uJ3QgYW5pbWF0ZSB1bnRpbCB3ZSBnZXQgYSBwb3NpdGlvbiB1cGRhdGluZyBldmVudFxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZGVmZXJyZWRVcGRhdGUpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCBkZWZlcnJlZFVwZGF0ZSk7XG4gICAgICAgIChzZWxmLm9wdGlvbnMud3JhcHBlciA/IHNlbGYub3B0aW9ucy53cmFwcGVyIDogd2luZG93KS5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBkZWZlcnJlZFVwZGF0ZSwgc3VwcG9ydHNQYXNzaXZlID8geyBwYXNzaXZlOiB0cnVlIH0gOiBmYWxzZSk7XG4gICAgICAgIChzZWxmLm9wdGlvbnMud3JhcHBlciA/IHNlbGYub3B0aW9ucy53cmFwcGVyIDogZG9jdW1lbnQpLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIGRlZmVycmVkVXBkYXRlLCBzdXBwb3J0c1Bhc3NpdmUgPyB7IHBhc3NpdmU6IHRydWUgfSA6IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gVHJhbnNmb3JtM2Qgb24gcGFyYWxsYXggZWxlbWVudFxuICAgIHZhciBhbmltYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcG9zaXRpb25zO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmVsZW1zLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgLy8gRGV0ZXJtaW5lIHJlbGV2YW50IG1vdmVtZW50IGRpcmVjdGlvbnNcbiAgICAgICAgdmFyIHZlcnRpY2FsU2Nyb2xsQXhpcyA9IGJsb2Nrc1tpXS52ZXJ0aWNhbFNjcm9sbEF4aXMudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgdmFyIGhvcml6b250YWxTY3JvbGxBeGlzID0gYmxvY2tzW2ldLmhvcml6b250YWxTY3JvbGxBeGlzLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHZhciB2ZXJ0aWNhbFNjcm9sbFggPSB2ZXJ0aWNhbFNjcm9sbEF4aXMuaW5kZXhPZihcInhcIikgIT0gLTEgPyBwb3NZIDogMDtcbiAgICAgICAgdmFyIHZlcnRpY2FsU2Nyb2xsWSA9IHZlcnRpY2FsU2Nyb2xsQXhpcy5pbmRleE9mKFwieVwiKSAhPSAtMSA/IHBvc1kgOiAwO1xuICAgICAgICB2YXIgaG9yaXpvbnRhbFNjcm9sbFggPSBob3Jpem9udGFsU2Nyb2xsQXhpcy5pbmRleE9mKFwieFwiKSAhPSAtMSA/IHBvc1ggOiAwO1xuICAgICAgICB2YXIgaG9yaXpvbnRhbFNjcm9sbFkgPSBob3Jpem9udGFsU2Nyb2xsQXhpcy5pbmRleE9mKFwieVwiKSAhPSAtMSA/IHBvc1ggOiAwO1xuXG4gICAgICAgIHZhciBwZXJjZW50YWdlWSA9ICgodmVydGljYWxTY3JvbGxZICsgaG9yaXpvbnRhbFNjcm9sbFkgLSBibG9ja3NbaV0udG9wICsgc2NyZWVuWSkgLyAoYmxvY2tzW2ldLmhlaWdodCArIHNjcmVlblkpKTtcbiAgICAgICAgdmFyIHBlcmNlbnRhZ2VYID0gKCh2ZXJ0aWNhbFNjcm9sbFggKyBob3Jpem9udGFsU2Nyb2xsWCAtIGJsb2Nrc1tpXS5sZWZ0ICsgc2NyZWVuWCkgLyAoYmxvY2tzW2ldLndpZHRoICsgc2NyZWVuWCkpO1xuXG4gICAgICAgIC8vIFN1YnRyYWN0aW5nIGluaXRpYWxpemUgdmFsdWUsIHNvIGVsZW1lbnQgc3RheXMgaW4gc2FtZSBzcG90IGFzIEhUTUxcbiAgICAgICAgcG9zaXRpb25zID0gdXBkYXRlUG9zaXRpb24ocGVyY2VudGFnZVgsIHBlcmNlbnRhZ2VZLCBibG9ja3NbaV0uc3BlZWQsIGJsb2Nrc1tpXS52ZXJ0aWNhbFNwZWVkLCBibG9ja3NbaV0uaG9yaXpvbnRhbFNwZWVkKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uWSA9IHBvc2l0aW9ucy55IC0gYmxvY2tzW2ldLmJhc2VZO1xuICAgICAgICB2YXIgcG9zaXRpb25YID0gcG9zaXRpb25zLnggLSBibG9ja3NbaV0uYmFzZVg7XG5cbiAgICAgICAgLy8gVGhlIG5leHQgdHdvIFwiaWZcIiBibG9ja3MgZ28gbGlrZSB0aGlzOlxuICAgICAgICAvLyBDaGVjayBpZiBhIGxpbWl0IGlzIGRlZmluZWQgKGZpcnN0IFwibWluXCIsIHRoZW4gXCJtYXhcIik7XG4gICAgICAgIC8vIENoZWNrIGlmIHdlIG5lZWQgdG8gY2hhbmdlIHRoZSBZIG9yIHRoZSBYXG4gICAgICAgIC8vIChDdXJyZW50bHkgd29ya2luZyBvbmx5IGlmIGp1c3Qgb25lIG9mIHRoZSBheGVzIGlzIGVuYWJsZWQpXG4gICAgICAgIC8vIFRoZW4sIGNoZWNrIGlmIHRoZSBuZXcgcG9zaXRpb24gaXMgaW5zaWRlIHRoZSBhbGxvd2VkIGxpbWl0XG4gICAgICAgIC8vIElmIHNvLCB1c2UgbmV3IHBvc2l0aW9uLiBJZiBub3QsIHNldCBwb3NpdGlvbiB0byBsaW1pdC5cblxuICAgICAgICAvLyBDaGVjayBpZiBhIG1pbiBsaW1pdCBpcyBkZWZpbmVkXG4gICAgICAgIGlmIChibG9ja3NbaV0ubWluICE9PSBudWxsKSB7XG4gICAgICAgICAgaWYgKHNlbGYub3B0aW9ucy52ZXJ0aWNhbCAmJiAhc2VsZi5vcHRpb25zLmhvcml6b250YWwpIHtcbiAgICAgICAgICAgIHBvc2l0aW9uWSA9IHBvc2l0aW9uWSA8PSBibG9ja3NbaV0ubWluID8gYmxvY2tzW2ldLm1pbiA6IHBvc2l0aW9uWTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5ob3Jpem9udGFsICYmICFzZWxmLm9wdGlvbnMudmVydGljYWwpIHtcbiAgICAgICAgICAgIHBvc2l0aW9uWCA9IHBvc2l0aW9uWCA8PSBibG9ja3NbaV0ubWluID8gYmxvY2tzW2ldLm1pbiA6IHBvc2l0aW9uWDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBpZiBkaXJlY3Rpb25hbCBtaW4gbGltaXRzIGFyZSBkZWZpbmVkXG4gICAgICAgIGlmIChibG9ja3NbaV0ubWluWSAhPSBudWxsKSB7XG4gICAgICAgICAgICBwb3NpdGlvblkgPSBwb3NpdGlvblkgPD0gYmxvY2tzW2ldLm1pblkgPyBibG9ja3NbaV0ubWluWSA6IHBvc2l0aW9uWTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYmxvY2tzW2ldLm1pblggIT0gbnVsbCkge1xuICAgICAgICAgICAgcG9zaXRpb25YID0gcG9zaXRpb25YIDw9IGJsb2Nrc1tpXS5taW5YID8gYmxvY2tzW2ldLm1pblggOiBwb3NpdGlvblg7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBpZiBhIG1heCBsaW1pdCBpcyBkZWZpbmVkXG4gICAgICAgIGlmIChibG9ja3NbaV0ubWF4ICE9PSBudWxsKSB7XG4gICAgICAgICAgaWYgKHNlbGYub3B0aW9ucy52ZXJ0aWNhbCAmJiAhc2VsZi5vcHRpb25zLmhvcml6b250YWwpIHtcbiAgICAgICAgICAgIHBvc2l0aW9uWSA9IHBvc2l0aW9uWSA+PSBibG9ja3NbaV0ubWF4ID8gYmxvY2tzW2ldLm1heCA6IHBvc2l0aW9uWTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5ob3Jpem9udGFsICYmICFzZWxmLm9wdGlvbnMudmVydGljYWwpIHtcbiAgICAgICAgICAgIHBvc2l0aW9uWCA9IHBvc2l0aW9uWCA+PSBibG9ja3NbaV0ubWF4ID8gYmxvY2tzW2ldLm1heCA6IHBvc2l0aW9uWDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBpZiBkaXJlY3Rpb25hbCBtYXggbGltaXRzIGFyZSBkZWZpbmVkXG4gICAgICAgIGlmIChibG9ja3NbaV0ubWF4WSAhPSBudWxsKSB7XG4gICAgICAgICAgICBwb3NpdGlvblkgPSBwb3NpdGlvblkgPj0gYmxvY2tzW2ldLm1heFkgPyBibG9ja3NbaV0ubWF4WSA6IHBvc2l0aW9uWTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYmxvY2tzW2ldLm1heFggIT0gbnVsbCkge1xuICAgICAgICAgICAgcG9zaXRpb25YID0gcG9zaXRpb25YID49IGJsb2Nrc1tpXS5tYXhYID8gYmxvY2tzW2ldLm1heFggOiBwb3NpdGlvblg7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgemluZGV4ID0gYmxvY2tzW2ldLnppbmRleDtcblxuICAgICAgICAvLyBNb3ZlIHRoYXQgZWxlbWVudFxuICAgICAgICAvLyAoU2V0IHRoZSBuZXcgdHJhbnNsYXRpb24gYW5kIGFwcGVuZCBpbml0aWFsIGlubGluZSB0cmFuc2Zvcm1zLilcbiAgICAgICAgdmFyIHRyYW5zbGF0ZSA9ICd0cmFuc2xhdGUzZCgnICsgKHNlbGYub3B0aW9ucy5ob3Jpem9udGFsID8gcG9zaXRpb25YIDogJzAnKSArICdweCwnICsgKHNlbGYub3B0aW9ucy52ZXJ0aWNhbCA/IHBvc2l0aW9uWSA6ICcwJykgKyAncHgsJyArIHppbmRleCArICdweCkgJyArIGJsb2Nrc1tpXS50cmFuc2Zvcm07XG4gICAgICAgIHNlbGYuZWxlbXNbaV0uc3R5bGVbdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2xhdGU7XG4gICAgICB9XG4gICAgICBzZWxmLm9wdGlvbnMuY2FsbGJhY2socG9zaXRpb25zKTtcbiAgICB9O1xuXG4gICAgc2VsZi5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuZWxlbXMubGVuZ3RoOyBpKyspe1xuICAgICAgICBzZWxmLmVsZW1zW2ldLnN0eWxlLmNzc1RleHQgPSBibG9ja3NbaV0uc3R5bGU7XG4gICAgICB9XG5cbiAgICAgIC8vIFJlbW92ZSByZXNpemUgZXZlbnQgbGlzdGVuZXIgaWYgbm90IHBhdXNlLCBhbmQgcGF1c2VcbiAgICAgIGlmICghcGF1c2UpIHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGluaXQpO1xuICAgICAgICBwYXVzZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8vIENsZWFyIHRoZSBhbmltYXRpb24gbG9vcCB0byBwcmV2ZW50IHBvc3NpYmxlIG1lbW9yeSBsZWFrXG4gICAgICBjbGVhckxvb3AobG9vcElkKTtcbiAgICAgIGxvb3BJZCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEluaXRcbiAgICBpbml0KCk7XG5cbiAgICAvLyBBbGxvdyB0byByZWNhbGN1bGF0ZSB0aGUgaW5pdGlhbCB2YWx1ZXMgd2hlbmV2ZXIgd2Ugd2FudFxuICAgIHNlbGYucmVmcmVzaCA9IGluaXQ7XG5cbiAgICByZXR1cm4gc2VsZjtcbiAgfTtcbiAgcmV0dXJuIFJlbGxheDtcbn0pKTtcbiIsIi8vIFJvdGF0ZSBvbiBzY3JvbGxcclxuXHJcbndpbmRvdy5vbnNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHNjcm9sbFJvdGF0ZSgpO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gc2Nyb2xsUm90YXRlKCkge1xyXG4gICAgbGV0IGltYWdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyb3RhdGUtLXNjcm9sbFwiKTtcclxuICAgIGltYWdlLnN0eWxlLnRyYW5zZm9ybSA9IFwicm90YXRlKFwiICsgd2luZG93LnBhZ2VZT2Zmc2V0LzQgKyBcImRlZylcIjtcclxufVxyXG4iLCIoZnVuY3Rpb24oJCkge1xyXG5cclxuICAgIGxldCBkcm9wZG93biA9ICQoJ2xpLmRyb3Bkb3duJyk7XHJcblxyXG4gICAgZHJvcGRvd24uaG92ZXIoZnVuY3Rpb24oZSkge1xyXG5cclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7IFxyXG4gICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XHJcblxyXG4gICAgICAgICR0aGlzLnRvZ2dsZUNsYXNzKCdob3ZlcicpO1xyXG4gICAgfSk7XHJcbiAgICAgIFxyXG59KSggalF1ZXJ5ICk7XHJcbiIsImpRdWVyeShmdW5jdGlvbiAoJCkge1xyXG5cclxuICB2YXIgZmlsdGVyRm5zID0ge1xyXG4gICAgLy8gc2hvdyBpZiBudW1iZXIgaXMgZ3JlYXRlciB0aGFuIDUwXHJcbiAgICBudW1iZXJHcmVhdGVyVGhhbjUwOiBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIG51bWJlciA9ICQodGhpcykuZmluZCgnLm51bWJlcicpLnRleHQoKTtcclxuICAgICAgcmV0dXJuIHBhcnNlSW50KCBudW1iZXIsIDEwICkgPiA1MDtcclxuICAgIH0sXHJcbiAgICAvLyBzaG93IGlmIG5hbWUgZW5kcyB3aXRoIC1pdW1cclxuICAgIGl1bTogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBuYW1lID0gJCh0aGlzKS5maW5kKCcubmFtZScpLnRleHQoKTtcclxuICAgICAgY29uc29sZS5sb2cobmFtZSk7XHJcbiAgICAgIHJldHVybiBuYW1lLm1hdGNoKCAva2VzJC8gKTtcclxuICAgIFxyXG4gICAgfSxcclxuICAgIHRlc3RGdW5jOiBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIGF0dHIgPSAkKHRoaXMpLmhhc0NsYXNzKCd3ZWJidXR2ZWNrbGluZycpO1xyXG4gICAgICBjb25zb2xlLmxvZyhhdHRyKTtcclxuICAgICAgcmV0dXJuIGF0dHI7XHJcbiAgICAgXHJcbiAgICB9LFxyXG4gICAgdGVzdFNlbzogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBhdHRyID0gJCh0aGlzKS5oYXNDbGFzcygnc2VvJyk7XHJcbiAgICAgIGNvbnNvbGUubG9nKGF0dHIpO1xyXG4gICAgICByZXR1cm4gYXR0cjtcclxuICAgICBcclxuICAgIH1cclxuICB9O1xyXG4gIFxyXG4gIGZ1bmN0aW9uIGdldEhhc2hGaWx0ZXIoKSB7XHJcbiAgICAvLyBnZXQgZmlsdGVyPWZpbHRlck5hbWVcclxuICAgIHZhciBtYXRjaGVzID0gbG9jYXRpb24uaGFzaC5tYXRjaCggLyhbXiZdKykvaSApO1xyXG4gICAgdmFyIGhhc2hGaWx0ZXIgPSBtYXRjaGVzICYmIG1hdGNoZXNbMV07XHJcbiAgICByZXR1cm4gaGFzaEZpbHRlciAmJiBkZWNvZGVVUklDb21wb25lbnQoIGhhc2hGaWx0ZXIgKS5zdWJzdHIoMSk7XHJcbiAgfVxyXG4gIFxyXG4gIC8vIGluaXQgSXNvdG9wZVxyXG4gIHZhciAkZ3JpZCA9ICQoJy5nYWxsZXJ5Jyk7XHJcbiAgXHJcbiAgLy8gYmluZCBmaWx0ZXIgYnV0dG9uIGNsaWNrXHJcbiAgdmFyICRmaWx0ZXJCdXR0b25Hcm91cCA9ICQoJy5idG4tZmlsdGVyLWdyb3VwJyk7XHJcbiAgJGZpbHRlckJ1dHRvbkdyb3VwLm9uKCAnY2xpY2snLCAnYnV0dG9uJywgZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZmlsdGVyQXR0ciA9ICQoIHRoaXMgKS5hdHRyKCdkYXRhLWZpbHRlcicpO1xyXG4gICAgLy8gc2V0IGZpbHRlciBpbiBoYXNoXHJcbiAgICBsb2NhdGlvbi5oYXNoID0gJycgKyBlbmNvZGVVUklDb21wb25lbnQoIGZpbHRlckF0dHIgKTtcclxuICB9KTtcclxuICBcclxuICB2YXIgaXNJc290b3BlSW5pdCA9IGZhbHNlO1xyXG4gIFxyXG4gIGZ1bmN0aW9uIG9uSGFzaGNoYW5nZSgpIHtcclxuICAgIHZhciBoYXNoRmlsdGVyID0gZ2V0SGFzaEZpbHRlcigpO1xyXG4gICAgaWYgKCAhaGFzaEZpbHRlciAmJiBpc0lzb3RvcGVJbml0ICkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpc0lzb3RvcGVJbml0ID0gdHJ1ZTtcclxuICAgIC8vIGZpbHRlciBpc290b3BlXHJcbiAgICAkZ3JpZC5pc290b3BlKHtcclxuICAgICAgaXRlbVNlbGVjdG9yOiAnLmdhbGxlcnktaXRlbScsXHJcbiAgICAgIGxheW91dE1vZGUgOiAnbWFzb25yeScsXHJcbiAgICAgIG1hc29ucnkgOiB7XHJcbiAgICAgICAgZ3V0dGVyIDogJy5nYWxsZXJ5LWl0ZW0tZ3V0dGVyJ1xyXG4gICAgICB9LFxyXG4gICAgICAvLyB1c2UgZmlsdGVyRm5zXHJcbiAgICAgIGZpbHRlcjogZmlsdGVyRm5zWyBoYXNoRmlsdGVyIF0gfHwgaGFzaEZpbHRlclxyXG4gICAgfSk7XHJcbiAgICAvLyBzZXQgc2VsZWN0ZWQgY2xhc3Mgb24gYnV0dG9uXHJcbiAgICBpZiAoIGhhc2hGaWx0ZXIgKSB7XHJcbiAgICAgICRmaWx0ZXJCdXR0b25Hcm91cC5maW5kKCcuc2VsZWN0ZWQnKS5yZW1vdmVDbGFzcygnc2VsZWN0ZWQnKTtcclxuICAgICAgJGZpbHRlckJ1dHRvbkdyb3VwLmZpbmQoJ1tkYXRhLWZpbHRlcj1cIicgKyBoYXNoRmlsdGVyICsgJ1wiXScpLmFkZENsYXNzKCdzZWxlY3RlZCcpO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICAkKHdpbmRvdykub24oICdoYXNoY2hhbmdlJywgb25IYXNoY2hhbmdlICk7XHJcbiAgXHJcbiAgLy8gdHJpZ2dlciBldmVudCBoYW5kbGVyIHRvIGluaXQgSXNvdG9wZVxyXG4gIG9uSGFzaGNoYW5nZSgpO1xyXG4gIFxyXG4gIFxyXG5cclxufSk7XHJcblxyXG5cclxuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NC40LjEpOiB1dGlsLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQgJCBmcm9tICdqcXVlcnknXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBQcml2YXRlIFRyYW5zaXRpb25FbmQgSGVscGVyc1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgVFJBTlNJVElPTl9FTkQgPSAndHJhbnNpdGlvbmVuZCdcbmNvbnN0IE1BWF9VSUQgPSAxMDAwMDAwXG5jb25zdCBNSUxMSVNFQ09ORFNfTVVMVElQTElFUiA9IDEwMDBcblxuLy8gU2hvdXRvdXQgQW5ndXNDcm9sbCAoaHR0cHM6Ly9nb28uZ2wvcHh3UUdwKVxuZnVuY3Rpb24gdG9UeXBlKG9iaikge1xuICByZXR1cm4ge30udG9TdHJpbmcuY2FsbChvYmopLm1hdGNoKC9cXHMoW2Etel0rKS9pKVsxXS50b0xvd2VyQ2FzZSgpXG59XG5cbmZ1bmN0aW9uIGdldFNwZWNpYWxUcmFuc2l0aW9uRW5kRXZlbnQoKSB7XG4gIHJldHVybiB7XG4gICAgYmluZFR5cGU6IFRSQU5TSVRJT05fRU5ELFxuICAgIGRlbGVnYXRlVHlwZTogVFJBTlNJVElPTl9FTkQsXG4gICAgaGFuZGxlKGV2ZW50KSB7XG4gICAgICBpZiAoJChldmVudC50YXJnZXQpLmlzKHRoaXMpKSB7XG4gICAgICAgIHJldHVybiBldmVudC5oYW5kbGVPYmouaGFuZGxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgICB9XG4gICAgICByZXR1cm4gdW5kZWZpbmVkIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZpbmVkXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25FbmRFbXVsYXRvcihkdXJhdGlvbikge1xuICBsZXQgY2FsbGVkID0gZmFsc2VcblxuICAkKHRoaXMpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCAoKSA9PiB7XG4gICAgY2FsbGVkID0gdHJ1ZVxuICB9KVxuXG4gIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIGlmICghY2FsbGVkKSB7XG4gICAgICBVdGlsLnRyaWdnZXJUcmFuc2l0aW9uRW5kKHRoaXMpXG4gICAgfVxuICB9LCBkdXJhdGlvbilcblxuICByZXR1cm4gdGhpc1xufVxuXG5mdW5jdGlvbiBzZXRUcmFuc2l0aW9uRW5kU3VwcG9ydCgpIHtcbiAgJC5mbi5lbXVsYXRlVHJhbnNpdGlvbkVuZCA9IHRyYW5zaXRpb25FbmRFbXVsYXRvclxuICAkLmV2ZW50LnNwZWNpYWxbVXRpbC5UUkFOU0lUSU9OX0VORF0gPSBnZXRTcGVjaWFsVHJhbnNpdGlvbkVuZEV2ZW50KClcbn1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogUHVibGljIFV0aWwgQXBpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IFV0aWwgPSB7XG5cbiAgVFJBTlNJVElPTl9FTkQ6ICdic1RyYW5zaXRpb25FbmQnLFxuXG4gIGdldFVJRChwcmVmaXgpIHtcbiAgICBkbyB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZVxuICAgICAgcHJlZml4ICs9IH5+KE1hdGgucmFuZG9tKCkgKiBNQVhfVUlEKSAvLyBcIn5+XCIgYWN0cyBsaWtlIGEgZmFzdGVyIE1hdGguZmxvb3IoKSBoZXJlXG4gICAgfSB3aGlsZSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocHJlZml4KSlcbiAgICByZXR1cm4gcHJlZml4XG4gIH0sXG5cbiAgZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KSB7XG4gICAgbGV0IHNlbGVjdG9yID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGFyZ2V0JylcblxuICAgIGlmICghc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09ICcjJykge1xuICAgICAgY29uc3QgaHJlZkF0dHIgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnaHJlZicpXG4gICAgICBzZWxlY3RvciA9IGhyZWZBdHRyICYmIGhyZWZBdHRyICE9PSAnIycgPyBocmVmQXR0ci50cmltKCkgOiAnJ1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikgPyBzZWxlY3RvciA6IG51bGxcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICB9LFxuXG4gIGdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybiAwXG4gICAgfVxuXG4gICAgLy8gR2V0IHRyYW5zaXRpb24tZHVyYXRpb24gb2YgdGhlIGVsZW1lbnRcbiAgICBsZXQgdHJhbnNpdGlvbkR1cmF0aW9uID0gJChlbGVtZW50KS5jc3MoJ3RyYW5zaXRpb24tZHVyYXRpb24nKVxuICAgIGxldCB0cmFuc2l0aW9uRGVsYXkgPSAkKGVsZW1lbnQpLmNzcygndHJhbnNpdGlvbi1kZWxheScpXG5cbiAgICBjb25zdCBmbG9hdFRyYW5zaXRpb25EdXJhdGlvbiA9IHBhcnNlRmxvYXQodHJhbnNpdGlvbkR1cmF0aW9uKVxuICAgIGNvbnN0IGZsb2F0VHJhbnNpdGlvbkRlbGF5ID0gcGFyc2VGbG9hdCh0cmFuc2l0aW9uRGVsYXkpXG5cbiAgICAvLyBSZXR1cm4gMCBpZiBlbGVtZW50IG9yIHRyYW5zaXRpb24gZHVyYXRpb24gaXMgbm90IGZvdW5kXG4gICAgaWYgKCFmbG9hdFRyYW5zaXRpb25EdXJhdGlvbiAmJiAhZmxvYXRUcmFuc2l0aW9uRGVsYXkpIHtcbiAgICAgIHJldHVybiAwXG4gICAgfVxuXG4gICAgLy8gSWYgbXVsdGlwbGUgZHVyYXRpb25zIGFyZSBkZWZpbmVkLCB0YWtlIHRoZSBmaXJzdFxuICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbi5zcGxpdCgnLCcpWzBdXG4gICAgdHJhbnNpdGlvbkRlbGF5ID0gdHJhbnNpdGlvbkRlbGF5LnNwbGl0KCcsJylbMF1cblxuICAgIHJldHVybiAocGFyc2VGbG9hdCh0cmFuc2l0aW9uRHVyYXRpb24pICsgcGFyc2VGbG9hdCh0cmFuc2l0aW9uRGVsYXkpKSAqIE1JTExJU0VDT05EU19NVUxUSVBMSUVSXG4gIH0sXG5cbiAgcmVmbG93KGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudC5vZmZzZXRIZWlnaHRcbiAgfSxcblxuICB0cmlnZ2VyVHJhbnNpdGlvbkVuZChlbGVtZW50KSB7XG4gICAgJChlbGVtZW50KS50cmlnZ2VyKFRSQU5TSVRJT05fRU5EKVxuICB9LFxuXG4gIC8vIFRPRE86IFJlbW92ZSBpbiB2NVxuICBzdXBwb3J0c1RyYW5zaXRpb25FbmQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4oVFJBTlNJVElPTl9FTkQpXG4gIH0sXG5cbiAgaXNFbGVtZW50KG9iaikge1xuICAgIHJldHVybiAob2JqWzBdIHx8IG9iaikubm9kZVR5cGVcbiAgfSxcblxuICB0eXBlQ2hlY2tDb25maWcoY29tcG9uZW50TmFtZSwgY29uZmlnLCBjb25maWdUeXBlcykge1xuICAgIGZvciAoY29uc3QgcHJvcGVydHkgaW4gY29uZmlnVHlwZXMpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoY29uZmlnVHlwZXMsIHByb3BlcnR5KSkge1xuICAgICAgICBjb25zdCBleHBlY3RlZFR5cGVzID0gY29uZmlnVHlwZXNbcHJvcGVydHldXG4gICAgICAgIGNvbnN0IHZhbHVlICAgICAgICAgPSBjb25maWdbcHJvcGVydHldXG4gICAgICAgIGNvbnN0IHZhbHVlVHlwZSAgICAgPSB2YWx1ZSAmJiBVdGlsLmlzRWxlbWVudCh2YWx1ZSlcbiAgICAgICAgICA/ICdlbGVtZW50JyA6IHRvVHlwZSh2YWx1ZSlcblxuICAgICAgICBpZiAoIW5ldyBSZWdFeHAoZXhwZWN0ZWRUeXBlcykudGVzdCh2YWx1ZVR5cGUpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgYCR7Y29tcG9uZW50TmFtZS50b1VwcGVyQ2FzZSgpfTogYCArXG4gICAgICAgICAgICBgT3B0aW9uIFwiJHtwcm9wZXJ0eX1cIiBwcm92aWRlZCB0eXBlIFwiJHt2YWx1ZVR5cGV9XCIgYCArXG4gICAgICAgICAgICBgYnV0IGV4cGVjdGVkIHR5cGUgXCIke2V4cGVjdGVkVHlwZXN9XCIuYClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBmaW5kU2hhZG93Um9vdChlbGVtZW50KSB7XG4gICAgaWYgKCFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXR0YWNoU2hhZG93KSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIC8vIENhbiBmaW5kIHRoZSBzaGFkb3cgcm9vdCBvdGhlcndpc2UgaXQnbGwgcmV0dXJuIHRoZSBkb2N1bWVudFxuICAgIGlmICh0eXBlb2YgZWxlbWVudC5nZXRSb290Tm9kZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29uc3Qgcm9vdCA9IGVsZW1lbnQuZ2V0Um9vdE5vZGUoKVxuICAgICAgcmV0dXJuIHJvb3QgaW5zdGFuY2VvZiBTaGFkb3dSb290ID8gcm9vdCA6IG51bGxcbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIFNoYWRvd1Jvb3QpIHtcbiAgICAgIHJldHVybiBlbGVtZW50XG4gICAgfVxuXG4gICAgLy8gd2hlbiB3ZSBkb24ndCBmaW5kIGEgc2hhZG93IHJvb3RcbiAgICBpZiAoIWVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICByZXR1cm4gVXRpbC5maW5kU2hhZG93Um9vdChlbGVtZW50LnBhcmVudE5vZGUpXG4gIH0sXG5cbiAgalF1ZXJ5RGV0ZWN0aW9uKCkge1xuICAgIGlmICh0eXBlb2YgJCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Jvb3RzdHJhcFxcJ3MgSmF2YVNjcmlwdCByZXF1aXJlcyBqUXVlcnkuIGpRdWVyeSBtdXN0IGJlIGluY2x1ZGVkIGJlZm9yZSBCb290c3RyYXBcXCdzIEphdmFTY3JpcHQuJylcbiAgICB9XG5cbiAgICBjb25zdCB2ZXJzaW9uID0gJC5mbi5qcXVlcnkuc3BsaXQoJyAnKVswXS5zcGxpdCgnLicpXG4gICAgY29uc3QgbWluTWFqb3IgPSAxXG4gICAgY29uc3QgbHRNYWpvciA9IDJcbiAgICBjb25zdCBtaW5NaW5vciA9IDlcbiAgICBjb25zdCBtaW5QYXRjaCA9IDFcbiAgICBjb25zdCBtYXhNYWpvciA9IDRcblxuICAgIGlmICh2ZXJzaW9uWzBdIDwgbHRNYWpvciAmJiB2ZXJzaW9uWzFdIDwgbWluTWlub3IgfHwgdmVyc2lvblswXSA9PT0gbWluTWFqb3IgJiYgdmVyc2lvblsxXSA9PT0gbWluTWlub3IgJiYgdmVyc2lvblsyXSA8IG1pblBhdGNoIHx8IHZlcnNpb25bMF0gPj0gbWF4TWFqb3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQm9vdHN0cmFwXFwncyBKYXZhU2NyaXB0IHJlcXVpcmVzIGF0IGxlYXN0IGpRdWVyeSB2MS45LjEgYnV0IGxlc3MgdGhhbiB2NC4wLjAnKVxuICAgIH1cbiAgfVxufVxuXG5VdGlsLmpRdWVyeURldGVjdGlvbigpXG5zZXRUcmFuc2l0aW9uRW5kU3VwcG9ydCgpXG5cbmV4cG9ydCBkZWZhdWx0IFV0aWxcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuNC4xKTogY29sbGFwc2UuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCAkIGZyb20gJ2pxdWVyeSdcbmltcG9ydCBVdGlsIGZyb20gJy4vdXRpbCdcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvbnN0YW50c1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgTkFNRSAgICAgICAgICAgICAgICA9ICdjb2xsYXBzZSdcbmNvbnN0IFZFUlNJT04gICAgICAgICAgICAgPSAnNC40LjEnXG5jb25zdCBEQVRBX0tFWSAgICAgICAgICAgID0gJ2JzLmNvbGxhcHNlJ1xuY29uc3QgRVZFTlRfS0VZICAgICAgICAgICA9IGAuJHtEQVRBX0tFWX1gXG5jb25zdCBEQVRBX0FQSV9LRVkgICAgICAgID0gJy5kYXRhLWFwaSdcbmNvbnN0IEpRVUVSWV9OT19DT05GTElDVCAgPSAkLmZuW05BTUVdXG5cbmNvbnN0IERlZmF1bHQgPSB7XG4gIHRvZ2dsZSA6IHRydWUsXG4gIHBhcmVudCA6ICcnXG59XG5cbmNvbnN0IERlZmF1bHRUeXBlID0ge1xuICB0b2dnbGUgOiAnYm9vbGVhbicsXG4gIHBhcmVudCA6ICcoc3RyaW5nfGVsZW1lbnQpJ1xufVxuXG5jb25zdCBFdmVudCA9IHtcbiAgU0hPVyAgICAgICAgICAgOiBgc2hvdyR7RVZFTlRfS0VZfWAsXG4gIFNIT1dOICAgICAgICAgIDogYHNob3duJHtFVkVOVF9LRVl9YCxcbiAgSElERSAgICAgICAgICAgOiBgaGlkZSR7RVZFTlRfS0VZfWAsXG4gIEhJRERFTiAgICAgICAgIDogYGhpZGRlbiR7RVZFTlRfS0VZfWAsXG4gIENMSUNLX0RBVEFfQVBJIDogYGNsaWNrJHtFVkVOVF9LRVl9JHtEQVRBX0FQSV9LRVl9YFxufVxuXG5jb25zdCBDbGFzc05hbWUgPSB7XG4gIFNIT1cgICAgICAgOiAnc2hvdycsXG4gIENPTExBUFNFICAgOiAnY29sbGFwc2UnLFxuICBDT0xMQVBTSU5HIDogJ2NvbGxhcHNpbmcnLFxuICBDT0xMQVBTRUQgIDogJ2NvbGxhcHNlZCdcbn1cblxuY29uc3QgRGltZW5zaW9uID0ge1xuICBXSURUSCAgOiAnd2lkdGgnLFxuICBIRUlHSFQgOiAnaGVpZ2h0J1xufVxuXG5jb25zdCBTZWxlY3RvciA9IHtcbiAgQUNUSVZFUyAgICAgOiAnLnNob3csIC5jb2xsYXBzaW5nJyxcbiAgREFUQV9UT0dHTEUgOiAnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl0nXG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDbGFzcyBEZWZpbml0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jbGFzcyBDb2xsYXBzZSB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlXG4gICAgdGhpcy5fZWxlbWVudCAgICAgICAgID0gZWxlbWVudFxuICAgIHRoaXMuX2NvbmZpZyAgICAgICAgICA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpXG4gICAgdGhpcy5fdHJpZ2dlckFycmF5ICAgID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgYFtkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2hyZWY9XCIjJHtlbGVtZW50LmlkfVwiXSxgICtcbiAgICAgIGBbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXVtkYXRhLXRhcmdldD1cIiMke2VsZW1lbnQuaWR9XCJdYFxuICAgICkpXG5cbiAgICBjb25zdCB0b2dnbGVMaXN0ID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLkRBVEFfVE9HR0xFKSlcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdG9nZ2xlTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3QgZWxlbSA9IHRvZ2dsZUxpc3RbaV1cbiAgICAgIGNvbnN0IHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW0pXG4gICAgICBjb25zdCBmaWx0ZXJFbGVtZW50ID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSlcbiAgICAgICAgLmZpbHRlcigoZm91bmRFbGVtKSA9PiBmb3VuZEVsZW0gPT09IGVsZW1lbnQpXG5cbiAgICAgIGlmIChzZWxlY3RvciAhPT0gbnVsbCAmJiBmaWx0ZXJFbGVtZW50Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5fc2VsZWN0b3IgPSBzZWxlY3RvclxuICAgICAgICB0aGlzLl90cmlnZ2VyQXJyYXkucHVzaChlbGVtKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX3BhcmVudCA9IHRoaXMuX2NvbmZpZy5wYXJlbnQgPyB0aGlzLl9nZXRQYXJlbnQoKSA6IG51bGxcblxuICAgIGlmICghdGhpcy5fY29uZmlnLnBhcmVudCkge1xuICAgICAgdGhpcy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKHRoaXMuX2VsZW1lbnQsIHRoaXMuX3RyaWdnZXJBcnJheSlcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fY29uZmlnLnRvZ2dsZSkge1xuICAgICAgdGhpcy50b2dnbGUoKVxuICAgIH1cbiAgfVxuXG4gIC8vIEdldHRlcnNcblxuICBzdGF0aWMgZ2V0IFZFUlNJT04oKSB7XG4gICAgcmV0dXJuIFZFUlNJT05cbiAgfVxuXG4gIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFxuICB9XG5cbiAgLy8gUHVibGljXG5cbiAgdG9nZ2xlKCkge1xuICAgIGlmICgkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkge1xuICAgICAgdGhpcy5oaWRlKClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zaG93KClcbiAgICB9XG4gIH1cblxuICBzaG93KCkge1xuICAgIGlmICh0aGlzLl9pc1RyYW5zaXRpb25pbmcgfHxcbiAgICAgICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBsZXQgYWN0aXZlc1xuICAgIGxldCBhY3RpdmVzRGF0YVxuXG4gICAgaWYgKHRoaXMuX3BhcmVudCkge1xuICAgICAgYWN0aXZlcyA9IFtdLnNsaWNlLmNhbGwodGhpcy5fcGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IuQUNUSVZFUykpXG4gICAgICAgIC5maWx0ZXIoKGVsZW0pID0+IHtcbiAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuX2NvbmZpZy5wYXJlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGFyZW50JykgPT09IHRoaXMuX2NvbmZpZy5wYXJlbnRcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZWxlbS5jbGFzc0xpc3QuY29udGFpbnMoQ2xhc3NOYW1lLkNPTExBUFNFKVxuICAgICAgICB9KVxuXG4gICAgICBpZiAoYWN0aXZlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgYWN0aXZlcyA9IG51bGxcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYWN0aXZlcykge1xuICAgICAgYWN0aXZlc0RhdGEgPSAkKGFjdGl2ZXMpLm5vdCh0aGlzLl9zZWxlY3RvcikuZGF0YShEQVRBX0tFWSlcbiAgICAgIGlmIChhY3RpdmVzRGF0YSAmJiBhY3RpdmVzRGF0YS5faXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHN0YXJ0RXZlbnQgPSAkLkV2ZW50KEV2ZW50LlNIT1cpXG4gICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHN0YXJ0RXZlbnQpXG4gICAgaWYgKHN0YXJ0RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChhY3RpdmVzKSB7XG4gICAgICBDb2xsYXBzZS5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJChhY3RpdmVzKS5ub3QodGhpcy5fc2VsZWN0b3IpLCAnaGlkZScpXG4gICAgICBpZiAoIWFjdGl2ZXNEYXRhKSB7XG4gICAgICAgICQoYWN0aXZlcykuZGF0YShEQVRBX0tFWSwgbnVsbClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBkaW1lbnNpb24gPSB0aGlzLl9nZXREaW1lbnNpb24oKVxuXG4gICAgJCh0aGlzLl9lbGVtZW50KVxuICAgICAgLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTRSlcbiAgICAgIC5hZGRDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0lORylcblxuICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9IDBcblxuICAgIGlmICh0aGlzLl90cmlnZ2VyQXJyYXkubGVuZ3RoKSB7XG4gICAgICAkKHRoaXMuX3RyaWdnZXJBcnJheSlcbiAgICAgICAgLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTRUQpXG4gICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSlcbiAgICB9XG5cbiAgICB0aGlzLnNldFRyYW5zaXRpb25pbmcodHJ1ZSlcblxuICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgJCh0aGlzLl9lbGVtZW50KVxuICAgICAgICAucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNJTkcpXG4gICAgICAgIC5hZGRDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0UpXG4gICAgICAgIC5hZGRDbGFzcyhDbGFzc05hbWUuU0hPVylcblxuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gJydcblxuICAgICAgdGhpcy5zZXRUcmFuc2l0aW9uaW5nKGZhbHNlKVxuXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoRXZlbnQuU0hPV04pXG4gICAgfVxuXG4gICAgY29uc3QgY2FwaXRhbGl6ZWREaW1lbnNpb24gPSBkaW1lbnNpb25bMF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSgxKVxuICAgIGNvbnN0IHNjcm9sbFNpemUgPSBgc2Nyb2xsJHtjYXBpdGFsaXplZERpbWVuc2lvbn1gXG4gICAgY29uc3QgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KVxuXG4gICAgJCh0aGlzLl9lbGVtZW50KVxuICAgICAgLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSlcbiAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pXG5cbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSBgJHt0aGlzLl9lbGVtZW50W3Njcm9sbFNpemVdfXB4YFxuICB9XG5cbiAgaGlkZSgpIHtcbiAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uaW5nIHx8XG4gICAgICAhJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHN0YXJ0RXZlbnQgPSAkLkV2ZW50KEV2ZW50LkhJREUpXG4gICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHN0YXJ0RXZlbnQpXG4gICAgaWYgKHN0YXJ0RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGRpbWVuc2lvbiA9IHRoaXMuX2dldERpbWVuc2lvbigpXG5cbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSBgJHt0aGlzLl9lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW2RpbWVuc2lvbl19cHhgXG5cbiAgICBVdGlsLnJlZmxvdyh0aGlzLl9lbGVtZW50KVxuXG4gICAgJCh0aGlzLl9lbGVtZW50KVxuICAgICAgLmFkZENsYXNzKENsYXNzTmFtZS5DT0xMQVBTSU5HKVxuICAgICAgLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTRSlcbiAgICAgIC5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVylcblxuICAgIGNvbnN0IHRyaWdnZXJBcnJheUxlbmd0aCA9IHRoaXMuX3RyaWdnZXJBcnJheS5sZW5ndGhcbiAgICBpZiAodHJpZ2dlckFycmF5TGVuZ3RoID4gMCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmlnZ2VyQXJyYXlMZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCB0cmlnZ2VyID0gdGhpcy5fdHJpZ2dlckFycmF5W2ldXG4gICAgICAgIGNvbnN0IHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KHRyaWdnZXIpXG5cbiAgICAgICAgaWYgKHNlbGVjdG9yICE9PSBudWxsKSB7XG4gICAgICAgICAgY29uc3QgJGVsZW0gPSAkKFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpKVxuICAgICAgICAgIGlmICghJGVsZW0uaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7XG4gICAgICAgICAgICAkKHRyaWdnZXIpLmFkZENsYXNzKENsYXNzTmFtZS5DT0xMQVBTRUQpXG4gICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zZXRUcmFuc2l0aW9uaW5nKHRydWUpXG5cbiAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgIHRoaXMuc2V0VHJhbnNpdGlvbmluZyhmYWxzZSlcbiAgICAgICQodGhpcy5fZWxlbWVudClcbiAgICAgICAgLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTSU5HKVxuICAgICAgICAuYWRkQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNFKVxuICAgICAgICAudHJpZ2dlcihFdmVudC5ISURERU4pXG4gICAgfVxuXG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gJydcbiAgICBjb25zdCB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpXG5cbiAgICAkKHRoaXMuX2VsZW1lbnQpXG4gICAgICAub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKVxuICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbilcbiAgfVxuXG4gIHNldFRyYW5zaXRpb25pbmcoaXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gaXNUcmFuc2l0aW9uaW5nXG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSlcblxuICAgIHRoaXMuX2NvbmZpZyAgICAgICAgICA9IG51bGxcbiAgICB0aGlzLl9wYXJlbnQgICAgICAgICAgPSBudWxsXG4gICAgdGhpcy5fZWxlbWVudCAgICAgICAgID0gbnVsbFxuICAgIHRoaXMuX3RyaWdnZXJBcnJheSAgICA9IG51bGxcbiAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBudWxsXG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgX2dldENvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcgPSB7XG4gICAgICAuLi5EZWZhdWx0LFxuICAgICAgLi4uY29uZmlnXG4gICAgfVxuICAgIGNvbmZpZy50b2dnbGUgPSBCb29sZWFuKGNvbmZpZy50b2dnbGUpIC8vIENvZXJjZSBzdHJpbmcgdmFsdWVzXG4gICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCBEZWZhdWx0VHlwZSlcbiAgICByZXR1cm4gY29uZmlnXG4gIH1cblxuICBfZ2V0RGltZW5zaW9uKCkge1xuICAgIGNvbnN0IGhhc1dpZHRoID0gJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhEaW1lbnNpb24uV0lEVEgpXG4gICAgcmV0dXJuIGhhc1dpZHRoID8gRGltZW5zaW9uLldJRFRIIDogRGltZW5zaW9uLkhFSUdIVFxuICB9XG5cbiAgX2dldFBhcmVudCgpIHtcbiAgICBsZXQgcGFyZW50XG5cbiAgICBpZiAoVXRpbC5pc0VsZW1lbnQodGhpcy5fY29uZmlnLnBhcmVudCkpIHtcbiAgICAgIHBhcmVudCA9IHRoaXMuX2NvbmZpZy5wYXJlbnRcblxuICAgICAgLy8gSXQncyBhIGpRdWVyeSBvYmplY3RcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5fY29uZmlnLnBhcmVudC5qcXVlcnkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHBhcmVudCA9IHRoaXMuX2NvbmZpZy5wYXJlbnRbMF1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLl9jb25maWcucGFyZW50KVxuICAgIH1cblxuICAgIGNvbnN0IHNlbGVjdG9yID1cbiAgICAgIGBbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXVtkYXRhLXBhcmVudD1cIiR7dGhpcy5fY29uZmlnLnBhcmVudH1cIl1gXG5cbiAgICBjb25zdCBjaGlsZHJlbiA9IFtdLnNsaWNlLmNhbGwocGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKVxuICAgICQoY2hpbGRyZW4pLmVhY2goKGksIGVsZW1lbnQpID0+IHtcbiAgICAgIHRoaXMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhcbiAgICAgICAgQ29sbGFwc2UuX2dldFRhcmdldEZyb21FbGVtZW50KGVsZW1lbnQpLFxuICAgICAgICBbZWxlbWVudF1cbiAgICAgIClcbiAgICB9KVxuXG4gICAgcmV0dXJuIHBhcmVudFxuICB9XG5cbiAgX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhlbGVtZW50LCB0cmlnZ2VyQXJyYXkpIHtcbiAgICBjb25zdCBpc09wZW4gPSAkKGVsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKVxuXG4gICAgaWYgKHRyaWdnZXJBcnJheS5sZW5ndGgpIHtcbiAgICAgICQodHJpZ2dlckFycmF5KVxuICAgICAgICAudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNFRCwgIWlzT3BlbilcbiAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBpc09wZW4pXG4gICAgfVxuICB9XG5cbiAgLy8gU3RhdGljXG5cbiAgc3RhdGljIF9nZXRUYXJnZXRGcm9tRWxlbWVudChlbGVtZW50KSB7XG4gICAgY29uc3Qgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudClcbiAgICByZXR1cm4gc2VsZWN0b3IgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSA6IG51bGxcbiAgfVxuXG4gIHN0YXRpYyBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIGxldCBkYXRhICAgICAgPSAkdGhpcy5kYXRhKERBVEFfS0VZKVxuICAgICAgY29uc3QgX2NvbmZpZyA9IHtcbiAgICAgICAgLi4uRGVmYXVsdCxcbiAgICAgICAgLi4uJHRoaXMuZGF0YSgpLFxuICAgICAgICAuLi50eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyAmJiBjb25maWcgPyBjb25maWcgOiB7fVxuICAgICAgfVxuXG4gICAgICBpZiAoIWRhdGEgJiYgX2NvbmZpZy50b2dnbGUgJiYgL3Nob3d8aGlkZS8udGVzdChjb25maWcpKSB7XG4gICAgICAgIF9jb25maWcudG9nZ2xlID0gZmFsc2VcbiAgICAgIH1cblxuICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgIGRhdGEgPSBuZXcgQ29sbGFwc2UodGhpcywgX2NvbmZpZylcbiAgICAgICAgJHRoaXMuZGF0YShEQVRBX0tFWSwgZGF0YSlcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7Y29uZmlnfVwiYClcbiAgICAgICAgfVxuICAgICAgICBkYXRhW2NvbmZpZ10oKVxuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG4kKGRvY3VtZW50KS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkge1xuICAvLyBwcmV2ZW50RGVmYXVsdCBvbmx5IGZvciA8YT4gZWxlbWVudHMgKHdoaWNoIGNoYW5nZSB0aGUgVVJMKSBub3QgaW5zaWRlIHRoZSBjb2xsYXBzaWJsZSBlbGVtZW50XG4gIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LnRhZ05hbWUgPT09ICdBJykge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgfVxuXG4gIGNvbnN0ICR0cmlnZ2VyID0gJCh0aGlzKVxuICBjb25zdCBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzKVxuICBjb25zdCBzZWxlY3RvcnMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKVxuXG4gICQoc2VsZWN0b3JzKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCAkdGFyZ2V0ID0gJCh0aGlzKVxuICAgIGNvbnN0IGRhdGEgICAgPSAkdGFyZ2V0LmRhdGEoREFUQV9LRVkpXG4gICAgY29uc3QgY29uZmlnICA9IGRhdGEgPyAndG9nZ2xlJyA6ICR0cmlnZ2VyLmRhdGEoKVxuICAgIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkdGFyZ2V0LCBjb25maWcpXG4gIH0pXG59KVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG4kLmZuW05BTUVdID0gQ29sbGFwc2UuX2pRdWVyeUludGVyZmFjZVxuJC5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IENvbGxhcHNlXG4kLmZuW05BTUVdLm5vQ29uZmxpY3QgPSAoKSA9PiB7XG4gICQuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1RcbiAgcmV0dXJuIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2Vcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29sbGFwc2VcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuNC4xKTogZHJvcGRvd24uanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCAkIGZyb20gJ2pxdWVyeSdcbmltcG9ydCBQb3BwZXIgZnJvbSAncG9wcGVyLmpzJ1xuaW1wb3J0IFV0aWwgZnJvbSAnLi91dGlsJ1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FICAgICAgICAgICAgICAgICAgICAgPSAnZHJvcGRvd24nXG5jb25zdCBWRVJTSU9OICAgICAgICAgICAgICAgICAgPSAnNC40LjEnXG5jb25zdCBEQVRBX0tFWSAgICAgICAgICAgICAgICAgPSAnYnMuZHJvcGRvd24nXG5jb25zdCBFVkVOVF9LRVkgICAgICAgICAgICAgICAgPSBgLiR7REFUQV9LRVl9YFxuY29uc3QgREFUQV9BUElfS0VZICAgICAgICAgICAgID0gJy5kYXRhLWFwaSdcbmNvbnN0IEpRVUVSWV9OT19DT05GTElDVCAgICAgICA9ICQuZm5bTkFNRV1cbmNvbnN0IEVTQ0FQRV9LRVlDT0RFICAgICAgICAgICA9IDI3IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIEVzY2FwZSAoRXNjKSBrZXlcbmNvbnN0IFNQQUNFX0tFWUNPREUgICAgICAgICAgICA9IDMyIC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIHNwYWNlIGtleVxuY29uc3QgVEFCX0tFWUNPREUgICAgICAgICAgICAgID0gOSAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciB0YWIga2V5XG5jb25zdCBBUlJPV19VUF9LRVlDT0RFICAgICAgICAgPSAzOCAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciB1cCBhcnJvdyBrZXlcbmNvbnN0IEFSUk9XX0RPV05fS0VZQ09ERSAgICAgICA9IDQwIC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIGRvd24gYXJyb3cga2V5XG5jb25zdCBSSUdIVF9NT1VTRV9CVVRUT05fV0hJQ0ggPSAzIC8vIE1vdXNlRXZlbnQud2hpY2ggdmFsdWUgZm9yIHRoZSByaWdodCBidXR0b24gKGFzc3VtaW5nIGEgcmlnaHQtaGFuZGVkIG1vdXNlKVxuY29uc3QgUkVHRVhQX0tFWURPV04gICAgICAgICAgID0gbmV3IFJlZ0V4cChgJHtBUlJPV19VUF9LRVlDT0RFfXwke0FSUk9XX0RPV05fS0VZQ09ERX18JHtFU0NBUEVfS0VZQ09ERX1gKVxuXG5jb25zdCBFdmVudCA9IHtcbiAgSElERSAgICAgICAgICAgICA6IGBoaWRlJHtFVkVOVF9LRVl9YCxcbiAgSElEREVOICAgICAgICAgICA6IGBoaWRkZW4ke0VWRU5UX0tFWX1gLFxuICBTSE9XICAgICAgICAgICAgIDogYHNob3cke0VWRU5UX0tFWX1gLFxuICBTSE9XTiAgICAgICAgICAgIDogYHNob3duJHtFVkVOVF9LRVl9YCxcbiAgQ0xJQ0sgICAgICAgICAgICA6IGBjbGljayR7RVZFTlRfS0VZfWAsXG4gIENMSUNLX0RBVEFfQVBJICAgOiBgY2xpY2ske0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gLFxuICBLRVlET1dOX0RBVEFfQVBJIDogYGtleWRvd24ke0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gLFxuICBLRVlVUF9EQVRBX0FQSSAgIDogYGtleXVwJHtFVkVOVF9LRVl9JHtEQVRBX0FQSV9LRVl9YFxufVxuXG5jb25zdCBDbGFzc05hbWUgPSB7XG4gIERJU0FCTEVEICAgICAgICA6ICdkaXNhYmxlZCcsXG4gIFNIT1cgICAgICAgICAgICA6ICdzaG93JyxcbiAgRFJPUFVQICAgICAgICAgIDogJ2Ryb3B1cCcsXG4gIERST1BSSUdIVCAgICAgICA6ICdkcm9wcmlnaHQnLFxuICBEUk9QTEVGVCAgICAgICAgOiAnZHJvcGxlZnQnLFxuICBNRU5VUklHSFQgICAgICAgOiAnZHJvcGRvd24tbWVudS1yaWdodCcsXG4gIE1FTlVMRUZUICAgICAgICA6ICdkcm9wZG93bi1tZW51LWxlZnQnLFxuICBQT1NJVElPTl9TVEFUSUMgOiAncG9zaXRpb24tc3RhdGljJ1xufVxuXG5jb25zdCBTZWxlY3RvciA9IHtcbiAgREFUQV9UT0dHTEUgICA6ICdbZGF0YS10b2dnbGU9XCJkcm9wZG93blwiXScsXG4gIEZPUk1fQ0hJTEQgICAgOiAnLmRyb3Bkb3duIGZvcm0nLFxuICBNRU5VICAgICAgICAgIDogJy5kcm9wZG93bi1tZW51JyxcbiAgTkFWQkFSX05BViAgICA6ICcubmF2YmFyLW5hdicsXG4gIFZJU0lCTEVfSVRFTVMgOiAnLmRyb3Bkb3duLW1lbnUgLmRyb3Bkb3duLWl0ZW06bm90KC5kaXNhYmxlZCk6bm90KDpkaXNhYmxlZCknXG59XG5cbmNvbnN0IEF0dGFjaG1lbnRNYXAgPSB7XG4gIFRPUCAgICAgICA6ICd0b3Atc3RhcnQnLFxuICBUT1BFTkQgICAgOiAndG9wLWVuZCcsXG4gIEJPVFRPTSAgICA6ICdib3R0b20tc3RhcnQnLFxuICBCT1RUT01FTkQgOiAnYm90dG9tLWVuZCcsXG4gIFJJR0hUICAgICA6ICdyaWdodC1zdGFydCcsXG4gIFJJR0hURU5EICA6ICdyaWdodC1lbmQnLFxuICBMRUZUICAgICAgOiAnbGVmdC1zdGFydCcsXG4gIExFRlRFTkQgICA6ICdsZWZ0LWVuZCdcbn1cblxuY29uc3QgRGVmYXVsdCA9IHtcbiAgb2Zmc2V0ICAgICAgIDogMCxcbiAgZmxpcCAgICAgICAgIDogdHJ1ZSxcbiAgYm91bmRhcnkgICAgIDogJ3Njcm9sbFBhcmVudCcsXG4gIHJlZmVyZW5jZSAgICA6ICd0b2dnbGUnLFxuICBkaXNwbGF5ICAgICAgOiAnZHluYW1pYycsXG4gIHBvcHBlckNvbmZpZyA6IG51bGxcbn1cblxuY29uc3QgRGVmYXVsdFR5cGUgPSB7XG4gIG9mZnNldCAgICAgICA6ICcobnVtYmVyfHN0cmluZ3xmdW5jdGlvbiknLFxuICBmbGlwICAgICAgICAgOiAnYm9vbGVhbicsXG4gIGJvdW5kYXJ5ICAgICA6ICcoc3RyaW5nfGVsZW1lbnQpJyxcbiAgcmVmZXJlbmNlICAgIDogJyhzdHJpbmd8ZWxlbWVudCknLFxuICBkaXNwbGF5ICAgICAgOiAnc3RyaW5nJyxcbiAgcG9wcGVyQ29uZmlnIDogJyhudWxsfG9iamVjdCknXG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDbGFzcyBEZWZpbml0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jbGFzcyBEcm9wZG93biB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIHRoaXMuX2VsZW1lbnQgID0gZWxlbWVudFxuICAgIHRoaXMuX3BvcHBlciAgID0gbnVsbFxuICAgIHRoaXMuX2NvbmZpZyAgID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZylcbiAgICB0aGlzLl9tZW51ICAgICA9IHRoaXMuX2dldE1lbnVFbGVtZW50KClcbiAgICB0aGlzLl9pbk5hdmJhciA9IHRoaXMuX2RldGVjdE5hdmJhcigpXG5cbiAgICB0aGlzLl9hZGRFdmVudExpc3RlbmVycygpXG4gIH1cblxuICAvLyBHZXR0ZXJzXG5cbiAgc3RhdGljIGdldCBWRVJTSU9OKCkge1xuICAgIHJldHVybiBWRVJTSU9OXG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7XG4gICAgcmV0dXJuIERlZmF1bHRcbiAgfVxuXG4gIHN0YXRpYyBnZXQgRGVmYXVsdFR5cGUoKSB7XG4gICAgcmV0dXJuIERlZmF1bHRUeXBlXG4gIH1cblxuICAvLyBQdWJsaWNcblxuICB0b2dnbGUoKSB7XG4gICAgaWYgKHRoaXMuX2VsZW1lbnQuZGlzYWJsZWQgfHwgJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRElTQUJMRUQpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBpc0FjdGl2ZSA9ICQodGhpcy5fbWVudSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpXG5cbiAgICBEcm9wZG93bi5fY2xlYXJNZW51cygpXG5cbiAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuc2hvdyh0cnVlKVxuICB9XG5cbiAgc2hvdyh1c2VQb3BwZXIgPSBmYWxzZSkge1xuICAgIGlmICh0aGlzLl9lbGVtZW50LmRpc2FibGVkIHx8ICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkRJU0FCTEVEKSB8fCAkKHRoaXMuX21lbnUpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgcmVsYXRlZFRhcmdldCA9IHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRoaXMuX2VsZW1lbnRcbiAgICB9XG4gICAgY29uc3Qgc2hvd0V2ZW50ID0gJC5FdmVudChFdmVudC5TSE9XLCByZWxhdGVkVGFyZ2V0KVxuICAgIGNvbnN0IHBhcmVudCA9IERyb3Bkb3duLl9nZXRQYXJlbnRGcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KVxuXG4gICAgJChwYXJlbnQpLnRyaWdnZXIoc2hvd0V2ZW50KVxuXG4gICAgaWYgKHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gRGlzYWJsZSB0b3RhbGx5IFBvcHBlci5qcyBmb3IgRHJvcGRvd24gaW4gTmF2YmFyXG4gICAgaWYgKCF0aGlzLl9pbk5hdmJhciAmJiB1c2VQb3BwZXIpIHtcbiAgICAgIC8qKlxuICAgICAgICogQ2hlY2sgZm9yIFBvcHBlciBkZXBlbmRlbmN5XG4gICAgICAgKiBQb3BwZXIgLSBodHRwczovL3BvcHBlci5qcy5vcmdcbiAgICAgICAqL1xuICAgICAgaWYgKHR5cGVvZiBQb3BwZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Jvb3RzdHJhcFxcJ3MgZHJvcGRvd25zIHJlcXVpcmUgUG9wcGVyLmpzIChodHRwczovL3BvcHBlci5qcy5vcmcvKScpXG4gICAgICB9XG5cbiAgICAgIGxldCByZWZlcmVuY2VFbGVtZW50ID0gdGhpcy5fZWxlbWVudFxuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLnJlZmVyZW5jZSA9PT0gJ3BhcmVudCcpIHtcbiAgICAgICAgcmVmZXJlbmNlRWxlbWVudCA9IHBhcmVudFxuICAgICAgfSBlbHNlIGlmIChVdGlsLmlzRWxlbWVudCh0aGlzLl9jb25maWcucmVmZXJlbmNlKSkge1xuICAgICAgICByZWZlcmVuY2VFbGVtZW50ID0gdGhpcy5fY29uZmlnLnJlZmVyZW5jZVxuXG4gICAgICAgIC8vIENoZWNrIGlmIGl0J3MgalF1ZXJ5IGVsZW1lbnRcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9jb25maWcucmVmZXJlbmNlLmpxdWVyeSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICByZWZlcmVuY2VFbGVtZW50ID0gdGhpcy5fY29uZmlnLnJlZmVyZW5jZVswXVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIElmIGJvdW5kYXJ5IGlzIG5vdCBgc2Nyb2xsUGFyZW50YCwgdGhlbiBzZXQgcG9zaXRpb24gdG8gYHN0YXRpY2BcbiAgICAgIC8vIHRvIGFsbG93IHRoZSBtZW51IHRvIFwiZXNjYXBlXCIgdGhlIHNjcm9sbCBwYXJlbnQncyBib3VuZGFyaWVzXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvaXNzdWVzLzI0MjUxXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmJvdW5kYXJ5ICE9PSAnc2Nyb2xsUGFyZW50Jykge1xuICAgICAgICAkKHBhcmVudCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLlBPU0lUSU9OX1NUQVRJQylcbiAgICAgIH1cbiAgICAgIHRoaXMuX3BvcHBlciA9IG5ldyBQb3BwZXIocmVmZXJlbmNlRWxlbWVudCwgdGhpcy5fbWVudSwgdGhpcy5fZ2V0UG9wcGVyQ29uZmlnKCkpXG4gICAgfVxuXG4gICAgLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIGFkZCBleHRyYVxuICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgdG8gdGhlIGJvZHkncyBpbW1lZGlhdGUgY2hpbGRyZW47XG4gICAgLy8gb25seSBuZWVkZWQgYmVjYXVzZSBvZiBicm9rZW4gZXZlbnQgZGVsZWdhdGlvbiBvbiBpT1NcbiAgICAvLyBodHRwczovL3d3dy5xdWlya3Ntb2RlLm9yZy9ibG9nL2FyY2hpdmVzLzIwMTQvMDIvbW91c2VfZXZlbnRfYnViLmh0bWxcbiAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmXG4gICAgICAgICQocGFyZW50KS5jbG9zZXN0KFNlbGVjdG9yLk5BVkJBUl9OQVYpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgJChkb2N1bWVudC5ib2R5KS5jaGlsZHJlbigpLm9uKCdtb3VzZW92ZXInLCBudWxsLCAkLm5vb3ApXG4gICAgfVxuXG4gICAgdGhpcy5fZWxlbWVudC5mb2N1cygpXG4gICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKVxuXG4gICAgJCh0aGlzLl9tZW51KS50b2dnbGVDbGFzcyhDbGFzc05hbWUuU0hPVylcbiAgICAkKHBhcmVudClcbiAgICAgIC50b2dnbGVDbGFzcyhDbGFzc05hbWUuU0hPVylcbiAgICAgIC50cmlnZ2VyKCQuRXZlbnQoRXZlbnQuU0hPV04sIHJlbGF0ZWRUYXJnZXQpKVxuICB9XG5cbiAgaGlkZSgpIHtcbiAgICBpZiAodGhpcy5fZWxlbWVudC5kaXNhYmxlZCB8fCAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5ESVNBQkxFRCkgfHwgISQodGhpcy5fbWVudSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCByZWxhdGVkVGFyZ2V0ID0ge1xuICAgICAgcmVsYXRlZFRhcmdldDogdGhpcy5fZWxlbWVudFxuICAgIH1cbiAgICBjb25zdCBoaWRlRXZlbnQgPSAkLkV2ZW50KEV2ZW50LkhJREUsIHJlbGF0ZWRUYXJnZXQpXG4gICAgY29uc3QgcGFyZW50ID0gRHJvcGRvd24uX2dldFBhcmVudEZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpXG5cbiAgICAkKHBhcmVudCkudHJpZ2dlcihoaWRlRXZlbnQpXG5cbiAgICBpZiAoaGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcG9wcGVyKSB7XG4gICAgICB0aGlzLl9wb3BwZXIuZGVzdHJveSgpXG4gICAgfVxuXG4gICAgJCh0aGlzLl9tZW51KS50b2dnbGVDbGFzcyhDbGFzc05hbWUuU0hPVylcbiAgICAkKHBhcmVudClcbiAgICAgIC50b2dnbGVDbGFzcyhDbGFzc05hbWUuU0hPVylcbiAgICAgIC50cmlnZ2VyKCQuRXZlbnQoRXZlbnQuSElEREVOLCByZWxhdGVkVGFyZ2V0KSlcbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgJC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKVxuICAgICQodGhpcy5fZWxlbWVudCkub2ZmKEVWRU5UX0tFWSlcbiAgICB0aGlzLl9lbGVtZW50ID0gbnVsbFxuICAgIHRoaXMuX21lbnUgPSBudWxsXG4gICAgaWYgKHRoaXMuX3BvcHBlciAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5fcG9wcGVyLmRlc3Ryb3koKVxuICAgICAgdGhpcy5fcG9wcGVyID0gbnVsbFxuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZSgpIHtcbiAgICB0aGlzLl9pbk5hdmJhciA9IHRoaXMuX2RldGVjdE5hdmJhcigpXG4gICAgaWYgKHRoaXMuX3BvcHBlciAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5fcG9wcGVyLnNjaGVkdWxlVXBkYXRlKClcbiAgICB9XG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgX2FkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQuQ0xJQ0ssIChldmVudCkgPT4ge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgIHRoaXMudG9nZ2xlKClcbiAgICB9KVxuICB9XG5cbiAgX2dldENvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcgPSB7XG4gICAgICAuLi50aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHQsXG4gICAgICAuLi4kKHRoaXMuX2VsZW1lbnQpLmRhdGEoKSxcbiAgICAgIC4uLmNvbmZpZ1xuICAgIH1cblxuICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKFxuICAgICAgTkFNRSxcbiAgICAgIGNvbmZpZyxcbiAgICAgIHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFR5cGVcbiAgICApXG5cbiAgICByZXR1cm4gY29uZmlnXG4gIH1cblxuICBfZ2V0TWVudUVsZW1lbnQoKSB7XG4gICAgaWYgKCF0aGlzLl9tZW51KSB7XG4gICAgICBjb25zdCBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudClcblxuICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICB0aGlzLl9tZW51ID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IuTUVOVSlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX21lbnVcbiAgfVxuXG4gIF9nZXRQbGFjZW1lbnQoKSB7XG4gICAgY29uc3QgJHBhcmVudERyb3Bkb3duID0gJCh0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUpXG4gICAgbGV0IHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuQk9UVE9NXG5cbiAgICAvLyBIYW5kbGUgZHJvcHVwXG4gICAgaWYgKCRwYXJlbnREcm9wZG93bi5oYXNDbGFzcyhDbGFzc05hbWUuRFJPUFVQKSkge1xuICAgICAgcGxhY2VtZW50ID0gQXR0YWNobWVudE1hcC5UT1BcbiAgICAgIGlmICgkKHRoaXMuX21lbnUpLmhhc0NsYXNzKENsYXNzTmFtZS5NRU5VUklHSFQpKSB7XG4gICAgICAgIHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuVE9QRU5EXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICgkcGFyZW50RHJvcGRvd24uaGFzQ2xhc3MoQ2xhc3NOYW1lLkRST1BSSUdIVCkpIHtcbiAgICAgIHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuUklHSFRcbiAgICB9IGVsc2UgaWYgKCRwYXJlbnREcm9wZG93bi5oYXNDbGFzcyhDbGFzc05hbWUuRFJPUExFRlQpKSB7XG4gICAgICBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLkxFRlRcbiAgICB9IGVsc2UgaWYgKCQodGhpcy5fbWVudSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLk1FTlVSSUdIVCkpIHtcbiAgICAgIHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuQk9UVE9NRU5EXG4gICAgfVxuICAgIHJldHVybiBwbGFjZW1lbnRcbiAgfVxuXG4gIF9kZXRlY3ROYXZiYXIoKSB7XG4gICAgcmV0dXJuICQodGhpcy5fZWxlbWVudCkuY2xvc2VzdCgnLm5hdmJhcicpLmxlbmd0aCA+IDBcbiAgfVxuXG4gIF9nZXRPZmZzZXQoKSB7XG4gICAgY29uc3Qgb2Zmc2V0ID0ge31cblxuICAgIGlmICh0eXBlb2YgdGhpcy5fY29uZmlnLm9mZnNldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb2Zmc2V0LmZuID0gKGRhdGEpID0+IHtcbiAgICAgICAgZGF0YS5vZmZzZXRzID0ge1xuICAgICAgICAgIC4uLmRhdGEub2Zmc2V0cyxcbiAgICAgICAgICAuLi50aGlzLl9jb25maWcub2Zmc2V0KGRhdGEub2Zmc2V0cywgdGhpcy5fZWxlbWVudCkgfHwge31cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXRhXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG9mZnNldC5vZmZzZXQgPSB0aGlzLl9jb25maWcub2Zmc2V0XG4gICAgfVxuXG4gICAgcmV0dXJuIG9mZnNldFxuICB9XG5cbiAgX2dldFBvcHBlckNvbmZpZygpIHtcbiAgICBjb25zdCBwb3BwZXJDb25maWcgPSB7XG4gICAgICBwbGFjZW1lbnQ6IHRoaXMuX2dldFBsYWNlbWVudCgpLFxuICAgICAgbW9kaWZpZXJzOiB7XG4gICAgICAgIG9mZnNldDogdGhpcy5fZ2V0T2Zmc2V0KCksXG4gICAgICAgIGZsaXA6IHtcbiAgICAgICAgICBlbmFibGVkOiB0aGlzLl9jb25maWcuZmxpcFxuICAgICAgICB9LFxuICAgICAgICBwcmV2ZW50T3ZlcmZsb3c6IHtcbiAgICAgICAgICBib3VuZGFyaWVzRWxlbWVudDogdGhpcy5fY29uZmlnLmJvdW5kYXJ5XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBEaXNhYmxlIFBvcHBlci5qcyBpZiB3ZSBoYXZlIGEgc3RhdGljIGRpc3BsYXlcbiAgICBpZiAodGhpcy5fY29uZmlnLmRpc3BsYXkgPT09ICdzdGF0aWMnKSB7XG4gICAgICBwb3BwZXJDb25maWcubW9kaWZpZXJzLmFwcGx5U3R5bGUgPSB7XG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnBvcHBlckNvbmZpZyxcbiAgICAgIC4uLnRoaXMuX2NvbmZpZy5wb3BwZXJDb25maWdcbiAgICB9XG4gIH1cblxuICAvLyBTdGF0aWNcblxuICBzdGF0aWMgX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBkYXRhID0gJCh0aGlzKS5kYXRhKERBVEFfS0VZKVxuICAgICAgY29uc3QgX2NvbmZpZyA9IHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnID8gY29uZmlnIDogbnVsbFxuXG4gICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgZGF0YSA9IG5ldyBEcm9wZG93bih0aGlzLCBfY29uZmlnKVxuICAgICAgICAkKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpXG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2NvbmZpZ31cImApXG4gICAgICAgIH1cbiAgICAgICAgZGF0YVtjb25maWddKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgc3RhdGljIF9jbGVhck1lbnVzKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50ICYmIChldmVudC53aGljaCA9PT0gUklHSFRfTU9VU0VfQlVUVE9OX1dISUNIIHx8XG4gICAgICBldmVudC50eXBlID09PSAna2V5dXAnICYmIGV2ZW50LndoaWNoICE9PSBUQUJfS0VZQ09ERSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHRvZ2dsZXMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IuREFUQV9UT0dHTEUpKVxuXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRvZ2dsZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNvbnN0IHBhcmVudCA9IERyb3Bkb3duLl9nZXRQYXJlbnRGcm9tRWxlbWVudCh0b2dnbGVzW2ldKVxuICAgICAgY29uc3QgY29udGV4dCA9ICQodG9nZ2xlc1tpXSkuZGF0YShEQVRBX0tFWSlcbiAgICAgIGNvbnN0IHJlbGF0ZWRUYXJnZXQgPSB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRvZ2dsZXNbaV1cbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50ICYmIGV2ZW50LnR5cGUgPT09ICdjbGljaycpIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldC5jbGlja0V2ZW50ID0gZXZlbnRcbiAgICAgIH1cblxuICAgICAgaWYgKCFjb250ZXh0KSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGRyb3Bkb3duTWVudSA9IGNvbnRleHQuX21lbnVcbiAgICAgIGlmICghJChwYXJlbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdjbGljaycgJiZcbiAgICAgICAgICAvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGV2ZW50LnRhcmdldC50YWdOYW1lKSB8fCBldmVudC50eXBlID09PSAna2V5dXAnICYmIGV2ZW50LndoaWNoID09PSBUQUJfS0VZQ09ERSkgJiZcbiAgICAgICAgICAkLmNvbnRhaW5zKHBhcmVudCwgZXZlbnQudGFyZ2V0KSkge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBjb25zdCBoaWRlRXZlbnQgPSAkLkV2ZW50KEV2ZW50LkhJREUsIHJlbGF0ZWRUYXJnZXQpXG4gICAgICAkKHBhcmVudCkudHJpZ2dlcihoaWRlRXZlbnQpXG4gICAgICBpZiAoaGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSByZW1vdmUgdGhlIGV4dHJhXG4gICAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHdlIGFkZGVkIGZvciBpT1Mgc3VwcG9ydFxuICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICAkKGRvY3VtZW50LmJvZHkpLmNoaWxkcmVuKCkub2ZmKCdtb3VzZW92ZXInLCBudWxsLCAkLm5vb3ApXG4gICAgICB9XG5cbiAgICAgIHRvZ2dsZXNbaV0uc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJylcblxuICAgICAgaWYgKGNvbnRleHQuX3BvcHBlcikge1xuICAgICAgICBjb250ZXh0Ll9wb3BwZXIuZGVzdHJveSgpXG4gICAgICB9XG5cbiAgICAgICQoZHJvcGRvd25NZW51KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVylcbiAgICAgICQocGFyZW50KVxuICAgICAgICAucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpXG4gICAgICAgIC50cmlnZ2VyKCQuRXZlbnQoRXZlbnQuSElEREVOLCByZWxhdGVkVGFyZ2V0KSlcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgX2dldFBhcmVudEZyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgICBsZXQgcGFyZW50XG4gICAgY29uc3Qgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudClcblxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgcGFyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcilcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyZW50IHx8IGVsZW1lbnQucGFyZW50Tm9kZVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbiAgc3RhdGljIF9kYXRhQXBpS2V5ZG93bkhhbmRsZXIoZXZlbnQpIHtcbiAgICAvLyBJZiBub3QgaW5wdXQvdGV4dGFyZWE6XG4gICAgLy8gIC0gQW5kIG5vdCBhIGtleSBpbiBSRUdFWFBfS0VZRE9XTiA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgLy8gSWYgaW5wdXQvdGV4dGFyZWE6XG4gICAgLy8gIC0gSWYgc3BhY2Uga2V5ID0+IG5vdCBhIGRyb3Bkb3duIGNvbW1hbmRcbiAgICAvLyAgLSBJZiBrZXkgaXMgb3RoZXIgdGhhbiBlc2NhcGVcbiAgICAvLyAgICAtIElmIGtleSBpcyBub3QgdXAgb3IgZG93biA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgLy8gICAgLSBJZiB0cmlnZ2VyIGluc2lkZSB0aGUgbWVudSA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgaWYgKC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZXZlbnQudGFyZ2V0LnRhZ05hbWUpXG4gICAgICA/IGV2ZW50LndoaWNoID09PSBTUEFDRV9LRVlDT0RFIHx8IGV2ZW50LndoaWNoICE9PSBFU0NBUEVfS0VZQ09ERSAmJlxuICAgICAgKGV2ZW50LndoaWNoICE9PSBBUlJPV19ET1dOX0tFWUNPREUgJiYgZXZlbnQud2hpY2ggIT09IEFSUk9XX1VQX0tFWUNPREUgfHxcbiAgICAgICAgJChldmVudC50YXJnZXQpLmNsb3Nlc3QoU2VsZWN0b3IuTUVOVSkubGVuZ3RoKSA6ICFSRUdFWFBfS0VZRE9XTi50ZXN0KGV2ZW50LndoaWNoKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG5cbiAgICBpZiAodGhpcy5kaXNhYmxlZCB8fCAkKHRoaXMpLmhhc0NsYXNzKENsYXNzTmFtZS5ESVNBQkxFRCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHBhcmVudCAgID0gRHJvcGRvd24uX2dldFBhcmVudEZyb21FbGVtZW50KHRoaXMpXG4gICAgY29uc3QgaXNBY3RpdmUgPSAkKHBhcmVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpXG5cbiAgICBpZiAoIWlzQWN0aXZlICYmIGV2ZW50LndoaWNoID09PSBFU0NBUEVfS0VZQ09ERSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKCFpc0FjdGl2ZSB8fCBpc0FjdGl2ZSAmJiAoZXZlbnQud2hpY2ggPT09IEVTQ0FQRV9LRVlDT0RFIHx8IGV2ZW50LndoaWNoID09PSBTUEFDRV9LRVlDT0RFKSkge1xuICAgICAgaWYgKGV2ZW50LndoaWNoID09PSBFU0NBUEVfS0VZQ09ERSkge1xuICAgICAgICBjb25zdCB0b2dnbGUgPSBwYXJlbnQucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5EQVRBX1RPR0dMRSlcbiAgICAgICAgJCh0b2dnbGUpLnRyaWdnZXIoJ2ZvY3VzJylcbiAgICAgIH1cblxuICAgICAgJCh0aGlzKS50cmlnZ2VyKCdjbGljaycpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBpdGVtcyA9IFtdLnNsaWNlLmNhbGwocGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IuVklTSUJMRV9JVEVNUykpXG4gICAgICAuZmlsdGVyKChpdGVtKSA9PiAkKGl0ZW0pLmlzKCc6dmlzaWJsZScpKVxuXG4gICAgaWYgKGl0ZW1zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgbGV0IGluZGV4ID0gaXRlbXMuaW5kZXhPZihldmVudC50YXJnZXQpXG5cbiAgICBpZiAoZXZlbnQud2hpY2ggPT09IEFSUk9XX1VQX0tFWUNPREUgJiYgaW5kZXggPiAwKSB7IC8vIFVwXG4gICAgICBpbmRleC0tXG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LndoaWNoID09PSBBUlJPV19ET1dOX0tFWUNPREUgJiYgaW5kZXggPCBpdGVtcy5sZW5ndGggLSAxKSB7IC8vIERvd25cbiAgICAgIGluZGV4KytcbiAgICB9XG5cbiAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICBpbmRleCA9IDBcbiAgICB9XG5cbiAgICBpdGVtc1tpbmRleF0uZm9jdXMoKVxuICB9XG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuJChkb2N1bWVudClcbiAgLm9uKEV2ZW50LktFWURPV05fREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfVE9HR0xFLCBEcm9wZG93bi5fZGF0YUFwaUtleWRvd25IYW5kbGVyKVxuICAub24oRXZlbnQuS0VZRE9XTl9EQVRBX0FQSSwgU2VsZWN0b3IuTUVOVSwgRHJvcGRvd24uX2RhdGFBcGlLZXlkb3duSGFuZGxlcilcbiAgLm9uKGAke0V2ZW50LkNMSUNLX0RBVEFfQVBJfSAke0V2ZW50LktFWVVQX0RBVEFfQVBJfWAsIERyb3Bkb3duLl9jbGVhck1lbnVzKVxuICAub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfVE9HR0xFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICBEcm9wZG93bi5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJCh0aGlzKSwgJ3RvZ2dsZScpXG4gIH0pXG4gIC5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuRk9STV9DSElMRCwgKGUpID0+IHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpXG4gIH0pXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBqUXVlcnlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbiQuZm5bTkFNRV0gPSBEcm9wZG93bi5falF1ZXJ5SW50ZXJmYWNlXG4kLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gRHJvcGRvd25cbiQuZm5bTkFNRV0ubm9Db25mbGljdCA9ICgpID0+IHtcbiAgJC5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVFxuICByZXR1cm4gRHJvcGRvd24uX2pRdWVyeUludGVyZmFjZVxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IERyb3Bkb3duXG4iXSwic291cmNlUm9vdCI6IiJ9