!function(t){var e={};function i(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(n,s,function(e){return t[e]}.bind(null,s));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){t.exports=i(1)},function(t,e,i){"use strict";i.r(e);i(2),i(4),i(5),i(6),i(7)},function(t,e,i){var n,s,o,r,a,h,l,u,c,d,m,f,p,g,v,y,_,b,x,z,E;function I(t){return(I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}
/*!
 * Isotope PACKAGED v3.0.6
 *
 * Licensed GPLv3 for open source use
 * or Isotope Commercial License for commercial use
 *
 * https://isotope.metafizzy.co
 * Copyright 2010-2018 Metafizzy
 */!function(n,s){z=[i(3)],void 0===(E=function(t){return function(t,e){"use strict";var i=Array.prototype.slice,n=t.console,s=void 0===n?function(){}:function(t){n.error(t)};function o(n,o,a){function h(t,e,i){var o,r="$()."+n+'("'+e+'")';return t.each((function(t,h){var l=a.data(h,n);if(l){var u=l[e];if(u&&"_"!=e.charAt(0)){var c=u.apply(l,i);o=void 0===o?c:o}else s(r+" is not a valid method")}else s(n+" not initialized. Cannot call methods, i.e. "+r)})),void 0!==o?o:t}function l(t,e){t.each((function(t,i){var s=a.data(i,n);s?(s.option(e),s._init()):(s=new o(i,e),a.data(i,n,s))}))}(a=a||e||t.jQuery)&&(o.prototype.option||(o.prototype.option=function(t){a.isPlainObject(t)&&(this.options=a.extend(!0,this.options,t))}),a.fn[n]=function(t){if("string"==typeof t){var e=i.call(arguments,1);return h(this,t,e)}return l(this,t),this},r(a))}function r(t){!t||t&&t.bridget||(t.bridget=o)}return r(e||t.jQuery),o}(n,t)}.apply(e,z))||(t.exports=E)}(window),"undefined"!=typeof window&&window,o={id:"ev-emitter/ev-emitter",exports:{},loaded:!1},n="function"==typeof(s=function(){function t(){}var e=t.prototype;return e.on=function(t,e){if(t&&e){var i=this._events=this._events||{},n=i[t]=i[t]||[];return-1==n.indexOf(e)&&n.push(e),this}},e.once=function(t,e){if(t&&e){this.on(t,e);var i=this._onceEvents=this._onceEvents||{};return(i[t]=i[t]||{})[e]=!0,this}},e.off=function(t,e){var i=this._events&&this._events[t];if(i&&i.length){var n=i.indexOf(e);return-1!=n&&i.splice(n,1),this}},e.emitEvent=function(t,e){var i=this._events&&this._events[t];if(i&&i.length){i=i.slice(0),e=e||[];for(var n=this._onceEvents&&this._onceEvents[t],s=0;s<i.length;s++){var o=i[s];n&&n[o]&&(this.off(t,o),delete n[o]),o.apply(this,e)}return this}},e.allOff=function(){delete this._events,delete this._onceEvents},t})?s.call(o.exports,i,o.exports,o):s,o.loaded=!0,void 0!==n||(n=o.exports),window,h={id:"get-size/get-size",exports:{},loaded:!1},r="function"==typeof(a=function(){"use strict";function t(t){var e=parseFloat(t);return-1==t.indexOf("%")&&!isNaN(e)&&e}var e="undefined"==typeof console?function(){}:function(t){console.error(t)},i=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"],n=i.length;function s(t){var i=getComputedStyle(t);return i||e("Style returned "+i+". Are you running this code in a hidden iframe on Firefox? See https://bit.ly/getsizebug1"),i}var o,r=!1;function a(e){if(function(){if(!r){r=!0;var e=document.createElement("div");e.style.width="200px",e.style.padding="1px 2px 3px 4px",e.style.borderStyle="solid",e.style.borderWidth="1px 2px 3px 4px",e.style.boxSizing="border-box";var i=document.body||document.documentElement;i.appendChild(e);var n=s(e);o=200==Math.round(t(n.width)),a.isBoxSizeOuter=o,i.removeChild(e)}}(),"string"==typeof e&&(e=document.querySelector(e)),e&&"object"==I(e)&&e.nodeType){var h=s(e);if("none"==h.display)return function(){for(var t={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},e=0;e<n;e++)t[i[e]]=0;return t}();var l={};l.width=e.offsetWidth,l.height=e.offsetHeight;for(var u=l.isBorderBox="border-box"==h.boxSizing,c=0;c<n;c++){var d=i[c],m=h[d],f=parseFloat(m);l[d]=isNaN(f)?0:f}var p=l.paddingLeft+l.paddingRight,g=l.paddingTop+l.paddingBottom,v=l.marginLeft+l.marginRight,y=l.marginTop+l.marginBottom,_=l.borderLeftWidth+l.borderRightWidth,b=l.borderTopWidth+l.borderBottomWidth,x=u&&o,z=t(h.width);!1!==z&&(l.width=z+(x?0:p+_));var E=t(h.height);return!1!==E&&(l.height=E+(x?0:g+b)),l.innerWidth=l.width-(p+_),l.innerHeight=l.height-(g+b),l.outerWidth=l.width+v,l.outerHeight=l.height+y,l}}return a})?a.call(h.exports,i,h.exports,h):a,h.loaded=!0,void 0!==r||(r=h.exports),function(t,e){"use strict";c={id:"desandro-matches-selector/matches-selector",exports:{},loaded:!1},l="function"==typeof(u=e)?u.call(c.exports,i,c.exports,c):u,c.loaded=!0,void 0!==l||(l=c.exports)}(window,(function(){"use strict";var t=function(){var t=window.Element.prototype;if(t.matches)return"matches";if(t.matchesSelector)return"matchesSelector";for(var e=["webkit","moz","ms","o"],i=0;i<e.length;i++){var n=e[i]+"MatchesSelector";if(t[n])return n}}();return function(e,i){return e[t](i)}})),function(t,i){d=function(e){return function(t,e){var i={extend:function(t,e){for(var i in e)t[i]=e[i];return t},modulo:function(t,e){return(t%e+e)%e}},n=Array.prototype.slice;i.makeArray=function(t){return Array.isArray(t)?t:null==t?[]:"object"==I(t)&&"number"==typeof t.length?n.call(t):[t]},i.removeFrom=function(t,e){var i=t.indexOf(e);-1!=i&&t.splice(i,1)},i.getParent=function(t,i){for(;t.parentNode&&t!=document.body;)if(t=t.parentNode,e(t,i))return t},i.getQueryElement=function(t){return"string"==typeof t?document.querySelector(t):t},i.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},i.filterFindElements=function(t,n){t=i.makeArray(t);var s=[];return t.forEach((function(t){if(t instanceof HTMLElement)if(n){e(t,n)&&s.push(t);for(var i=t.querySelectorAll(n),o=0;o<i.length;o++)s.push(i[o])}else s.push(t)})),s},i.debounceMethod=function(t,e,i){i=i||100;var n=t.prototype[e],s=e+"Timeout";t.prototype[e]=function(){var t=this[s];clearTimeout(t);var e=arguments,o=this;this[s]=setTimeout((function(){n.apply(o,e),delete o[s]}),i)}},i.docReady=function(t){var e=document.readyState;"complete"==e||"interactive"==e?setTimeout(t):document.addEventListener("DOMContentLoaded",t)},i.toDashed=function(t){return t.replace(/(.)([A-Z])/g,(function(t,e,i){return e+"-"+i})).toLowerCase()};var s=t.console;return i.htmlInit=function(e,n){i.docReady((function(){var o=i.toDashed(n),r="data-"+o,a=document.querySelectorAll("["+r+"]"),h=document.querySelectorAll(".js-"+o),l=i.makeArray(a).concat(i.makeArray(h)),u=r+"-options",c=t.jQuery;l.forEach((function(t){var i,o=t.getAttribute(r)||t.getAttribute(u);try{i=o&&JSON.parse(o)}catch(e){return void(s&&s.error("Error parsing "+r+" on "+t.className+": "+e))}var a=new e(t,i);c&&c.data(t,n,a)}))}))},i}(t,e)}.apply(e,z=[l])}(window),window,z=[n,r],m="function"==typeof(b=function(t,e){"use strict";var i=document.documentElement.style,n="string"==typeof i.transition?"transition":"WebkitTransition",s="string"==typeof i.transform?"transform":"WebkitTransform",o={WebkitTransition:"webkitTransitionEnd",transition:"transitionend"}[n],r={transform:s,transition:n,transitionDuration:n+"Duration",transitionProperty:n+"Property",transitionDelay:n+"Delay"};function a(t,e){t&&(this.element=t,this.layout=e,this.position={x:0,y:0},this._create())}var h=a.prototype=Object.create(t.prototype);h.constructor=a,h._create=function(){this._transn={ingProperties:{},clean:{},onEnd:{}},this.css({position:"absolute"})},h.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},h.getSize=function(){this.size=e(this.element)},h.css=function(t){var e=this.element.style;for(var i in t)e[r[i]||i]=t[i]},h.getPosition=function(){var t=getComputedStyle(this.element),e=this.layout._getOption("originLeft"),i=this.layout._getOption("originTop"),n=t[e?"left":"right"],s=t[i?"top":"bottom"],o=parseFloat(n),r=parseFloat(s),a=this.layout.size;-1!=n.indexOf("%")&&(o=o/100*a.width),-1!=s.indexOf("%")&&(r=r/100*a.height),o=isNaN(o)?0:o,r=isNaN(r)?0:r,o-=e?a.paddingLeft:a.paddingRight,r-=i?a.paddingTop:a.paddingBottom,this.position.x=o,this.position.y=r},h.layoutPosition=function(){var t=this.layout.size,e={},i=this.layout._getOption("originLeft"),n=this.layout._getOption("originTop"),s=i?"paddingLeft":"paddingRight",o=i?"left":"right",r=i?"right":"left",a=this.position.x+t[s];e[o]=this.getXValue(a),e[r]="";var h=n?"paddingTop":"paddingBottom",l=n?"top":"bottom",u=n?"bottom":"top",c=this.position.y+t[h];e[l]=this.getYValue(c),e[u]="",this.css(e),this.emitEvent("layout",[this])},h.getXValue=function(t){var e=this.layout._getOption("horizontal");return this.layout.options.percentPosition&&!e?t/this.layout.size.width*100+"%":t+"px"},h.getYValue=function(t){var e=this.layout._getOption("horizontal");return this.layout.options.percentPosition&&e?t/this.layout.size.height*100+"%":t+"px"},h._transitionTo=function(t,e){this.getPosition();var i=this.position.x,n=this.position.y,s=t==this.position.x&&e==this.position.y;if(this.setPosition(t,e),!s||this.isTransitioning){var o=t-i,r=e-n,a={};a.transform=this.getTranslate(o,r),this.transition({to:a,onTransitionEnd:{transform:this.layoutPosition},isCleaning:!0})}else this.layoutPosition()},h.getTranslate=function(t,e){return"translate3d("+(t=this.layout._getOption("originLeft")?t:-t)+"px, "+(e=this.layout._getOption("originTop")?e:-e)+"px, 0)"},h.goTo=function(t,e){this.setPosition(t,e),this.layoutPosition()},h.moveTo=h._transitionTo,h.setPosition=function(t,e){this.position.x=parseFloat(t),this.position.y=parseFloat(e)},h._nonTransition=function(t){for(var e in this.css(t.to),t.isCleaning&&this._removeStyles(t.to),t.onTransitionEnd)t.onTransitionEnd[e].call(this)},h.transition=function(t){if(parseFloat(this.layout.options.transitionDuration)){var e=this._transn;for(var i in t.onTransitionEnd)e.onEnd[i]=t.onTransitionEnd[i];for(i in t.to)e.ingProperties[i]=!0,t.isCleaning&&(e.clean[i]=!0);t.from&&(this.css(t.from),this.element.offsetHeight),this.enableTransition(t.to),this.css(t.to),this.isTransitioning=!0}else this._nonTransition(t)};var l="opacity,"+s.replace(/([A-Z])/g,(function(t){return"-"+t.toLowerCase()}));h.enableTransition=function(){if(!this.isTransitioning){var t=this.layout.options.transitionDuration;t="number"==typeof t?t+"ms":t,this.css({transitionProperty:l,transitionDuration:t,transitionDelay:this.staggerDelay||0}),this.element.addEventListener(o,this,!1)}},h.onwebkitTransitionEnd=function(t){this.ontransitionend(t)},h.onotransitionend=function(t){this.ontransitionend(t)};var u={"-webkit-transform":"transform"};h.ontransitionend=function(t){if(t.target===this.element){var e=this._transn,i=u[t.propertyName]||t.propertyName;delete e.ingProperties[i],function(t){for(var e in t)return!1;return!0}(e.ingProperties)&&this.disableTransition(),i in e.clean&&(this.element.style[t.propertyName]="",delete e.clean[i]),i in e.onEnd&&(e.onEnd[i].call(this),delete e.onEnd[i]),this.emitEvent("transitionEnd",[this])}},h.disableTransition=function(){this.removeTransitionStyles(),this.element.removeEventListener(o,this,!1),this.isTransitioning=!1},h._removeStyles=function(t){var e={};for(var i in t)e[i]="";this.css(e)};var c={transitionProperty:"",transitionDuration:"",transitionDelay:""};return h.removeTransitionStyles=function(){this.css(c)},h.stagger=function(t){t=isNaN(t)?0:t,this.staggerDelay=t+"ms"},h.removeElem=function(){this.element.parentNode.removeChild(this.element),this.css({display:""}),this.emitEvent("remove",[this])},h.remove=function(){n&&parseFloat(this.layout.options.transitionDuration)?(this.once("transitionEnd",(function(){this.removeElem()})),this.hide()):this.removeElem()},h.reveal=function(){delete this.isHidden,this.css({display:""});var t=this.layout.options,e={};e[this.getHideRevealTransitionEndProperty("visibleStyle")]=this.onRevealTransitionEnd,this.transition({from:t.hiddenStyle,to:t.visibleStyle,isCleaning:!0,onTransitionEnd:e})},h.onRevealTransitionEnd=function(){this.isHidden||this.emitEvent("reveal")},h.getHideRevealTransitionEndProperty=function(t){var e=this.layout.options[t];if(e.opacity)return"opacity";for(var i in e)return i},h.hide=function(){this.isHidden=!0,this.css({display:""});var t=this.layout.options,e={};e[this.getHideRevealTransitionEndProperty("hiddenStyle")]=this.onHideTransitionEnd,this.transition({from:t.visibleStyle,to:t.hiddenStyle,isCleaning:!0,onTransitionEnd:e})},h.onHideTransitionEnd=function(){this.isHidden&&(this.css({display:"none"}),this.emitEvent("hide"))},h.destroy=function(){this.css({position:"",left:"",right:"",top:"",bottom:"",transition:"",transform:""})},a})?b.apply(e,z):b,
/*!
 * Outlayer v2.1.1
 * the brains and guts of a layout library
 * MIT license
 */
function(t,i){"use strict";f=function(e,i,n,s){return function(t,e,i,n,s){var o=t.console,r=t.jQuery,a=function(){},h=0,l={};function u(t,e){var i=n.getQueryElement(t);if(i){this.element=i,r&&(this.$element=r(this.element)),this.options=n.extend({},this.constructor.defaults),this.option(e);var s=++h;this.element.outlayerGUID=s,l[s]=this,this._create(),this._getOption("initLayout")&&this.layout()}else o&&o.error("Bad element for "+this.constructor.namespace+": "+(i||t))}u.namespace="outlayer",u.Item=s,u.defaults={containerStyle:{position:"relative"},initLayout:!0,originLeft:!0,originTop:!0,resize:!0,resizeContainer:!0,transitionDuration:"0.4s",hiddenStyle:{opacity:0,transform:"scale(0.001)"},visibleStyle:{opacity:1,transform:"scale(1)"}};var c=u.prototype;function d(t){function e(){t.apply(this,arguments)}return e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e}n.extend(c,e.prototype),c.option=function(t){n.extend(this.options,t)},c._getOption=function(t){var e=this.constructor.compatOptions[t];return e&&void 0!==this.options[e]?this.options[e]:this.options[t]},u.compatOptions={initLayout:"isInitLayout",horizontal:"isHorizontal",layoutInstant:"isLayoutInstant",originLeft:"isOriginLeft",originTop:"isOriginTop",resize:"isResizeBound",resizeContainer:"isResizingContainer"},c._create=function(){this.reloadItems(),this.stamps=[],this.stamp(this.options.stamp),n.extend(this.element.style,this.options.containerStyle),this._getOption("resize")&&this.bindResize()},c.reloadItems=function(){this.items=this._itemize(this.element.children)},c._itemize=function(t){for(var e=this._filterFindItemElements(t),i=this.constructor.Item,n=[],s=0;s<e.length;s++){var o=new i(e[s],this);n.push(o)}return n},c._filterFindItemElements=function(t){return n.filterFindElements(t,this.options.itemSelector)},c.getItemElements=function(){return this.items.map((function(t){return t.element}))},c.layout=function(){this._resetLayout(),this._manageStamps();var t=this._getOption("layoutInstant"),e=void 0!==t?t:!this._isLayoutInited;this.layoutItems(this.items,e),this._isLayoutInited=!0},c._init=c.layout,c._resetLayout=function(){this.getSize()},c.getSize=function(){this.size=i(this.element)},c._getMeasurement=function(t,e){var n,s=this.options[t];s?("string"==typeof s?n=this.element.querySelector(s):s instanceof HTMLElement&&(n=s),this[t]=n?i(n)[e]:s):this[t]=0},c.layoutItems=function(t,e){t=this._getItemsForLayout(t),this._layoutItems(t,e),this._postLayout()},c._getItemsForLayout=function(t){return t.filter((function(t){return!t.isIgnored}))},c._layoutItems=function(t,e){if(this._emitCompleteOnItems("layout",t),t&&t.length){var i=[];t.forEach((function(t){var n=this._getItemLayoutPosition(t);n.item=t,n.isInstant=e||t.isLayoutInstant,i.push(n)}),this),this._processLayoutQueue(i)}},c._getItemLayoutPosition=function(){return{x:0,y:0}},c._processLayoutQueue=function(t){this.updateStagger(),t.forEach((function(t,e){this._positionItem(t.item,t.x,t.y,t.isInstant,e)}),this)},c.updateStagger=function(){var t=this.options.stagger;if(null!=t)return this.stagger=function(t){if("number"==typeof t)return t;var e=t.match(/(^\d*\.?\d*)(\w*)/),i=e&&e[1],n=e&&e[2];if(!i.length)return 0;return(i=parseFloat(i))*(m[n]||1)}(t),this.stagger;this.stagger=0},c._positionItem=function(t,e,i,n,s){n?t.goTo(e,i):(t.stagger(s*this.stagger),t.moveTo(e,i))},c._postLayout=function(){this.resizeContainer()},c.resizeContainer=function(){if(this._getOption("resizeContainer")){var t=this._getContainerSize();t&&(this._setContainerMeasure(t.width,!0),this._setContainerMeasure(t.height,!1))}},c._getContainerSize=a,c._setContainerMeasure=function(t,e){if(void 0!==t){var i=this.size;i.isBorderBox&&(t+=e?i.paddingLeft+i.paddingRight+i.borderLeftWidth+i.borderRightWidth:i.paddingBottom+i.paddingTop+i.borderTopWidth+i.borderBottomWidth),t=Math.max(t,0),this.element.style[e?"width":"height"]=t+"px"}},c._emitCompleteOnItems=function(t,e){var i=this;function n(){i.dispatchEvent(t+"Complete",null,[e])}var s=e.length;if(e&&s){var o=0;e.forEach((function(e){e.once(t,r)}))}else n();function r(){++o==s&&n()}},c.dispatchEvent=function(t,e,i){var n=e?[e].concat(i):i;if(this.emitEvent(t,n),r)if(this.$element=this.$element||r(this.element),e){var s=r.Event(e);s.type=t,this.$element.trigger(s,i)}else this.$element.trigger(t,i)},c.ignore=function(t){var e=this.getItem(t);e&&(e.isIgnored=!0)},c.unignore=function(t){var e=this.getItem(t);e&&delete e.isIgnored},c.stamp=function(t){(t=this._find(t))&&(this.stamps=this.stamps.concat(t),t.forEach(this.ignore,this))},c.unstamp=function(t){(t=this._find(t))&&t.forEach((function(t){n.removeFrom(this.stamps,t),this.unignore(t)}),this)},c._find=function(t){if(t)return"string"==typeof t&&(t=this.element.querySelectorAll(t)),t=n.makeArray(t)},c._manageStamps=function(){this.stamps&&this.stamps.length&&(this._getBoundingRect(),this.stamps.forEach(this._manageStamp,this))},c._getBoundingRect=function(){var t=this.element.getBoundingClientRect(),e=this.size;this._boundingRect={left:t.left+e.paddingLeft+e.borderLeftWidth,top:t.top+e.paddingTop+e.borderTopWidth,right:t.right-(e.paddingRight+e.borderRightWidth),bottom:t.bottom-(e.paddingBottom+e.borderBottomWidth)}},c._manageStamp=a,c._getElementOffset=function(t){var e=t.getBoundingClientRect(),n=this._boundingRect,s=i(t);return{left:e.left-n.left-s.marginLeft,top:e.top-n.top-s.marginTop,right:n.right-e.right-s.marginRight,bottom:n.bottom-e.bottom-s.marginBottom}},c.handleEvent=n.handleEvent,c.bindResize=function(){t.addEventListener("resize",this),this.isResizeBound=!0},c.unbindResize=function(){t.removeEventListener("resize",this),this.isResizeBound=!1},c.onresize=function(){this.resize()},n.debounceMethod(u,"onresize",100),c.resize=function(){this.isResizeBound&&this.needsResizeLayout()&&this.layout()},c.needsResizeLayout=function(){var t=i(this.element);return this.size&&t&&t.innerWidth!==this.size.innerWidth},c.addItems=function(t){var e=this._itemize(t);return e.length&&(this.items=this.items.concat(e)),e},c.appended=function(t){var e=this.addItems(t);e.length&&(this.layoutItems(e,!0),this.reveal(e))},c.prepended=function(t){var e=this._itemize(t);if(e.length){var i=this.items.slice(0);this.items=e.concat(i),this._resetLayout(),this._manageStamps(),this.layoutItems(e,!0),this.reveal(e),this.layoutItems(i)}},c.reveal=function(t){if(this._emitCompleteOnItems("reveal",t),t&&t.length){var e=this.updateStagger();t.forEach((function(t,i){t.stagger(i*e),t.reveal()}))}},c.hide=function(t){if(this._emitCompleteOnItems("hide",t),t&&t.length){var e=this.updateStagger();t.forEach((function(t,i){t.stagger(i*e),t.hide()}))}},c.revealItemElements=function(t){var e=this.getItems(t);this.reveal(e)},c.hideItemElements=function(t){var e=this.getItems(t);this.hide(e)},c.getItem=function(t){for(var e=0;e<this.items.length;e++){var i=this.items[e];if(i.element==t)return i}},c.getItems=function(t){t=n.makeArray(t);var e=[];return t.forEach((function(t){var i=this.getItem(t);i&&e.push(i)}),this),e},c.remove=function(t){var e=this.getItems(t);this._emitCompleteOnItems("remove",e),e&&e.length&&e.forEach((function(t){t.remove(),n.removeFrom(this.items,t)}),this)},c.destroy=function(){var t=this.element.style;t.height="",t.position="",t.width="",this.items.forEach((function(t){t.destroy()})),this.unbindResize();var e=this.element.outlayerGUID;delete l[e],delete this.element.outlayerGUID,r&&r.removeData(this.element,this.constructor.namespace)},u.data=function(t){var e=(t=n.getQueryElement(t))&&t.outlayerGUID;return e&&l[e]},u.create=function(t,e){var i=d(u);return i.defaults=n.extend({},u.defaults),n.extend(i.defaults,e),i.compatOptions=n.extend({},u.compatOptions),i.namespace=t,i.data=u.data,i.Item=d(s),n.htmlInit(i,t),r&&r.bridget&&r.bridget(t,i),i};var m={ms:1,s:1e3};return u.Item=s,u}(t,e,i,n,s)}.apply(e,z=[n,r,d,m])}(window),window,z=[f],p="function"==typeof(b=function(t){"use strict";function e(){t.Item.apply(this,arguments)}var i=e.prototype=Object.create(t.Item.prototype),n=i._create;i._create=function(){this.id=this.layout.itemGUID++,n.call(this),this.sortData={}},i.updateSortData=function(){if(!this.isIgnored){this.sortData.id=this.id,this.sortData["original-order"]=this.id,this.sortData.random=Math.random();var t=this.layout.options.getSortData,e=this.layout._sorters;for(var i in t){var n=e[i];this.sortData[i]=n(this.element,this)}}};var s=i.destroy;return i.destroy=function(){s.apply(this,arguments),this.css({display:""})},e})?b.apply(e,z):b,window,z=[r,f],g="function"==typeof(b=function(t,e){"use strict";function i(t){this.isotope=t,t&&(this.options=t.options[this.namespace],this.element=t.element,this.items=t.filteredItems,this.size=t.size)}var n=i.prototype;return["_resetLayout","_getItemLayoutPosition","_manageStamp","_getContainerSize","_getElementOffset","needsResizeLayout","_getOption"].forEach((function(t){n[t]=function(){return e.prototype[t].apply(this.isotope,arguments)}})),n.needsVerticalResizeLayout=function(){var e=t(this.isotope.element);return this.isotope.size&&e&&e.innerHeight!=this.isotope.size.innerHeight},n._getMeasurement=function(){this.isotope._getMeasurement.apply(this,arguments)},n.getColumnWidth=function(){this.getSegmentSize("column","Width")},n.getRowHeight=function(){this.getSegmentSize("row","Height")},n.getSegmentSize=function(t,e){var i=t+e,n="outer"+e;if(this._getMeasurement(i,n),!this[i]){var s=this.getFirstItemSize();this[i]=s&&s[n]||this.isotope.size["inner"+e]}},n.getFirstItemSize=function(){var e=this.isotope.filteredItems[0];return e&&e.element&&t(e.element)},n.layout=function(){this.isotope.layout.apply(this.isotope,arguments)},n.getSize=function(){this.isotope.getSize(),this.size=this.isotope.size},i.modes={},i.create=function(t,e){function s(){i.apply(this,arguments)}return s.prototype=Object.create(n),s.prototype.constructor=s,e&&(s.options=e),s.prototype.namespace=t,i.modes[t]=s,s},i})?b.apply(e,z):b,window,z=[f,r],v="function"==typeof(b=function(t,e){var i=t.create("masonry");i.compatOptions.fitWidth="isFitWidth";var n=i.prototype;return n._resetLayout=function(){this.getSize(),this._getMeasurement("columnWidth","outerWidth"),this._getMeasurement("gutter","outerWidth"),this.measureColumns(),this.colYs=[];for(var t=0;t<this.cols;t++)this.colYs.push(0);this.maxY=0,this.horizontalColIndex=0},n.measureColumns=function(){if(this.getContainerWidth(),!this.columnWidth){var t=this.items[0],i=t&&t.element;this.columnWidth=i&&e(i).outerWidth||this.containerWidth}var n=this.columnWidth+=this.gutter,s=this.containerWidth+this.gutter,o=s/n,r=n-s%n;o=Math[r&&r<1?"round":"floor"](o),this.cols=Math.max(o,1)},n.getContainerWidth=function(){var t=this._getOption("fitWidth")?this.element.parentNode:this.element,i=e(t);this.containerWidth=i&&i.innerWidth},n._getItemLayoutPosition=function(t){t.getSize();var e=t.size.outerWidth%this.columnWidth,i=Math[e&&e<1?"round":"ceil"](t.size.outerWidth/this.columnWidth);i=Math.min(i,this.cols);for(var n=this[this.options.horizontalOrder?"_getHorizontalColPosition":"_getTopColPosition"](i,t),s={x:this.columnWidth*n.col,y:n.y},o=n.y+t.size.outerHeight,r=i+n.col,a=n.col;a<r;a++)this.colYs[a]=o;return s},n._getTopColPosition=function(t){var e=this._getTopColGroup(t),i=Math.min.apply(Math,e);return{col:e.indexOf(i),y:i}},n._getTopColGroup=function(t){if(t<2)return this.colYs;for(var e=[],i=this.cols+1-t,n=0;n<i;n++)e[n]=this._getColGroupY(n,t);return e},n._getColGroupY=function(t,e){if(e<2)return this.colYs[t];var i=this.colYs.slice(t,t+e);return Math.max.apply(Math,i)},n._getHorizontalColPosition=function(t,e){var i=this.horizontalColIndex%this.cols;i=t>1&&i+t>this.cols?0:i;var n=e.size.outerWidth&&e.size.outerHeight;return this.horizontalColIndex=n?i+t:this.horizontalColIndex,{col:i,y:this._getColGroupY(i,t)}},n._manageStamp=function(t){var i=e(t),n=this._getElementOffset(t),s=this._getOption("originLeft")?n.left:n.right,o=s+i.outerWidth,r=Math.floor(s/this.columnWidth);r=Math.max(0,r);var a=Math.floor(o/this.columnWidth);a-=o%this.columnWidth?0:1,a=Math.min(this.cols-1,a);for(var h=(this._getOption("originTop")?n.top:n.bottom)+i.outerHeight,l=r;l<=a;l++)this.colYs[l]=Math.max(h,this.colYs[l])},n._getContainerSize=function(){this.maxY=Math.max.apply(Math,this.colYs);var t={height:this.maxY};return this._getOption("fitWidth")&&(t.width=this._getContainerFitWidth()),t},n._getContainerFitWidth=function(){for(var t=0,e=this.cols;--e&&0===this.colYs[e];)t++;return(this.cols-t)*this.columnWidth-this.gutter},n.needsResizeLayout=function(){var t=this.containerWidth;return this.getContainerWidth(),t!=this.containerWidth},i})?b.apply(e,z):b,window,z=[g,v],y="function"==typeof(b=function(t,e){"use strict";var i=t.create("masonry"),n=i.prototype,s={_getElementOffset:!0,layout:!0,_getMeasurement:!0};for(var o in e.prototype)s[o]||(n[o]=e.prototype[o]);var r=n.measureColumns;n.measureColumns=function(){this.items=this.isotope.filteredItems,r.call(this)};var a=n._getOption;return n._getOption=function(t){return"fitWidth"==t?void 0!==this.options.isFitWidth?this.options.isFitWidth:this.options.fitWidth:a.apply(this.isotope,arguments)},i})?b.apply(e,z):b,window,z=[g],_="function"==typeof(b=function(t){"use strict";var e=t.create("fitRows"),i=e.prototype;return i._resetLayout=function(){this.x=0,this.y=0,this.maxY=0,this._getMeasurement("gutter","outerWidth")},i._getItemLayoutPosition=function(t){t.getSize();var e=t.size.outerWidth+this.gutter,i=this.isotope.size.innerWidth+this.gutter;0!==this.x&&e+this.x>i&&(this.x=0,this.y=this.maxY);var n={x:this.x,y:this.y};return this.maxY=Math.max(this.maxY,this.y+t.size.outerHeight),this.x+=e,n},i._getContainerSize=function(){return{height:this.maxY}},e})?b.apply(e,z):b,window,z=[g],x="function"==typeof(b=function(t){"use strict";var e=t.create("vertical",{horizontalAlignment:0}),i=e.prototype;return i._resetLayout=function(){this.y=0},i._getItemLayoutPosition=function(t){t.getSize();var e=(this.isotope.size.innerWidth-t.size.outerWidth)*this.options.horizontalAlignment,i=this.y;return this.y+=t.size.outerHeight,{x:e,y:i}},i._getContainerSize=function(){return{height:this.y}},e})?b.apply(e,z):b,
/*!
 * Isotope v3.0.6
 *
 * Licensed GPLv3 for open source use
 * or Isotope Commercial License for commercial use
 *
 * https://isotope.metafizzy.co
 * Copyright 2010-2018 Metafizzy
 */
function(i,n){void 0===(E=function(t,e,n,s,o,r){return function(t,e,i,n,s,o,r){var a=t.jQuery,h=String.prototype.trim?function(t){return t.trim()}:function(t){return t.replace(/^\s+|\s+$/g,"")},l=e.create("isotope",{layoutMode:"masonry",isJQueryFiltering:!0,sortAscending:!0});l.Item=o,l.LayoutMode=r;var u=l.prototype;u._create=function(){for(var t in this.itemGUID=0,this._sorters={},this._getSorters(),e.prototype._create.call(this),this.modes={},this.filteredItems=this.items,this.sortHistory=["original-order"],r.modes)this._initLayoutMode(t)},u.reloadItems=function(){this.itemGUID=0,e.prototype.reloadItems.call(this)},u._itemize=function(){for(var t=e.prototype._itemize.apply(this,arguments),i=0;i<t.length;i++){var n=t[i];n.id=this.itemGUID++}return this._updateItemsSortData(t),t},u._initLayoutMode=function(t){var e=r.modes[t],i=this.options[t]||{};this.options[t]=e.options?s.extend(e.options,i):i,this.modes[t]=new e(this)},u.layout=function(){this._isLayoutInited||!this._getOption("initLayout")?this._layout():this.arrange()},u._layout=function(){var t=this._getIsInstant();this._resetLayout(),this._manageStamps(),this.layoutItems(this.filteredItems,t),this._isLayoutInited=!0},u.arrange=function(t){this.option(t),this._getIsInstant();var e=this._filter(this.items);this.filteredItems=e.matches,this._bindArrangeComplete(),this._isInstant?this._noTransition(this._hideReveal,[e]):this._hideReveal(e),this._sort(),this._layout()},u._init=u.arrange,u._hideReveal=function(t){this.reveal(t.needReveal),this.hide(t.needHide)},u._getIsInstant=function(){var t=this._getOption("layoutInstant"),e=void 0!==t?t:!this._isLayoutInited;return this._isInstant=e,e},u._bindArrangeComplete=function(){var t,e,i,n=this;function s(){t&&e&&i&&n.dispatchEvent("arrangeComplete",null,[n.filteredItems])}this.once("layoutComplete",(function(){t=!0,s()})),this.once("hideComplete",(function(){e=!0,s()})),this.once("revealComplete",(function(){i=!0,s()}))},u._filter=function(t){var e=this.options.filter;e=e||"*";for(var i=[],n=[],s=[],o=this._getFilterTest(e),r=0;r<t.length;r++){var a=t[r];if(!a.isIgnored){var h=o(a);h&&i.push(a),h&&a.isHidden?n.push(a):h||a.isHidden||s.push(a)}}return{matches:i,needReveal:n,needHide:s}},u._getFilterTest=function(t){return a&&this.options.isJQueryFiltering?function(e){return a(e.element).is(t)}:"function"==typeof t?function(e){return t(e.element)}:function(e){return n(e.element,t)}},u.updateSortData=function(t){var e;t?(t=s.makeArray(t),e=this.getItems(t)):e=this.items,this._getSorters(),this._updateItemsSortData(e)},u._getSorters=function(){var t=this.options.getSortData;for(var e in t){var i=t[e];this._sorters[e]=c(i)}},u._updateItemsSortData=function(t){for(var e=t&&t.length,i=0;e&&i<e;i++){t[i].updateSortData()}};var c=function(t){if("string"!=typeof t)return t;var e=h(t).split(" "),i=e[0],n=i.match(/^\[(.+)\]$/),s=function(t,e){return t?function(e){return e.getAttribute(t)}:function(t){var i=t.querySelector(e);return i&&i.textContent}}(n&&n[1],i),o=l.sortDataParsers[e[1]];return t=o?function(t){return t&&o(s(t))}:function(t){return t&&s(t)}};l.sortDataParsers={parseInt:function(t){function e(e){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}((function(t){return parseInt(t,10)})),parseFloat:function(t){function e(e){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}((function(t){return parseFloat(t)}))},u._sort=function(){if(this.options.sortBy){var t=s.makeArray(this.options.sortBy);this._getIsSameSortBy(t)||(this.sortHistory=t.concat(this.sortHistory));var e=function(t,e){return function(i,n){for(var s=0;s<t.length;s++){var o=t[s],r=i.sortData[o],a=n.sortData[o];if(r>a||r<a)return(r>a?1:-1)*((void 0!==e[o]?e[o]:e)?1:-1)}return 0}}(this.sortHistory,this.options.sortAscending);this.filteredItems.sort(e)}},u._getIsSameSortBy=function(t){for(var e=0;e<t.length;e++)if(t[e]!=this.sortHistory[e])return!1;return!0},u._mode=function(){var t=this.options.layoutMode,e=this.modes[t];if(!e)throw new Error("No layout mode: "+t);return e.options=this.options[t],e},u._resetLayout=function(){e.prototype._resetLayout.call(this),this._mode()._resetLayout()},u._getItemLayoutPosition=function(t){return this._mode()._getItemLayoutPosition(t)},u._manageStamp=function(t){this._mode()._manageStamp(t)},u._getContainerSize=function(){return this._mode()._getContainerSize()},u.needsResizeLayout=function(){return this._mode().needsResizeLayout()},u.appended=function(t){var e=this.addItems(t);if(e.length){var i=this._filterRevealAdded(e);this.filteredItems=this.filteredItems.concat(i)}},u.prepended=function(t){var e=this._itemize(t);if(e.length){this._resetLayout(),this._manageStamps();var i=this._filterRevealAdded(e);this.layoutItems(this.filteredItems),this.filteredItems=i.concat(this.filteredItems),this.items=e.concat(this.items)}},u._filterRevealAdded=function(t){var e=this._filter(t);return this.hide(e.needHide),this.reveal(e.matches),this.layoutItems(e.matches,!0),e.matches},u.insert=function(t){var e=this.addItems(t);if(e.length){var i,n,s=e.length;for(i=0;i<s;i++)n=e[i],this.element.appendChild(n.element);var o=this._filter(e).matches;for(i=0;i<s;i++)e[i].isLayoutInstant=!0;for(this.arrange(),i=0;i<s;i++)delete e[i].isLayoutInstant;this.reveal(o)}};var d=u.remove;return u.remove=function(t){t=s.makeArray(t);var e=this.getItems(t);d.call(this,t);for(var i=e&&e.length,n=0;i&&n<i;n++){var o=e[n];s.removeFrom(this.filteredItems,o)}},u.shuffle=function(){for(var t=0;t<this.items.length;t++){this.items[t].sortData.random=Math.random()}this.options.sortBy="random",this._sort(),this._layout()},u._noTransition=function(t,e){var i=this.options.transitionDuration;this.options.transitionDuration=0;var n=t.apply(this,e);return this.options.transitionDuration=i,n},u.getFilteredItemElements=function(){return this.filteredItems.map((function(t){return t.element}))},l}(i,t,0,n,s,o,r)}.apply(e,z=[f,r,l,d,p,g,y,_,x]))||(t.exports=E)}(window)},function(t,e){t.exports=jQuery},function(t,e){function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function n(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}!function(){"use strict";var t=function(){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(i(this,t),!(e instanceof Node))throw"Can't initialize VanillaTilt because "+e+" is not a Node.";this.width=null,this.height=null,this.clientWidth=null,this.clientHeight=null,this.left=null,this.top=null,this.gammazero=null,this.betazero=null,this.lastgammazero=null,this.lastbetazero=null,this.transitionTimeout=null,this.updateCall=null,this.event=null,this.updateBind=this.update.bind(this),this.resetBind=this.reset.bind(this),this.element=e,this.settings=this.extendSettings(n),this.reverse=this.settings.reverse?-1:1,this.glare=t.isSettingTrue(this.settings.glare),this.glarePrerender=t.isSettingTrue(this.settings["glare-prerender"]),this.fullPageListening=t.isSettingTrue(this.settings["full-page-listening"]),this.gyroscope=t.isSettingTrue(this.settings.gyroscope),this.gyroscopeSamples=this.settings.gyroscopeSamples,this.elementListener=this.getElementListener(),this.glare&&this.prepareGlare(),this.fullPageListening&&this.updateClientSize(),this.addEventListeners(),this.updateInitialPosition()}var e,s,o;return e=t,o=[{key:"isSettingTrue",value:function(t){return""===t||!0===t||1===t}},{key:"init",value:function(e,i){e instanceof Node&&(e=[e]),e instanceof NodeList&&(e=[].slice.call(e)),e instanceof Array&&e.forEach((function(e){"vanillaTilt"in e||(e.vanillaTilt=new t(e,i))}))}}],(s=[{key:"getElementListener",value:function(){if(this.fullPageListening)return window.document;if("string"==typeof this.settings["mouse-event-element"]){var t=document.querySelector(this.settings["mouse-event-element"]);if(t)return t}return this.settings["mouse-event-element"]instanceof Node?this.settings["mouse-event-element"]:this.element}},{key:"addEventListeners",value:function(){this.onMouseEnterBind=this.onMouseEnter.bind(this),this.onMouseMoveBind=this.onMouseMove.bind(this),this.onMouseLeaveBind=this.onMouseLeave.bind(this),this.onWindowResizeBind=this.onWindowResize.bind(this),this.onDeviceOrientationBind=this.onDeviceOrientation.bind(this),this.elementListener.addEventListener("mouseenter",this.onMouseEnterBind),this.elementListener.addEventListener("mouseleave",this.onMouseLeaveBind),this.elementListener.addEventListener("mousemove",this.onMouseMoveBind),(this.glare||this.fullPageListening)&&window.addEventListener("resize",this.onWindowResizeBind),this.gyroscope&&window.addEventListener("deviceorientation",this.onDeviceOrientationBind)}},{key:"removeEventListeners",value:function(){this.elementListener.removeEventListener("mouseenter",this.onMouseEnterBind),this.elementListener.removeEventListener("mouseleave",this.onMouseLeaveBind),this.elementListener.removeEventListener("mousemove",this.onMouseMoveBind),this.gyroscope&&window.removeEventListener("deviceorientation",this.onDeviceOrientationBind),(this.glare||this.fullPageListening)&&window.removeEventListener("resize",this.onWindowResizeBind)}},{key:"destroy",value:function(){clearTimeout(this.transitionTimeout),null!==this.updateCall&&cancelAnimationFrame(this.updateCall),this.reset(),this.removeEventListeners(),this.element.vanillaTilt=null,delete this.element.vanillaTilt,this.element=null}},{key:"onDeviceOrientation",value:function(t){if(null!==t.gamma&&null!==t.beta){this.updateElementPosition(),this.gyroscopeSamples>0&&(this.lastgammazero=this.gammazero,this.lastbetazero=this.betazero,null===this.gammazero?(this.gammazero=t.gamma,this.betazero=t.beta):(this.gammazero=(t.gamma+this.lastgammazero)/2,this.betazero=(t.beta+this.lastbetazero)/2),this.gyroscopeSamples-=1);var e=this.settings.gyroscopeMaxAngleX-this.settings.gyroscopeMinAngleX,i=this.settings.gyroscopeMaxAngleY-this.settings.gyroscopeMinAngleY,n=e/this.width,s=i/this.height,o=(t.gamma-(this.settings.gyroscopeMinAngleX+this.gammazero))/n,r=(t.beta-(this.settings.gyroscopeMinAngleY+this.betazero))/s;null!==this.updateCall&&cancelAnimationFrame(this.updateCall),this.event={clientX:o+this.left,clientY:r+this.top},this.updateCall=requestAnimationFrame(this.updateBind)}}},{key:"onMouseEnter",value:function(){this.updateElementPosition(),this.element.style.willChange="transform",this.setTransition()}},{key:"onMouseMove",value:function(t){null!==this.updateCall&&cancelAnimationFrame(this.updateCall),this.event=t,this.updateCall=requestAnimationFrame(this.updateBind)}},{key:"onMouseLeave",value:function(){this.setTransition(),this.settings.reset&&requestAnimationFrame(this.resetBind)}},{key:"reset",value:function(){this.event={clientX:this.left+this.width/2,clientY:this.top+this.height/2},this.element&&this.element.style&&(this.element.style.transform="perspective(".concat(this.settings.perspective,"px) ")+"rotateX(0deg) rotateY(0deg) scale3d(1, 1, 1)"),this.resetGlare()}},{key:"resetGlare",value:function(){this.glare&&(this.glareElement.style.transform="rotate(180deg) translate(-50%, -50%)",this.glareElement.style.opacity="0")}},{key:"updateInitialPosition",value:function(){if(0!==this.settings.startX||0!==this.settings.startY){this.onMouseEnter(),this.fullPageListening?this.event={clientX:(this.settings.startX+this.settings.max)/(2*this.settings.max)*this.clientWidth,clientY:(this.settings.startY+this.settings.max)/(2*this.settings.max)*this.clientHeight}:this.event={clientX:this.left+(this.settings.startX+this.settings.max)/(2*this.settings.max)*this.width,clientY:this.top+(this.settings.startY+this.settings.max)/(2*this.settings.max)*this.height};var t=this.settings.scale;this.settings.scale=1,this.update(),this.settings.scale=t,this.resetGlare()}}},{key:"getValues",value:function(){var t,e;return this.fullPageListening?(t=this.event.clientX/this.clientWidth,e=this.event.clientY/this.clientHeight):(t=(this.event.clientX-this.left)/this.width,e=(this.event.clientY-this.top)/this.height),t=Math.min(Math.max(t,0),1),e=Math.min(Math.max(e,0),1),{tiltX:(this.reverse*(this.settings.max-t*this.settings.max*2)).toFixed(2),tiltY:(this.reverse*(e*this.settings.max*2-this.settings.max)).toFixed(2),percentageX:100*t,percentageY:100*e,angle:Math.atan2(this.event.clientX-(this.left+this.width/2),-(this.event.clientY-(this.top+this.height/2)))*(180/Math.PI)}}},{key:"updateElementPosition",value:function(){var t=this.element.getBoundingClientRect();this.width=this.element.offsetWidth,this.height=this.element.offsetHeight,this.left=t.left,this.top=t.top}},{key:"update",value:function(){var t=this.getValues();this.element.style.transform="perspective("+this.settings.perspective+"px) rotateX("+("x"===this.settings.axis?0:t.tiltY)+"deg) rotateY("+("y"===this.settings.axis?0:t.tiltX)+"deg) scale3d("+this.settings.scale+", "+this.settings.scale+", "+this.settings.scale+")",this.glare&&(this.glareElement.style.transform="rotate(".concat(t.angle,"deg) translate(-50%, -50%)"),this.glareElement.style.opacity="".concat(t.percentageY*this.settings["max-glare"]/100)),this.element.dispatchEvent(new CustomEvent("tiltChange",{detail:t})),this.updateCall=null}},{key:"prepareGlare",value:function(){if(!this.glarePrerender){var t=document.createElement("div");t.classList.add("js-tilt-glare");var e=document.createElement("div");e.classList.add("js-tilt-glare-inner"),t.appendChild(e),this.element.appendChild(t)}this.glareElementWrapper=this.element.querySelector(".js-tilt-glare"),this.glareElement=this.element.querySelector(".js-tilt-glare-inner"),this.glarePrerender||(Object.assign(this.glareElementWrapper.style,{position:"absolute",top:"0",left:"0",width:"100%",height:"100%",overflow:"hidden","pointer-events":"none"}),Object.assign(this.glareElement.style,{position:"absolute",top:"50%",left:"50%","pointer-events":"none","background-image":"linear-gradient(0deg, rgba(255,255,255,0) 0%, rgba(255,255,255,1) 100%)",width:"".concat(2*this.element.offsetWidth,"px"),height:"".concat(2*this.element.offsetWidth,"px"),transform:"rotate(180deg) translate(-50%, -50%)","transform-origin":"0% 0%",opacity:"0"}))}},{key:"updateGlareSize",value:function(){this.glare&&Object.assign(this.glareElement.style,{width:"".concat(2*this.element.offsetWidth),height:"".concat(2*this.element.offsetWidth)})}},{key:"updateClientSize",value:function(){this.clientWidth=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,this.clientHeight=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}},{key:"onWindowResize",value:function(){this.updateGlareSize(),this.updateClientSize()}},{key:"setTransition",value:function(){var t=this;clearTimeout(this.transitionTimeout),this.element.style.transition=this.settings.speed+"ms "+this.settings.easing,this.glare&&(this.glareElement.style.transition="opacity ".concat(this.settings.speed,"ms ").concat(this.settings.easing)),this.transitionTimeout=setTimeout((function(){t.element.style.transition="",t.glare&&(t.glareElement.style.transition="")}),this.settings.speed)}},{key:"extendSettings",value:function(t){var e={reverse:!1,max:15,startX:0,startY:0,perspective:1e3,easing:"cubic-bezier(.03,.98,.52,.99)",scale:1,speed:300,transition:!0,axis:null,glare:!1,"max-glare":1,"glare-prerender":!1,"full-page-listening":!1,"mouse-event-element":null,reset:!0,gyroscope:!0,gyroscopeMinAngleX:-45,gyroscopeMaxAngleX:45,gyroscopeMinAngleY:-45,gyroscopeMaxAngleY:45,gyroscopeSamples:10},i={};for(var n in e)if(n in t)i[n]=t[n];else if(this.element.hasAttribute("data-tilt-"+n)){var s=this.element.getAttribute("data-tilt-"+n);try{i[n]=JSON.parse(s)}catch(t){i[n]=s}}else i[n]=e[n];return i}}])&&n(e.prototype,s),o&&n(e,o),t}();"undefined"!=typeof document&&(window.VanillaTilt=t,t.init(document.querySelectorAll("[data-tilt]")))}()},function(t,e){window.onscroll=function(){document.getElementById("rotate--scroll").style.transform="rotate("+window.pageYOffset/4+"deg)"};new Rellax(".rellax")},function(t,e){!function(t){var e=t(window),i=e.width(),n=t(".navbar-toggler"),s=t(".site-header"),o=t(".navbar-nav"),r=t(".dropdown-btn"),a=t(".dropdown-menu");function h(){t(o).toggleClass("is-open"),t(n).toggleClass("is-active"),t(s).toggleClass("expanded")}t(n).click((function(t){t.preventDefault(),h()})),t(r).click((function(e){e.preventDefault();var i=t(this);i.hasClass("toggled")?i.removeClass("toggled"):(i.parent().parent().find(".dropdown-btn").removeClass("toggled"),i.toggleClass("toggled")),i.next().hasClass("show")?(i.next().removeClass("show"),i.next().slideUp(350),i.parent().parent().find(".dropdown-menu").removeClass("show"),i.parent().parent().find(".dropdown-menu").slideUp(350)):(i.parent().parent().find(".dropdown-menu").removeClass("show"),i.parent().parent().find(".dropdown-menu").slideUp(350),i.next().toggleClass("show"),i.next().slideToggle(350))})),e.resize((function(){var s=e.width();i!==s&&(t(o).hasClass("is-open")&&h(),t(a).hasClass("show")&&t(a).removeClass("show"),t(r).hasClass("toggled")&&t(r).removeClass("toggled"),t(a).attr("style"," "),t(o).attr("style"," "),t(n).removeClass("is-active"),t(o).removeAttr("style"))}))}(jQuery)},function(t,e){jQuery((function(t){var e=t(".gallery").isotope({itemSelector:".gallery-item",layoutMode:"masonry",masonry:{gutter:".gallery-item-gutter"}}),i={numberGreaterThan50:function(){var e=t(this).find(".number").text();return parseInt(e,10)>50},ium:function(){return t(this).find(".name").text().match(/ium$/)}};t(".btn-filter-group").on("click","button",(function(){var n=t(this).attr("data-filter");n=i[n]||n,e.isotope({filter:n})})),t(".btn-group").each((function(e,i){var n=t(i);n.on("click","button",(function(){n.find(".selected").removeClass("selected"),t(this).addClass("selected")}))}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3NjcmlwdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvdmVuZG9yL2lzb3RvcGUvaXNvdG9wZS5wa2dkLmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcImpRdWVyeVwiIiwid2VicGFjazovLy8uL3NyYy9qcy92ZW5kb3IvdGlsdC90aWx0LmpxdWVyeS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbW9kdWxlcy9jdXN0b20uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL21vZHVsZXMvbmF2aWdhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbW9kdWxlcy9pc290b3BlLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwid2luZG93IiwiZmFjdG9yeSIsImRlZmluZSIsImpRdWVyeSIsImFycmF5U2xpY2UiLCJBcnJheSIsInNsaWNlIiwiY29uc29sZSIsImxvZ0Vycm9yIiwibWVzc2FnZSIsImVycm9yIiwialF1ZXJ5QnJpZGdldCIsIm5hbWVzcGFjZSIsIlBsdWdpbkNsYXNzIiwiJCIsIm1ldGhvZENhbGwiLCIkZWxlbXMiLCJtZXRob2ROYW1lIiwiYXJncyIsInJldHVyblZhbHVlIiwicGx1Z2luTWV0aG9kU3RyIiwiZWFjaCIsImVsZW0iLCJpbnN0YW5jZSIsImRhdGEiLCJtZXRob2QiLCJjaGFyQXQiLCJhcHBseSIsInVuZGVmaW5lZCIsInBsYWluQ2FsbCIsIm9wdGlvbnMiLCJvcHRpb24iLCJfaW5pdCIsIm9wdHMiLCJpc1BsYWluT2JqZWN0IiwidGhpcyIsImV4dGVuZCIsImZuIiwiYXJnMCIsImFyZ3VtZW50cyIsInVwZGF0ZUpRdWVyeSIsImJyaWRnZXQiLCJFdkVtaXR0ZXIiLCJwcm90byIsIm9uIiwiZXZlbnROYW1lIiwibGlzdGVuZXIiLCJldmVudHMiLCJfZXZlbnRzIiwibGlzdGVuZXJzIiwiaW5kZXhPZiIsInB1c2giLCJvbmNlIiwib25jZUV2ZW50cyIsIl9vbmNlRXZlbnRzIiwib2ZmIiwibGVuZ3RoIiwiaW5kZXgiLCJzcGxpY2UiLCJlbWl0RXZlbnQiLCJvbmNlTGlzdGVuZXJzIiwiYWxsT2ZmIiwiZ2V0U3R5bGVTaXplIiwibnVtIiwicGFyc2VGbG9hdCIsImlzTmFOIiwibWVhc3VyZW1lbnRzIiwibWVhc3VyZW1lbnRzTGVuZ3RoIiwiZ2V0U3R5bGUiLCJzdHlsZSIsImdldENvbXB1dGVkU3R5bGUiLCJpc0JveFNpemVPdXRlciIsImlzU2V0dXAiLCJnZXRTaXplIiwiZGl2IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwid2lkdGgiLCJwYWRkaW5nIiwiYm9yZGVyU3R5bGUiLCJib3JkZXJXaWR0aCIsImJveFNpemluZyIsImJvZHkiLCJkb2N1bWVudEVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsIk1hdGgiLCJyb3VuZCIsInJlbW92ZUNoaWxkIiwic2V0dXAiLCJxdWVyeVNlbGVjdG9yIiwibm9kZVR5cGUiLCJkaXNwbGF5Iiwic2l6ZSIsImhlaWdodCIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsIm91dGVyV2lkdGgiLCJvdXRlckhlaWdodCIsImdldFplcm9TaXplIiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJpc0JvcmRlckJveCIsIm1lYXN1cmVtZW50IiwicGFkZGluZ1dpZHRoIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJwYWRkaW5nSGVpZ2h0IiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJtYXJnaW5XaWR0aCIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsIm1hcmdpbkhlaWdodCIsIm1hcmdpblRvcCIsIm1hcmdpbkJvdHRvbSIsImJvcmRlckxlZnRXaWR0aCIsImJvcmRlclJpZ2h0V2lkdGgiLCJib3JkZXJIZWlnaHQiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckJvdHRvbVdpZHRoIiwiaXNCb3JkZXJCb3hTaXplT3V0ZXIiLCJzdHlsZVdpZHRoIiwic3R5bGVIZWlnaHQiLCJtYXRjaGVzTWV0aG9kIiwiRWxlbVByb3RvIiwiRWxlbWVudCIsIm1hdGNoZXMiLCJtYXRjaGVzU2VsZWN0b3IiLCJwcmVmaXhlcyIsInNlbGVjdG9yIiwidXRpbHMiLCJhIiwiYiIsInByb3AiLCJtYWtlQXJyYXkiLCJvYmoiLCJpc0FycmF5IiwicmVtb3ZlRnJvbSIsImFyeSIsImdldFBhcmVudCIsInBhcmVudE5vZGUiLCJnZXRRdWVyeUVsZW1lbnQiLCJoYW5kbGVFdmVudCIsImV2ZW50IiwidHlwZSIsImZpbHRlckZpbmRFbGVtZW50cyIsImVsZW1zIiwiZmZFbGVtcyIsImZvckVhY2giLCJIVE1MRWxlbWVudCIsImNoaWxkRWxlbXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZGVib3VuY2VNZXRob2QiLCJfY2xhc3MiLCJ0aHJlc2hvbGQiLCJ0aW1lb3V0TmFtZSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJfdGhpcyIsInNldFRpbWVvdXQiLCJkb2NSZWFkeSIsImNhbGxiYWNrIiwicmVhZHlTdGF0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0b0Rhc2hlZCIsInN0ciIsInJlcGxhY2UiLCJtYXRjaCIsIiQxIiwiJDIiLCJ0b0xvd2VyQ2FzZSIsImh0bWxJbml0IiwiV2lkZ2V0Q2xhc3MiLCJkYXNoZWROYW1lc3BhY2UiLCJkYXRhQXR0ciIsImRhdGFBdHRyRWxlbXMiLCJqc0Rhc2hFbGVtcyIsImNvbmNhdCIsImRhdGFPcHRpb25zQXR0ciIsImF0dHIiLCJnZXRBdHRyaWJ1dGUiLCJKU09OIiwicGFyc2UiLCJjbGFzc05hbWUiLCJkb2NFbGVtU3R5bGUiLCJ0cmFuc2l0aW9uUHJvcGVydHkiLCJ0cmFuc2l0aW9uIiwidHJhbnNmb3JtUHJvcGVydHkiLCJ0cmFuc2Zvcm0iLCJ0cmFuc2l0aW9uRW5kRXZlbnQiLCJXZWJraXRUcmFuc2l0aW9uIiwidmVuZG9yUHJvcGVydGllcyIsInRyYW5zaXRpb25EdXJhdGlvbiIsInRyYW5zaXRpb25EZWxheSIsIkl0ZW0iLCJlbGVtZW50IiwibGF5b3V0IiwicG9zaXRpb24iLCJ4IiwieSIsIl9jcmVhdGUiLCJjb25zdHJ1Y3RvciIsIl90cmFuc24iLCJpbmdQcm9wZXJ0aWVzIiwiY2xlYW4iLCJvbkVuZCIsImNzcyIsImVsZW1TdHlsZSIsImdldFBvc2l0aW9uIiwiaXNPcmlnaW5MZWZ0IiwiX2dldE9wdGlvbiIsImlzT3JpZ2luVG9wIiwieFZhbHVlIiwieVZhbHVlIiwibGF5b3V0U2l6ZSIsImxheW91dFBvc2l0aW9uIiwieFBhZGRpbmciLCJ4UHJvcGVydHkiLCJ4UmVzZXRQcm9wZXJ0eSIsImdldFhWYWx1ZSIsInlQYWRkaW5nIiwieVByb3BlcnR5IiwieVJlc2V0UHJvcGVydHkiLCJnZXRZVmFsdWUiLCJpc0hvcml6b250YWwiLCJwZXJjZW50UG9zaXRpb24iLCJfdHJhbnNpdGlvblRvIiwiY3VyWCIsImN1clkiLCJkaWROb3RNb3ZlIiwic2V0UG9zaXRpb24iLCJpc1RyYW5zaXRpb25pbmciLCJ0cmFuc1giLCJ0cmFuc1kiLCJ0cmFuc2l0aW9uU3R5bGUiLCJnZXRUcmFuc2xhdGUiLCJ0byIsIm9uVHJhbnNpdGlvbkVuZCIsImlzQ2xlYW5pbmciLCJnb1RvIiwibW92ZVRvIiwiX25vblRyYW5zaXRpb24iLCJfcmVtb3ZlU3R5bGVzIiwiX3RyYW5zaXRpb24iLCJmcm9tIiwiZW5hYmxlVHJhbnNpdGlvbiIsInRyYW5zaXRpb25Qcm9wcyIsImR1cmF0aW9uIiwic3RhZ2dlckRlbGF5Iiwib253ZWJraXRUcmFuc2l0aW9uRW5kIiwib250cmFuc2l0aW9uZW5kIiwib25vdHJhbnNpdGlvbmVuZCIsImRhc2hlZFZlbmRvclByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wZXJ0eU5hbWUiLCJpc0VtcHR5T2JqIiwiZGlzYWJsZVRyYW5zaXRpb24iLCJyZW1vdmVUcmFuc2l0aW9uU3R5bGVzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNsZWFuU3R5bGUiLCJjbGVhblRyYW5zaXRpb25TdHlsZSIsInN0YWdnZXIiLCJkZWxheSIsInJlbW92ZUVsZW0iLCJyZW1vdmUiLCJoaWRlIiwicmV2ZWFsIiwiaXNIaWRkZW4iLCJnZXRIaWRlUmV2ZWFsVHJhbnNpdGlvbkVuZFByb3BlcnR5Iiwib25SZXZlYWxUcmFuc2l0aW9uRW5kIiwiaGlkZGVuU3R5bGUiLCJ2aXNpYmxlU3R5bGUiLCJzdHlsZVByb3BlcnR5Iiwib3B0aW9uU3R5bGUiLCJvcGFjaXR5Iiwib25IaWRlVHJhbnNpdGlvbkVuZCIsImRlc3Ryb3kiLCJsZWZ0IiwicmlnaHQiLCJ0b3AiLCJib3R0b20iLCJub29wIiwiR1VJRCIsImluc3RhbmNlcyIsIk91dGxheWVyIiwicXVlcnlFbGVtZW50IiwiJGVsZW1lbnQiLCJkZWZhdWx0cyIsImlkIiwib3V0bGF5ZXJHVUlEIiwiY29udGFpbmVyU3R5bGUiLCJpbml0TGF5b3V0Iiwib3JpZ2luTGVmdCIsIm9yaWdpblRvcCIsInJlc2l6ZSIsInJlc2l6ZUNvbnRhaW5lciIsInN1YmNsYXNzIiwiUGFyZW50IiwiU3ViQ2xhc3MiLCJvbGRPcHRpb24iLCJjb21wYXRPcHRpb25zIiwiaG9yaXpvbnRhbCIsImxheW91dEluc3RhbnQiLCJyZWxvYWRJdGVtcyIsInN0YW1wcyIsInN0YW1wIiwiYmluZFJlc2l6ZSIsIml0ZW1zIiwiX2l0ZW1pemUiLCJjaGlsZHJlbiIsIml0ZW1FbGVtcyIsIl9maWx0ZXJGaW5kSXRlbUVsZW1lbnRzIiwiaXRlbSIsIml0ZW1TZWxlY3RvciIsImdldEl0ZW1FbGVtZW50cyIsIm1hcCIsIl9yZXNldExheW91dCIsIl9tYW5hZ2VTdGFtcHMiLCJpc0luc3RhbnQiLCJfaXNMYXlvdXRJbml0ZWQiLCJsYXlvdXRJdGVtcyIsIl9nZXRNZWFzdXJlbWVudCIsIl9nZXRJdGVtc0ZvckxheW91dCIsIl9sYXlvdXRJdGVtcyIsIl9wb3N0TGF5b3V0IiwiZmlsdGVyIiwiaXNJZ25vcmVkIiwiX2VtaXRDb21wbGV0ZU9uSXRlbXMiLCJxdWV1ZSIsIl9nZXRJdGVtTGF5b3V0UG9zaXRpb24iLCJpc0xheW91dEluc3RhbnQiLCJfcHJvY2Vzc0xheW91dFF1ZXVlIiwidXBkYXRlU3RhZ2dlciIsIl9wb3NpdGlvbkl0ZW0iLCJ0aW1lIiwidW5pdCIsIm1zVW5pdHMiLCJnZXRNaWxsaXNlY29uZHMiLCJfZ2V0Q29udGFpbmVyU2l6ZSIsIl9zZXRDb250YWluZXJNZWFzdXJlIiwibWVhc3VyZSIsImlzV2lkdGgiLCJlbGVtU2l6ZSIsIm1heCIsIm9uQ29tcGxldGUiLCJkaXNwYXRjaEV2ZW50IiwiY291bnQiLCJkb25lQ291bnQiLCJ0aWNrIiwiZW1pdEFyZ3MiLCIkZXZlbnQiLCJFdmVudCIsInRyaWdnZXIiLCJpZ25vcmUiLCJnZXRJdGVtIiwidW5pZ25vcmUiLCJfZmluZCIsInVuc3RhbXAiLCJfZ2V0Qm91bmRpbmdSZWN0IiwiX21hbmFnZVN0YW1wIiwiYm91bmRpbmdSZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiX2JvdW5kaW5nUmVjdCIsIl9nZXRFbGVtZW50T2Zmc2V0IiwidGhpc1JlY3QiLCJpc1Jlc2l6ZUJvdW5kIiwidW5iaW5kUmVzaXplIiwib25yZXNpemUiLCJuZWVkc1Jlc2l6ZUxheW91dCIsImFkZEl0ZW1zIiwiYXBwZW5kZWQiLCJwcmVwZW5kZWQiLCJwcmV2aW91c0l0ZW1zIiwicmV2ZWFsSXRlbUVsZW1lbnRzIiwiZ2V0SXRlbXMiLCJoaWRlSXRlbUVsZW1lbnRzIiwicmVtb3ZlSXRlbXMiLCJyZW1vdmVEYXRhIiwiTGF5b3V0IiwibXMiLCJpdGVtR1VJRCIsInNvcnREYXRhIiwidXBkYXRlU29ydERhdGEiLCJyYW5kb20iLCJnZXRTb3J0RGF0YSIsInNvcnRlcnMiLCJfc29ydGVycyIsInNvcnRlciIsIl9kZXN0cm95IiwiTGF5b3V0TW9kZSIsImlzb3RvcGUiLCJmaWx0ZXJlZEl0ZW1zIiwibmVlZHNWZXJ0aWNhbFJlc2l6ZUxheW91dCIsImdldENvbHVtbldpZHRoIiwiZ2V0U2VnbWVudFNpemUiLCJnZXRSb3dIZWlnaHQiLCJzZWdtZW50Iiwic2VnbWVudE5hbWUiLCJvdXRlclNpemUiLCJmaXJzdEl0ZW1TaXplIiwiZ2V0Rmlyc3RJdGVtU2l6ZSIsImZpcnN0SXRlbSIsIm1vZGVzIiwiTW9kZSIsIk1hc29ucnkiLCJmaXRXaWR0aCIsIm1lYXN1cmVDb2x1bW5zIiwiY29sWXMiLCJjb2xzIiwibWF4WSIsImhvcml6b250YWxDb2xJbmRleCIsImdldENvbnRhaW5lcldpZHRoIiwiY29sdW1uV2lkdGgiLCJmaXJzdEl0ZW1FbGVtIiwiY29udGFpbmVyV2lkdGgiLCJndXR0ZXIiLCJleGNlc3MiLCJjb250YWluZXIiLCJyZW1haW5kZXIiLCJjb2xTcGFuIiwibWluIiwiY29sUG9zaXRpb24iLCJob3Jpem9udGFsT3JkZXIiLCJjb2wiLCJzZXRIZWlnaHQiLCJzZXRNYXgiLCJfZ2V0VG9wQ29sUG9zaXRpb24iLCJjb2xHcm91cCIsIl9nZXRUb3BDb2xHcm91cCIsIm1pbmltdW1ZIiwiZ3JvdXBDb3VudCIsIl9nZXRDb2xHcm91cFkiLCJncm91cENvbFlzIiwiX2dldEhvcml6b250YWxDb2xQb3NpdGlvbiIsImhhc1NpemUiLCJzdGFtcFNpemUiLCJvZmZzZXQiLCJmaXJzdFgiLCJsYXN0WCIsImZpcnN0Q29sIiwiZmxvb3IiLCJsYXN0Q29sIiwic3RhbXBNYXhZIiwiX2dldENvbnRhaW5lckZpdFdpZHRoIiwidW51c2VkQ29scyIsInByZXZpb3VzV2lkdGgiLCJNYXNvbnJ5TW9kZSIsImtlZXBNb2RlTWV0aG9kcyIsImlzRml0V2lkdGgiLCJGaXRSb3dzIiwiaXRlbVdpZHRoIiwiVmVydGljYWwiLCJob3Jpem9udGFsQWxpZ25tZW50IiwidHJpbSIsIlN0cmluZyIsIklzb3RvcGUiLCJsYXlvdXRNb2RlIiwiaXNKUXVlcnlGaWx0ZXJpbmciLCJzb3J0QXNjZW5kaW5nIiwiX2dldFNvcnRlcnMiLCJzb3J0SGlzdG9yeSIsIl9pbml0TGF5b3V0TW9kZSIsIl91cGRhdGVJdGVtc1NvcnREYXRhIiwiaW5pdGlhbE9wdHMiLCJfbGF5b3V0IiwiYXJyYW5nZSIsIl9nZXRJc0luc3RhbnQiLCJmaWx0ZXJlZCIsIl9maWx0ZXIiLCJfYmluZEFycmFuZ2VDb21wbGV0ZSIsIl9pc0luc3RhbnQiLCJfbm9UcmFuc2l0aW9uIiwiX2hpZGVSZXZlYWwiLCJfc29ydCIsIm5lZWRSZXZlYWwiLCJuZWVkSGlkZSIsImlzTGF5b3V0Q29tcGxldGUiLCJpc0hpZGVDb21wbGV0ZSIsImlzUmV2ZWFsQ29tcGxldGUiLCJhcnJhbmdlUGFyYWxsZWxDYWxsYmFjayIsImhpZGRlbk1hdGNoZWQiLCJ2aXNpYmxlVW5tYXRjaGVkIiwidGVzdCIsIl9nZXRGaWx0ZXJUZXN0IiwiaXNNYXRjaGVkIiwiaXMiLCJtdW5nZVNvcnRlciIsImxlbiIsInNwbGl0IiwicXVlcnkiLCJhdHRyTWF0Y2giLCJnZXRWYWx1ZSIsImNoaWxkIiwidGV4dENvbnRlbnQiLCJnZXRWYWx1ZUdldHRlciIsInBhcnNlciIsInNvcnREYXRhUGFyc2VycyIsInZhbCIsInBhcnNlSW50Iiwic29ydEJ5Iiwic29ydEJ5cyIsIl9nZXRJc1NhbWVTb3J0QnkiLCJpdGVtU29ydGVyIiwic29ydEFzYyIsIml0ZW1BIiwiaXRlbUIiLCJnZXRJdGVtU29ydGVyIiwic29ydCIsIl9tb2RlIiwiRXJyb3IiLCJfZmlsdGVyUmV2ZWFsQWRkZWQiLCJpbnNlcnQiLCJmaWx0ZXJlZEluc2VydEl0ZW1zIiwiX3JlbW92ZSIsInNodWZmbGUiLCJnZXRGaWx0ZXJlZEl0ZW1FbGVtZW50cyIsIlZhbmlsbGFUaWx0Iiwic2V0dGluZ3MiLCJOb2RlIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJnYW1tYXplcm8iLCJiZXRhemVybyIsImxhc3RnYW1tYXplcm8iLCJsYXN0YmV0YXplcm8iLCJ0cmFuc2l0aW9uVGltZW91dCIsInVwZGF0ZUNhbGwiLCJ1cGRhdGVCaW5kIiwidXBkYXRlIiwicmVzZXRCaW5kIiwicmVzZXQiLCJleHRlbmRTZXR0aW5ncyIsInJldmVyc2UiLCJnbGFyZSIsImlzU2V0dGluZ1RydWUiLCJnbGFyZVByZXJlbmRlciIsImZ1bGxQYWdlTGlzdGVuaW5nIiwiZ3lyb3Njb3BlIiwiZ3lyb3Njb3BlU2FtcGxlcyIsImVsZW1lbnRMaXN0ZW5lciIsImdldEVsZW1lbnRMaXN0ZW5lciIsInByZXBhcmVHbGFyZSIsInVwZGF0ZUNsaWVudFNpemUiLCJhZGRFdmVudExpc3RlbmVycyIsInVwZGF0ZUluaXRpYWxQb3NpdGlvbiIsInNldHRpbmciLCJlbGVtZW50cyIsIk5vZGVMaXN0IiwidmFuaWxsYVRpbHQiLCJtb3VzZUV2ZW50RWxlbWVudCIsIm9uTW91c2VFbnRlckJpbmQiLCJvbk1vdXNlRW50ZXIiLCJvbk1vdXNlTW92ZUJpbmQiLCJvbk1vdXNlTW92ZSIsIm9uTW91c2VMZWF2ZUJpbmQiLCJvbk1vdXNlTGVhdmUiLCJvbldpbmRvd1Jlc2l6ZUJpbmQiLCJvbldpbmRvd1Jlc2l6ZSIsIm9uRGV2aWNlT3JpZW50YXRpb25CaW5kIiwib25EZXZpY2VPcmllbnRhdGlvbiIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicmVtb3ZlRXZlbnRMaXN0ZW5lcnMiLCJnYW1tYSIsImJldGEiLCJ1cGRhdGVFbGVtZW50UG9zaXRpb24iLCJ0b3RhbEFuZ2xlWCIsImd5cm9zY29wZU1heEFuZ2xlWCIsImd5cm9zY29wZU1pbkFuZ2xlWCIsInRvdGFsQW5nbGVZIiwiZ3lyb3Njb3BlTWF4QW5nbGVZIiwiZ3lyb3Njb3BlTWluQW5nbGVZIiwiZGVncmVlc1BlclBpeGVsWCIsImRlZ3JlZXNQZXJQaXhlbFkiLCJwb3NYIiwicG9zWSIsImNsaWVudFgiLCJjbGllbnRZIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwid2lsbENoYW5nZSIsInNldFRyYW5zaXRpb24iLCJwZXJzcGVjdGl2ZSIsInJlc2V0R2xhcmUiLCJnbGFyZUVsZW1lbnQiLCJzdGFydFgiLCJzdGFydFkiLCJiYWNrdXBTY2FsZSIsInNjYWxlIiwidGlsdFgiLCJ0b0ZpeGVkIiwidGlsdFkiLCJwZXJjZW50YWdlWCIsInBlcmNlbnRhZ2VZIiwiYW5nbGUiLCJhdGFuMiIsIlBJIiwicmVjdCIsInZhbHVlcyIsImdldFZhbHVlcyIsImF4aXMiLCJDdXN0b21FdmVudCIsImpzVGlsdEdsYXJlIiwiY2xhc3NMaXN0IiwiYWRkIiwianNUaWx0R2xhcmVJbm5lciIsImdsYXJlRWxlbWVudFdyYXBwZXIiLCJhc3NpZ24iLCJ1cGRhdGVHbGFyZVNpemUiLCJzcGVlZCIsImVhc2luZyIsImRlZmF1bHRTZXR0aW5ncyIsIm5ld1NldHRpbmdzIiwiaGFzQXR0cmlidXRlIiwiYXR0cmlidXRlIiwiZSIsImluaXQiLCJvbnNjcm9sbCIsImdldEVsZW1lbnRCeUlkIiwicGFnZVlPZmZzZXQiLCJSZWxsYXgiLCIkd2luZG93IiwibGFzdFdpbmRvd1dpZHRoIiwidG9nZ2xlIiwiaGVhZGVyIiwibmF2aWdhdGlvbiIsImRyb3Bkb3duQnRuIiwiZHJvcGRvd24iLCJ0b2dnbGVNZW51IiwidG9nZ2xlQ2xhc3MiLCJjbGljayIsInByZXZlbnREZWZhdWx0IiwiJHRoaXMiLCJoYXNDbGFzcyIsInJlbW92ZUNsYXNzIiwicGFyZW50IiwiZmluZCIsIm5leHQiLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJ3aW5kb3dXaWR0aCIsInJlbW92ZUF0dHIiLCIkZ3JpZCIsIm1hc29ucnkiLCJmaWx0ZXJGbnMiLCJudW1iZXJHcmVhdGVyVGhhbjUwIiwibnVtYmVyIiwidGV4dCIsIml1bSIsImZpbHRlclZhbHVlIiwiYnV0dG9uR3Jv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QUNyQjlkLE1BQU8sVUFJdkJ6SixFQUFFLHFCQUFxQjhCLEdBQUksUUFBUyxVQUFVLFdBQzVDLElBQUkybEIsRUFBY3puQixFQUFHcUIsTUFBT2dKLEtBQUssZUFFakNvZCxFQUFjTCxFQUFXSyxJQUFpQkEsRUFDMUNQLEVBQU0xUCxRQUFRLENBQUVqRSxPQUFRa1UsT0FHMUJ6bkIsRUFBRSxjQUFjTyxNQUFNLFNBQVVyRCxFQUFHd3FCLEdBQ2pDLElBQUlDLEVBQWUzbkIsRUFBRzBuQixHQUN0QkMsRUFBYTdsQixHQUFJLFFBQVMsVUFBVSxXQUNsQzZsQixFQUFhZixLQUFLLGFBQWFGLFlBQVksWUFDM0MxbUIsRUFBR3FCLE1BQU91bUIsU0FBUyIsImZpbGUiOiJzY3JpcHQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCJpbXBvcnQgJy4vdmVuZG9yL2lzb3RvcGUvaXNvdG9wZS5wa2dkJ1xyXG5pbXBvcnQgJy4vdmVuZG9yL3RpbHQvdGlsdC5qcXVlcnknXHJcblxyXG5pbXBvcnQgJy4vbW9kdWxlcy9jdXN0b20nXHJcbmltcG9ydCAnLi9tb2R1bGVzL25hdmlnYXRpb24nXHJcbmltcG9ydCAnLi9tb2R1bGVzL2lzb3RvcGUnXHJcbiIsIi8qIVxuICogSXNvdG9wZSBQQUNLQUdFRCB2My4wLjZcbiAqXG4gKiBMaWNlbnNlZCBHUEx2MyBmb3Igb3BlbiBzb3VyY2UgdXNlXG4gKiBvciBJc290b3BlIENvbW1lcmNpYWwgTGljZW5zZSBmb3IgY29tbWVyY2lhbCB1c2VcbiAqXG4gKiBodHRwczovL2lzb3RvcGUubWV0YWZpenp5LmNvXG4gKiBDb3B5cmlnaHQgMjAxMC0yMDE4IE1ldGFmaXp6eVxuICovXG5cbi8qKlxuICogQnJpZGdldCBtYWtlcyBqUXVlcnkgd2lkZ2V0c1xuICogdjIuMC4xXG4gKiBNSVQgbGljZW5zZVxuICovXG5cbi8qIGpzaGludCBicm93c2VyOiB0cnVlLCBzdHJpY3Q6IHRydWUsIHVuZGVmOiB0cnVlLCB1bnVzZWQ6IHRydWUgKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgLypqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKiBnbG9iYWxzIGRlZmluZSwgbW9kdWxlLCByZXF1aXJlICovXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCAnanF1ZXJ5LWJyaWRnZXQvanF1ZXJ5LWJyaWRnZXQnLFsgJ2pxdWVyeScgXSwgZnVuY3Rpb24oIGpRdWVyeSApIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIGpRdWVyeSApO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgcmVxdWlyZSgnanF1ZXJ5JylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93LmpRdWVyeUJyaWRnZXQgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgd2luZG93LmpRdWVyeVxuICAgICk7XG4gIH1cblxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIGpRdWVyeSApIHtcbid1c2Ugc3RyaWN0JztcblxuLy8gLS0tLS0gdXRpbHMgLS0tLS0gLy9cblxudmFyIGFycmF5U2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG5cbi8vIGhlbHBlciBmdW5jdGlvbiBmb3IgbG9nZ2luZyBlcnJvcnNcbi8vICQuZXJyb3IgYnJlYWtzIGpRdWVyeSBjaGFpbmluZ1xudmFyIGNvbnNvbGUgPSB3aW5kb3cuY29uc29sZTtcbnZhciBsb2dFcnJvciA9IHR5cGVvZiBjb25zb2xlID09ICd1bmRlZmluZWQnID8gZnVuY3Rpb24oKSB7fSA6XG4gIGZ1bmN0aW9uKCBtZXNzYWdlICkge1xuICAgIGNvbnNvbGUuZXJyb3IoIG1lc3NhZ2UgKTtcbiAgfTtcblxuLy8gLS0tLS0galF1ZXJ5QnJpZGdldCAtLS0tLSAvL1xuXG5mdW5jdGlvbiBqUXVlcnlCcmlkZ2V0KCBuYW1lc3BhY2UsIFBsdWdpbkNsYXNzLCAkICkge1xuICAkID0gJCB8fCBqUXVlcnkgfHwgd2luZG93LmpRdWVyeTtcbiAgaWYgKCAhJCApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBhZGQgb3B0aW9uIG1ldGhvZCAtPiAkKCkucGx1Z2luKCdvcHRpb24nLCB7Li4ufSlcbiAgaWYgKCAhUGx1Z2luQ2xhc3MucHJvdG90eXBlLm9wdGlvbiApIHtcbiAgICAvLyBvcHRpb24gc2V0dGVyXG4gICAgUGx1Z2luQ2xhc3MucHJvdG90eXBlLm9wdGlvbiA9IGZ1bmN0aW9uKCBvcHRzICkge1xuICAgICAgLy8gYmFpbCBvdXQgaWYgbm90IGFuIG9iamVjdFxuICAgICAgaWYgKCAhJC5pc1BsYWluT2JqZWN0KCBvcHRzICkgKXtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoIHRydWUsIHRoaXMub3B0aW9ucywgb3B0cyApO1xuICAgIH07XG4gIH1cblxuICAvLyBtYWtlIGpRdWVyeSBwbHVnaW5cbiAgJC5mblsgbmFtZXNwYWNlIF0gPSBmdW5jdGlvbiggYXJnMCAvKiwgYXJnMSAqLyApIHtcbiAgICBpZiAoIHR5cGVvZiBhcmcwID09ICdzdHJpbmcnICkge1xuICAgICAgLy8gbWV0aG9kIGNhbGwgJCgpLnBsdWdpbiggJ21ldGhvZE5hbWUnLCB7IG9wdGlvbnMgfSApXG4gICAgICAvLyBzaGlmdCBhcmd1bWVudHMgYnkgMVxuICAgICAgdmFyIGFyZ3MgPSBhcnJheVNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMSApO1xuICAgICAgcmV0dXJuIG1ldGhvZENhbGwoIHRoaXMsIGFyZzAsIGFyZ3MgKTtcbiAgICB9XG4gICAgLy8ganVzdCAkKCkucGx1Z2luKHsgb3B0aW9ucyB9KVxuICAgIHBsYWluQ2FsbCggdGhpcywgYXJnMCApO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vICQoKS5wbHVnaW4oJ21ldGhvZE5hbWUnKVxuICBmdW5jdGlvbiBtZXRob2RDYWxsKCAkZWxlbXMsIG1ldGhvZE5hbWUsIGFyZ3MgKSB7XG4gICAgdmFyIHJldHVyblZhbHVlO1xuICAgIHZhciBwbHVnaW5NZXRob2RTdHIgPSAnJCgpLicgKyBuYW1lc3BhY2UgKyAnKFwiJyArIG1ldGhvZE5hbWUgKyAnXCIpJztcblxuICAgICRlbGVtcy5lYWNoKCBmdW5jdGlvbiggaSwgZWxlbSApIHtcbiAgICAgIC8vIGdldCBpbnN0YW5jZVxuICAgICAgdmFyIGluc3RhbmNlID0gJC5kYXRhKCBlbGVtLCBuYW1lc3BhY2UgKTtcbiAgICAgIGlmICggIWluc3RhbmNlICkge1xuICAgICAgICBsb2dFcnJvciggbmFtZXNwYWNlICsgJyBub3QgaW5pdGlhbGl6ZWQuIENhbm5vdCBjYWxsIG1ldGhvZHMsIGkuZS4gJyArXG4gICAgICAgICAgcGx1Z2luTWV0aG9kU3RyICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIG1ldGhvZCA9IGluc3RhbmNlWyBtZXRob2ROYW1lIF07XG4gICAgICBpZiAoICFtZXRob2QgfHwgbWV0aG9kTmFtZS5jaGFyQXQoMCkgPT0gJ18nICkge1xuICAgICAgICBsb2dFcnJvciggcGx1Z2luTWV0aG9kU3RyICsgJyBpcyBub3QgYSB2YWxpZCBtZXRob2QnICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gYXBwbHkgbWV0aG9kLCBnZXQgcmV0dXJuIHZhbHVlXG4gICAgICB2YXIgdmFsdWUgPSBtZXRob2QuYXBwbHkoIGluc3RhbmNlLCBhcmdzICk7XG4gICAgICAvLyBzZXQgcmV0dXJuIHZhbHVlIGlmIHZhbHVlIGlzIHJldHVybmVkLCB1c2Ugb25seSBmaXJzdCB2YWx1ZVxuICAgICAgcmV0dXJuVmFsdWUgPSByZXR1cm5WYWx1ZSA9PT0gdW5kZWZpbmVkID8gdmFsdWUgOiByZXR1cm5WYWx1ZTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXR1cm5WYWx1ZSAhPT0gdW5kZWZpbmVkID8gcmV0dXJuVmFsdWUgOiAkZWxlbXM7XG4gIH1cblxuICBmdW5jdGlvbiBwbGFpbkNhbGwoICRlbGVtcywgb3B0aW9ucyApIHtcbiAgICAkZWxlbXMuZWFjaCggZnVuY3Rpb24oIGksIGVsZW0gKSB7XG4gICAgICB2YXIgaW5zdGFuY2UgPSAkLmRhdGEoIGVsZW0sIG5hbWVzcGFjZSApO1xuICAgICAgaWYgKCBpbnN0YW5jZSApIHtcbiAgICAgICAgLy8gc2V0IG9wdGlvbnMgJiBpbml0XG4gICAgICAgIGluc3RhbmNlLm9wdGlvbiggb3B0aW9ucyApO1xuICAgICAgICBpbnN0YW5jZS5faW5pdCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaW5pdGlhbGl6ZSBuZXcgaW5zdGFuY2VcbiAgICAgICAgaW5zdGFuY2UgPSBuZXcgUGx1Z2luQ2xhc3MoIGVsZW0sIG9wdGlvbnMgKTtcbiAgICAgICAgJC5kYXRhKCBlbGVtLCBuYW1lc3BhY2UsIGluc3RhbmNlICk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB1cGRhdGVKUXVlcnkoICQgKTtcblxufVxuXG4vLyAtLS0tLSB1cGRhdGVKUXVlcnkgLS0tLS0gLy9cblxuLy8gc2V0ICQuYnJpZGdldCBmb3IgdjEgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbmZ1bmN0aW9uIHVwZGF0ZUpRdWVyeSggJCApIHtcbiAgaWYgKCAhJCB8fCAoICQgJiYgJC5icmlkZ2V0ICkgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gICQuYnJpZGdldCA9IGpRdWVyeUJyaWRnZXQ7XG59XG5cbnVwZGF0ZUpRdWVyeSggalF1ZXJ5IHx8IHdpbmRvdy5qUXVlcnkgKTtcblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cbnJldHVybiBqUXVlcnlCcmlkZ2V0O1xuXG59KSk7XG5cbi8qKlxuICogRXZFbWl0dGVyIHYxLjEuMFxuICogTGlsJyBldmVudCBlbWl0dGVyXG4gKiBNSVQgTGljZW5zZVxuICovXG5cbi8qIGpzaGludCB1bnVzZWQ6IHRydWUsIHVuZGVmOiB0cnVlLCBzdHJpY3Q6IHRydWUgKi9cblxuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgLyoganNoaW50IHN0cmljdDogZmFsc2UgKi8gLyogZ2xvYmFscyBkZWZpbmUsIG1vZHVsZSwgd2luZG93ICovXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EIC0gUmVxdWlyZUpTXG4gICAgZGVmaW5lKCAnZXYtZW1pdHRlci9ldi1lbWl0dGVyJyxmYWN0b3J5ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlMgLSBCcm93c2VyaWZ5LCBXZWJwYWNrXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gQnJvd3NlciBnbG9iYWxzXG4gICAgZ2xvYmFsLkV2RW1pdHRlciA9IGZhY3RvcnkoKTtcbiAgfVxuXG59KCB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oKSB7XG5cblxuXG5mdW5jdGlvbiBFdkVtaXR0ZXIoKSB7fVxuXG52YXIgcHJvdG8gPSBFdkVtaXR0ZXIucHJvdG90eXBlO1xuXG5wcm90by5vbiA9IGZ1bmN0aW9uKCBldmVudE5hbWUsIGxpc3RlbmVyICkge1xuICBpZiAoICFldmVudE5hbWUgfHwgIWxpc3RlbmVyICkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBzZXQgZXZlbnRzIGhhc2hcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cyA9IHRoaXMuX2V2ZW50cyB8fCB7fTtcbiAgLy8gc2V0IGxpc3RlbmVycyBhcnJheVxuICB2YXIgbGlzdGVuZXJzID0gZXZlbnRzWyBldmVudE5hbWUgXSA9IGV2ZW50c1sgZXZlbnROYW1lIF0gfHwgW107XG4gIC8vIG9ubHkgYWRkIG9uY2VcbiAgaWYgKCBsaXN0ZW5lcnMuaW5kZXhPZiggbGlzdGVuZXIgKSA9PSAtMSApIHtcbiAgICBsaXN0ZW5lcnMucHVzaCggbGlzdGVuZXIgKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxucHJvdG8ub25jZSA9IGZ1bmN0aW9uKCBldmVudE5hbWUsIGxpc3RlbmVyICkge1xuICBpZiAoICFldmVudE5hbWUgfHwgIWxpc3RlbmVyICkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBhZGQgZXZlbnRcbiAgdGhpcy5vbiggZXZlbnROYW1lLCBsaXN0ZW5lciApO1xuICAvLyBzZXQgb25jZSBmbGFnXG4gIC8vIHNldCBvbmNlRXZlbnRzIGhhc2hcbiAgdmFyIG9uY2VFdmVudHMgPSB0aGlzLl9vbmNlRXZlbnRzID0gdGhpcy5fb25jZUV2ZW50cyB8fCB7fTtcbiAgLy8gc2V0IG9uY2VMaXN0ZW5lcnMgb2JqZWN0XG4gIHZhciBvbmNlTGlzdGVuZXJzID0gb25jZUV2ZW50c1sgZXZlbnROYW1lIF0gPSBvbmNlRXZlbnRzWyBldmVudE5hbWUgXSB8fCB7fTtcbiAgLy8gc2V0IGZsYWdcbiAgb25jZUxpc3RlbmVyc1sgbGlzdGVuZXIgXSA9IHRydWU7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90by5vZmYgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBsaXN0ZW5lciApIHtcbiAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50cyAmJiB0aGlzLl9ldmVudHNbIGV2ZW50TmFtZSBdO1xuICBpZiAoICFsaXN0ZW5lcnMgfHwgIWxpc3RlbmVycy5sZW5ndGggKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBpbmRleCA9IGxpc3RlbmVycy5pbmRleE9mKCBsaXN0ZW5lciApO1xuICBpZiAoIGluZGV4ICE9IC0xICkge1xuICAgIGxpc3RlbmVycy5zcGxpY2UoIGluZGV4LCAxICk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbnByb3RvLmVtaXRFdmVudCA9IGZ1bmN0aW9uKCBldmVudE5hbWUsIGFyZ3MgKSB7XG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHMgJiYgdGhpcy5fZXZlbnRzWyBldmVudE5hbWUgXTtcbiAgaWYgKCAhbGlzdGVuZXJzIHx8ICFsaXN0ZW5lcnMubGVuZ3RoICkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBjb3B5IG92ZXIgdG8gYXZvaWQgaW50ZXJmZXJlbmNlIGlmIC5vZmYoKSBpbiBsaXN0ZW5lclxuICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuc2xpY2UoMCk7XG4gIGFyZ3MgPSBhcmdzIHx8IFtdO1xuICAvLyBvbmNlIHN0dWZmXG4gIHZhciBvbmNlTGlzdGVuZXJzID0gdGhpcy5fb25jZUV2ZW50cyAmJiB0aGlzLl9vbmNlRXZlbnRzWyBldmVudE5hbWUgXTtcblxuICBmb3IgKCB2YXIgaT0wOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrICkge1xuICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXVxuICAgIHZhciBpc09uY2UgPSBvbmNlTGlzdGVuZXJzICYmIG9uY2VMaXN0ZW5lcnNbIGxpc3RlbmVyIF07XG4gICAgaWYgKCBpc09uY2UgKSB7XG4gICAgICAvLyByZW1vdmUgbGlzdGVuZXJcbiAgICAgIC8vIHJlbW92ZSBiZWZvcmUgdHJpZ2dlciB0byBwcmV2ZW50IHJlY3Vyc2lvblxuICAgICAgdGhpcy5vZmYoIGV2ZW50TmFtZSwgbGlzdGVuZXIgKTtcbiAgICAgIC8vIHVuc2V0IG9uY2UgZmxhZ1xuICAgICAgZGVsZXRlIG9uY2VMaXN0ZW5lcnNbIGxpc3RlbmVyIF07XG4gICAgfVxuICAgIC8vIHRyaWdnZXIgbGlzdGVuZXJcbiAgICBsaXN0ZW5lci5hcHBseSggdGhpcywgYXJncyApO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90by5hbGxPZmYgPSBmdW5jdGlvbigpIHtcbiAgZGVsZXRlIHRoaXMuX2V2ZW50cztcbiAgZGVsZXRlIHRoaXMuX29uY2VFdmVudHM7XG59O1xuXG5yZXR1cm4gRXZFbWl0dGVyO1xuXG59KSk7XG5cbi8qIVxuICogZ2V0U2l6ZSB2Mi4wLjNcbiAqIG1lYXN1cmUgc2l6ZSBvZiBlbGVtZW50c1xuICogTUlUIGxpY2Vuc2VcbiAqL1xuXG4vKiBqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgc3RyaWN0OiB0cnVlLCB1bmRlZjogdHJ1ZSwgdW51c2VkOiB0cnVlICovXG4vKiBnbG9iYWxzIGNvbnNvbGU6IGZhbHNlICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLyoganNoaW50IHN0cmljdDogZmFsc2UgKi8gLyogZ2xvYmFscyBkZWZpbmUsIG1vZHVsZSAqL1xuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggJ2dldC1zaXplL2dldC1zaXplJyxmYWN0b3J5ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5nZXRTaXplID0gZmFjdG9yeSgpO1xuICB9XG5cbn0pKCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoKSB7XG4ndXNlIHN0cmljdCc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGhlbHBlcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLy8gZ2V0IGEgbnVtYmVyIGZyb20gYSBzdHJpbmcsIG5vdCBhIHBlcmNlbnRhZ2VcbmZ1bmN0aW9uIGdldFN0eWxlU2l6ZSggdmFsdWUgKSB7XG4gIHZhciBudW0gPSBwYXJzZUZsb2F0KCB2YWx1ZSApO1xuICAvLyBub3QgYSBwZXJjZW50IGxpa2UgJzEwMCUnLCBhbmQgYSBudW1iZXJcbiAgdmFyIGlzVmFsaWQgPSB2YWx1ZS5pbmRleE9mKCclJykgPT0gLTEgJiYgIWlzTmFOKCBudW0gKTtcbiAgcmV0dXJuIGlzVmFsaWQgJiYgbnVtO1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cblxudmFyIGxvZ0Vycm9yID0gdHlwZW9mIGNvbnNvbGUgPT0gJ3VuZGVmaW5lZCcgPyBub29wIDpcbiAgZnVuY3Rpb24oIG1lc3NhZ2UgKSB7XG4gICAgY29uc29sZS5lcnJvciggbWVzc2FnZSApO1xuICB9O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBtZWFzdXJlbWVudHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxudmFyIG1lYXN1cmVtZW50cyA9IFtcbiAgJ3BhZGRpbmdMZWZ0JyxcbiAgJ3BhZGRpbmdSaWdodCcsXG4gICdwYWRkaW5nVG9wJyxcbiAgJ3BhZGRpbmdCb3R0b20nLFxuICAnbWFyZ2luTGVmdCcsXG4gICdtYXJnaW5SaWdodCcsXG4gICdtYXJnaW5Ub3AnLFxuICAnbWFyZ2luQm90dG9tJyxcbiAgJ2JvcmRlckxlZnRXaWR0aCcsXG4gICdib3JkZXJSaWdodFdpZHRoJyxcbiAgJ2JvcmRlclRvcFdpZHRoJyxcbiAgJ2JvcmRlckJvdHRvbVdpZHRoJ1xuXTtcblxudmFyIG1lYXN1cmVtZW50c0xlbmd0aCA9IG1lYXN1cmVtZW50cy5sZW5ndGg7XG5cbmZ1bmN0aW9uIGdldFplcm9TaXplKCkge1xuICB2YXIgc2l6ZSA9IHtcbiAgICB3aWR0aDogMCxcbiAgICBoZWlnaHQ6IDAsXG4gICAgaW5uZXJXaWR0aDogMCxcbiAgICBpbm5lckhlaWdodDogMCxcbiAgICBvdXRlcldpZHRoOiAwLFxuICAgIG91dGVySGVpZ2h0OiAwXG4gIH07XG4gIGZvciAoIHZhciBpPTA7IGkgPCBtZWFzdXJlbWVudHNMZW5ndGg7IGkrKyApIHtcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSBtZWFzdXJlbWVudHNbaV07XG4gICAgc2l6ZVsgbWVhc3VyZW1lbnQgXSA9IDA7XG4gIH1cbiAgcmV0dXJuIHNpemU7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGdldFN0eWxlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8qKlxuICogZ2V0U3R5bGUsIGdldCBzdHlsZSBvZiBlbGVtZW50LCBjaGVjayBmb3IgRmlyZWZveCBidWdcbiAqIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTU0ODM5N1xuICovXG5mdW5jdGlvbiBnZXRTdHlsZSggZWxlbSApIHtcbiAgdmFyIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuICBpZiAoICFzdHlsZSApIHtcbiAgICBsb2dFcnJvciggJ1N0eWxlIHJldHVybmVkICcgKyBzdHlsZSArXG4gICAgICAnLiBBcmUgeW91IHJ1bm5pbmcgdGhpcyBjb2RlIGluIGEgaGlkZGVuIGlmcmFtZSBvbiBGaXJlZm94PyAnICtcbiAgICAgICdTZWUgaHR0cHM6Ly9iaXQubHkvZ2V0c2l6ZWJ1ZzEnICk7XG4gIH1cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBzZXR1cCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG52YXIgaXNTZXR1cCA9IGZhbHNlO1xuXG52YXIgaXNCb3hTaXplT3V0ZXI7XG5cbi8qKlxuICogc2V0dXBcbiAqIGNoZWNrIGlzQm94U2l6ZXJPdXRlclxuICogZG8gb24gZmlyc3QgZ2V0U2l6ZSgpIHJhdGhlciB0aGFuIG9uIHBhZ2UgbG9hZCBmb3IgRmlyZWZveCBidWdcbiAqL1xuZnVuY3Rpb24gc2V0dXAoKSB7XG4gIC8vIHNldHVwIG9uY2VcbiAgaWYgKCBpc1NldHVwICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpc1NldHVwID0gdHJ1ZTtcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBib3ggc2l6aW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbiAgLyoqXG4gICAqIENocm9tZSAmIFNhZmFyaSBtZWFzdXJlIHRoZSBvdXRlci13aWR0aCBvbiBzdHlsZS53aWR0aCBvbiBib3JkZXItYm94IGVsZW1zXG4gICAqIElFMTEgJiBGaXJlZm94PDI5IG1lYXN1cmVzIHRoZSBpbm5lci13aWR0aFxuICAgKi9cbiAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXYuc3R5bGUud2lkdGggPSAnMjAwcHgnO1xuICBkaXYuc3R5bGUucGFkZGluZyA9ICcxcHggMnB4IDNweCA0cHgnO1xuICBkaXYuc3R5bGUuYm9yZGVyU3R5bGUgPSAnc29saWQnO1xuICBkaXYuc3R5bGUuYm9yZGVyV2lkdGggPSAnMXB4IDJweCAzcHggNHB4JztcbiAgZGl2LnN0eWxlLmJveFNpemluZyA9ICdib3JkZXItYm94JztcblxuICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHkgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICBib2R5LmFwcGVuZENoaWxkKCBkaXYgKTtcbiAgdmFyIHN0eWxlID0gZ2V0U3R5bGUoIGRpdiApO1xuICAvLyByb3VuZCB2YWx1ZSBmb3IgYnJvd3NlciB6b29tLiBkZXNhbmRyby9tYXNvbnJ5IzkyOFxuICBpc0JveFNpemVPdXRlciA9IE1hdGgucm91bmQoIGdldFN0eWxlU2l6ZSggc3R5bGUud2lkdGggKSApID09IDIwMDtcbiAgZ2V0U2l6ZS5pc0JveFNpemVPdXRlciA9IGlzQm94U2l6ZU91dGVyO1xuXG4gIGJvZHkucmVtb3ZlQ2hpbGQoIGRpdiApO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBnZXRTaXplIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmZ1bmN0aW9uIGdldFNpemUoIGVsZW0gKSB7XG4gIHNldHVwKCk7XG5cbiAgLy8gdXNlIHF1ZXJ5U2VsZXRvciBpZiBlbGVtIGlzIHN0cmluZ1xuICBpZiAoIHR5cGVvZiBlbGVtID09ICdzdHJpbmcnICkge1xuICAgIGVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBlbGVtICk7XG4gIH1cblxuICAvLyBkbyBub3QgcHJvY2VlZCBvbiBub24tb2JqZWN0c1xuICBpZiAoICFlbGVtIHx8IHR5cGVvZiBlbGVtICE9ICdvYmplY3QnIHx8ICFlbGVtLm5vZGVUeXBlICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzdHlsZSA9IGdldFN0eWxlKCBlbGVtICk7XG5cbiAgLy8gaWYgaGlkZGVuLCBldmVyeXRoaW5nIGlzIDBcbiAgaWYgKCBzdHlsZS5kaXNwbGF5ID09ICdub25lJyApIHtcbiAgICByZXR1cm4gZ2V0WmVyb1NpemUoKTtcbiAgfVxuXG4gIHZhciBzaXplID0ge307XG4gIHNpemUud2lkdGggPSBlbGVtLm9mZnNldFdpZHRoO1xuICBzaXplLmhlaWdodCA9IGVsZW0ub2Zmc2V0SGVpZ2h0O1xuXG4gIHZhciBpc0JvcmRlckJveCA9IHNpemUuaXNCb3JkZXJCb3ggPSBzdHlsZS5ib3hTaXppbmcgPT0gJ2JvcmRlci1ib3gnO1xuXG4gIC8vIGdldCBhbGwgbWVhc3VyZW1lbnRzXG4gIGZvciAoIHZhciBpPTA7IGkgPCBtZWFzdXJlbWVudHNMZW5ndGg7IGkrKyApIHtcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSBtZWFzdXJlbWVudHNbaV07XG4gICAgdmFyIHZhbHVlID0gc3R5bGVbIG1lYXN1cmVtZW50IF07XG4gICAgdmFyIG51bSA9IHBhcnNlRmxvYXQoIHZhbHVlICk7XG4gICAgLy8gYW55ICdhdXRvJywgJ21lZGl1bScgdmFsdWUgd2lsbCBiZSAwXG4gICAgc2l6ZVsgbWVhc3VyZW1lbnQgXSA9ICFpc05hTiggbnVtICkgPyBudW0gOiAwO1xuICB9XG5cbiAgdmFyIHBhZGRpbmdXaWR0aCA9IHNpemUucGFkZGluZ0xlZnQgKyBzaXplLnBhZGRpbmdSaWdodDtcbiAgdmFyIHBhZGRpbmdIZWlnaHQgPSBzaXplLnBhZGRpbmdUb3AgKyBzaXplLnBhZGRpbmdCb3R0b207XG4gIHZhciBtYXJnaW5XaWR0aCA9IHNpemUubWFyZ2luTGVmdCArIHNpemUubWFyZ2luUmlnaHQ7XG4gIHZhciBtYXJnaW5IZWlnaHQgPSBzaXplLm1hcmdpblRvcCArIHNpemUubWFyZ2luQm90dG9tO1xuICB2YXIgYm9yZGVyV2lkdGggPSBzaXplLmJvcmRlckxlZnRXaWR0aCArIHNpemUuYm9yZGVyUmlnaHRXaWR0aDtcbiAgdmFyIGJvcmRlckhlaWdodCA9IHNpemUuYm9yZGVyVG9wV2lkdGggKyBzaXplLmJvcmRlckJvdHRvbVdpZHRoO1xuXG4gIHZhciBpc0JvcmRlckJveFNpemVPdXRlciA9IGlzQm9yZGVyQm94ICYmIGlzQm94U2l6ZU91dGVyO1xuXG4gIC8vIG92ZXJ3cml0ZSB3aWR0aCBhbmQgaGVpZ2h0IGlmIHdlIGNhbiBnZXQgaXQgZnJvbSBzdHlsZVxuICB2YXIgc3R5bGVXaWR0aCA9IGdldFN0eWxlU2l6ZSggc3R5bGUud2lkdGggKTtcbiAgaWYgKCBzdHlsZVdpZHRoICE9PSBmYWxzZSApIHtcbiAgICBzaXplLndpZHRoID0gc3R5bGVXaWR0aCArXG4gICAgICAvLyBhZGQgcGFkZGluZyBhbmQgYm9yZGVyIHVubGVzcyBpdCdzIGFscmVhZHkgaW5jbHVkaW5nIGl0XG4gICAgICAoIGlzQm9yZGVyQm94U2l6ZU91dGVyID8gMCA6IHBhZGRpbmdXaWR0aCArIGJvcmRlcldpZHRoICk7XG4gIH1cblxuICB2YXIgc3R5bGVIZWlnaHQgPSBnZXRTdHlsZVNpemUoIHN0eWxlLmhlaWdodCApO1xuICBpZiAoIHN0eWxlSGVpZ2h0ICE9PSBmYWxzZSApIHtcbiAgICBzaXplLmhlaWdodCA9IHN0eWxlSGVpZ2h0ICtcbiAgICAgIC8vIGFkZCBwYWRkaW5nIGFuZCBib3JkZXIgdW5sZXNzIGl0J3MgYWxyZWFkeSBpbmNsdWRpbmcgaXRcbiAgICAgICggaXNCb3JkZXJCb3hTaXplT3V0ZXIgPyAwIDogcGFkZGluZ0hlaWdodCArIGJvcmRlckhlaWdodCApO1xuICB9XG5cbiAgc2l6ZS5pbm5lcldpZHRoID0gc2l6ZS53aWR0aCAtICggcGFkZGluZ1dpZHRoICsgYm9yZGVyV2lkdGggKTtcbiAgc2l6ZS5pbm5lckhlaWdodCA9IHNpemUuaGVpZ2h0IC0gKCBwYWRkaW5nSGVpZ2h0ICsgYm9yZGVySGVpZ2h0ICk7XG5cbiAgc2l6ZS5vdXRlcldpZHRoID0gc2l6ZS53aWR0aCArIG1hcmdpbldpZHRoO1xuICBzaXplLm91dGVySGVpZ2h0ID0gc2l6ZS5oZWlnaHQgKyBtYXJnaW5IZWlnaHQ7XG5cbiAgcmV0dXJuIHNpemU7XG59XG5cbnJldHVybiBnZXRTaXplO1xuXG59KTtcblxuLyoqXG4gKiBtYXRjaGVzU2VsZWN0b3IgdjIuMC4yXG4gKiBtYXRjaGVzU2VsZWN0b3IoIGVsZW1lbnQsICcuc2VsZWN0b3InIClcbiAqIE1JVCBsaWNlbnNlXG4gKi9cblxuLypqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgc3RyaWN0OiB0cnVlLCB1bmRlZjogdHJ1ZSwgdW51c2VkOiB0cnVlICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLypnbG9iYWwgZGVmaW5lOiBmYWxzZSwgbW9kdWxlOiBmYWxzZSAqL1xuICAndXNlIHN0cmljdCc7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggJ2Rlc2FuZHJvLW1hdGNoZXMtc2VsZWN0b3IvbWF0Y2hlcy1zZWxlY3RvcicsZmFjdG9yeSApO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cubWF0Y2hlc1NlbGVjdG9yID0gZmFjdG9yeSgpO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBtYXRjaGVzTWV0aG9kID0gKCBmdW5jdGlvbigpIHtcbiAgICB2YXIgRWxlbVByb3RvID0gd2luZG93LkVsZW1lbnQucHJvdG90eXBlO1xuICAgIC8vIGNoZWNrIGZvciB0aGUgc3RhbmRhcmQgbWV0aG9kIG5hbWUgZmlyc3RcbiAgICBpZiAoIEVsZW1Qcm90by5tYXRjaGVzICkge1xuICAgICAgcmV0dXJuICdtYXRjaGVzJztcbiAgICB9XG4gICAgLy8gY2hlY2sgdW4tcHJlZml4ZWRcbiAgICBpZiAoIEVsZW1Qcm90by5tYXRjaGVzU2VsZWN0b3IgKSB7XG4gICAgICByZXR1cm4gJ21hdGNoZXNTZWxlY3Rvcic7XG4gICAgfVxuICAgIC8vIGNoZWNrIHZlbmRvciBwcmVmaXhlc1xuICAgIHZhciBwcmVmaXhlcyA9IFsgJ3dlYmtpdCcsICdtb3onLCAnbXMnLCAnbycgXTtcblxuICAgIGZvciAoIHZhciBpPTA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKyApIHtcbiAgICAgIHZhciBwcmVmaXggPSBwcmVmaXhlc1tpXTtcbiAgICAgIHZhciBtZXRob2QgPSBwcmVmaXggKyAnTWF0Y2hlc1NlbGVjdG9yJztcbiAgICAgIGlmICggRWxlbVByb3RvWyBtZXRob2QgXSApIHtcbiAgICAgICAgcmV0dXJuIG1ldGhvZDtcbiAgICAgIH1cbiAgICB9XG4gIH0pKCk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIG1hdGNoZXNTZWxlY3RvciggZWxlbSwgc2VsZWN0b3IgKSB7XG4gICAgcmV0dXJuIGVsZW1bIG1hdGNoZXNNZXRob2QgXSggc2VsZWN0b3IgKTtcbiAgfTtcblxufSkpO1xuXG4vKipcbiAqIEZpenp5IFVJIHV0aWxzIHYyLjAuN1xuICogTUlUIGxpY2Vuc2VcbiAqL1xuXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCB1bmRlZjogdHJ1ZSwgdW51c2VkOiB0cnVlLCBzdHJpY3Q6IHRydWUgKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgLypqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKmdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHJlcXVpcmUgKi9cblxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggJ2Zpenp5LXVpLXV0aWxzL3V0aWxzJyxbXG4gICAgICAnZGVzYW5kcm8tbWF0Y2hlcy1zZWxlY3Rvci9tYXRjaGVzLXNlbGVjdG9yJ1xuICAgIF0sIGZ1bmN0aW9uKCBtYXRjaGVzU2VsZWN0b3IgKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBtYXRjaGVzU2VsZWN0b3IgKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHJlcXVpcmUoJ2Rlc2FuZHJvLW1hdGNoZXMtc2VsZWN0b3InKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuZml6enlVSVV0aWxzID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHdpbmRvdy5tYXRjaGVzU2VsZWN0b3JcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBtYXRjaGVzU2VsZWN0b3IgKSB7XG5cblxuXG52YXIgdXRpbHMgPSB7fTtcblxuLy8gLS0tLS0gZXh0ZW5kIC0tLS0tIC8vXG5cbi8vIGV4dGVuZHMgb2JqZWN0c1xudXRpbHMuZXh0ZW5kID0gZnVuY3Rpb24oIGEsIGIgKSB7XG4gIGZvciAoIHZhciBwcm9wIGluIGIgKSB7XG4gICAgYVsgcHJvcCBdID0gYlsgcHJvcCBdO1xuICB9XG4gIHJldHVybiBhO1xufTtcblxuLy8gLS0tLS0gbW9kdWxvIC0tLS0tIC8vXG5cbnV0aWxzLm1vZHVsbyA9IGZ1bmN0aW9uKCBudW0sIGRpdiApIHtcbiAgcmV0dXJuICggKCBudW0gJSBkaXYgKSArIGRpdiApICUgZGl2O1xufTtcblxuLy8gLS0tLS0gbWFrZUFycmF5IC0tLS0tIC8vXG5cbnZhciBhcnJheVNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG4vLyB0dXJuIGVsZW1lbnQgb3Igbm9kZUxpc3QgaW50byBhbiBhcnJheVxudXRpbHMubWFrZUFycmF5ID0gZnVuY3Rpb24oIG9iaiApIHtcbiAgaWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcbiAgICAvLyB1c2Ugb2JqZWN0IGlmIGFscmVhZHkgYW4gYXJyYXlcbiAgICByZXR1cm4gb2JqO1xuICB9XG4gIC8vIHJldHVybiBlbXB0eSBhcnJheSBpZiB1bmRlZmluZWQgb3IgbnVsbC4gIzZcbiAgaWYgKCBvYmogPT09IG51bGwgfHwgb2JqID09PSB1bmRlZmluZWQgKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgdmFyIGlzQXJyYXlMaWtlID0gdHlwZW9mIG9iaiA9PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqLmxlbmd0aCA9PSAnbnVtYmVyJztcbiAgaWYgKCBpc0FycmF5TGlrZSApIHtcbiAgICAvLyBjb252ZXJ0IG5vZGVMaXN0IHRvIGFycmF5XG4gICAgcmV0dXJuIGFycmF5U2xpY2UuY2FsbCggb2JqICk7XG4gIH1cblxuICAvLyBhcnJheSBvZiBzaW5nbGUgaW5kZXhcbiAgcmV0dXJuIFsgb2JqIF07XG59O1xuXG4vLyAtLS0tLSByZW1vdmVGcm9tIC0tLS0tIC8vXG5cbnV0aWxzLnJlbW92ZUZyb20gPSBmdW5jdGlvbiggYXJ5LCBvYmogKSB7XG4gIHZhciBpbmRleCA9IGFyeS5pbmRleE9mKCBvYmogKTtcbiAgaWYgKCBpbmRleCAhPSAtMSApIHtcbiAgICBhcnkuc3BsaWNlKCBpbmRleCwgMSApO1xuICB9XG59O1xuXG4vLyAtLS0tLSBnZXRQYXJlbnQgLS0tLS0gLy9cblxudXRpbHMuZ2V0UGFyZW50ID0gZnVuY3Rpb24oIGVsZW0sIHNlbGVjdG9yICkge1xuICB3aGlsZSAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtICE9IGRvY3VtZW50LmJvZHkgKSB7XG4gICAgZWxlbSA9IGVsZW0ucGFyZW50Tm9kZTtcbiAgICBpZiAoIG1hdGNoZXNTZWxlY3RvciggZWxlbSwgc2VsZWN0b3IgKSApIHtcbiAgICAgIHJldHVybiBlbGVtO1xuICAgIH1cbiAgfVxufTtcblxuLy8gLS0tLS0gZ2V0UXVlcnlFbGVtZW50IC0tLS0tIC8vXG5cbi8vIHVzZSBlbGVtZW50IGFzIHNlbGVjdG9yIHN0cmluZ1xudXRpbHMuZ2V0UXVlcnlFbGVtZW50ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIGlmICggdHlwZW9mIGVsZW0gPT0gJ3N0cmluZycgKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIGVsZW0gKTtcbiAgfVxuICByZXR1cm4gZWxlbTtcbn07XG5cbi8vIC0tLS0tIGhhbmRsZUV2ZW50IC0tLS0tIC8vXG5cbi8vIGVuYWJsZSAub250eXBlIHRvIHRyaWdnZXIgZnJvbSAuYWRkRXZlbnRMaXN0ZW5lciggZWxlbSwgJ3R5cGUnIClcbnV0aWxzLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB2YXIgbWV0aG9kID0gJ29uJyArIGV2ZW50LnR5cGU7XG4gIGlmICggdGhpc1sgbWV0aG9kIF0gKSB7XG4gICAgdGhpc1sgbWV0aG9kIF0oIGV2ZW50ICk7XG4gIH1cbn07XG5cbi8vIC0tLS0tIGZpbHRlckZpbmRFbGVtZW50cyAtLS0tLSAvL1xuXG51dGlscy5maWx0ZXJGaW5kRWxlbWVudHMgPSBmdW5jdGlvbiggZWxlbXMsIHNlbGVjdG9yICkge1xuICAvLyBtYWtlIGFycmF5IG9mIGVsZW1zXG4gIGVsZW1zID0gdXRpbHMubWFrZUFycmF5KCBlbGVtcyApO1xuICB2YXIgZmZFbGVtcyA9IFtdO1xuXG4gIGVsZW1zLmZvckVhY2goIGZ1bmN0aW9uKCBlbGVtICkge1xuICAgIC8vIGNoZWNrIHRoYXQgZWxlbSBpcyBhbiBhY3R1YWwgZWxlbWVudFxuICAgIGlmICggISggZWxlbSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICkgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGFkZCBlbGVtIGlmIG5vIHNlbGVjdG9yXG4gICAgaWYgKCAhc2VsZWN0b3IgKSB7XG4gICAgICBmZkVsZW1zLnB1c2goIGVsZW0gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gZmlsdGVyICYgZmluZCBpdGVtcyBpZiB3ZSBoYXZlIGEgc2VsZWN0b3JcbiAgICAvLyBmaWx0ZXJcbiAgICBpZiAoIG1hdGNoZXNTZWxlY3RvciggZWxlbSwgc2VsZWN0b3IgKSApIHtcbiAgICAgIGZmRWxlbXMucHVzaCggZWxlbSApO1xuICAgIH1cbiAgICAvLyBmaW5kIGNoaWxkcmVuXG4gICAgdmFyIGNoaWxkRWxlbXMgPSBlbGVtLnF1ZXJ5U2VsZWN0b3JBbGwoIHNlbGVjdG9yICk7XG4gICAgLy8gY29uY2F0IGNoaWxkRWxlbXMgdG8gZmlsdGVyRm91bmQgYXJyYXlcbiAgICBmb3IgKCB2YXIgaT0wOyBpIDwgY2hpbGRFbGVtcy5sZW5ndGg7IGkrKyApIHtcbiAgICAgIGZmRWxlbXMucHVzaCggY2hpbGRFbGVtc1tpXSApO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGZmRWxlbXM7XG59O1xuXG4vLyAtLS0tLSBkZWJvdW5jZU1ldGhvZCAtLS0tLSAvL1xuXG51dGlscy5kZWJvdW5jZU1ldGhvZCA9IGZ1bmN0aW9uKCBfY2xhc3MsIG1ldGhvZE5hbWUsIHRocmVzaG9sZCApIHtcbiAgdGhyZXNob2xkID0gdGhyZXNob2xkIHx8IDEwMDtcbiAgLy8gb3JpZ2luYWwgbWV0aG9kXG4gIHZhciBtZXRob2QgPSBfY2xhc3MucHJvdG90eXBlWyBtZXRob2ROYW1lIF07XG4gIHZhciB0aW1lb3V0TmFtZSA9IG1ldGhvZE5hbWUgKyAnVGltZW91dCc7XG5cbiAgX2NsYXNzLnByb3RvdHlwZVsgbWV0aG9kTmFtZSBdID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRpbWVvdXQgPSB0aGlzWyB0aW1lb3V0TmFtZSBdO1xuICAgIGNsZWFyVGltZW91dCggdGltZW91dCApO1xuXG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzWyB0aW1lb3V0TmFtZSBdID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgICBtZXRob2QuYXBwbHkoIF90aGlzLCBhcmdzICk7XG4gICAgICBkZWxldGUgX3RoaXNbIHRpbWVvdXROYW1lIF07XG4gICAgfSwgdGhyZXNob2xkICk7XG4gIH07XG59O1xuXG4vLyAtLS0tLSBkb2NSZWFkeSAtLS0tLSAvL1xuXG51dGlscy5kb2NSZWFkeSA9IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcbiAgdmFyIHJlYWR5U3RhdGUgPSBkb2N1bWVudC5yZWFkeVN0YXRlO1xuICBpZiAoIHJlYWR5U3RhdGUgPT0gJ2NvbXBsZXRlJyB8fCByZWFkeVN0YXRlID09ICdpbnRlcmFjdGl2ZScgKSB7XG4gICAgLy8gZG8gYXN5bmMgdG8gYWxsb3cgZm9yIG90aGVyIHNjcmlwdHMgdG8gcnVuLiBtZXRhZml6enkvZmxpY2tpdHkjNDQxXG4gICAgc2V0VGltZW91dCggY2FsbGJhY2sgKTtcbiAgfSBlbHNlIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCAnRE9NQ29udGVudExvYWRlZCcsIGNhbGxiYWNrICk7XG4gIH1cbn07XG5cbi8vIC0tLS0tIGh0bWxJbml0IC0tLS0tIC8vXG5cbi8vIGh0dHA6Ly9qYW1lc3JvYmVydHMubmFtZS9ibG9nLzIwMTAvMDIvMjIvc3RyaW5nLWZ1bmN0aW9ucy1mb3ItamF2YXNjcmlwdC10cmltLXRvLWNhbWVsLWNhc2UtdG8tZGFzaGVkLWFuZC10by11bmRlcnNjb3JlL1xudXRpbHMudG9EYXNoZWQgPSBmdW5jdGlvbiggc3RyICkge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoIC8oLikoW0EtWl0pL2csIGZ1bmN0aW9uKCBtYXRjaCwgJDEsICQyICkge1xuICAgIHJldHVybiAkMSArICctJyArICQyO1xuICB9KS50b0xvd2VyQ2FzZSgpO1xufTtcblxudmFyIGNvbnNvbGUgPSB3aW5kb3cuY29uc29sZTtcbi8qKlxuICogYWxsb3cgdXNlciB0byBpbml0aWFsaXplIGNsYXNzZXMgdmlhIFtkYXRhLW5hbWVzcGFjZV0gb3IgLmpzLW5hbWVzcGFjZSBjbGFzc1xuICogaHRtbEluaXQoIFdpZGdldCwgJ3dpZGdldE5hbWUnIClcbiAqIG9wdGlvbnMgYXJlIHBhcnNlZCBmcm9tIGRhdGEtbmFtZXNwYWNlLW9wdGlvbnNcbiAqL1xudXRpbHMuaHRtbEluaXQgPSBmdW5jdGlvbiggV2lkZ2V0Q2xhc3MsIG5hbWVzcGFjZSApIHtcbiAgdXRpbHMuZG9jUmVhZHkoIGZ1bmN0aW9uKCkge1xuICAgIHZhciBkYXNoZWROYW1lc3BhY2UgPSB1dGlscy50b0Rhc2hlZCggbmFtZXNwYWNlICk7XG4gICAgdmFyIGRhdGFBdHRyID0gJ2RhdGEtJyArIGRhc2hlZE5hbWVzcGFjZTtcbiAgICB2YXIgZGF0YUF0dHJFbGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoICdbJyArIGRhdGFBdHRyICsgJ10nICk7XG4gICAgdmFyIGpzRGFzaEVsZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCggJy5qcy0nICsgZGFzaGVkTmFtZXNwYWNlICk7XG4gICAgdmFyIGVsZW1zID0gdXRpbHMubWFrZUFycmF5KCBkYXRhQXR0ckVsZW1zIClcbiAgICAgIC5jb25jYXQoIHV0aWxzLm1ha2VBcnJheSgganNEYXNoRWxlbXMgKSApO1xuICAgIHZhciBkYXRhT3B0aW9uc0F0dHIgPSBkYXRhQXR0ciArICctb3B0aW9ucyc7XG4gICAgdmFyIGpRdWVyeSA9IHdpbmRvdy5qUXVlcnk7XG5cbiAgICBlbGVtcy5mb3JFYWNoKCBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgIHZhciBhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoIGRhdGFBdHRyICkgfHxcbiAgICAgICAgZWxlbS5nZXRBdHRyaWJ1dGUoIGRhdGFPcHRpb25zQXR0ciApO1xuICAgICAgdmFyIG9wdGlvbnM7XG4gICAgICB0cnkge1xuICAgICAgICBvcHRpb25zID0gYXR0ciAmJiBKU09OLnBhcnNlKCBhdHRyICk7XG4gICAgICB9IGNhdGNoICggZXJyb3IgKSB7XG4gICAgICAgIC8vIGxvZyBlcnJvciwgZG8gbm90IGluaXRpYWxpemVcbiAgICAgICAgaWYgKCBjb25zb2xlICkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoICdFcnJvciBwYXJzaW5nICcgKyBkYXRhQXR0ciArICcgb24gJyArIGVsZW0uY2xhc3NOYW1lICtcbiAgICAgICAgICAnOiAnICsgZXJyb3IgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBpbml0aWFsaXplXG4gICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgV2lkZ2V0Q2xhc3MoIGVsZW0sIG9wdGlvbnMgKTtcbiAgICAgIC8vIG1ha2UgYXZhaWxhYmxlIHZpYSAkKCkuZGF0YSgnbmFtZXNwYWNlJylcbiAgICAgIGlmICggalF1ZXJ5ICkge1xuICAgICAgICBqUXVlcnkuZGF0YSggZWxlbSwgbmFtZXNwYWNlLCBpbnN0YW5jZSApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gIH0pO1xufTtcblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cbnJldHVybiB1dGlscztcblxufSkpO1xuXG4vKipcbiAqIE91dGxheWVyIEl0ZW1cbiAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKiBnbG9iYWxzIGRlZmluZSwgbW9kdWxlLCByZXF1aXJlICovXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EIC0gUmVxdWlyZUpTXG4gICAgZGVmaW5lKCAnb3V0bGF5ZXIvaXRlbScsW1xuICAgICAgICAnZXYtZW1pdHRlci9ldi1lbWl0dGVyJyxcbiAgICAgICAgJ2dldC1zaXplL2dldC1zaXplJ1xuICAgICAgXSxcbiAgICAgIGZhY3RvcnlcbiAgICApO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTIC0gQnJvd3NlcmlmeSwgV2VicGFja1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgIHJlcXVpcmUoJ2V2LWVtaXR0ZXInKSxcbiAgICAgIHJlcXVpcmUoJ2dldC1zaXplJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93Lk91dGxheWVyID0ge307XG4gICAgd2luZG93Lk91dGxheWVyLkl0ZW0gPSBmYWN0b3J5KFxuICAgICAgd2luZG93LkV2RW1pdHRlcixcbiAgICAgIHdpbmRvdy5nZXRTaXplXG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIEV2RW1pdHRlciwgZ2V0U2l6ZSApIHtcbid1c2Ugc3RyaWN0JztcblxuLy8gLS0tLS0gaGVscGVycyAtLS0tLSAvL1xuXG5mdW5jdGlvbiBpc0VtcHR5T2JqKCBvYmogKSB7XG4gIGZvciAoIHZhciBwcm9wIGluIG9iaiApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcHJvcCA9IG51bGw7XG4gIHJldHVybiB0cnVlO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDU1MzIHN1cHBvcnQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuXG52YXIgZG9jRWxlbVN0eWxlID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlO1xuXG52YXIgdHJhbnNpdGlvblByb3BlcnR5ID0gdHlwZW9mIGRvY0VsZW1TdHlsZS50cmFuc2l0aW9uID09ICdzdHJpbmcnID9cbiAgJ3RyYW5zaXRpb24nIDogJ1dlYmtpdFRyYW5zaXRpb24nO1xudmFyIHRyYW5zZm9ybVByb3BlcnR5ID0gdHlwZW9mIGRvY0VsZW1TdHlsZS50cmFuc2Zvcm0gPT0gJ3N0cmluZycgP1xuICAndHJhbnNmb3JtJyA6ICdXZWJraXRUcmFuc2Zvcm0nO1xuXG52YXIgdHJhbnNpdGlvbkVuZEV2ZW50ID0ge1xuICBXZWJraXRUcmFuc2l0aW9uOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG4gIHRyYW5zaXRpb246ICd0cmFuc2l0aW9uZW5kJ1xufVsgdHJhbnNpdGlvblByb3BlcnR5IF07XG5cbi8vIGNhY2hlIGFsbCB2ZW5kb3IgcHJvcGVydGllcyB0aGF0IGNvdWxkIGhhdmUgdmVuZG9yIHByZWZpeFxudmFyIHZlbmRvclByb3BlcnRpZXMgPSB7XG4gIHRyYW5zZm9ybTogdHJhbnNmb3JtUHJvcGVydHksXG4gIHRyYW5zaXRpb246IHRyYW5zaXRpb25Qcm9wZXJ0eSxcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiB0cmFuc2l0aW9uUHJvcGVydHkgKyAnRHVyYXRpb24nLFxuICB0cmFuc2l0aW9uUHJvcGVydHk6IHRyYW5zaXRpb25Qcm9wZXJ0eSArICdQcm9wZXJ0eScsXG4gIHRyYW5zaXRpb25EZWxheTogdHJhbnNpdGlvblByb3BlcnR5ICsgJ0RlbGF5J1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gSXRlbSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5mdW5jdGlvbiBJdGVtKCBlbGVtZW50LCBsYXlvdXQgKSB7XG4gIGlmICggIWVsZW1lbnQgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgLy8gcGFyZW50IGxheW91dCBjbGFzcywgaS5lLiBNYXNvbnJ5LCBJc290b3BlLCBvciBQYWNrZXJ5XG4gIHRoaXMubGF5b3V0ID0gbGF5b3V0O1xuICB0aGlzLnBvc2l0aW9uID0ge1xuICAgIHg6IDAsXG4gICAgeTogMFxuICB9O1xuXG4gIHRoaXMuX2NyZWF0ZSgpO1xufVxuXG4vLyBpbmhlcml0IEV2RW1pdHRlclxudmFyIHByb3RvID0gSXRlbS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBFdkVtaXR0ZXIucHJvdG90eXBlICk7XG5wcm90by5jb25zdHJ1Y3RvciA9IEl0ZW07XG5cbnByb3RvLl9jcmVhdGUgPSBmdW5jdGlvbigpIHtcbiAgLy8gdHJhbnNpdGlvbiBvYmplY3RzXG4gIHRoaXMuX3RyYW5zbiA9IHtcbiAgICBpbmdQcm9wZXJ0aWVzOiB7fSxcbiAgICBjbGVhbjoge30sXG4gICAgb25FbmQ6IHt9XG4gIH07XG5cbiAgdGhpcy5jc3Moe1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gIH0pO1xufTtcblxuLy8gdHJpZ2dlciBzcGVjaWZpZWQgaGFuZGxlciBmb3IgZXZlbnQgdHlwZVxucHJvdG8uaGFuZGxlRXZlbnQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHZhciBtZXRob2QgPSAnb24nICsgZXZlbnQudHlwZTtcbiAgaWYgKCB0aGlzWyBtZXRob2QgXSApIHtcbiAgICB0aGlzWyBtZXRob2QgXSggZXZlbnQgKTtcbiAgfVxufTtcblxucHJvdG8uZ2V0U2l6ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnNpemUgPSBnZXRTaXplKCB0aGlzLmVsZW1lbnQgKTtcbn07XG5cbi8qKlxuICogYXBwbHkgQ1NTIHN0eWxlcyB0byBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gc3R5bGVcbiAqL1xucHJvdG8uY3NzID0gZnVuY3Rpb24oIHN0eWxlICkge1xuICB2YXIgZWxlbVN0eWxlID0gdGhpcy5lbGVtZW50LnN0eWxlO1xuXG4gIGZvciAoIHZhciBwcm9wIGluIHN0eWxlICkge1xuICAgIC8vIHVzZSB2ZW5kb3IgcHJvcGVydHkgaWYgYXZhaWxhYmxlXG4gICAgdmFyIHN1cHBvcnRlZFByb3AgPSB2ZW5kb3JQcm9wZXJ0aWVzWyBwcm9wIF0gfHwgcHJvcDtcbiAgICBlbGVtU3R5bGVbIHN1cHBvcnRlZFByb3AgXSA9IHN0eWxlWyBwcm9wIF07XG4gIH1cbn07XG5cbiAvLyBtZWFzdXJlIHBvc2l0aW9uLCBhbmQgc2V0cyBpdFxucHJvdG8uZ2V0UG9zaXRpb24gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSggdGhpcy5lbGVtZW50ICk7XG4gIHZhciBpc09yaWdpbkxlZnQgPSB0aGlzLmxheW91dC5fZ2V0T3B0aW9uKCdvcmlnaW5MZWZ0Jyk7XG4gIHZhciBpc09yaWdpblRvcCA9IHRoaXMubGF5b3V0Ll9nZXRPcHRpb24oJ29yaWdpblRvcCcpO1xuICB2YXIgeFZhbHVlID0gc3R5bGVbIGlzT3JpZ2luTGVmdCA/ICdsZWZ0JyA6ICdyaWdodCcgXTtcbiAgdmFyIHlWYWx1ZSA9IHN0eWxlWyBpc09yaWdpblRvcCA/ICd0b3AnIDogJ2JvdHRvbScgXTtcbiAgdmFyIHggPSBwYXJzZUZsb2F0KCB4VmFsdWUgKTtcbiAgdmFyIHkgPSBwYXJzZUZsb2F0KCB5VmFsdWUgKTtcbiAgLy8gY29udmVydCBwZXJjZW50IHRvIHBpeGVsc1xuICB2YXIgbGF5b3V0U2l6ZSA9IHRoaXMubGF5b3V0LnNpemU7XG4gIGlmICggeFZhbHVlLmluZGV4T2YoJyUnKSAhPSAtMSApIHtcbiAgICB4ID0gKCB4IC8gMTAwICkgKiBsYXlvdXRTaXplLndpZHRoO1xuICB9XG4gIGlmICggeVZhbHVlLmluZGV4T2YoJyUnKSAhPSAtMSApIHtcbiAgICB5ID0gKCB5IC8gMTAwICkgKiBsYXlvdXRTaXplLmhlaWdodDtcbiAgfVxuICAvLyBjbGVhbiB1cCAnYXV0bycgb3Igb3RoZXIgbm9uLWludGVnZXIgdmFsdWVzXG4gIHggPSBpc05hTiggeCApID8gMCA6IHg7XG4gIHkgPSBpc05hTiggeSApID8gMCA6IHk7XG4gIC8vIHJlbW92ZSBwYWRkaW5nIGZyb20gbWVhc3VyZW1lbnRcbiAgeCAtPSBpc09yaWdpbkxlZnQgPyBsYXlvdXRTaXplLnBhZGRpbmdMZWZ0IDogbGF5b3V0U2l6ZS5wYWRkaW5nUmlnaHQ7XG4gIHkgLT0gaXNPcmlnaW5Ub3AgPyBsYXlvdXRTaXplLnBhZGRpbmdUb3AgOiBsYXlvdXRTaXplLnBhZGRpbmdCb3R0b207XG5cbiAgdGhpcy5wb3NpdGlvbi54ID0geDtcbiAgdGhpcy5wb3NpdGlvbi55ID0geTtcbn07XG5cbi8vIHNldCBzZXR0bGVkIHBvc2l0aW9uLCBhcHBseSBwYWRkaW5nXG5wcm90by5sYXlvdXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgbGF5b3V0U2l6ZSA9IHRoaXMubGF5b3V0LnNpemU7XG4gIHZhciBzdHlsZSA9IHt9O1xuICB2YXIgaXNPcmlnaW5MZWZ0ID0gdGhpcy5sYXlvdXQuX2dldE9wdGlvbignb3JpZ2luTGVmdCcpO1xuICB2YXIgaXNPcmlnaW5Ub3AgPSB0aGlzLmxheW91dC5fZ2V0T3B0aW9uKCdvcmlnaW5Ub3AnKTtcblxuICAvLyB4XG4gIHZhciB4UGFkZGluZyA9IGlzT3JpZ2luTGVmdCA/ICdwYWRkaW5nTGVmdCcgOiAncGFkZGluZ1JpZ2h0JztcbiAgdmFyIHhQcm9wZXJ0eSA9IGlzT3JpZ2luTGVmdCA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gIHZhciB4UmVzZXRQcm9wZXJ0eSA9IGlzT3JpZ2luTGVmdCA/ICdyaWdodCcgOiAnbGVmdCc7XG5cbiAgdmFyIHggPSB0aGlzLnBvc2l0aW9uLnggKyBsYXlvdXRTaXplWyB4UGFkZGluZyBdO1xuICAvLyBzZXQgaW4gcGVyY2VudGFnZSBvciBwaXhlbHNcbiAgc3R5bGVbIHhQcm9wZXJ0eSBdID0gdGhpcy5nZXRYVmFsdWUoIHggKTtcbiAgLy8gcmVzZXQgb3RoZXIgcHJvcGVydHlcbiAgc3R5bGVbIHhSZXNldFByb3BlcnR5IF0gPSAnJztcblxuICAvLyB5XG4gIHZhciB5UGFkZGluZyA9IGlzT3JpZ2luVG9wID8gJ3BhZGRpbmdUb3AnIDogJ3BhZGRpbmdCb3R0b20nO1xuICB2YXIgeVByb3BlcnR5ID0gaXNPcmlnaW5Ub3AgPyAndG9wJyA6ICdib3R0b20nO1xuICB2YXIgeVJlc2V0UHJvcGVydHkgPSBpc09yaWdpblRvcCA/ICdib3R0b20nIDogJ3RvcCc7XG5cbiAgdmFyIHkgPSB0aGlzLnBvc2l0aW9uLnkgKyBsYXlvdXRTaXplWyB5UGFkZGluZyBdO1xuICAvLyBzZXQgaW4gcGVyY2VudGFnZSBvciBwaXhlbHNcbiAgc3R5bGVbIHlQcm9wZXJ0eSBdID0gdGhpcy5nZXRZVmFsdWUoIHkgKTtcbiAgLy8gcmVzZXQgb3RoZXIgcHJvcGVydHlcbiAgc3R5bGVbIHlSZXNldFByb3BlcnR5IF0gPSAnJztcblxuICB0aGlzLmNzcyggc3R5bGUgKTtcbiAgdGhpcy5lbWl0RXZlbnQoICdsYXlvdXQnLCBbIHRoaXMgXSApO1xufTtcblxucHJvdG8uZ2V0WFZhbHVlID0gZnVuY3Rpb24oIHggKSB7XG4gIHZhciBpc0hvcml6b250YWwgPSB0aGlzLmxheW91dC5fZ2V0T3B0aW9uKCdob3Jpem9udGFsJyk7XG4gIHJldHVybiB0aGlzLmxheW91dC5vcHRpb25zLnBlcmNlbnRQb3NpdGlvbiAmJiAhaXNIb3Jpem9udGFsID9cbiAgICAoICggeCAvIHRoaXMubGF5b3V0LnNpemUud2lkdGggKSAqIDEwMCApICsgJyUnIDogeCArICdweCc7XG59O1xuXG5wcm90by5nZXRZVmFsdWUgPSBmdW5jdGlvbiggeSApIHtcbiAgdmFyIGlzSG9yaXpvbnRhbCA9IHRoaXMubGF5b3V0Ll9nZXRPcHRpb24oJ2hvcml6b250YWwnKTtcbiAgcmV0dXJuIHRoaXMubGF5b3V0Lm9wdGlvbnMucGVyY2VudFBvc2l0aW9uICYmIGlzSG9yaXpvbnRhbCA/XG4gICAgKCAoIHkgLyB0aGlzLmxheW91dC5zaXplLmhlaWdodCApICogMTAwICkgKyAnJScgOiB5ICsgJ3B4Jztcbn07XG5cbnByb3RvLl90cmFuc2l0aW9uVG8gPSBmdW5jdGlvbiggeCwgeSApIHtcbiAgdGhpcy5nZXRQb3NpdGlvbigpO1xuICAvLyBnZXQgY3VycmVudCB4ICYgeSBmcm9tIHRvcC9sZWZ0XG4gIHZhciBjdXJYID0gdGhpcy5wb3NpdGlvbi54O1xuICB2YXIgY3VyWSA9IHRoaXMucG9zaXRpb24ueTtcblxuICB2YXIgZGlkTm90TW92ZSA9IHggPT0gdGhpcy5wb3NpdGlvbi54ICYmIHkgPT0gdGhpcy5wb3NpdGlvbi55O1xuXG4gIC8vIHNhdmUgZW5kIHBvc2l0aW9uXG4gIHRoaXMuc2V0UG9zaXRpb24oIHgsIHkgKTtcblxuICAvLyBpZiBkaWQgbm90IG1vdmUgYW5kIG5vdCB0cmFuc2l0aW9uaW5nLCBqdXN0IGdvIHRvIGxheW91dFxuICBpZiAoIGRpZE5vdE1vdmUgJiYgIXRoaXMuaXNUcmFuc2l0aW9uaW5nICkge1xuICAgIHRoaXMubGF5b3V0UG9zaXRpb24oKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgdHJhbnNYID0geCAtIGN1clg7XG4gIHZhciB0cmFuc1kgPSB5IC0gY3VyWTtcbiAgdmFyIHRyYW5zaXRpb25TdHlsZSA9IHt9O1xuICB0cmFuc2l0aW9uU3R5bGUudHJhbnNmb3JtID0gdGhpcy5nZXRUcmFuc2xhdGUoIHRyYW5zWCwgdHJhbnNZICk7XG5cbiAgdGhpcy50cmFuc2l0aW9uKHtcbiAgICB0bzogdHJhbnNpdGlvblN0eWxlLFxuICAgIG9uVHJhbnNpdGlvbkVuZDoge1xuICAgICAgdHJhbnNmb3JtOiB0aGlzLmxheW91dFBvc2l0aW9uXG4gICAgfSxcbiAgICBpc0NsZWFuaW5nOiB0cnVlXG4gIH0pO1xufTtcblxucHJvdG8uZ2V0VHJhbnNsYXRlID0gZnVuY3Rpb24oIHgsIHkgKSB7XG4gIC8vIGZsaXAgY29vcmlkaW5hdGVzIGlmIG9yaWdpbiBvbiByaWdodCBvciBib3R0b21cbiAgdmFyIGlzT3JpZ2luTGVmdCA9IHRoaXMubGF5b3V0Ll9nZXRPcHRpb24oJ29yaWdpbkxlZnQnKTtcbiAgdmFyIGlzT3JpZ2luVG9wID0gdGhpcy5sYXlvdXQuX2dldE9wdGlvbignb3JpZ2luVG9wJyk7XG4gIHggPSBpc09yaWdpbkxlZnQgPyB4IDogLXg7XG4gIHkgPSBpc09yaWdpblRvcCA/IHkgOiAteTtcbiAgcmV0dXJuICd0cmFuc2xhdGUzZCgnICsgeCArICdweCwgJyArIHkgKyAncHgsIDApJztcbn07XG5cbi8vIG5vbiB0cmFuc2l0aW9uICsgdHJhbnNmb3JtIHN1cHBvcnRcbnByb3RvLmdvVG8gPSBmdW5jdGlvbiggeCwgeSApIHtcbiAgdGhpcy5zZXRQb3NpdGlvbiggeCwgeSApO1xuICB0aGlzLmxheW91dFBvc2l0aW9uKCk7XG59O1xuXG5wcm90by5tb3ZlVG8gPSBwcm90by5fdHJhbnNpdGlvblRvO1xuXG5wcm90by5zZXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCB4LCB5ICkge1xuICB0aGlzLnBvc2l0aW9uLnggPSBwYXJzZUZsb2F0KCB4ICk7XG4gIHRoaXMucG9zaXRpb24ueSA9IHBhcnNlRmxvYXQoIHkgKTtcbn07XG5cbi8vIC0tLS0tIHRyYW5zaXRpb24gLS0tLS0gLy9cblxuLyoqXG4gKiBAcGFyYW0ge09iamVjdH0gc3R5bGUgLSBDU1NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9uVHJhbnNpdGlvbkVuZFxuICovXG5cbi8vIG5vbiB0cmFuc2l0aW9uLCBqdXN0IHRyaWdnZXIgY2FsbGJhY2tcbnByb3RvLl9ub25UcmFuc2l0aW9uID0gZnVuY3Rpb24oIGFyZ3MgKSB7XG4gIHRoaXMuY3NzKCBhcmdzLnRvICk7XG4gIGlmICggYXJncy5pc0NsZWFuaW5nICkge1xuICAgIHRoaXMuX3JlbW92ZVN0eWxlcyggYXJncy50byApO1xuICB9XG4gIGZvciAoIHZhciBwcm9wIGluIGFyZ3Mub25UcmFuc2l0aW9uRW5kICkge1xuICAgIGFyZ3Mub25UcmFuc2l0aW9uRW5kWyBwcm9wIF0uY2FsbCggdGhpcyApO1xuICB9XG59O1xuXG4vKipcbiAqIHByb3BlciB0cmFuc2l0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gYXJncyAtIGFyZ3VtZW50c1xuICogICBAcGFyYW0ge09iamVjdH0gdG8gLSBzdHlsZSB0byB0cmFuc2l0aW9uIHRvXG4gKiAgIEBwYXJhbSB7T2JqZWN0fSBmcm9tIC0gc3R5bGUgdG8gc3RhcnQgdHJhbnNpdGlvbiBmcm9tXG4gKiAgIEBwYXJhbSB7Qm9vbGVhbn0gaXNDbGVhbmluZyAtIHJlbW92ZXMgdHJhbnNpdGlvbiBzdHlsZXMgYWZ0ZXIgdHJhbnNpdGlvblxuICogICBAcGFyYW0ge0Z1bmN0aW9ufSBvblRyYW5zaXRpb25FbmQgLSBjYWxsYmFja1xuICovXG5wcm90by50cmFuc2l0aW9uID0gZnVuY3Rpb24oIGFyZ3MgKSB7XG4gIC8vIHJlZGlyZWN0IHRvIG5vblRyYW5zaXRpb24gaWYgbm8gdHJhbnNpdGlvbiBkdXJhdGlvblxuICBpZiAoICFwYXJzZUZsb2F0KCB0aGlzLmxheW91dC5vcHRpb25zLnRyYW5zaXRpb25EdXJhdGlvbiApICkge1xuICAgIHRoaXMuX25vblRyYW5zaXRpb24oIGFyZ3MgKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgX3RyYW5zaXRpb24gPSB0aGlzLl90cmFuc247XG4gIC8vIGtlZXAgdHJhY2sgb2Ygb25UcmFuc2l0aW9uRW5kIGNhbGxiYWNrIGJ5IGNzcyBwcm9wZXJ0eVxuICBmb3IgKCB2YXIgcHJvcCBpbiBhcmdzLm9uVHJhbnNpdGlvbkVuZCApIHtcbiAgICBfdHJhbnNpdGlvbi5vbkVuZFsgcHJvcCBdID0gYXJncy5vblRyYW5zaXRpb25FbmRbIHByb3AgXTtcbiAgfVxuICAvLyBrZWVwIHRyYWNrIG9mIHByb3BlcnRpZXMgdGhhdCBhcmUgdHJhbnNpdGlvbmluZ1xuICBmb3IgKCBwcm9wIGluIGFyZ3MudG8gKSB7XG4gICAgX3RyYW5zaXRpb24uaW5nUHJvcGVydGllc1sgcHJvcCBdID0gdHJ1ZTtcbiAgICAvLyBrZWVwIHRyYWNrIG9mIHByb3BlcnRpZXMgdG8gY2xlYW4gdXAgd2hlbiB0cmFuc2l0aW9uIGlzIGRvbmVcbiAgICBpZiAoIGFyZ3MuaXNDbGVhbmluZyApIHtcbiAgICAgIF90cmFuc2l0aW9uLmNsZWFuWyBwcm9wIF0gPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIHNldCBmcm9tIHN0eWxlc1xuICBpZiAoIGFyZ3MuZnJvbSApIHtcbiAgICB0aGlzLmNzcyggYXJncy5mcm9tICk7XG4gICAgLy8gZm9yY2UgcmVkcmF3LiBodHRwOi8vYmxvZy5hbGV4bWFjY2F3LmNvbS9jc3MtdHJhbnNpdGlvbnNcbiAgICB2YXIgaCA9IHRoaXMuZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgLy8gaGFjayBmb3IgSlNIaW50IHRvIGh1c2ggYWJvdXQgdW51c2VkIHZhclxuICAgIGggPSBudWxsO1xuICB9XG4gIC8vIGVuYWJsZSB0cmFuc2l0aW9uXG4gIHRoaXMuZW5hYmxlVHJhbnNpdGlvbiggYXJncy50byApO1xuICAvLyBzZXQgc3R5bGVzIHRoYXQgYXJlIHRyYW5zaXRpb25pbmdcbiAgdGhpcy5jc3MoIGFyZ3MudG8gKTtcblxuICB0aGlzLmlzVHJhbnNpdGlvbmluZyA9IHRydWU7XG5cbn07XG5cbi8vIGRhc2ggYmVmb3JlIGFsbCBjYXAgbGV0dGVycywgaW5jbHVkaW5nIGZpcnN0IGZvclxuLy8gV2Via2l0VHJhbnNmb3JtID0+IC13ZWJraXQtdHJhbnNmb3JtXG5mdW5jdGlvbiB0b0Rhc2hlZEFsbCggc3RyICkge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoIC8oW0EtWl0pL2csIGZ1bmN0aW9uKCAkMSApIHtcbiAgICByZXR1cm4gJy0nICsgJDEudG9Mb3dlckNhc2UoKTtcbiAgfSk7XG59XG5cbnZhciB0cmFuc2l0aW9uUHJvcHMgPSAnb3BhY2l0eSwnICsgdG9EYXNoZWRBbGwoIHRyYW5zZm9ybVByb3BlcnR5ICk7XG5cbnByb3RvLmVuYWJsZVRyYW5zaXRpb24gPSBmdW5jdGlvbigvKiBzdHlsZSAqLykge1xuICAvLyBIQUNLIGNoYW5naW5nIHRyYW5zaXRpb25Qcm9wZXJ0eSBkdXJpbmcgYSB0cmFuc2l0aW9uXG4gIC8vIHdpbGwgY2F1c2UgdHJhbnNpdGlvbiB0byBqdW1wXG4gIGlmICggdGhpcy5pc1RyYW5zaXRpb25pbmcgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gbWFrZSBgdHJhbnNpdGlvbjogZm9vLCBiYXIsIGJhemAgZnJvbSBzdHlsZSBvYmplY3RcbiAgLy8gSEFDSyB1bi1jb21tZW50IHRoaXMgd2hlbiBlbmFibGVUcmFuc2l0aW9uIGNhbiB3b3JrXG4gIC8vIHdoaWxlIGEgdHJhbnNpdGlvbiBpcyBoYXBwZW5pbmdcbiAgLy8gdmFyIHRyYW5zaXRpb25WYWx1ZXMgPSBbXTtcbiAgLy8gZm9yICggdmFyIHByb3AgaW4gc3R5bGUgKSB7XG4gIC8vICAgLy8gZGFzaC1pZnkgY2FtZWxDYXNlZCBwcm9wZXJ0aWVzIGxpa2UgV2Via2l0VHJhbnNpdGlvblxuICAvLyAgIHByb3AgPSB2ZW5kb3JQcm9wZXJ0aWVzWyBwcm9wIF0gfHwgcHJvcDtcbiAgLy8gICB0cmFuc2l0aW9uVmFsdWVzLnB1c2goIHRvRGFzaGVkQWxsKCBwcm9wICkgKTtcbiAgLy8gfVxuICAvLyBtdW5nZSBudW1iZXIgdG8gbWlsbGlzZWNvbmQsIHRvIG1hdGNoIHN0YWdnZXJcbiAgdmFyIGR1cmF0aW9uID0gdGhpcy5sYXlvdXQub3B0aW9ucy50cmFuc2l0aW9uRHVyYXRpb247XG4gIGR1cmF0aW9uID0gdHlwZW9mIGR1cmF0aW9uID09ICdudW1iZXInID8gZHVyYXRpb24gKyAnbXMnIDogZHVyYXRpb247XG4gIC8vIGVuYWJsZSB0cmFuc2l0aW9uIHN0eWxlc1xuICB0aGlzLmNzcyh7XG4gICAgdHJhbnNpdGlvblByb3BlcnR5OiB0cmFuc2l0aW9uUHJvcHMsXG4gICAgdHJhbnNpdGlvbkR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICB0cmFuc2l0aW9uRGVsYXk6IHRoaXMuc3RhZ2dlckRlbGF5IHx8IDBcbiAgfSk7XG4gIC8vIGxpc3RlbiBmb3IgdHJhbnNpdGlvbiBlbmQgZXZlbnRcbiAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoIHRyYW5zaXRpb25FbmRFdmVudCwgdGhpcywgZmFsc2UgKTtcbn07XG5cbi8vIC0tLS0tIGV2ZW50cyAtLS0tLSAvL1xuXG5wcm90by5vbndlYmtpdFRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMub250cmFuc2l0aW9uZW5kKCBldmVudCApO1xufTtcblxucHJvdG8ub25vdHJhbnNpdGlvbmVuZCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy5vbnRyYW5zaXRpb25lbmQoIGV2ZW50ICk7XG59O1xuXG4vLyBwcm9wZXJ0aWVzIHRoYXQgSSBtdW5nZSB0byBtYWtlIG15IGxpZmUgZWFzaWVyXG52YXIgZGFzaGVkVmVuZG9yUHJvcGVydGllcyA9IHtcbiAgJy13ZWJraXQtdHJhbnNmb3JtJzogJ3RyYW5zZm9ybSdcbn07XG5cbnByb3RvLm9udHJhbnNpdGlvbmVuZCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgLy8gZGlzcmVnYXJkIGJ1YmJsZWQgZXZlbnRzIGZyb20gY2hpbGRyZW5cbiAgaWYgKCBldmVudC50YXJnZXQgIT09IHRoaXMuZWxlbWVudCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIF90cmFuc2l0aW9uID0gdGhpcy5fdHJhbnNuO1xuICAvLyBnZXQgcHJvcGVydHkgbmFtZSBvZiB0cmFuc2l0aW9uZWQgcHJvcGVydHksIGNvbnZlcnQgdG8gcHJlZml4LWZyZWVcbiAgdmFyIHByb3BlcnR5TmFtZSA9IGRhc2hlZFZlbmRvclByb3BlcnRpZXNbIGV2ZW50LnByb3BlcnR5TmFtZSBdIHx8IGV2ZW50LnByb3BlcnR5TmFtZTtcblxuICAvLyByZW1vdmUgcHJvcGVydHkgdGhhdCBoYXMgY29tcGxldGVkIHRyYW5zaXRpb25pbmdcbiAgZGVsZXRlIF90cmFuc2l0aW9uLmluZ1Byb3BlcnRpZXNbIHByb3BlcnR5TmFtZSBdO1xuICAvLyBjaGVjayBpZiBhbnkgcHJvcGVydGllcyBhcmUgc3RpbGwgdHJhbnNpdGlvbmluZ1xuICBpZiAoIGlzRW1wdHlPYmooIF90cmFuc2l0aW9uLmluZ1Byb3BlcnRpZXMgKSApIHtcbiAgICAvLyBhbGwgcHJvcGVydGllcyBoYXZlIGNvbXBsZXRlZCB0cmFuc2l0aW9uaW5nXG4gICAgdGhpcy5kaXNhYmxlVHJhbnNpdGlvbigpO1xuICB9XG4gIC8vIGNsZWFuIHN0eWxlXG4gIGlmICggcHJvcGVydHlOYW1lIGluIF90cmFuc2l0aW9uLmNsZWFuICkge1xuICAgIC8vIGNsZWFuIHVwIHN0eWxlXG4gICAgdGhpcy5lbGVtZW50LnN0eWxlWyBldmVudC5wcm9wZXJ0eU5hbWUgXSA9ICcnO1xuICAgIGRlbGV0ZSBfdHJhbnNpdGlvbi5jbGVhblsgcHJvcGVydHlOYW1lIF07XG4gIH1cbiAgLy8gdHJpZ2dlciBvblRyYW5zaXRpb25FbmQgY2FsbGJhY2tcbiAgaWYgKCBwcm9wZXJ0eU5hbWUgaW4gX3RyYW5zaXRpb24ub25FbmQgKSB7XG4gICAgdmFyIG9uVHJhbnNpdGlvbkVuZCA9IF90cmFuc2l0aW9uLm9uRW5kWyBwcm9wZXJ0eU5hbWUgXTtcbiAgICBvblRyYW5zaXRpb25FbmQuY2FsbCggdGhpcyApO1xuICAgIGRlbGV0ZSBfdHJhbnNpdGlvbi5vbkVuZFsgcHJvcGVydHlOYW1lIF07XG4gIH1cblxuICB0aGlzLmVtaXRFdmVudCggJ3RyYW5zaXRpb25FbmQnLCBbIHRoaXMgXSApO1xufTtcblxucHJvdG8uZGlzYWJsZVRyYW5zaXRpb24gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5yZW1vdmVUcmFuc2l0aW9uU3R5bGVzKCk7XG4gIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCB0cmFuc2l0aW9uRW5kRXZlbnQsIHRoaXMsIGZhbHNlICk7XG4gIHRoaXMuaXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG59O1xuXG4vKipcbiAqIHJlbW92ZXMgc3R5bGUgcHJvcGVydHkgZnJvbSBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gc3R5bGVcbioqL1xucHJvdG8uX3JlbW92ZVN0eWxlcyA9IGZ1bmN0aW9uKCBzdHlsZSApIHtcbiAgLy8gY2xlYW4gdXAgdHJhbnNpdGlvbiBzdHlsZXNcbiAgdmFyIGNsZWFuU3R5bGUgPSB7fTtcbiAgZm9yICggdmFyIHByb3AgaW4gc3R5bGUgKSB7XG4gICAgY2xlYW5TdHlsZVsgcHJvcCBdID0gJyc7XG4gIH1cbiAgdGhpcy5jc3MoIGNsZWFuU3R5bGUgKTtcbn07XG5cbnZhciBjbGVhblRyYW5zaXRpb25TdHlsZSA9IHtcbiAgdHJhbnNpdGlvblByb3BlcnR5OiAnJyxcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiAnJyxcbiAgdHJhbnNpdGlvbkRlbGF5OiAnJ1xufTtcblxucHJvdG8ucmVtb3ZlVHJhbnNpdGlvblN0eWxlcyA9IGZ1bmN0aW9uKCkge1xuICAvLyByZW1vdmUgdHJhbnNpdGlvblxuICB0aGlzLmNzcyggY2xlYW5UcmFuc2l0aW9uU3R5bGUgKTtcbn07XG5cbi8vIC0tLS0tIHN0YWdnZXIgLS0tLS0gLy9cblxucHJvdG8uc3RhZ2dlciA9IGZ1bmN0aW9uKCBkZWxheSApIHtcbiAgZGVsYXkgPSBpc05hTiggZGVsYXkgKSA/IDAgOiBkZWxheTtcbiAgdGhpcy5zdGFnZ2VyRGVsYXkgPSBkZWxheSArICdtcyc7XG59O1xuXG4vLyAtLS0tLSBzaG93L2hpZGUvcmVtb3ZlIC0tLS0tIC8vXG5cbi8vIHJlbW92ZSBlbGVtZW50IGZyb20gRE9NXG5wcm90by5yZW1vdmVFbGVtID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0aGlzLmVsZW1lbnQgKTtcbiAgLy8gcmVtb3ZlIGRpc3BsYXk6IG5vbmVcbiAgdGhpcy5jc3MoeyBkaXNwbGF5OiAnJyB9KTtcbiAgdGhpcy5lbWl0RXZlbnQoICdyZW1vdmUnLCBbIHRoaXMgXSApO1xufTtcblxucHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24oKSB7XG4gIC8vIGp1c3QgcmVtb3ZlIGVsZW1lbnQgaWYgbm8gdHJhbnNpdGlvbiBzdXBwb3J0IG9yIG5vIHRyYW5zaXRpb25cbiAgaWYgKCAhdHJhbnNpdGlvblByb3BlcnR5IHx8ICFwYXJzZUZsb2F0KCB0aGlzLmxheW91dC5vcHRpb25zLnRyYW5zaXRpb25EdXJhdGlvbiApICkge1xuICAgIHRoaXMucmVtb3ZlRWxlbSgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIHN0YXJ0IHRyYW5zaXRpb25cbiAgdGhpcy5vbmNlKCAndHJhbnNpdGlvbkVuZCcsIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlRWxlbSgpO1xuICB9KTtcbiAgdGhpcy5oaWRlKCk7XG59O1xuXG5wcm90by5yZXZlYWwgPSBmdW5jdGlvbigpIHtcbiAgZGVsZXRlIHRoaXMuaXNIaWRkZW47XG4gIC8vIHJlbW92ZSBkaXNwbGF5OiBub25lXG4gIHRoaXMuY3NzKHsgZGlzcGxheTogJycgfSk7XG5cbiAgdmFyIG9wdGlvbnMgPSB0aGlzLmxheW91dC5vcHRpb25zO1xuXG4gIHZhciBvblRyYW5zaXRpb25FbmQgPSB7fTtcbiAgdmFyIHRyYW5zaXRpb25FbmRQcm9wZXJ0eSA9IHRoaXMuZ2V0SGlkZVJldmVhbFRyYW5zaXRpb25FbmRQcm9wZXJ0eSgndmlzaWJsZVN0eWxlJyk7XG4gIG9uVHJhbnNpdGlvbkVuZFsgdHJhbnNpdGlvbkVuZFByb3BlcnR5IF0gPSB0aGlzLm9uUmV2ZWFsVHJhbnNpdGlvbkVuZDtcblxuICB0aGlzLnRyYW5zaXRpb24oe1xuICAgIGZyb206IG9wdGlvbnMuaGlkZGVuU3R5bGUsXG4gICAgdG86IG9wdGlvbnMudmlzaWJsZVN0eWxlLFxuICAgIGlzQ2xlYW5pbmc6IHRydWUsXG4gICAgb25UcmFuc2l0aW9uRW5kOiBvblRyYW5zaXRpb25FbmRcbiAgfSk7XG59O1xuXG5wcm90by5vblJldmVhbFRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbigpIHtcbiAgLy8gY2hlY2sgaWYgc3RpbGwgdmlzaWJsZVxuICAvLyBkdXJpbmcgdHJhbnNpdGlvbiwgaXRlbSBtYXkgaGF2ZSBiZWVuIGhpZGRlblxuICBpZiAoICF0aGlzLmlzSGlkZGVuICkge1xuICAgIHRoaXMuZW1pdEV2ZW50KCdyZXZlYWwnKTtcbiAgfVxufTtcblxuLyoqXG4gKiBnZXQgc3R5bGUgcHJvcGVydHkgdXNlIGZvciBoaWRlL3JldmVhbCB0cmFuc2l0aW9uIGVuZFxuICogQHBhcmFtIHtTdHJpbmd9IHN0eWxlUHJvcGVydHkgLSBoaWRkZW5TdHlsZS92aXNpYmxlU3R5bGVcbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKi9cbnByb3RvLmdldEhpZGVSZXZlYWxUcmFuc2l0aW9uRW5kUHJvcGVydHkgPSBmdW5jdGlvbiggc3R5bGVQcm9wZXJ0eSApIHtcbiAgdmFyIG9wdGlvblN0eWxlID0gdGhpcy5sYXlvdXQub3B0aW9uc1sgc3R5bGVQcm9wZXJ0eSBdO1xuICAvLyB1c2Ugb3BhY2l0eVxuICBpZiAoIG9wdGlvblN0eWxlLm9wYWNpdHkgKSB7XG4gICAgcmV0dXJuICdvcGFjaXR5JztcbiAgfVxuICAvLyBnZXQgZmlyc3QgcHJvcGVydHlcbiAgZm9yICggdmFyIHByb3AgaW4gb3B0aW9uU3R5bGUgKSB7XG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbnByb3RvLmhpZGUgPSBmdW5jdGlvbigpIHtcbiAgLy8gc2V0IGZsYWdcbiAgdGhpcy5pc0hpZGRlbiA9IHRydWU7XG4gIC8vIHJlbW92ZSBkaXNwbGF5OiBub25lXG4gIHRoaXMuY3NzKHsgZGlzcGxheTogJycgfSk7XG5cbiAgdmFyIG9wdGlvbnMgPSB0aGlzLmxheW91dC5vcHRpb25zO1xuXG4gIHZhciBvblRyYW5zaXRpb25FbmQgPSB7fTtcbiAgdmFyIHRyYW5zaXRpb25FbmRQcm9wZXJ0eSA9IHRoaXMuZ2V0SGlkZVJldmVhbFRyYW5zaXRpb25FbmRQcm9wZXJ0eSgnaGlkZGVuU3R5bGUnKTtcbiAgb25UcmFuc2l0aW9uRW5kWyB0cmFuc2l0aW9uRW5kUHJvcGVydHkgXSA9IHRoaXMub25IaWRlVHJhbnNpdGlvbkVuZDtcblxuICB0aGlzLnRyYW5zaXRpb24oe1xuICAgIGZyb206IG9wdGlvbnMudmlzaWJsZVN0eWxlLFxuICAgIHRvOiBvcHRpb25zLmhpZGRlblN0eWxlLFxuICAgIC8vIGtlZXAgaGlkZGVuIHN0dWZmIGhpZGRlblxuICAgIGlzQ2xlYW5pbmc6IHRydWUsXG4gICAgb25UcmFuc2l0aW9uRW5kOiBvblRyYW5zaXRpb25FbmRcbiAgfSk7XG59O1xuXG5wcm90by5vbkhpZGVUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24oKSB7XG4gIC8vIGNoZWNrIGlmIHN0aWxsIGhpZGRlblxuICAvLyBkdXJpbmcgdHJhbnNpdGlvbiwgaXRlbSBtYXkgaGF2ZSBiZWVuIHVuLWhpZGRlblxuICBpZiAoIHRoaXMuaXNIaWRkZW4gKSB7XG4gICAgdGhpcy5jc3MoeyBkaXNwbGF5OiAnbm9uZScgfSk7XG4gICAgdGhpcy5lbWl0RXZlbnQoJ2hpZGUnKTtcbiAgfVxufTtcblxucHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmNzcyh7XG4gICAgcG9zaXRpb246ICcnLFxuICAgIGxlZnQ6ICcnLFxuICAgIHJpZ2h0OiAnJyxcbiAgICB0b3A6ICcnLFxuICAgIGJvdHRvbTogJycsXG4gICAgdHJhbnNpdGlvbjogJycsXG4gICAgdHJhbnNmb3JtOiAnJ1xuICB9KTtcbn07XG5cbnJldHVybiBJdGVtO1xuXG59KSk7XG5cbi8qIVxuICogT3V0bGF5ZXIgdjIuMS4xXG4gKiB0aGUgYnJhaW5zIGFuZCBndXRzIG9mIGEgbGF5b3V0IGxpYnJhcnlcbiAqIE1JVCBsaWNlbnNlXG4gKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAndXNlIHN0cmljdCc7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKiBnbG9iYWxzIGRlZmluZSwgbW9kdWxlLCByZXF1aXJlICovXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EIC0gUmVxdWlyZUpTXG4gICAgZGVmaW5lKCAnb3V0bGF5ZXIvb3V0bGF5ZXInLFtcbiAgICAgICAgJ2V2LWVtaXR0ZXIvZXYtZW1pdHRlcicsXG4gICAgICAgICdnZXQtc2l6ZS9nZXQtc2l6ZScsXG4gICAgICAgICdmaXp6eS11aS11dGlscy91dGlscycsXG4gICAgICAgICcuL2l0ZW0nXG4gICAgICBdLFxuICAgICAgZnVuY3Rpb24oIEV2RW1pdHRlciwgZ2V0U2l6ZSwgdXRpbHMsIEl0ZW0gKSB7XG4gICAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIEV2RW1pdHRlciwgZ2V0U2l6ZSwgdXRpbHMsIEl0ZW0pO1xuICAgICAgfVxuICAgICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlMgLSBCcm93c2VyaWZ5LCBXZWJwYWNrXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgcmVxdWlyZSgnZXYtZW1pdHRlcicpLFxuICAgICAgcmVxdWlyZSgnZ2V0LXNpemUnKSxcbiAgICAgIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJyksXG4gICAgICByZXF1aXJlKCcuL2l0ZW0nKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuT3V0bGF5ZXIgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgd2luZG93LkV2RW1pdHRlcixcbiAgICAgIHdpbmRvdy5nZXRTaXplLFxuICAgICAgd2luZG93LmZpenp5VUlVdGlscyxcbiAgICAgIHdpbmRvdy5PdXRsYXllci5JdGVtXG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgRXZFbWl0dGVyLCBnZXRTaXplLCB1dGlscywgSXRlbSApIHtcbid1c2Ugc3RyaWN0JztcblxuLy8gLS0tLS0gdmFycyAtLS0tLSAvL1xuXG52YXIgY29uc29sZSA9IHdpbmRvdy5jb25zb2xlO1xudmFyIGpRdWVyeSA9IHdpbmRvdy5qUXVlcnk7XG52YXIgbm9vcCA9IGZ1bmN0aW9uKCkge307XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIE91dGxheWVyIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8vIGdsb2JhbGx5IHVuaXF1ZSBpZGVudGlmaWVyc1xudmFyIEdVSUQgPSAwO1xuLy8gaW50ZXJuYWwgc3RvcmUgb2YgYWxsIE91dGxheWVyIGludGFuY2VzXG52YXIgaW5zdGFuY2VzID0ge307XG5cblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnQsIFN0cmluZ30gZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBPdXRsYXllciggZWxlbWVudCwgb3B0aW9ucyApIHtcbiAgdmFyIHF1ZXJ5RWxlbWVudCA9IHV0aWxzLmdldFF1ZXJ5RWxlbWVudCggZWxlbWVudCApO1xuICBpZiAoICFxdWVyeUVsZW1lbnQgKSB7XG4gICAgaWYgKCBjb25zb2xlICkge1xuICAgICAgY29uc29sZS5lcnJvciggJ0JhZCBlbGVtZW50IGZvciAnICsgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lc3BhY2UgK1xuICAgICAgICAnOiAnICsgKCBxdWVyeUVsZW1lbnQgfHwgZWxlbWVudCApICk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLmVsZW1lbnQgPSBxdWVyeUVsZW1lbnQ7XG4gIC8vIGFkZCBqUXVlcnlcbiAgaWYgKCBqUXVlcnkgKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGpRdWVyeSggdGhpcy5lbGVtZW50ICk7XG4gIH1cblxuICAvLyBvcHRpb25zXG4gIHRoaXMub3B0aW9ucyA9IHV0aWxzLmV4dGVuZCgge30sIHRoaXMuY29uc3RydWN0b3IuZGVmYXVsdHMgKTtcbiAgdGhpcy5vcHRpb24oIG9wdGlvbnMgKTtcblxuICAvLyBhZGQgaWQgZm9yIE91dGxheWVyLmdldEZyb21FbGVtZW50XG4gIHZhciBpZCA9ICsrR1VJRDtcbiAgdGhpcy5lbGVtZW50Lm91dGxheWVyR1VJRCA9IGlkOyAvLyBleHBhbmRvXG4gIGluc3RhbmNlc1sgaWQgXSA9IHRoaXM7IC8vIGFzc29jaWF0ZSB2aWEgaWRcblxuICAvLyBraWNrIGl0IG9mZlxuICB0aGlzLl9jcmVhdGUoKTtcblxuICB2YXIgaXNJbml0TGF5b3V0ID0gdGhpcy5fZ2V0T3B0aW9uKCdpbml0TGF5b3V0Jyk7XG4gIGlmICggaXNJbml0TGF5b3V0ICkge1xuICAgIHRoaXMubGF5b3V0KCk7XG4gIH1cbn1cblxuLy8gc2V0dGluZ3MgYXJlIGZvciBpbnRlcm5hbCB1c2Ugb25seVxuT3V0bGF5ZXIubmFtZXNwYWNlID0gJ291dGxheWVyJztcbk91dGxheWVyLkl0ZW0gPSBJdGVtO1xuXG4vLyBkZWZhdWx0IG9wdGlvbnNcbk91dGxheWVyLmRlZmF1bHRzID0ge1xuICBjb250YWluZXJTdHlsZToge1xuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gIH0sXG4gIGluaXRMYXlvdXQ6IHRydWUsXG4gIG9yaWdpbkxlZnQ6IHRydWUsXG4gIG9yaWdpblRvcDogdHJ1ZSxcbiAgcmVzaXplOiB0cnVlLFxuICByZXNpemVDb250YWluZXI6IHRydWUsXG4gIC8vIGl0ZW0gb3B0aW9uc1xuICB0cmFuc2l0aW9uRHVyYXRpb246ICcwLjRzJyxcbiAgaGlkZGVuU3R5bGU6IHtcbiAgICBvcGFjaXR5OiAwLFxuICAgIHRyYW5zZm9ybTogJ3NjYWxlKDAuMDAxKSdcbiAgfSxcbiAgdmlzaWJsZVN0eWxlOiB7XG4gICAgb3BhY2l0eTogMSxcbiAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKSdcbiAgfVxufTtcblxudmFyIHByb3RvID0gT3V0bGF5ZXIucHJvdG90eXBlO1xuLy8gaW5oZXJpdCBFdkVtaXR0ZXJcbnV0aWxzLmV4dGVuZCggcHJvdG8sIEV2RW1pdHRlci5wcm90b3R5cGUgKTtcblxuLyoqXG4gKiBzZXQgb3B0aW9uc1xuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAqL1xucHJvdG8ub3B0aW9uID0gZnVuY3Rpb24oIG9wdHMgKSB7XG4gIHV0aWxzLmV4dGVuZCggdGhpcy5vcHRpb25zLCBvcHRzICk7XG59O1xuXG4vKipcbiAqIGdldCBiYWNrd2FyZHMgY29tcGF0aWJsZSBvcHRpb24gdmFsdWUsIGNoZWNrIG9sZCBuYW1lXG4gKi9cbnByb3RvLl9nZXRPcHRpb24gPSBmdW5jdGlvbiggb3B0aW9uICkge1xuICB2YXIgb2xkT3B0aW9uID0gdGhpcy5jb25zdHJ1Y3Rvci5jb21wYXRPcHRpb25zWyBvcHRpb24gXTtcbiAgcmV0dXJuIG9sZE9wdGlvbiAmJiB0aGlzLm9wdGlvbnNbIG9sZE9wdGlvbiBdICE9PSB1bmRlZmluZWQgP1xuICAgIHRoaXMub3B0aW9uc1sgb2xkT3B0aW9uIF0gOiB0aGlzLm9wdGlvbnNbIG9wdGlvbiBdO1xufTtcblxuT3V0bGF5ZXIuY29tcGF0T3B0aW9ucyA9IHtcbiAgLy8gY3VycmVudE5hbWU6IG9sZE5hbWVcbiAgaW5pdExheW91dDogJ2lzSW5pdExheW91dCcsXG4gIGhvcml6b250YWw6ICdpc0hvcml6b250YWwnLFxuICBsYXlvdXRJbnN0YW50OiAnaXNMYXlvdXRJbnN0YW50JyxcbiAgb3JpZ2luTGVmdDogJ2lzT3JpZ2luTGVmdCcsXG4gIG9yaWdpblRvcDogJ2lzT3JpZ2luVG9wJyxcbiAgcmVzaXplOiAnaXNSZXNpemVCb3VuZCcsXG4gIHJlc2l6ZUNvbnRhaW5lcjogJ2lzUmVzaXppbmdDb250YWluZXInXG59O1xuXG5wcm90by5fY3JlYXRlID0gZnVuY3Rpb24oKSB7XG4gIC8vIGdldCBpdGVtcyBmcm9tIGNoaWxkcmVuXG4gIHRoaXMucmVsb2FkSXRlbXMoKTtcbiAgLy8gZWxlbWVudHMgdGhhdCBhZmZlY3QgbGF5b3V0LCBidXQgYXJlIG5vdCBsYWlkIG91dFxuICB0aGlzLnN0YW1wcyA9IFtdO1xuICB0aGlzLnN0YW1wKCB0aGlzLm9wdGlvbnMuc3RhbXAgKTtcbiAgLy8gc2V0IGNvbnRhaW5lciBzdHlsZVxuICB1dGlscy5leHRlbmQoIHRoaXMuZWxlbWVudC5zdHlsZSwgdGhpcy5vcHRpb25zLmNvbnRhaW5lclN0eWxlICk7XG5cbiAgLy8gYmluZCByZXNpemUgbWV0aG9kXG4gIHZhciBjYW5CaW5kUmVzaXplID0gdGhpcy5fZ2V0T3B0aW9uKCdyZXNpemUnKTtcbiAgaWYgKCBjYW5CaW5kUmVzaXplICkge1xuICAgIHRoaXMuYmluZFJlc2l6ZSgpO1xuICB9XG59O1xuXG4vLyBnb2VzIHRocm91Z2ggYWxsIGNoaWxkcmVuIGFnYWluIGFuZCBnZXRzIGJyaWNrcyBpbiBwcm9wZXIgb3JkZXJcbnByb3RvLnJlbG9hZEl0ZW1zID0gZnVuY3Rpb24oKSB7XG4gIC8vIGNvbGxlY3Rpb24gb2YgaXRlbSBlbGVtZW50c1xuICB0aGlzLml0ZW1zID0gdGhpcy5faXRlbWl6ZSggdGhpcy5lbGVtZW50LmNoaWxkcmVuICk7XG59O1xuXG5cbi8qKlxuICogdHVybiBlbGVtZW50cyBpbnRvIE91dGxheWVyLkl0ZW1zIHRvIGJlIHVzZWQgaW4gbGF5b3V0XG4gKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEhUTUxFbGVtZW50fSBlbGVtc1xuICogQHJldHVybnMge0FycmF5fSBpdGVtcyAtIGNvbGxlY3Rpb24gb2YgbmV3IE91dGxheWVyIEl0ZW1zXG4gKi9cbnByb3RvLl9pdGVtaXplID0gZnVuY3Rpb24oIGVsZW1zICkge1xuXG4gIHZhciBpdGVtRWxlbXMgPSB0aGlzLl9maWx0ZXJGaW5kSXRlbUVsZW1lbnRzKCBlbGVtcyApO1xuICB2YXIgSXRlbSA9IHRoaXMuY29uc3RydWN0b3IuSXRlbTtcblxuICAvLyBjcmVhdGUgbmV3IE91dGxheWVyIEl0ZW1zIGZvciBjb2xsZWN0aW9uXG4gIHZhciBpdGVtcyA9IFtdO1xuICBmb3IgKCB2YXIgaT0wOyBpIDwgaXRlbUVsZW1zLmxlbmd0aDsgaSsrICkge1xuICAgIHZhciBlbGVtID0gaXRlbUVsZW1zW2ldO1xuICAgIHZhciBpdGVtID0gbmV3IEl0ZW0oIGVsZW0sIHRoaXMgKTtcbiAgICBpdGVtcy5wdXNoKCBpdGVtICk7XG4gIH1cblxuICByZXR1cm4gaXRlbXM7XG59O1xuXG4vKipcbiAqIGdldCBpdGVtIGVsZW1lbnRzIHRvIGJlIHVzZWQgaW4gbGF5b3V0XG4gKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEhUTUxFbGVtZW50fSBlbGVtc1xuICogQHJldHVybnMge0FycmF5fSBpdGVtcyAtIGl0ZW0gZWxlbWVudHNcbiAqL1xucHJvdG8uX2ZpbHRlckZpbmRJdGVtRWxlbWVudHMgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIHJldHVybiB1dGlscy5maWx0ZXJGaW5kRWxlbWVudHMoIGVsZW1zLCB0aGlzLm9wdGlvbnMuaXRlbVNlbGVjdG9yICk7XG59O1xuXG4vKipcbiAqIGdldHRlciBtZXRob2QgZm9yIGdldHRpbmcgaXRlbSBlbGVtZW50c1xuICogQHJldHVybnMge0FycmF5fSBlbGVtcyAtIGNvbGxlY3Rpb24gb2YgaXRlbSBlbGVtZW50c1xuICovXG5wcm90by5nZXRJdGVtRWxlbWVudHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuaXRlbXMubWFwKCBmdW5jdGlvbiggaXRlbSApIHtcbiAgICByZXR1cm4gaXRlbS5lbGVtZW50O1xuICB9KTtcbn07XG5cbi8vIC0tLS0tIGluaXQgJiBsYXlvdXQgLS0tLS0gLy9cblxuLyoqXG4gKiBsYXlzIG91dCBhbGwgaXRlbXNcbiAqL1xucHJvdG8ubGF5b3V0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX3Jlc2V0TGF5b3V0KCk7XG4gIHRoaXMuX21hbmFnZVN0YW1wcygpO1xuXG4gIC8vIGRvbid0IGFuaW1hdGUgZmlyc3QgbGF5b3V0XG4gIHZhciBsYXlvdXRJbnN0YW50ID0gdGhpcy5fZ2V0T3B0aW9uKCdsYXlvdXRJbnN0YW50Jyk7XG4gIHZhciBpc0luc3RhbnQgPSBsYXlvdXRJbnN0YW50ICE9PSB1bmRlZmluZWQgP1xuICAgIGxheW91dEluc3RhbnQgOiAhdGhpcy5faXNMYXlvdXRJbml0ZWQ7XG4gIHRoaXMubGF5b3V0SXRlbXMoIHRoaXMuaXRlbXMsIGlzSW5zdGFudCApO1xuXG4gIC8vIGZsYWcgZm9yIGluaXRhbGl6ZWRcbiAgdGhpcy5faXNMYXlvdXRJbml0ZWQgPSB0cnVlO1xufTtcblxuLy8gX2luaXQgaXMgYWxpYXMgZm9yIGxheW91dFxucHJvdG8uX2luaXQgPSBwcm90by5sYXlvdXQ7XG5cbi8qKlxuICogbG9naWMgYmVmb3JlIGFueSBuZXcgbGF5b3V0XG4gKi9cbnByb3RvLl9yZXNldExheW91dCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmdldFNpemUoKTtcbn07XG5cblxucHJvdG8uZ2V0U2l6ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnNpemUgPSBnZXRTaXplKCB0aGlzLmVsZW1lbnQgKTtcbn07XG5cbi8qKlxuICogZ2V0IG1lYXN1cmVtZW50IGZyb20gb3B0aW9uLCBmb3IgY29sdW1uV2lkdGgsIHJvd0hlaWdodCwgZ3V0dGVyXG4gKiBpZiBvcHRpb24gaXMgU3RyaW5nIC0+IGdldCBlbGVtZW50IGZyb20gc2VsZWN0b3Igc3RyaW5nLCAmIGdldCBzaXplIG9mIGVsZW1lbnRcbiAqIGlmIG9wdGlvbiBpcyBFbGVtZW50IC0+IGdldCBzaXplIG9mIGVsZW1lbnRcbiAqIGVsc2UgdXNlIG9wdGlvbiBhcyBhIG51bWJlclxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZWFzdXJlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IHNpemUgLSB3aWR0aCBvciBoZWlnaHRcbiAqIEBwcml2YXRlXG4gKi9cbnByb3RvLl9nZXRNZWFzdXJlbWVudCA9IGZ1bmN0aW9uKCBtZWFzdXJlbWVudCwgc2l6ZSApIHtcbiAgdmFyIG9wdGlvbiA9IHRoaXMub3B0aW9uc1sgbWVhc3VyZW1lbnQgXTtcbiAgdmFyIGVsZW07XG4gIGlmICggIW9wdGlvbiApIHtcbiAgICAvLyBkZWZhdWx0IHRvIDBcbiAgICB0aGlzWyBtZWFzdXJlbWVudCBdID0gMDtcbiAgfSBlbHNlIHtcbiAgICAvLyB1c2Ugb3B0aW9uIGFzIGFuIGVsZW1lbnRcbiAgICBpZiAoIHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycgKSB7XG4gICAgICBlbGVtID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoIG9wdGlvbiApO1xuICAgIH0gZWxzZSBpZiAoIG9wdGlvbiBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICkge1xuICAgICAgZWxlbSA9IG9wdGlvbjtcbiAgICB9XG4gICAgLy8gdXNlIHNpemUgb2YgZWxlbWVudCwgaWYgZWxlbWVudFxuICAgIHRoaXNbIG1lYXN1cmVtZW50IF0gPSBlbGVtID8gZ2V0U2l6ZSggZWxlbSApWyBzaXplIF0gOiBvcHRpb247XG4gIH1cbn07XG5cbi8qKlxuICogbGF5b3V0IGEgY29sbGVjdGlvbiBvZiBpdGVtIGVsZW1lbnRzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5wcm90by5sYXlvdXRJdGVtcyA9IGZ1bmN0aW9uKCBpdGVtcywgaXNJbnN0YW50ICkge1xuICBpdGVtcyA9IHRoaXMuX2dldEl0ZW1zRm9yTGF5b3V0KCBpdGVtcyApO1xuXG4gIHRoaXMuX2xheW91dEl0ZW1zKCBpdGVtcywgaXNJbnN0YW50ICk7XG5cbiAgdGhpcy5fcG9zdExheW91dCgpO1xufTtcblxuLyoqXG4gKiBnZXQgdGhlIGl0ZW1zIHRvIGJlIGxhaWQgb3V0XG4gKiB5b3UgbWF5IHdhbnQgdG8gc2tpcCBvdmVyIHNvbWUgaXRlbXNcbiAqIEBwYXJhbSB7QXJyYXl9IGl0ZW1zXG4gKiBAcmV0dXJucyB7QXJyYXl9IGl0ZW1zXG4gKi9cbnByb3RvLl9nZXRJdGVtc0ZvckxheW91dCA9IGZ1bmN0aW9uKCBpdGVtcyApIHtcbiAgcmV0dXJuIGl0ZW1zLmZpbHRlciggZnVuY3Rpb24oIGl0ZW0gKSB7XG4gICAgcmV0dXJuICFpdGVtLmlzSWdub3JlZDtcbiAgfSk7XG59O1xuXG4vKipcbiAqIGxheW91dCBpdGVtc1xuICogQHBhcmFtIHtBcnJheX0gaXRlbXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNJbnN0YW50XG4gKi9cbnByb3RvLl9sYXlvdXRJdGVtcyA9IGZ1bmN0aW9uKCBpdGVtcywgaXNJbnN0YW50ICkge1xuICB0aGlzLl9lbWl0Q29tcGxldGVPbkl0ZW1zKCAnbGF5b3V0JywgaXRlbXMgKTtcblxuICBpZiAoICFpdGVtcyB8fCAhaXRlbXMubGVuZ3RoICkge1xuICAgIC8vIG5vIGl0ZW1zLCBlbWl0IGV2ZW50IHdpdGggZW1wdHkgYXJyYXlcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgcXVldWUgPSBbXTtcblxuICBpdGVtcy5mb3JFYWNoKCBmdW5jdGlvbiggaXRlbSApIHtcbiAgICAvLyBnZXQgeC95IG9iamVjdCBmcm9tIG1ldGhvZFxuICAgIHZhciBwb3NpdGlvbiA9IHRoaXMuX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiggaXRlbSApO1xuICAgIC8vIGVucXVldWVcbiAgICBwb3NpdGlvbi5pdGVtID0gaXRlbTtcbiAgICBwb3NpdGlvbi5pc0luc3RhbnQgPSBpc0luc3RhbnQgfHwgaXRlbS5pc0xheW91dEluc3RhbnQ7XG4gICAgcXVldWUucHVzaCggcG9zaXRpb24gKTtcbiAgfSwgdGhpcyApO1xuXG4gIHRoaXMuX3Byb2Nlc3NMYXlvdXRRdWV1ZSggcXVldWUgKTtcbn07XG5cbi8qKlxuICogZ2V0IGl0ZW0gbGF5b3V0IHBvc2l0aW9uXG4gKiBAcGFyYW0ge091dGxheWVyLkl0ZW19IGl0ZW1cbiAqIEByZXR1cm5zIHtPYmplY3R9IHggYW5kIHkgcG9zaXRpb25cbiAqL1xucHJvdG8uX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCAvKiBpdGVtICovICkge1xuICByZXR1cm4ge1xuICAgIHg6IDAsXG4gICAgeTogMFxuICB9O1xufTtcblxuLyoqXG4gKiBpdGVyYXRlIG92ZXIgYXJyYXkgYW5kIHBvc2l0aW9uIGVhY2ggaXRlbVxuICogUmVhc29uIGJlaW5nIC0gc2VwYXJhdGluZyB0aGlzIGxvZ2ljIHByZXZlbnRzICdsYXlvdXQgaW52YWxpZGF0aW9uJ1xuICogdGh4IEBwYXVsX2lyaXNoXG4gKiBAcGFyYW0ge0FycmF5fSBxdWV1ZVxuICovXG5wcm90by5fcHJvY2Vzc0xheW91dFF1ZXVlID0gZnVuY3Rpb24oIHF1ZXVlICkge1xuICB0aGlzLnVwZGF0ZVN0YWdnZXIoKTtcbiAgcXVldWUuZm9yRWFjaCggZnVuY3Rpb24oIG9iaiwgaSApIHtcbiAgICB0aGlzLl9wb3NpdGlvbkl0ZW0oIG9iai5pdGVtLCBvYmoueCwgb2JqLnksIG9iai5pc0luc3RhbnQsIGkgKTtcbiAgfSwgdGhpcyApO1xufTtcblxuLy8gc2V0IHN0YWdnZXIgZnJvbSBvcHRpb24gaW4gbWlsbGlzZWNvbmRzIG51bWJlclxucHJvdG8udXBkYXRlU3RhZ2dlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc3RhZ2dlciA9IHRoaXMub3B0aW9ucy5zdGFnZ2VyO1xuICBpZiAoIHN0YWdnZXIgPT09IG51bGwgfHwgc3RhZ2dlciA9PT0gdW5kZWZpbmVkICkge1xuICAgIHRoaXMuc3RhZ2dlciA9IDA7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMuc3RhZ2dlciA9IGdldE1pbGxpc2Vjb25kcyggc3RhZ2dlciApO1xuICByZXR1cm4gdGhpcy5zdGFnZ2VyO1xufTtcblxuLyoqXG4gKiBTZXRzIHBvc2l0aW9uIG9mIGl0ZW0gaW4gRE9NXG4gKiBAcGFyYW0ge091dGxheWVyLkl0ZW19IGl0ZW1cbiAqIEBwYXJhbSB7TnVtYmVyfSB4IC0gaG9yaXpvbnRhbCBwb3NpdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IHkgLSB2ZXJ0aWNhbCBwb3NpdGlvblxuICogQHBhcmFtIHtCb29sZWFufSBpc0luc3RhbnQgLSBkaXNhYmxlcyB0cmFuc2l0aW9uc1xuICovXG5wcm90by5fcG9zaXRpb25JdGVtID0gZnVuY3Rpb24oIGl0ZW0sIHgsIHksIGlzSW5zdGFudCwgaSApIHtcbiAgaWYgKCBpc0luc3RhbnQgKSB7XG4gICAgLy8gaWYgbm90IHRyYW5zaXRpb24sIGp1c3Qgc2V0IENTU1xuICAgIGl0ZW0uZ29UbyggeCwgeSApO1xuICB9IGVsc2Uge1xuICAgIGl0ZW0uc3RhZ2dlciggaSAqIHRoaXMuc3RhZ2dlciApO1xuICAgIGl0ZW0ubW92ZVRvKCB4LCB5ICk7XG4gIH1cbn07XG5cbi8qKlxuICogQW55IGxvZ2ljIHlvdSB3YW50IHRvIGRvIGFmdGVyIGVhY2ggbGF5b3V0LFxuICogaS5lLiBzaXplIHRoZSBjb250YWluZXJcbiAqL1xucHJvdG8uX3Bvc3RMYXlvdXQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5yZXNpemVDb250YWluZXIoKTtcbn07XG5cbnByb3RvLnJlc2l6ZUNvbnRhaW5lciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXNSZXNpemluZ0NvbnRhaW5lciA9IHRoaXMuX2dldE9wdGlvbigncmVzaXplQ29udGFpbmVyJyk7XG4gIGlmICggIWlzUmVzaXppbmdDb250YWluZXIgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBzaXplID0gdGhpcy5fZ2V0Q29udGFpbmVyU2l6ZSgpO1xuICBpZiAoIHNpemUgKSB7XG4gICAgdGhpcy5fc2V0Q29udGFpbmVyTWVhc3VyZSggc2l6ZS53aWR0aCwgdHJ1ZSApO1xuICAgIHRoaXMuX3NldENvbnRhaW5lck1lYXN1cmUoIHNpemUuaGVpZ2h0LCBmYWxzZSApO1xuICB9XG59O1xuXG4vKipcbiAqIFNldHMgd2lkdGggb3IgaGVpZ2h0IG9mIGNvbnRhaW5lciBpZiByZXR1cm5lZFxuICogQHJldHVybnMge09iamVjdH0gc2l6ZVxuICogICBAcGFyYW0ge051bWJlcn0gd2lkdGhcbiAqICAgQHBhcmFtIHtOdW1iZXJ9IGhlaWdodFxuICovXG5wcm90by5fZ2V0Q29udGFpbmVyU2l6ZSA9IG5vb3A7XG5cbi8qKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1lYXN1cmUgLSBzaXplIG9mIHdpZHRoIG9yIGhlaWdodFxuICogQHBhcmFtIHtCb29sZWFufSBpc1dpZHRoXG4gKi9cbnByb3RvLl9zZXRDb250YWluZXJNZWFzdXJlID0gZnVuY3Rpb24oIG1lYXN1cmUsIGlzV2lkdGggKSB7XG4gIGlmICggbWVhc3VyZSA9PT0gdW5kZWZpbmVkICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBlbGVtU2l6ZSA9IHRoaXMuc2l6ZTtcbiAgLy8gYWRkIHBhZGRpbmcgYW5kIGJvcmRlciB3aWR0aCBpZiBib3JkZXIgYm94XG4gIGlmICggZWxlbVNpemUuaXNCb3JkZXJCb3ggKSB7XG4gICAgbWVhc3VyZSArPSBpc1dpZHRoID8gZWxlbVNpemUucGFkZGluZ0xlZnQgKyBlbGVtU2l6ZS5wYWRkaW5nUmlnaHQgK1xuICAgICAgZWxlbVNpemUuYm9yZGVyTGVmdFdpZHRoICsgZWxlbVNpemUuYm9yZGVyUmlnaHRXaWR0aCA6XG4gICAgICBlbGVtU2l6ZS5wYWRkaW5nQm90dG9tICsgZWxlbVNpemUucGFkZGluZ1RvcCArXG4gICAgICBlbGVtU2l6ZS5ib3JkZXJUb3BXaWR0aCArIGVsZW1TaXplLmJvcmRlckJvdHRvbVdpZHRoO1xuICB9XG5cbiAgbWVhc3VyZSA9IE1hdGgubWF4KCBtZWFzdXJlLCAwICk7XG4gIHRoaXMuZWxlbWVudC5zdHlsZVsgaXNXaWR0aCA/ICd3aWR0aCcgOiAnaGVpZ2h0JyBdID0gbWVhc3VyZSArICdweCc7XG59O1xuXG4vKipcbiAqIGVtaXQgZXZlbnRDb21wbGV0ZSBvbiBhIGNvbGxlY3Rpb24gb2YgaXRlbXMgZXZlbnRzXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnROYW1lXG4gKiBAcGFyYW0ge0FycmF5fSBpdGVtcyAtIE91dGxheWVyLkl0ZW1zXG4gKi9cbnByb3RvLl9lbWl0Q29tcGxldGVPbkl0ZW1zID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgaXRlbXMgKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG4gIGZ1bmN0aW9uIG9uQ29tcGxldGUoKSB7XG4gICAgX3RoaXMuZGlzcGF0Y2hFdmVudCggZXZlbnROYW1lICsgJ0NvbXBsZXRlJywgbnVsbCwgWyBpdGVtcyBdICk7XG4gIH1cblxuICB2YXIgY291bnQgPSBpdGVtcy5sZW5ndGg7XG4gIGlmICggIWl0ZW1zIHx8ICFjb3VudCApIHtcbiAgICBvbkNvbXBsZXRlKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGRvbmVDb3VudCA9IDA7XG4gIGZ1bmN0aW9uIHRpY2soKSB7XG4gICAgZG9uZUNvdW50Kys7XG4gICAgaWYgKCBkb25lQ291bnQgPT0gY291bnQgKSB7XG4gICAgICBvbkNvbXBsZXRlKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gYmluZCBjYWxsYmFja1xuICBpdGVtcy5mb3JFYWNoKCBmdW5jdGlvbiggaXRlbSApIHtcbiAgICBpdGVtLm9uY2UoIGV2ZW50TmFtZSwgdGljayApO1xuICB9KTtcbn07XG5cbi8qKlxuICogZW1pdHMgZXZlbnRzIHZpYSBFdkVtaXR0ZXIgYW5kIGpRdWVyeSBldmVudHNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIC0gbmFtZSBvZiBldmVudFxuICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSBvcmlnaW5hbCBldmVudFxuICogQHBhcmFtIHtBcnJheX0gYXJncyAtIGV4dHJhIGFyZ3VtZW50c1xuICovXG5wcm90by5kaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24oIHR5cGUsIGV2ZW50LCBhcmdzICkge1xuICAvLyBhZGQgb3JpZ2luYWwgZXZlbnQgdG8gYXJndW1lbnRzXG4gIHZhciBlbWl0QXJncyA9IGV2ZW50ID8gWyBldmVudCBdLmNvbmNhdCggYXJncyApIDogYXJncztcbiAgdGhpcy5lbWl0RXZlbnQoIHR5cGUsIGVtaXRBcmdzICk7XG5cbiAgaWYgKCBqUXVlcnkgKSB7XG4gICAgLy8gc2V0IHRoaXMuJGVsZW1lbnRcbiAgICB0aGlzLiRlbGVtZW50ID0gdGhpcy4kZWxlbWVudCB8fCBqUXVlcnkoIHRoaXMuZWxlbWVudCApO1xuICAgIGlmICggZXZlbnQgKSB7XG4gICAgICAvLyBjcmVhdGUgalF1ZXJ5IGV2ZW50XG4gICAgICB2YXIgJGV2ZW50ID0galF1ZXJ5LkV2ZW50KCBldmVudCApO1xuICAgICAgJGV2ZW50LnR5cGUgPSB0eXBlO1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCAkZXZlbnQsIGFyZ3MgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8ganVzdCB0cmlnZ2VyIHdpdGggdHlwZSBpZiBubyBldmVudCBhdmFpbGFibGVcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlciggdHlwZSwgYXJncyApO1xuICAgIH1cbiAgfVxufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gaWdub3JlICYgc3RhbXBzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cblxuLyoqXG4gKiBrZWVwIGl0ZW0gaW4gY29sbGVjdGlvbiwgYnV0IGRvIG5vdCBsYXkgaXQgb3V0XG4gKiBpZ25vcmVkIGl0ZW1zIGRvIG5vdCBnZXQgc2tpcHBlZCBpbiBsYXlvdXRcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbVxuICovXG5wcm90by5pZ25vcmUgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgdmFyIGl0ZW0gPSB0aGlzLmdldEl0ZW0oIGVsZW0gKTtcbiAgaWYgKCBpdGVtICkge1xuICAgIGl0ZW0uaXNJZ25vcmVkID0gdHJ1ZTtcbiAgfVxufTtcblxuLyoqXG4gKiByZXR1cm4gaXRlbSB0byBsYXlvdXQgY29sbGVjdGlvblxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtXG4gKi9cbnByb3RvLnVuaWdub3JlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIHZhciBpdGVtID0gdGhpcy5nZXRJdGVtKCBlbGVtICk7XG4gIGlmICggaXRlbSApIHtcbiAgICBkZWxldGUgaXRlbS5pc0lnbm9yZWQ7XG4gIH1cbn07XG5cbi8qKlxuICogYWRkcyBlbGVtZW50cyB0byBzdGFtcHNcbiAqIEBwYXJhbSB7Tm9kZUxpc3QsIEFycmF5LCBFbGVtZW50LCBvciBTdHJpbmd9IGVsZW1zXG4gKi9cbnByb3RvLnN0YW1wID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICBlbGVtcyA9IHRoaXMuX2ZpbmQoIGVsZW1zICk7XG4gIGlmICggIWVsZW1zICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuc3RhbXBzID0gdGhpcy5zdGFtcHMuY29uY2F0KCBlbGVtcyApO1xuICAvLyBpZ25vcmVcbiAgZWxlbXMuZm9yRWFjaCggdGhpcy5pZ25vcmUsIHRoaXMgKTtcbn07XG5cbi8qKlxuICogcmVtb3ZlcyBlbGVtZW50cyB0byBzdGFtcHNcbiAqIEBwYXJhbSB7Tm9kZUxpc3QsIEFycmF5LCBvciBFbGVtZW50fSBlbGVtc1xuICovXG5wcm90by51bnN0YW1wID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICBlbGVtcyA9IHRoaXMuX2ZpbmQoIGVsZW1zICk7XG4gIGlmICggIWVsZW1zICl7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZWxlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgLy8gZmlsdGVyIG91dCByZW1vdmVkIHN0YW1wIGVsZW1lbnRzXG4gICAgdXRpbHMucmVtb3ZlRnJvbSggdGhpcy5zdGFtcHMsIGVsZW0gKTtcbiAgICB0aGlzLnVuaWdub3JlKCBlbGVtICk7XG4gIH0sIHRoaXMgKTtcbn07XG5cbi8qKlxuICogZmluZHMgY2hpbGQgZWxlbWVudHNcbiAqIEBwYXJhbSB7Tm9kZUxpc3QsIEFycmF5LCBFbGVtZW50LCBvciBTdHJpbmd9IGVsZW1zXG4gKiBAcmV0dXJucyB7QXJyYXl9IGVsZW1zXG4gKi9cbnByb3RvLl9maW5kID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICBpZiAoICFlbGVtcyApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gaWYgc3RyaW5nLCB1c2UgYXJndW1lbnQgYXMgc2VsZWN0b3Igc3RyaW5nXG4gIGlmICggdHlwZW9mIGVsZW1zID09ICdzdHJpbmcnICkge1xuICAgIGVsZW1zID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIGVsZW1zICk7XG4gIH1cbiAgZWxlbXMgPSB1dGlscy5tYWtlQXJyYXkoIGVsZW1zICk7XG4gIHJldHVybiBlbGVtcztcbn07XG5cbnByb3RvLl9tYW5hZ2VTdGFtcHMgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5zdGFtcHMgfHwgIXRoaXMuc3RhbXBzLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLl9nZXRCb3VuZGluZ1JlY3QoKTtcblxuICB0aGlzLnN0YW1wcy5mb3JFYWNoKCB0aGlzLl9tYW5hZ2VTdGFtcCwgdGhpcyApO1xufTtcblxuLy8gdXBkYXRlIGJvdW5kaW5nTGVmdCAvIFRvcFxucHJvdG8uX2dldEJvdW5kaW5nUmVjdCA9IGZ1bmN0aW9uKCkge1xuICAvLyBnZXQgYm91bmRpbmcgcmVjdCBmb3IgY29udGFpbmVyIGVsZW1lbnRcbiAgdmFyIGJvdW5kaW5nUmVjdCA9IHRoaXMuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIHNpemUgPSB0aGlzLnNpemU7XG4gIHRoaXMuX2JvdW5kaW5nUmVjdCA9IHtcbiAgICBsZWZ0OiBib3VuZGluZ1JlY3QubGVmdCArIHNpemUucGFkZGluZ0xlZnQgKyBzaXplLmJvcmRlckxlZnRXaWR0aCxcbiAgICB0b3A6IGJvdW5kaW5nUmVjdC50b3AgKyBzaXplLnBhZGRpbmdUb3AgKyBzaXplLmJvcmRlclRvcFdpZHRoLFxuICAgIHJpZ2h0OiBib3VuZGluZ1JlY3QucmlnaHQgLSAoIHNpemUucGFkZGluZ1JpZ2h0ICsgc2l6ZS5ib3JkZXJSaWdodFdpZHRoICksXG4gICAgYm90dG9tOiBib3VuZGluZ1JlY3QuYm90dG9tIC0gKCBzaXplLnBhZGRpbmdCb3R0b20gKyBzaXplLmJvcmRlckJvdHRvbVdpZHRoIClcbiAgfTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSBzdGFtcFxuKiovXG5wcm90by5fbWFuYWdlU3RhbXAgPSBub29wO1xuXG4vKipcbiAqIGdldCB4L3kgcG9zaXRpb24gb2YgZWxlbWVudCByZWxhdGl2ZSB0byBjb250YWluZXIgZWxlbWVudFxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBvZmZzZXQgLSBoYXMgbGVmdCwgdG9wLCByaWdodCwgYm90dG9tXG4gKi9cbnByb3RvLl9nZXRFbGVtZW50T2Zmc2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIHZhciBib3VuZGluZ1JlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgdGhpc1JlY3QgPSB0aGlzLl9ib3VuZGluZ1JlY3Q7XG4gIHZhciBzaXplID0gZ2V0U2l6ZSggZWxlbSApO1xuICB2YXIgb2Zmc2V0ID0ge1xuICAgIGxlZnQ6IGJvdW5kaW5nUmVjdC5sZWZ0IC0gdGhpc1JlY3QubGVmdCAtIHNpemUubWFyZ2luTGVmdCxcbiAgICB0b3A6IGJvdW5kaW5nUmVjdC50b3AgLSB0aGlzUmVjdC50b3AgLSBzaXplLm1hcmdpblRvcCxcbiAgICByaWdodDogdGhpc1JlY3QucmlnaHQgLSBib3VuZGluZ1JlY3QucmlnaHQgLSBzaXplLm1hcmdpblJpZ2h0LFxuICAgIGJvdHRvbTogdGhpc1JlY3QuYm90dG9tIC0gYm91bmRpbmdSZWN0LmJvdHRvbSAtIHNpemUubWFyZ2luQm90dG9tXG4gIH07XG4gIHJldHVybiBvZmZzZXQ7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSByZXNpemUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLy8gZW5hYmxlIGV2ZW50IGhhbmRsZXJzIGZvciBsaXN0ZW5lcnNcbi8vIGkuZS4gcmVzaXplIC0+IG9ucmVzaXplXG5wcm90by5oYW5kbGVFdmVudCA9IHV0aWxzLmhhbmRsZUV2ZW50O1xuXG4vKipcbiAqIEJpbmQgbGF5b3V0IHRvIHdpbmRvdyByZXNpemluZ1xuICovXG5wcm90by5iaW5kUmVzaXplID0gZnVuY3Rpb24oKSB7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCAncmVzaXplJywgdGhpcyApO1xuICB0aGlzLmlzUmVzaXplQm91bmQgPSB0cnVlO1xufTtcblxuLyoqXG4gKiBVbmJpbmQgbGF5b3V0IHRvIHdpbmRvdyByZXNpemluZ1xuICovXG5wcm90by51bmJpbmRSZXNpemUgPSBmdW5jdGlvbigpIHtcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdyZXNpemUnLCB0aGlzICk7XG4gIHRoaXMuaXNSZXNpemVCb3VuZCA9IGZhbHNlO1xufTtcblxucHJvdG8ub25yZXNpemUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5yZXNpemUoKTtcbn07XG5cbnV0aWxzLmRlYm91bmNlTWV0aG9kKCBPdXRsYXllciwgJ29ucmVzaXplJywgMTAwICk7XG5cbnByb3RvLnJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xuICAvLyBkb24ndCB0cmlnZ2VyIGlmIHNpemUgZGlkIG5vdCBjaGFuZ2VcbiAgLy8gb3IgaWYgcmVzaXplIHdhcyB1bmJvdW5kLiBTZWUgIzlcbiAgaWYgKCAhdGhpcy5pc1Jlc2l6ZUJvdW5kIHx8ICF0aGlzLm5lZWRzUmVzaXplTGF5b3V0KCkgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5sYXlvdXQoKTtcbn07XG5cbi8qKlxuICogY2hlY2sgaWYgbGF5b3V0IGlzIG5lZWRlZCBwb3N0IGxheW91dFxuICogQHJldHVybnMgQm9vbGVhblxuICovXG5wcm90by5uZWVkc1Jlc2l6ZUxheW91dCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2l6ZSA9IGdldFNpemUoIHRoaXMuZWxlbWVudCApO1xuICAvLyBjaGVjayB0aGF0IHRoaXMuc2l6ZSBhbmQgc2l6ZSBhcmUgdGhlcmVcbiAgLy8gSUU4IHRyaWdnZXJzIHJlc2l6ZSBvbiBib2R5IHNpemUgY2hhbmdlLCBzbyB0aGV5IG1pZ2h0IG5vdCBiZVxuICB2YXIgaGFzU2l6ZXMgPSB0aGlzLnNpemUgJiYgc2l6ZTtcbiAgcmV0dXJuIGhhc1NpemVzICYmIHNpemUuaW5uZXJXaWR0aCAhPT0gdGhpcy5zaXplLmlubmVyV2lkdGg7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBtZXRob2RzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8qKlxuICogYWRkIGl0ZW1zIHRvIE91dGxheWVyIGluc3RhbmNlXG4gKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEVsZW1lbnR9IGVsZW1zXG4gKiBAcmV0dXJucyB7QXJyYXl9IGl0ZW1zIC0gT3V0bGF5ZXIuSXRlbXNcbioqL1xucHJvdG8uYWRkSXRlbXMgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIHZhciBpdGVtcyA9IHRoaXMuX2l0ZW1pemUoIGVsZW1zICk7XG4gIC8vIGFkZCBpdGVtcyB0byBjb2xsZWN0aW9uXG4gIGlmICggaXRlbXMubGVuZ3RoICkge1xuICAgIHRoaXMuaXRlbXMgPSB0aGlzLml0ZW1zLmNvbmNhdCggaXRlbXMgKTtcbiAgfVxuICByZXR1cm4gaXRlbXM7XG59O1xuXG4vKipcbiAqIExheW91dCBuZXdseS1hcHBlbmRlZCBpdGVtIGVsZW1lbnRzXG4gKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEVsZW1lbnR9IGVsZW1zXG4gKi9cbnByb3RvLmFwcGVuZGVkID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICB2YXIgaXRlbXMgPSB0aGlzLmFkZEl0ZW1zKCBlbGVtcyApO1xuICBpZiAoICFpdGVtcy5sZW5ndGggKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGxheW91dCBhbmQgcmV2ZWFsIGp1c3QgdGhlIG5ldyBpdGVtc1xuICB0aGlzLmxheW91dEl0ZW1zKCBpdGVtcywgdHJ1ZSApO1xuICB0aGlzLnJldmVhbCggaXRlbXMgKTtcbn07XG5cbi8qKlxuICogTGF5b3V0IHByZXBlbmRlZCBlbGVtZW50c1xuICogQHBhcmFtIHtBcnJheSBvciBOb2RlTGlzdCBvciBFbGVtZW50fSBlbGVtc1xuICovXG5wcm90by5wcmVwZW5kZWQgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIHZhciBpdGVtcyA9IHRoaXMuX2l0ZW1pemUoIGVsZW1zICk7XG4gIGlmICggIWl0ZW1zLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gYWRkIGl0ZW1zIHRvIGJlZ2lubmluZyBvZiBjb2xsZWN0aW9uXG4gIHZhciBwcmV2aW91c0l0ZW1zID0gdGhpcy5pdGVtcy5zbGljZSgwKTtcbiAgdGhpcy5pdGVtcyA9IGl0ZW1zLmNvbmNhdCggcHJldmlvdXNJdGVtcyApO1xuICAvLyBzdGFydCBuZXcgbGF5b3V0XG4gIHRoaXMuX3Jlc2V0TGF5b3V0KCk7XG4gIHRoaXMuX21hbmFnZVN0YW1wcygpO1xuICAvLyBsYXlvdXQgbmV3IHN0dWZmIHdpdGhvdXQgdHJhbnNpdGlvblxuICB0aGlzLmxheW91dEl0ZW1zKCBpdGVtcywgdHJ1ZSApO1xuICB0aGlzLnJldmVhbCggaXRlbXMgKTtcbiAgLy8gbGF5b3V0IHByZXZpb3VzIGl0ZW1zXG4gIHRoaXMubGF5b3V0SXRlbXMoIHByZXZpb3VzSXRlbXMgKTtcbn07XG5cbi8qKlxuICogcmV2ZWFsIGEgY29sbGVjdGlvbiBvZiBpdGVtc1xuICogQHBhcmFtIHtBcnJheSBvZiBPdXRsYXllci5JdGVtc30gaXRlbXNcbiAqL1xucHJvdG8ucmV2ZWFsID0gZnVuY3Rpb24oIGl0ZW1zICkge1xuICB0aGlzLl9lbWl0Q29tcGxldGVPbkl0ZW1zKCAncmV2ZWFsJywgaXRlbXMgKTtcbiAgaWYgKCAhaXRlbXMgfHwgIWl0ZW1zLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIHN0YWdnZXIgPSB0aGlzLnVwZGF0ZVN0YWdnZXIoKTtcbiAgaXRlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGl0ZW0sIGkgKSB7XG4gICAgaXRlbS5zdGFnZ2VyKCBpICogc3RhZ2dlciApO1xuICAgIGl0ZW0ucmV2ZWFsKCk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBoaWRlIGEgY29sbGVjdGlvbiBvZiBpdGVtc1xuICogQHBhcmFtIHtBcnJheSBvZiBPdXRsYXllci5JdGVtc30gaXRlbXNcbiAqL1xucHJvdG8uaGlkZSA9IGZ1bmN0aW9uKCBpdGVtcyApIHtcbiAgdGhpcy5fZW1pdENvbXBsZXRlT25JdGVtcyggJ2hpZGUnLCBpdGVtcyApO1xuICBpZiAoICFpdGVtcyB8fCAhaXRlbXMubGVuZ3RoICkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgc3RhZ2dlciA9IHRoaXMudXBkYXRlU3RhZ2dlcigpO1xuICBpdGVtcy5mb3JFYWNoKCBmdW5jdGlvbiggaXRlbSwgaSApIHtcbiAgICBpdGVtLnN0YWdnZXIoIGkgKiBzdGFnZ2VyICk7XG4gICAgaXRlbS5oaWRlKCk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiByZXZlYWwgaXRlbSBlbGVtZW50c1xuICogQHBhcmFtIHtBcnJheX0sIHtFbGVtZW50fSwge05vZGVMaXN0fSBpdGVtc1xuICovXG5wcm90by5yZXZlYWxJdGVtRWxlbWVudHMgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIHZhciBpdGVtcyA9IHRoaXMuZ2V0SXRlbXMoIGVsZW1zICk7XG4gIHRoaXMucmV2ZWFsKCBpdGVtcyApO1xufTtcblxuLyoqXG4gKiBoaWRlIGl0ZW0gZWxlbWVudHNcbiAqIEBwYXJhbSB7QXJyYXl9LCB7RWxlbWVudH0sIHtOb2RlTGlzdH0gaXRlbXNcbiAqL1xucHJvdG8uaGlkZUl0ZW1FbGVtZW50cyA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgdmFyIGl0ZW1zID0gdGhpcy5nZXRJdGVtcyggZWxlbXMgKTtcbiAgdGhpcy5oaWRlKCBpdGVtcyApO1xufTtcblxuLyoqXG4gKiBnZXQgT3V0bGF5ZXIuSXRlbSwgZ2l2ZW4gYW4gRWxlbWVudFxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge091dGxheWVyLkl0ZW19IGl0ZW1cbiAqL1xucHJvdG8uZ2V0SXRlbSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICAvLyBsb29wIHRocm91Z2ggaXRlbXMgdG8gZ2V0IHRoZSBvbmUgdGhhdCBtYXRjaGVzXG4gIGZvciAoIHZhciBpPTA7IGkgPCB0aGlzLml0ZW1zLmxlbmd0aDsgaSsrICkge1xuICAgIHZhciBpdGVtID0gdGhpcy5pdGVtc1tpXTtcbiAgICBpZiAoIGl0ZW0uZWxlbWVudCA9PSBlbGVtICkge1xuICAgICAgLy8gcmV0dXJuIGl0ZW1cbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBnZXQgY29sbGVjdGlvbiBvZiBPdXRsYXllci5JdGVtcywgZ2l2ZW4gRWxlbWVudHNcbiAqIEBwYXJhbSB7QXJyYXl9IGVsZW1zXG4gKiBAcmV0dXJucyB7QXJyYXl9IGl0ZW1zIC0gT3V0bGF5ZXIuSXRlbXNcbiAqL1xucHJvdG8uZ2V0SXRlbXMgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIGVsZW1zID0gdXRpbHMubWFrZUFycmF5KCBlbGVtcyApO1xuICB2YXIgaXRlbXMgPSBbXTtcbiAgZWxlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgdmFyIGl0ZW0gPSB0aGlzLmdldEl0ZW0oIGVsZW0gKTtcbiAgICBpZiAoIGl0ZW0gKSB7XG4gICAgICBpdGVtcy5wdXNoKCBpdGVtICk7XG4gICAgfVxuICB9LCB0aGlzICk7XG5cbiAgcmV0dXJuIGl0ZW1zO1xufTtcblxuLyoqXG4gKiByZW1vdmUgZWxlbWVudChzKSBmcm9tIGluc3RhbmNlIGFuZCBET01cbiAqIEBwYXJhbSB7QXJyYXkgb3IgTm9kZUxpc3Qgb3IgRWxlbWVudH0gZWxlbXNcbiAqL1xucHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICB2YXIgcmVtb3ZlSXRlbXMgPSB0aGlzLmdldEl0ZW1zKCBlbGVtcyApO1xuXG4gIHRoaXMuX2VtaXRDb21wbGV0ZU9uSXRlbXMoICdyZW1vdmUnLCByZW1vdmVJdGVtcyApO1xuXG4gIC8vIGJhaWwgaWYgbm8gaXRlbXMgdG8gcmVtb3ZlXG4gIGlmICggIXJlbW92ZUl0ZW1zIHx8ICFyZW1vdmVJdGVtcy5sZW5ndGggKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcmVtb3ZlSXRlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGl0ZW0gKSB7XG4gICAgaXRlbS5yZW1vdmUoKTtcbiAgICAvLyByZW1vdmUgaXRlbSBmcm9tIGNvbGxlY3Rpb25cbiAgICB1dGlscy5yZW1vdmVGcm9tKCB0aGlzLml0ZW1zLCBpdGVtICk7XG4gIH0sIHRoaXMgKTtcbn07XG5cbi8vIC0tLS0tIGRlc3Ryb3kgLS0tLS0gLy9cblxuLy8gcmVtb3ZlIGFuZCBkaXNhYmxlIE91dGxheWVyIGluc3RhbmNlXG5wcm90by5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gIC8vIGNsZWFuIHVwIGR5bmFtaWMgc3R5bGVzXG4gIHZhciBzdHlsZSA9IHRoaXMuZWxlbWVudC5zdHlsZTtcbiAgc3R5bGUuaGVpZ2h0ID0gJyc7XG4gIHN0eWxlLnBvc2l0aW9uID0gJyc7XG4gIHN0eWxlLndpZHRoID0gJyc7XG4gIC8vIGRlc3Ryb3kgaXRlbXNcbiAgdGhpcy5pdGVtcy5mb3JFYWNoKCBmdW5jdGlvbiggaXRlbSApIHtcbiAgICBpdGVtLmRlc3Ryb3koKTtcbiAgfSk7XG5cbiAgdGhpcy51bmJpbmRSZXNpemUoKTtcblxuICB2YXIgaWQgPSB0aGlzLmVsZW1lbnQub3V0bGF5ZXJHVUlEO1xuICBkZWxldGUgaW5zdGFuY2VzWyBpZCBdOyAvLyByZW1vdmUgcmVmZXJlbmNlIHRvIGluc3RhbmNlIGJ5IGlkXG4gIGRlbGV0ZSB0aGlzLmVsZW1lbnQub3V0bGF5ZXJHVUlEO1xuICAvLyByZW1vdmUgZGF0YSBmb3IgalF1ZXJ5XG4gIGlmICggalF1ZXJ5ICkge1xuICAgIGpRdWVyeS5yZW1vdmVEYXRhKCB0aGlzLmVsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IubmFtZXNwYWNlICk7XG4gIH1cblxufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZGF0YSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vKipcbiAqIGdldCBPdXRsYXllciBpbnN0YW5jZSBmcm9tIGVsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbVxuICogQHJldHVybnMge091dGxheWVyfVxuICovXG5PdXRsYXllci5kYXRhID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIGVsZW0gPSB1dGlscy5nZXRRdWVyeUVsZW1lbnQoIGVsZW0gKTtcbiAgdmFyIGlkID0gZWxlbSAmJiBlbGVtLm91dGxheWVyR1VJRDtcbiAgcmV0dXJuIGlkICYmIGluc3RhbmNlc1sgaWQgXTtcbn07XG5cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gY3JlYXRlIE91dGxheWVyIGNsYXNzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8qKlxuICogY3JlYXRlIGEgbGF5b3V0IGNsYXNzXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKi9cbk91dGxheWVyLmNyZWF0ZSA9IGZ1bmN0aW9uKCBuYW1lc3BhY2UsIG9wdGlvbnMgKSB7XG4gIC8vIHN1Yi1jbGFzcyBPdXRsYXllclxuICB2YXIgTGF5b3V0ID0gc3ViY2xhc3MoIE91dGxheWVyICk7XG4gIC8vIGFwcGx5IG5ldyBvcHRpb25zIGFuZCBjb21wYXRPcHRpb25zXG4gIExheW91dC5kZWZhdWx0cyA9IHV0aWxzLmV4dGVuZCgge30sIE91dGxheWVyLmRlZmF1bHRzICk7XG4gIHV0aWxzLmV4dGVuZCggTGF5b3V0LmRlZmF1bHRzLCBvcHRpb25zICk7XG4gIExheW91dC5jb21wYXRPcHRpb25zID0gdXRpbHMuZXh0ZW5kKCB7fSwgT3V0bGF5ZXIuY29tcGF0T3B0aW9ucyAgKTtcblxuICBMYXlvdXQubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuXG4gIExheW91dC5kYXRhID0gT3V0bGF5ZXIuZGF0YTtcblxuICAvLyBzdWItY2xhc3MgSXRlbVxuICBMYXlvdXQuSXRlbSA9IHN1YmNsYXNzKCBJdGVtICk7XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZGVjbGFyYXRpdmUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuICB1dGlscy5odG1sSW5pdCggTGF5b3V0LCBuYW1lc3BhY2UgKTtcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBqUXVlcnkgYnJpZGdlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbiAgLy8gbWFrZSBpbnRvIGpRdWVyeSBwbHVnaW5cbiAgaWYgKCBqUXVlcnkgJiYgalF1ZXJ5LmJyaWRnZXQgKSB7XG4gICAgalF1ZXJ5LmJyaWRnZXQoIG5hbWVzcGFjZSwgTGF5b3V0ICk7XG4gIH1cblxuICByZXR1cm4gTGF5b3V0O1xufTtcblxuZnVuY3Rpb24gc3ViY2xhc3MoIFBhcmVudCApIHtcbiAgZnVuY3Rpb24gU3ViQ2xhc3MoKSB7XG4gICAgUGFyZW50LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcbiAgfVxuXG4gIFN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFBhcmVudC5wcm90b3R5cGUgKTtcbiAgU3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ViQ2xhc3M7XG5cbiAgcmV0dXJuIFN1YkNsYXNzO1xufVxuXG4vLyAtLS0tLSBoZWxwZXJzIC0tLS0tIC8vXG5cbi8vIGhvdyBtYW55IG1pbGxpc2Vjb25kcyBhcmUgaW4gZWFjaCB1bml0XG52YXIgbXNVbml0cyA9IHtcbiAgbXM6IDEsXG4gIHM6IDEwMDBcbn07XG5cbi8vIG11bmdlIHRpbWUtbGlrZSBwYXJhbWV0ZXIgaW50byBtaWxsaXNlY29uZCBudW1iZXJcbi8vICcwLjRzJyAtPiA0MFxuZnVuY3Rpb24gZ2V0TWlsbGlzZWNvbmRzKCB0aW1lICkge1xuICBpZiAoIHR5cGVvZiB0aW1lID09ICdudW1iZXInICkge1xuICAgIHJldHVybiB0aW1lO1xuICB9XG4gIHZhciBtYXRjaGVzID0gdGltZS5tYXRjaCggLyheXFxkKlxcLj9cXGQqKShcXHcqKS8gKTtcbiAgdmFyIG51bSA9IG1hdGNoZXMgJiYgbWF0Y2hlc1sxXTtcbiAgdmFyIHVuaXQgPSBtYXRjaGVzICYmIG1hdGNoZXNbMl07XG4gIGlmICggIW51bS5sZW5ndGggKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgbnVtID0gcGFyc2VGbG9hdCggbnVtICk7XG4gIHZhciBtdWx0ID0gbXNVbml0c1sgdW5pdCBdIHx8IDE7XG4gIHJldHVybiBudW0gKiBtdWx0O1xufVxuXG4vLyAtLS0tLSBmaW4gLS0tLS0gLy9cblxuLy8gYmFjayBpbiBnbG9iYWxcbk91dGxheWVyLkl0ZW0gPSBJdGVtO1xuXG5yZXR1cm4gT3V0bGF5ZXI7XG5cbn0pKTtcblxuLyoqXG4gKiBJc290b3BlIEl0ZW1cbioqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKmdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHJlcXVpcmUgKi9cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoICdpc290b3BlLWxheW91dC9qcy9pdGVtJyxbXG4gICAgICAgICdvdXRsYXllci9vdXRsYXllcidcbiAgICAgIF0sXG4gICAgICBmYWN0b3J5ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICByZXF1aXJlKCdvdXRsYXllcicpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5Jc290b3BlID0gd2luZG93Lklzb3RvcGUgfHwge307XG4gICAgd2luZG93Lklzb3RvcGUuSXRlbSA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3cuT3V0bGF5ZXJcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggT3V0bGF5ZXIgKSB7XG4ndXNlIHN0cmljdCc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEl0ZW0gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLy8gc3ViLWNsYXNzIE91dGxheWVyIEl0ZW1cbmZ1bmN0aW9uIEl0ZW0oKSB7XG4gIE91dGxheWVyLkl0ZW0uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xufVxuXG52YXIgcHJvdG8gPSBJdGVtLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE91dGxheWVyLkl0ZW0ucHJvdG90eXBlICk7XG5cbnZhciBfY3JlYXRlID0gcHJvdG8uX2NyZWF0ZTtcbnByb3RvLl9jcmVhdGUgPSBmdW5jdGlvbigpIHtcbiAgLy8gYXNzaWduIGlkLCB1c2VkIGZvciBvcmlnaW5hbC1vcmRlciBzb3J0aW5nXG4gIHRoaXMuaWQgPSB0aGlzLmxheW91dC5pdGVtR1VJRCsrO1xuICBfY3JlYXRlLmNhbGwoIHRoaXMgKTtcbiAgdGhpcy5zb3J0RGF0YSA9IHt9O1xufTtcblxucHJvdG8udXBkYXRlU29ydERhdGEgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCB0aGlzLmlzSWdub3JlZCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gZGVmYXVsdCBzb3J0ZXJzXG4gIHRoaXMuc29ydERhdGEuaWQgPSB0aGlzLmlkO1xuICAvLyBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuICB0aGlzLnNvcnREYXRhWydvcmlnaW5hbC1vcmRlciddID0gdGhpcy5pZDtcbiAgdGhpcy5zb3J0RGF0YS5yYW5kb20gPSBNYXRoLnJhbmRvbSgpO1xuICAvLyBnbyB0aHJ1IGdldFNvcnREYXRhIG9iaiBhbmQgYXBwbHkgdGhlIHNvcnRlcnNcbiAgdmFyIGdldFNvcnREYXRhID0gdGhpcy5sYXlvdXQub3B0aW9ucy5nZXRTb3J0RGF0YTtcbiAgdmFyIHNvcnRlcnMgPSB0aGlzLmxheW91dC5fc29ydGVycztcbiAgZm9yICggdmFyIGtleSBpbiBnZXRTb3J0RGF0YSApIHtcbiAgICB2YXIgc29ydGVyID0gc29ydGVyc1sga2V5IF07XG4gICAgdGhpcy5zb3J0RGF0YVsga2V5IF0gPSBzb3J0ZXIoIHRoaXMuZWxlbWVudCwgdGhpcyApO1xuICB9XG59O1xuXG52YXIgX2Rlc3Ryb3kgPSBwcm90by5kZXN0cm95O1xucHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICAvLyBjYWxsIHN1cGVyXG4gIF9kZXN0cm95LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcbiAgLy8gcmVzZXQgZGlzcGxheSwgIzc0MVxuICB0aGlzLmNzcyh7XG4gICAgZGlzcGxheTogJydcbiAgfSk7XG59O1xuXG5yZXR1cm4gSXRlbTtcblxufSkpO1xuXG4vKipcbiAqIElzb3RvcGUgTGF5b3V0TW9kZVxuICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIC8qIGpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qZ2xvYmFscyBkZWZpbmUsIG1vZHVsZSwgcmVxdWlyZSAqL1xuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggJ2lzb3RvcGUtbGF5b3V0L2pzL2xheW91dC1tb2RlJyxbXG4gICAgICAgICdnZXQtc2l6ZS9nZXQtc2l6ZScsXG4gICAgICAgICdvdXRsYXllci9vdXRsYXllcidcbiAgICAgIF0sXG4gICAgICBmYWN0b3J5ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICByZXF1aXJlKCdnZXQtc2l6ZScpLFxuICAgICAgcmVxdWlyZSgnb3V0bGF5ZXInKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuSXNvdG9wZSA9IHdpbmRvdy5Jc290b3BlIHx8IHt9O1xuICAgIHdpbmRvdy5Jc290b3BlLkxheW91dE1vZGUgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LmdldFNpemUsXG4gICAgICB3aW5kb3cuT3V0bGF5ZXJcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggZ2V0U2l6ZSwgT3V0bGF5ZXIgKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBsYXlvdXQgbW9kZSBjbGFzc1xuICBmdW5jdGlvbiBMYXlvdXRNb2RlKCBpc290b3BlICkge1xuICAgIHRoaXMuaXNvdG9wZSA9IGlzb3RvcGU7XG4gICAgLy8gbGluayBwcm9wZXJ0aWVzXG4gICAgaWYgKCBpc290b3BlICkge1xuICAgICAgdGhpcy5vcHRpb25zID0gaXNvdG9wZS5vcHRpb25zWyB0aGlzLm5hbWVzcGFjZSBdO1xuICAgICAgdGhpcy5lbGVtZW50ID0gaXNvdG9wZS5lbGVtZW50O1xuICAgICAgdGhpcy5pdGVtcyA9IGlzb3RvcGUuZmlsdGVyZWRJdGVtcztcbiAgICAgIHRoaXMuc2l6ZSA9IGlzb3RvcGUuc2l6ZTtcbiAgICB9XG4gIH1cblxuICB2YXIgcHJvdG8gPSBMYXlvdXRNb2RlLnByb3RvdHlwZTtcblxuICAvKipcbiAgICogc29tZSBtZXRob2RzIHNob3VsZCBqdXN0IGRlZmVyIHRvIGRlZmF1bHQgT3V0bGF5ZXIgbWV0aG9kXG4gICAqIGFuZCByZWZlcmVuY2UgdGhlIElzb3RvcGUgaW5zdGFuY2UgYXMgYHRoaXNgXG4gICoqL1xuICB2YXIgZmFjYWRlTWV0aG9kcyA9IFtcbiAgICAnX3Jlc2V0TGF5b3V0JyxcbiAgICAnX2dldEl0ZW1MYXlvdXRQb3NpdGlvbicsXG4gICAgJ19tYW5hZ2VTdGFtcCcsXG4gICAgJ19nZXRDb250YWluZXJTaXplJyxcbiAgICAnX2dldEVsZW1lbnRPZmZzZXQnLFxuICAgICduZWVkc1Jlc2l6ZUxheW91dCcsXG4gICAgJ19nZXRPcHRpb24nXG4gIF07XG5cbiAgZmFjYWRlTWV0aG9kcy5mb3JFYWNoKCBmdW5jdGlvbiggbWV0aG9kTmFtZSApIHtcbiAgICBwcm90b1sgbWV0aG9kTmFtZSBdID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gT3V0bGF5ZXIucHJvdG90eXBlWyBtZXRob2ROYW1lIF0uYXBwbHkoIHRoaXMuaXNvdG9wZSwgYXJndW1lbnRzICk7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gLS0tLS0gIC0tLS0tIC8vXG5cbiAgLy8gZm9yIGhvcml6b250YWwgbGF5b3V0IG1vZGVzLCBjaGVjayB2ZXJ0aWNhbCBzaXplXG4gIHByb3RvLm5lZWRzVmVydGljYWxSZXNpemVMYXlvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBkb24ndCB0cmlnZ2VyIGlmIHNpemUgZGlkIG5vdCBjaGFuZ2VcbiAgICB2YXIgc2l6ZSA9IGdldFNpemUoIHRoaXMuaXNvdG9wZS5lbGVtZW50ICk7XG4gICAgLy8gY2hlY2sgdGhhdCB0aGlzLnNpemUgYW5kIHNpemUgYXJlIHRoZXJlXG4gICAgLy8gSUU4IHRyaWdnZXJzIHJlc2l6ZSBvbiBib2R5IHNpemUgY2hhbmdlLCBzbyB0aGV5IG1pZ2h0IG5vdCBiZVxuICAgIHZhciBoYXNTaXplcyA9IHRoaXMuaXNvdG9wZS5zaXplICYmIHNpemU7XG4gICAgcmV0dXJuIGhhc1NpemVzICYmIHNpemUuaW5uZXJIZWlnaHQgIT0gdGhpcy5pc290b3BlLnNpemUuaW5uZXJIZWlnaHQ7XG4gIH07XG5cbiAgLy8gLS0tLS0gbWVhc3VyZW1lbnRzIC0tLS0tIC8vXG5cbiAgcHJvdG8uX2dldE1lYXN1cmVtZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pc290b3BlLl9nZXRNZWFzdXJlbWVudC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG4gIH07XG5cbiAgcHJvdG8uZ2V0Q29sdW1uV2lkdGggPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmdldFNlZ21lbnRTaXplKCAnY29sdW1uJywgJ1dpZHRoJyApO1xuICB9O1xuXG4gIHByb3RvLmdldFJvd0hlaWdodCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuZ2V0U2VnbWVudFNpemUoICdyb3cnLCAnSGVpZ2h0JyApO1xuICB9O1xuXG4gIC8qKlxuICAgKiBnZXQgY29sdW1uV2lkdGggb3Igcm93SGVpZ2h0XG4gICAqIHNlZ21lbnQ6ICdjb2x1bW4nIG9yICdyb3cnXG4gICAqIHNpemUgJ1dpZHRoJyBvciAnSGVpZ2h0J1xuICAqKi9cbiAgcHJvdG8uZ2V0U2VnbWVudFNpemUgPSBmdW5jdGlvbiggc2VnbWVudCwgc2l6ZSApIHtcbiAgICB2YXIgc2VnbWVudE5hbWUgPSBzZWdtZW50ICsgc2l6ZTtcbiAgICB2YXIgb3V0ZXJTaXplID0gJ291dGVyJyArIHNpemU7XG4gICAgLy8gY29sdW1uV2lkdGggLyBvdXRlcldpZHRoIC8vIHJvd0hlaWdodCAvIG91dGVySGVpZ2h0XG4gICAgdGhpcy5fZ2V0TWVhc3VyZW1lbnQoIHNlZ21lbnROYW1lLCBvdXRlclNpemUgKTtcbiAgICAvLyBnb3Qgcm93SGVpZ2h0IG9yIGNvbHVtbldpZHRoLCB3ZSBjYW4gY2hpbGxcbiAgICBpZiAoIHRoaXNbIHNlZ21lbnROYW1lIF0gKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGZhbGwgYmFjayB0byBpdGVtIG9mIGZpcnN0IGVsZW1lbnRcbiAgICB2YXIgZmlyc3RJdGVtU2l6ZSA9IHRoaXMuZ2V0Rmlyc3RJdGVtU2l6ZSgpO1xuICAgIHRoaXNbIHNlZ21lbnROYW1lIF0gPSBmaXJzdEl0ZW1TaXplICYmIGZpcnN0SXRlbVNpemVbIG91dGVyU2l6ZSBdIHx8XG4gICAgICAvLyBvciBzaXplIG9mIGNvbnRhaW5lclxuICAgICAgdGhpcy5pc290b3BlLnNpemVbICdpbm5lcicgKyBzaXplIF07XG4gIH07XG5cbiAgcHJvdG8uZ2V0Rmlyc3RJdGVtU2l6ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBmaXJzdEl0ZW0gPSB0aGlzLmlzb3RvcGUuZmlsdGVyZWRJdGVtc1swXTtcbiAgICByZXR1cm4gZmlyc3RJdGVtICYmIGZpcnN0SXRlbS5lbGVtZW50ICYmIGdldFNpemUoIGZpcnN0SXRlbS5lbGVtZW50ICk7XG4gIH07XG5cbiAgLy8gLS0tLS0gbWV0aG9kcyB0aGF0IHNob3VsZCByZWZlcmVuY2UgaXNvdG9wZSAtLS0tLSAvL1xuXG4gIHByb3RvLmxheW91dCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaXNvdG9wZS5sYXlvdXQuYXBwbHkoIHRoaXMuaXNvdG9wZSwgYXJndW1lbnRzICk7XG4gIH07XG5cbiAgcHJvdG8uZ2V0U2l6ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaXNvdG9wZS5nZXRTaXplKCk7XG4gICAgdGhpcy5zaXplID0gdGhpcy5pc290b3BlLnNpemU7XG4gIH07XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gY3JlYXRlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbiAgTGF5b3V0TW9kZS5tb2RlcyA9IHt9O1xuXG4gIExheW91dE1vZGUuY3JlYXRlID0gZnVuY3Rpb24oIG5hbWVzcGFjZSwgb3B0aW9ucyApIHtcblxuICAgIGZ1bmN0aW9uIE1vZGUoKSB7XG4gICAgICBMYXlvdXRNb2RlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcbiAgICB9XG5cbiAgICBNb2RlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIHByb3RvICk7XG4gICAgTW9kZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNb2RlO1xuXG4gICAgLy8gZGVmYXVsdCBvcHRpb25zXG4gICAgaWYgKCBvcHRpb25zICkge1xuICAgICAgTW9kZS5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG5cbiAgICBNb2RlLnByb3RvdHlwZS5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG4gICAgLy8gcmVnaXN0ZXIgaW4gSXNvdG9wZVxuICAgIExheW91dE1vZGUubW9kZXNbIG5hbWVzcGFjZSBdID0gTW9kZTtcblxuICAgIHJldHVybiBNb2RlO1xuICB9O1xuXG4gIHJldHVybiBMYXlvdXRNb2RlO1xuXG59KSk7XG5cbi8qIVxuICogTWFzb25yeSB2NC4yLjFcbiAqIENhc2NhZGluZyBncmlkIGxheW91dCBsaWJyYXJ5XG4gKiBodHRwczovL21hc29ucnkuZGVzYW5kcm8uY29tXG4gKiBNSVQgTGljZW5zZVxuICogYnkgRGF2aWQgRGVTYW5kcm9cbiAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKmdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHJlcXVpcmUgKi9cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoICdtYXNvbnJ5LWxheW91dC9tYXNvbnJ5JyxbXG4gICAgICAgICdvdXRsYXllci9vdXRsYXllcicsXG4gICAgICAgICdnZXQtc2l6ZS9nZXQtc2l6ZSdcbiAgICAgIF0sXG4gICAgICBmYWN0b3J5ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICByZXF1aXJlKCdvdXRsYXllcicpLFxuICAgICAgcmVxdWlyZSgnZ2V0LXNpemUnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuTWFzb25yeSA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3cuT3V0bGF5ZXIsXG4gICAgICB3aW5kb3cuZ2V0U2l6ZVxuICAgICk7XG4gIH1cblxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCBPdXRsYXllciwgZ2V0U2l6ZSApIHtcblxuXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIG1hc29ucnlEZWZpbml0aW9uIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbiAgLy8gY3JlYXRlIGFuIE91dGxheWVyIGxheW91dCBjbGFzc1xuICB2YXIgTWFzb25yeSA9IE91dGxheWVyLmNyZWF0ZSgnbWFzb25yeScpO1xuICAvLyBpc0ZpdFdpZHRoIC0+IGZpdFdpZHRoXG4gIE1hc29ucnkuY29tcGF0T3B0aW9ucy5maXRXaWR0aCA9ICdpc0ZpdFdpZHRoJztcblxuICB2YXIgcHJvdG8gPSBNYXNvbnJ5LnByb3RvdHlwZTtcblxuICBwcm90by5fcmVzZXRMYXlvdXQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmdldFNpemUoKTtcbiAgICB0aGlzLl9nZXRNZWFzdXJlbWVudCggJ2NvbHVtbldpZHRoJywgJ291dGVyV2lkdGgnICk7XG4gICAgdGhpcy5fZ2V0TWVhc3VyZW1lbnQoICdndXR0ZXInLCAnb3V0ZXJXaWR0aCcgKTtcbiAgICB0aGlzLm1lYXN1cmVDb2x1bW5zKCk7XG5cbiAgICAvLyByZXNldCBjb2x1bW4gWVxuICAgIHRoaXMuY29sWXMgPSBbXTtcbiAgICBmb3IgKCB2YXIgaT0wOyBpIDwgdGhpcy5jb2xzOyBpKysgKSB7XG4gICAgICB0aGlzLmNvbFlzLnB1c2goIDAgKTtcbiAgICB9XG5cbiAgICB0aGlzLm1heFkgPSAwO1xuICAgIHRoaXMuaG9yaXpvbnRhbENvbEluZGV4ID0gMDtcbiAgfTtcblxuICBwcm90by5tZWFzdXJlQ29sdW1ucyA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuZ2V0Q29udGFpbmVyV2lkdGgoKTtcbiAgICAvLyBpZiBjb2x1bW5XaWR0aCBpcyAwLCBkZWZhdWx0IHRvIG91dGVyV2lkdGggb2YgZmlyc3QgaXRlbVxuICAgIGlmICggIXRoaXMuY29sdW1uV2lkdGggKSB7XG4gICAgICB2YXIgZmlyc3RJdGVtID0gdGhpcy5pdGVtc1swXTtcbiAgICAgIHZhciBmaXJzdEl0ZW1FbGVtID0gZmlyc3RJdGVtICYmIGZpcnN0SXRlbS5lbGVtZW50O1xuICAgICAgLy8gY29sdW1uV2lkdGggZmFsbCBiYWNrIHRvIGl0ZW0gb2YgZmlyc3QgZWxlbWVudFxuICAgICAgdGhpcy5jb2x1bW5XaWR0aCA9IGZpcnN0SXRlbUVsZW0gJiYgZ2V0U2l6ZSggZmlyc3RJdGVtRWxlbSApLm91dGVyV2lkdGggfHxcbiAgICAgICAgLy8gaWYgZmlyc3QgZWxlbSBoYXMgbm8gd2lkdGgsIGRlZmF1bHQgdG8gc2l6ZSBvZiBjb250YWluZXJcbiAgICAgICAgdGhpcy5jb250YWluZXJXaWR0aDtcbiAgICB9XG5cbiAgICB2YXIgY29sdW1uV2lkdGggPSB0aGlzLmNvbHVtbldpZHRoICs9IHRoaXMuZ3V0dGVyO1xuXG4gICAgLy8gY2FsY3VsYXRlIGNvbHVtbnNcbiAgICB2YXIgY29udGFpbmVyV2lkdGggPSB0aGlzLmNvbnRhaW5lcldpZHRoICsgdGhpcy5ndXR0ZXI7XG4gICAgdmFyIGNvbHMgPSBjb250YWluZXJXaWR0aCAvIGNvbHVtbldpZHRoO1xuICAgIC8vIGZpeCByb3VuZGluZyBlcnJvcnMsIHR5cGljYWxseSB3aXRoIGd1dHRlcnNcbiAgICB2YXIgZXhjZXNzID0gY29sdW1uV2lkdGggLSBjb250YWluZXJXaWR0aCAlIGNvbHVtbldpZHRoO1xuICAgIC8vIGlmIG92ZXJzaG9vdCBpcyBsZXNzIHRoYW4gYSBwaXhlbCwgcm91bmQgdXAsIG90aGVyd2lzZSBmbG9vciBpdFxuICAgIHZhciBtYXRoTWV0aG9kID0gZXhjZXNzICYmIGV4Y2VzcyA8IDEgPyAncm91bmQnIDogJ2Zsb29yJztcbiAgICBjb2xzID0gTWF0aFsgbWF0aE1ldGhvZCBdKCBjb2xzICk7XG4gICAgdGhpcy5jb2xzID0gTWF0aC5tYXgoIGNvbHMsIDEgKTtcbiAgfTtcblxuICBwcm90by5nZXRDb250YWluZXJXaWR0aCA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIGNvbnRhaW5lciBpcyBwYXJlbnQgaWYgZml0IHdpZHRoXG4gICAgdmFyIGlzRml0V2lkdGggPSB0aGlzLl9nZXRPcHRpb24oJ2ZpdFdpZHRoJyk7XG4gICAgdmFyIGNvbnRhaW5lciA9IGlzRml0V2lkdGggPyB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZSA6IHRoaXMuZWxlbWVudDtcbiAgICAvLyBjaGVjayB0aGF0IHRoaXMuc2l6ZSBhbmQgc2l6ZSBhcmUgdGhlcmVcbiAgICAvLyBJRTggdHJpZ2dlcnMgcmVzaXplIG9uIGJvZHkgc2l6ZSBjaGFuZ2UsIHNvIHRoZXkgbWlnaHQgbm90IGJlXG4gICAgdmFyIHNpemUgPSBnZXRTaXplKCBjb250YWluZXIgKTtcbiAgICB0aGlzLmNvbnRhaW5lcldpZHRoID0gc2l6ZSAmJiBzaXplLmlubmVyV2lkdGg7XG4gIH07XG5cbiAgcHJvdG8uX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCBpdGVtICkge1xuICAgIGl0ZW0uZ2V0U2l6ZSgpO1xuICAgIC8vIGhvdyBtYW55IGNvbHVtbnMgZG9lcyB0aGlzIGJyaWNrIHNwYW5cbiAgICB2YXIgcmVtYWluZGVyID0gaXRlbS5zaXplLm91dGVyV2lkdGggJSB0aGlzLmNvbHVtbldpZHRoO1xuICAgIHZhciBtYXRoTWV0aG9kID0gcmVtYWluZGVyICYmIHJlbWFpbmRlciA8IDEgPyAncm91bmQnIDogJ2NlaWwnO1xuICAgIC8vIHJvdW5kIGlmIG9mZiBieSAxIHBpeGVsLCBvdGhlcndpc2UgdXNlIGNlaWxcbiAgICB2YXIgY29sU3BhbiA9IE1hdGhbIG1hdGhNZXRob2QgXSggaXRlbS5zaXplLm91dGVyV2lkdGggLyB0aGlzLmNvbHVtbldpZHRoICk7XG4gICAgY29sU3BhbiA9IE1hdGgubWluKCBjb2xTcGFuLCB0aGlzLmNvbHMgKTtcbiAgICAvLyB1c2UgaG9yaXpvbnRhbCBvciB0b3AgY29sdW1uIHBvc2l0aW9uXG4gICAgdmFyIGNvbFBvc01ldGhvZCA9IHRoaXMub3B0aW9ucy5ob3Jpem9udGFsT3JkZXIgP1xuICAgICAgJ19nZXRIb3Jpem9udGFsQ29sUG9zaXRpb24nIDogJ19nZXRUb3BDb2xQb3NpdGlvbic7XG4gICAgdmFyIGNvbFBvc2l0aW9uID0gdGhpc1sgY29sUG9zTWV0aG9kIF0oIGNvbFNwYW4sIGl0ZW0gKTtcbiAgICAvLyBwb3NpdGlvbiB0aGUgYnJpY2tcbiAgICB2YXIgcG9zaXRpb24gPSB7XG4gICAgICB4OiB0aGlzLmNvbHVtbldpZHRoICogY29sUG9zaXRpb24uY29sLFxuICAgICAgeTogY29sUG9zaXRpb24ueVxuICAgIH07XG4gICAgLy8gYXBwbHkgc2V0SGVpZ2h0IHRvIG5lY2Vzc2FyeSBjb2x1bW5zXG4gICAgdmFyIHNldEhlaWdodCA9IGNvbFBvc2l0aW9uLnkgKyBpdGVtLnNpemUub3V0ZXJIZWlnaHQ7XG4gICAgdmFyIHNldE1heCA9IGNvbFNwYW4gKyBjb2xQb3NpdGlvbi5jb2w7XG4gICAgZm9yICggdmFyIGkgPSBjb2xQb3NpdGlvbi5jb2w7IGkgPCBzZXRNYXg7IGkrKyApIHtcbiAgICAgIHRoaXMuY29sWXNbaV0gPSBzZXRIZWlnaHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBvc2l0aW9uO1xuICB9O1xuXG4gIHByb3RvLl9nZXRUb3BDb2xQb3NpdGlvbiA9IGZ1bmN0aW9uKCBjb2xTcGFuICkge1xuICAgIHZhciBjb2xHcm91cCA9IHRoaXMuX2dldFRvcENvbEdyb3VwKCBjb2xTcGFuICk7XG4gICAgLy8gZ2V0IHRoZSBtaW5pbXVtIFkgdmFsdWUgZnJvbSB0aGUgY29sdW1uc1xuICAgIHZhciBtaW5pbXVtWSA9IE1hdGgubWluLmFwcGx5KCBNYXRoLCBjb2xHcm91cCApO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbDogY29sR3JvdXAuaW5kZXhPZiggbWluaW11bVkgKSxcbiAgICAgIHk6IG1pbmltdW1ZLFxuICAgIH07XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBjb2xTcGFuIC0gbnVtYmVyIG9mIGNvbHVtbnMgdGhlIGVsZW1lbnQgc3BhbnNcbiAgICogQHJldHVybnMge0FycmF5fSBjb2xHcm91cFxuICAgKi9cbiAgcHJvdG8uX2dldFRvcENvbEdyb3VwID0gZnVuY3Rpb24oIGNvbFNwYW4gKSB7XG4gICAgaWYgKCBjb2xTcGFuIDwgMiApIHtcbiAgICAgIC8vIGlmIGJyaWNrIHNwYW5zIG9ubHkgb25lIGNvbHVtbiwgdXNlIGFsbCB0aGUgY29sdW1uIFlzXG4gICAgICByZXR1cm4gdGhpcy5jb2xZcztcbiAgICB9XG5cbiAgICB2YXIgY29sR3JvdXAgPSBbXTtcbiAgICAvLyBob3cgbWFueSBkaWZmZXJlbnQgcGxhY2VzIGNvdWxkIHRoaXMgYnJpY2sgZml0IGhvcml6b250YWxseVxuICAgIHZhciBncm91cENvdW50ID0gdGhpcy5jb2xzICsgMSAtIGNvbFNwYW47XG4gICAgLy8gZm9yIGVhY2ggZ3JvdXAgcG90ZW50aWFsIGhvcml6b250YWwgcG9zaXRpb25cbiAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBncm91cENvdW50OyBpKysgKSB7XG4gICAgICBjb2xHcm91cFtpXSA9IHRoaXMuX2dldENvbEdyb3VwWSggaSwgY29sU3BhbiApO1xuICAgIH1cbiAgICByZXR1cm4gY29sR3JvdXA7XG4gIH07XG5cbiAgcHJvdG8uX2dldENvbEdyb3VwWSA9IGZ1bmN0aW9uKCBjb2wsIGNvbFNwYW4gKSB7XG4gICAgaWYgKCBjb2xTcGFuIDwgMiApIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbFlzWyBjb2wgXTtcbiAgICB9XG4gICAgLy8gbWFrZSBhbiBhcnJheSBvZiBjb2xZIHZhbHVlcyBmb3IgdGhhdCBvbmUgZ3JvdXBcbiAgICB2YXIgZ3JvdXBDb2xZcyA9IHRoaXMuY29sWXMuc2xpY2UoIGNvbCwgY29sICsgY29sU3BhbiApO1xuICAgIC8vIGFuZCBnZXQgdGhlIG1heCB2YWx1ZSBvZiB0aGUgYXJyYXlcbiAgICByZXR1cm4gTWF0aC5tYXguYXBwbHkoIE1hdGgsIGdyb3VwQ29sWXMgKTtcbiAgfTtcblxuICAvLyBnZXQgY29sdW1uIHBvc2l0aW9uIGJhc2VkIG9uIGhvcml6b250YWwgaW5kZXguICM4NzNcbiAgcHJvdG8uX2dldEhvcml6b250YWxDb2xQb3NpdGlvbiA9IGZ1bmN0aW9uKCBjb2xTcGFuLCBpdGVtICkge1xuICAgIHZhciBjb2wgPSB0aGlzLmhvcml6b250YWxDb2xJbmRleCAlIHRoaXMuY29scztcbiAgICB2YXIgaXNPdmVyID0gY29sU3BhbiA+IDEgJiYgY29sICsgY29sU3BhbiA+IHRoaXMuY29scztcbiAgICAvLyBzaGlmdCB0byBuZXh0IHJvdyBpZiBpdGVtIGNhbid0IGZpdCBvbiBjdXJyZW50IHJvd1xuICAgIGNvbCA9IGlzT3ZlciA/IDAgOiBjb2w7XG4gICAgLy8gZG9uJ3QgbGV0IHplcm8tc2l6ZSBpdGVtcyB0YWtlIHVwIHNwYWNlXG4gICAgdmFyIGhhc1NpemUgPSBpdGVtLnNpemUub3V0ZXJXaWR0aCAmJiBpdGVtLnNpemUub3V0ZXJIZWlnaHQ7XG4gICAgdGhpcy5ob3Jpem9udGFsQ29sSW5kZXggPSBoYXNTaXplID8gY29sICsgY29sU3BhbiA6IHRoaXMuaG9yaXpvbnRhbENvbEluZGV4O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbDogY29sLFxuICAgICAgeTogdGhpcy5fZ2V0Q29sR3JvdXBZKCBjb2wsIGNvbFNwYW4gKSxcbiAgICB9O1xuICB9O1xuXG4gIHByb3RvLl9tYW5hZ2VTdGFtcCA9IGZ1bmN0aW9uKCBzdGFtcCApIHtcbiAgICB2YXIgc3RhbXBTaXplID0gZ2V0U2l6ZSggc3RhbXAgKTtcbiAgICB2YXIgb2Zmc2V0ID0gdGhpcy5fZ2V0RWxlbWVudE9mZnNldCggc3RhbXAgKTtcbiAgICAvLyBnZXQgdGhlIGNvbHVtbnMgdGhhdCB0aGlzIHN0YW1wIGFmZmVjdHNcbiAgICB2YXIgaXNPcmlnaW5MZWZ0ID0gdGhpcy5fZ2V0T3B0aW9uKCdvcmlnaW5MZWZ0Jyk7XG4gICAgdmFyIGZpcnN0WCA9IGlzT3JpZ2luTGVmdCA/IG9mZnNldC5sZWZ0IDogb2Zmc2V0LnJpZ2h0O1xuICAgIHZhciBsYXN0WCA9IGZpcnN0WCArIHN0YW1wU2l6ZS5vdXRlcldpZHRoO1xuICAgIHZhciBmaXJzdENvbCA9IE1hdGguZmxvb3IoIGZpcnN0WCAvIHRoaXMuY29sdW1uV2lkdGggKTtcbiAgICBmaXJzdENvbCA9IE1hdGgubWF4KCAwLCBmaXJzdENvbCApO1xuICAgIHZhciBsYXN0Q29sID0gTWF0aC5mbG9vciggbGFzdFggLyB0aGlzLmNvbHVtbldpZHRoICk7XG4gICAgLy8gbGFzdENvbCBzaG91bGQgbm90IGdvIG92ZXIgaWYgbXVsdGlwbGUgb2YgY29sdW1uV2lkdGggIzQyNVxuICAgIGxhc3RDb2wgLT0gbGFzdFggJSB0aGlzLmNvbHVtbldpZHRoID8gMCA6IDE7XG4gICAgbGFzdENvbCA9IE1hdGgubWluKCB0aGlzLmNvbHMgLSAxLCBsYXN0Q29sICk7XG4gICAgLy8gc2V0IGNvbFlzIHRvIGJvdHRvbSBvZiB0aGUgc3RhbXBcblxuICAgIHZhciBpc09yaWdpblRvcCA9IHRoaXMuX2dldE9wdGlvbignb3JpZ2luVG9wJyk7XG4gICAgdmFyIHN0YW1wTWF4WSA9ICggaXNPcmlnaW5Ub3AgPyBvZmZzZXQudG9wIDogb2Zmc2V0LmJvdHRvbSApICtcbiAgICAgIHN0YW1wU2l6ZS5vdXRlckhlaWdodDtcbiAgICBmb3IgKCB2YXIgaSA9IGZpcnN0Q29sOyBpIDw9IGxhc3RDb2w7IGkrKyApIHtcbiAgICAgIHRoaXMuY29sWXNbaV0gPSBNYXRoLm1heCggc3RhbXBNYXhZLCB0aGlzLmNvbFlzW2ldICk7XG4gICAgfVxuICB9O1xuXG4gIHByb3RvLl9nZXRDb250YWluZXJTaXplID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5tYXhZID0gTWF0aC5tYXguYXBwbHkoIE1hdGgsIHRoaXMuY29sWXMgKTtcbiAgICB2YXIgc2l6ZSA9IHtcbiAgICAgIGhlaWdodDogdGhpcy5tYXhZXG4gICAgfTtcblxuICAgIGlmICggdGhpcy5fZ2V0T3B0aW9uKCdmaXRXaWR0aCcpICkge1xuICAgICAgc2l6ZS53aWR0aCA9IHRoaXMuX2dldENvbnRhaW5lckZpdFdpZHRoKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNpemU7XG4gIH07XG5cbiAgcHJvdG8uX2dldENvbnRhaW5lckZpdFdpZHRoID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHVudXNlZENvbHMgPSAwO1xuICAgIC8vIGNvdW50IHVudXNlZCBjb2x1bW5zXG4gICAgdmFyIGkgPSB0aGlzLmNvbHM7XG4gICAgd2hpbGUgKCAtLWkgKSB7XG4gICAgICBpZiAoIHRoaXMuY29sWXNbaV0gIT09IDAgKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgdW51c2VkQ29scysrO1xuICAgIH1cbiAgICAvLyBmaXQgY29udGFpbmVyIHRvIGNvbHVtbnMgdGhhdCBoYXZlIGJlZW4gdXNlZFxuICAgIHJldHVybiAoIHRoaXMuY29scyAtIHVudXNlZENvbHMgKSAqIHRoaXMuY29sdW1uV2lkdGggLSB0aGlzLmd1dHRlcjtcbiAgfTtcblxuICBwcm90by5uZWVkc1Jlc2l6ZUxheW91dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwcmV2aW91c1dpZHRoID0gdGhpcy5jb250YWluZXJXaWR0aDtcbiAgICB0aGlzLmdldENvbnRhaW5lcldpZHRoKCk7XG4gICAgcmV0dXJuIHByZXZpb3VzV2lkdGggIT0gdGhpcy5jb250YWluZXJXaWR0aDtcbiAgfTtcblxuICByZXR1cm4gTWFzb25yeTtcblxufSkpO1xuXG4vKiFcbiAqIE1hc29ucnkgbGF5b3V0IG1vZGVcbiAqIHN1Yi1jbGFzc2VzIE1hc29ucnlcbiAqIGh0dHBzOi8vbWFzb25yeS5kZXNhbmRyby5jb21cbiAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKmdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHJlcXVpcmUgKi9cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoICdpc290b3BlLWxheW91dC9qcy9sYXlvdXQtbW9kZXMvbWFzb25yeScsW1xuICAgICAgICAnLi4vbGF5b3V0LW1vZGUnLFxuICAgICAgICAnbWFzb25yeS1sYXlvdXQvbWFzb25yeSdcbiAgICAgIF0sXG4gICAgICBmYWN0b3J5ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICByZXF1aXJlKCcuLi9sYXlvdXQtbW9kZScpLFxuICAgICAgcmVxdWlyZSgnbWFzb25yeS1sYXlvdXQnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICBmYWN0b3J5KFxuICAgICAgd2luZG93Lklzb3RvcGUuTGF5b3V0TW9kZSxcbiAgICAgIHdpbmRvdy5NYXNvbnJ5XG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIExheW91dE1vZGUsIE1hc29ucnkgKSB7XG4ndXNlIHN0cmljdCc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIG1hc29ucnlEZWZpbml0aW9uIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbiAgLy8gY3JlYXRlIGFuIE91dGxheWVyIGxheW91dCBjbGFzc1xuICB2YXIgTWFzb25yeU1vZGUgPSBMYXlvdXRNb2RlLmNyZWF0ZSgnbWFzb25yeScpO1xuXG4gIHZhciBwcm90byA9IE1hc29ucnlNb2RlLnByb3RvdHlwZTtcblxuICB2YXIga2VlcE1vZGVNZXRob2RzID0ge1xuICAgIF9nZXRFbGVtZW50T2Zmc2V0OiB0cnVlLFxuICAgIGxheW91dDogdHJ1ZSxcbiAgICBfZ2V0TWVhc3VyZW1lbnQ6IHRydWVcbiAgfTtcblxuICAvLyBpbmhlcml0IE1hc29ucnkgcHJvdG90eXBlXG4gIGZvciAoIHZhciBtZXRob2QgaW4gTWFzb25yeS5wcm90b3R5cGUgKSB7XG4gICAgLy8gZG8gbm90IGluaGVyaXQgbW9kZSBtZXRob2RzXG4gICAgaWYgKCAha2VlcE1vZGVNZXRob2RzWyBtZXRob2QgXSApIHtcbiAgICAgIHByb3RvWyBtZXRob2QgXSA9IE1hc29ucnkucHJvdG90eXBlWyBtZXRob2QgXTtcbiAgICB9XG4gIH1cblxuICB2YXIgbWVhc3VyZUNvbHVtbnMgPSBwcm90by5tZWFzdXJlQ29sdW1ucztcbiAgcHJvdG8ubWVhc3VyZUNvbHVtbnMgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBzZXQgaXRlbXMsIHVzZWQgaWYgbWVhc3VyaW5nIGZpcnN0IGl0ZW1cbiAgICB0aGlzLml0ZW1zID0gdGhpcy5pc290b3BlLmZpbHRlcmVkSXRlbXM7XG4gICAgbWVhc3VyZUNvbHVtbnMuY2FsbCggdGhpcyApO1xuICB9O1xuXG4gIC8vIHBvaW50IHRvIG1vZGUgb3B0aW9ucyBmb3IgZml0V2lkdGhcbiAgdmFyIF9nZXRPcHRpb24gPSBwcm90by5fZ2V0T3B0aW9uO1xuICBwcm90by5fZ2V0T3B0aW9uID0gZnVuY3Rpb24oIG9wdGlvbiApIHtcbiAgICBpZiAoIG9wdGlvbiA9PSAnZml0V2lkdGgnICkge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5pc0ZpdFdpZHRoICE9PSB1bmRlZmluZWQgP1xuICAgICAgICB0aGlzLm9wdGlvbnMuaXNGaXRXaWR0aCA6IHRoaXMub3B0aW9ucy5maXRXaWR0aDtcbiAgICB9XG4gICAgcmV0dXJuIF9nZXRPcHRpb24uYXBwbHkoIHRoaXMuaXNvdG9wZSwgYXJndW1lbnRzICk7XG4gIH07XG5cbiAgcmV0dXJuIE1hc29ucnlNb2RlO1xuXG59KSk7XG5cbi8qKlxuICogZml0Um93cyBsYXlvdXQgbW9kZVxuICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIC8qIGpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qZ2xvYmFscyBkZWZpbmUsIG1vZHVsZSwgcmVxdWlyZSAqL1xuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggJ2lzb3RvcGUtbGF5b3V0L2pzL2xheW91dC1tb2Rlcy9maXQtcm93cycsW1xuICAgICAgICAnLi4vbGF5b3V0LW1vZGUnXG4gICAgICBdLFxuICAgICAgZmFjdG9yeSApO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgIHJlcXVpcmUoJy4uL2xheW91dC1tb2RlJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgZmFjdG9yeShcbiAgICAgIHdpbmRvdy5Jc290b3BlLkxheW91dE1vZGVcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggTGF5b3V0TW9kZSApIHtcbid1c2Ugc3RyaWN0JztcblxudmFyIEZpdFJvd3MgPSBMYXlvdXRNb2RlLmNyZWF0ZSgnZml0Um93cycpO1xuXG52YXIgcHJvdG8gPSBGaXRSb3dzLnByb3RvdHlwZTtcblxucHJvdG8uX3Jlc2V0TGF5b3V0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMueCA9IDA7XG4gIHRoaXMueSA9IDA7XG4gIHRoaXMubWF4WSA9IDA7XG4gIHRoaXMuX2dldE1lYXN1cmVtZW50KCAnZ3V0dGVyJywgJ291dGVyV2lkdGgnICk7XG59O1xuXG5wcm90by5fZ2V0SXRlbUxheW91dFBvc2l0aW9uID0gZnVuY3Rpb24oIGl0ZW0gKSB7XG4gIGl0ZW0uZ2V0U2l6ZSgpO1xuXG4gIHZhciBpdGVtV2lkdGggPSBpdGVtLnNpemUub3V0ZXJXaWR0aCArIHRoaXMuZ3V0dGVyO1xuICAvLyBpZiB0aGlzIGVsZW1lbnQgY2Fubm90IGZpdCBpbiB0aGUgY3VycmVudCByb3dcbiAgdmFyIGNvbnRhaW5lcldpZHRoID0gdGhpcy5pc290b3BlLnNpemUuaW5uZXJXaWR0aCArIHRoaXMuZ3V0dGVyO1xuICBpZiAoIHRoaXMueCAhPT0gMCAmJiBpdGVtV2lkdGggKyB0aGlzLnggPiBjb250YWluZXJXaWR0aCApIHtcbiAgICB0aGlzLnggPSAwO1xuICAgIHRoaXMueSA9IHRoaXMubWF4WTtcbiAgfVxuXG4gIHZhciBwb3NpdGlvbiA9IHtcbiAgICB4OiB0aGlzLngsXG4gICAgeTogdGhpcy55XG4gIH07XG5cbiAgdGhpcy5tYXhZID0gTWF0aC5tYXgoIHRoaXMubWF4WSwgdGhpcy55ICsgaXRlbS5zaXplLm91dGVySGVpZ2h0ICk7XG4gIHRoaXMueCArPSBpdGVtV2lkdGg7XG5cbiAgcmV0dXJuIHBvc2l0aW9uO1xufTtcblxucHJvdG8uX2dldENvbnRhaW5lclNpemUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHsgaGVpZ2h0OiB0aGlzLm1heFkgfTtcbn07XG5cbnJldHVybiBGaXRSb3dzO1xuXG59KSk7XG5cbi8qKlxuICogdmVydGljYWwgbGF5b3V0IG1vZGVcbiAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKmdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHJlcXVpcmUgKi9cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoICdpc290b3BlLWxheW91dC9qcy9sYXlvdXQtbW9kZXMvdmVydGljYWwnLFtcbiAgICAgICAgJy4uL2xheW91dC1tb2RlJ1xuICAgICAgXSxcbiAgICAgIGZhY3RvcnkgKTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgIHJlcXVpcmUoJy4uL2xheW91dC1tb2RlJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgZmFjdG9yeShcbiAgICAgIHdpbmRvdy5Jc290b3BlLkxheW91dE1vZGVcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggTGF5b3V0TW9kZSApIHtcbid1c2Ugc3RyaWN0JztcblxudmFyIFZlcnRpY2FsID0gTGF5b3V0TW9kZS5jcmVhdGUoICd2ZXJ0aWNhbCcsIHtcbiAgaG9yaXpvbnRhbEFsaWdubWVudDogMFxufSk7XG5cbnZhciBwcm90byA9IFZlcnRpY2FsLnByb3RvdHlwZTtcblxucHJvdG8uX3Jlc2V0TGF5b3V0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMueSA9IDA7XG59O1xuXG5wcm90by5fZ2V0SXRlbUxheW91dFBvc2l0aW9uID0gZnVuY3Rpb24oIGl0ZW0gKSB7XG4gIGl0ZW0uZ2V0U2l6ZSgpO1xuICB2YXIgeCA9ICggdGhpcy5pc290b3BlLnNpemUuaW5uZXJXaWR0aCAtIGl0ZW0uc2l6ZS5vdXRlcldpZHRoICkgKlxuICAgIHRoaXMub3B0aW9ucy5ob3Jpem9udGFsQWxpZ25tZW50O1xuICB2YXIgeSA9IHRoaXMueTtcbiAgdGhpcy55ICs9IGl0ZW0uc2l6ZS5vdXRlckhlaWdodDtcbiAgcmV0dXJuIHsgeDogeCwgeTogeSB9O1xufTtcblxucHJvdG8uX2dldENvbnRhaW5lclNpemUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHsgaGVpZ2h0OiB0aGlzLnkgfTtcbn07XG5cbnJldHVybiBWZXJ0aWNhbDtcblxufSkpO1xuXG4vKiFcbiAqIElzb3RvcGUgdjMuMC42XG4gKlxuICogTGljZW5zZWQgR1BMdjMgZm9yIG9wZW4gc291cmNlIHVzZVxuICogb3IgSXNvdG9wZSBDb21tZXJjaWFsIExpY2Vuc2UgZm9yIGNvbW1lcmNpYWwgdXNlXG4gKlxuICogaHR0cHM6Ly9pc290b3BlLm1ldGFmaXp6eS5jb1xuICogQ29weXJpZ2h0IDIwMTAtMjAxOCBNZXRhZml6enlcbiAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKmdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHJlcXVpcmUgKi9cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIFtcbiAgICAgICAgJ291dGxheWVyL291dGxheWVyJyxcbiAgICAgICAgJ2dldC1zaXplL2dldC1zaXplJyxcbiAgICAgICAgJ2Rlc2FuZHJvLW1hdGNoZXMtc2VsZWN0b3IvbWF0Y2hlcy1zZWxlY3RvcicsXG4gICAgICAgICdmaXp6eS11aS11dGlscy91dGlscycsXG4gICAgICAgICdpc290b3BlLWxheW91dC9qcy9pdGVtJyxcbiAgICAgICAgJ2lzb3RvcGUtbGF5b3V0L2pzL2xheW91dC1tb2RlJyxcbiAgICAgICAgLy8gaW5jbHVkZSBkZWZhdWx0IGxheW91dCBtb2Rlc1xuICAgICAgICAnaXNvdG9wZS1sYXlvdXQvanMvbGF5b3V0LW1vZGVzL21hc29ucnknLFxuICAgICAgICAnaXNvdG9wZS1sYXlvdXQvanMvbGF5b3V0LW1vZGVzL2ZpdC1yb3dzJyxcbiAgICAgICAgJ2lzb3RvcGUtbGF5b3V0L2pzL2xheW91dC1tb2Rlcy92ZXJ0aWNhbCdcbiAgICAgIF0sXG4gICAgICBmdW5jdGlvbiggT3V0bGF5ZXIsIGdldFNpemUsIG1hdGNoZXNTZWxlY3RvciwgdXRpbHMsIEl0ZW0sIExheW91dE1vZGUgKSB7XG4gICAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIE91dGxheWVyLCBnZXRTaXplLCBtYXRjaGVzU2VsZWN0b3IsIHV0aWxzLCBJdGVtLCBMYXlvdXRNb2RlICk7XG4gICAgICB9KTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHJlcXVpcmUoJ291dGxheWVyJyksXG4gICAgICByZXF1aXJlKCdnZXQtc2l6ZScpLFxuICAgICAgcmVxdWlyZSgnZGVzYW5kcm8tbWF0Y2hlcy1zZWxlY3RvcicpLFxuICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKSxcbiAgICAgIHJlcXVpcmUoJ2lzb3RvcGUtbGF5b3V0L2pzL2l0ZW0nKSxcbiAgICAgIHJlcXVpcmUoJ2lzb3RvcGUtbGF5b3V0L2pzL2xheW91dC1tb2RlJyksXG4gICAgICAvLyBpbmNsdWRlIGRlZmF1bHQgbGF5b3V0IG1vZGVzXG4gICAgICByZXF1aXJlKCdpc290b3BlLWxheW91dC9qcy9sYXlvdXQtbW9kZXMvbWFzb25yeScpLFxuICAgICAgcmVxdWlyZSgnaXNvdG9wZS1sYXlvdXQvanMvbGF5b3V0LW1vZGVzL2ZpdC1yb3dzJyksXG4gICAgICByZXF1aXJlKCdpc290b3BlLWxheW91dC9qcy9sYXlvdXQtbW9kZXMvdmVydGljYWwnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuSXNvdG9wZSA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3csXG4gICAgICB3aW5kb3cuT3V0bGF5ZXIsXG4gICAgICB3aW5kb3cuZ2V0U2l6ZSxcbiAgICAgIHdpbmRvdy5tYXRjaGVzU2VsZWN0b3IsXG4gICAgICB3aW5kb3cuZml6enlVSVV0aWxzLFxuICAgICAgd2luZG93Lklzb3RvcGUuSXRlbSxcbiAgICAgIHdpbmRvdy5Jc290b3BlLkxheW91dE1vZGVcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBPdXRsYXllciwgZ2V0U2l6ZSwgbWF0Y2hlc1NlbGVjdG9yLCB1dGlscyxcbiAgSXRlbSwgTGF5b3V0TW9kZSApIHtcblxuXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHZhcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxudmFyIGpRdWVyeSA9IHdpbmRvdy5qUXVlcnk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGhlbHBlcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxudmFyIHRyaW0gPSBTdHJpbmcucHJvdG90eXBlLnRyaW0gP1xuICBmdW5jdGlvbiggc3RyICkge1xuICAgIHJldHVybiBzdHIudHJpbSgpO1xuICB9IDpcbiAgZnVuY3Rpb24oIHN0ciApIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoIC9eXFxzK3xcXHMrJC9nLCAnJyApO1xuICB9O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBpc290b3BlRGVmaW5pdGlvbiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4gIC8vIGNyZWF0ZSBhbiBPdXRsYXllciBsYXlvdXQgY2xhc3NcbiAgdmFyIElzb3RvcGUgPSBPdXRsYXllci5jcmVhdGUoICdpc290b3BlJywge1xuICAgIGxheW91dE1vZGU6ICdtYXNvbnJ5JyxcbiAgICBpc0pRdWVyeUZpbHRlcmluZzogdHJ1ZSxcbiAgICBzb3J0QXNjZW5kaW5nOiB0cnVlXG4gIH0pO1xuXG4gIElzb3RvcGUuSXRlbSA9IEl0ZW07XG4gIElzb3RvcGUuTGF5b3V0TW9kZSA9IExheW91dE1vZGU7XG5cbiAgdmFyIHByb3RvID0gSXNvdG9wZS5wcm90b3R5cGU7XG5cbiAgcHJvdG8uX2NyZWF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaXRlbUdVSUQgPSAwO1xuICAgIC8vIGZ1bmN0aW9ucyB0aGF0IHNvcnQgaXRlbXNcbiAgICB0aGlzLl9zb3J0ZXJzID0ge307XG4gICAgdGhpcy5fZ2V0U29ydGVycygpO1xuICAgIC8vIGNhbGwgc3VwZXJcbiAgICBPdXRsYXllci5wcm90b3R5cGUuX2NyZWF0ZS5jYWxsKCB0aGlzICk7XG5cbiAgICAvLyBjcmVhdGUgbGF5b3V0IG1vZGVzXG4gICAgdGhpcy5tb2RlcyA9IHt9O1xuICAgIC8vIHN0YXJ0IGZpbHRlcmVkSXRlbXMgd2l0aCBhbGwgaXRlbXNcbiAgICB0aGlzLmZpbHRlcmVkSXRlbXMgPSB0aGlzLml0ZW1zO1xuICAgIC8vIGtlZXAgb2YgdHJhY2sgb2Ygc29ydEJ5c1xuICAgIHRoaXMuc29ydEhpc3RvcnkgPSBbICdvcmlnaW5hbC1vcmRlcicgXTtcbiAgICAvLyBjcmVhdGUgZnJvbSByZWdpc3RlcmVkIGxheW91dCBtb2Rlc1xuICAgIGZvciAoIHZhciBuYW1lIGluIExheW91dE1vZGUubW9kZXMgKSB7XG4gICAgICB0aGlzLl9pbml0TGF5b3V0TW9kZSggbmFtZSApO1xuICAgIH1cbiAgfTtcblxuICBwcm90by5yZWxvYWRJdGVtcyA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIHJlc2V0IGl0ZW0gSUQgY291bnRlclxuICAgIHRoaXMuaXRlbUdVSUQgPSAwO1xuICAgIC8vIGNhbGwgc3VwZXJcbiAgICBPdXRsYXllci5wcm90b3R5cGUucmVsb2FkSXRlbXMuY2FsbCggdGhpcyApO1xuICB9O1xuXG4gIHByb3RvLl9pdGVtaXplID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGl0ZW1zID0gT3V0bGF5ZXIucHJvdG90eXBlLl9pdGVtaXplLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcbiAgICAvLyBhc3NpZ24gSUQgZm9yIG9yaWdpbmFsLW9yZGVyXG4gICAgZm9yICggdmFyIGk9MDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrICkge1xuICAgICAgdmFyIGl0ZW0gPSBpdGVtc1tpXTtcbiAgICAgIGl0ZW0uaWQgPSB0aGlzLml0ZW1HVUlEKys7XG4gICAgfVxuICAgIHRoaXMuX3VwZGF0ZUl0ZW1zU29ydERhdGEoIGl0ZW1zICk7XG4gICAgcmV0dXJuIGl0ZW1zO1xuICB9O1xuXG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gbGF5b3V0IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbiAgcHJvdG8uX2luaXRMYXlvdXRNb2RlID0gZnVuY3Rpb24oIG5hbWUgKSB7XG4gICAgdmFyIE1vZGUgPSBMYXlvdXRNb2RlLm1vZGVzWyBuYW1lIF07XG4gICAgLy8gc2V0IG1vZGUgb3B0aW9uc1xuICAgIC8vIEhBQ0sgZXh0ZW5kIGluaXRpYWwgb3B0aW9ucywgYmFjay1maWxsIGluIGRlZmF1bHQgb3B0aW9uc1xuICAgIHZhciBpbml0aWFsT3B0cyA9IHRoaXMub3B0aW9uc1sgbmFtZSBdIHx8IHt9O1xuICAgIHRoaXMub3B0aW9uc1sgbmFtZSBdID0gTW9kZS5vcHRpb25zID9cbiAgICAgIHV0aWxzLmV4dGVuZCggTW9kZS5vcHRpb25zLCBpbml0aWFsT3B0cyApIDogaW5pdGlhbE9wdHM7XG4gICAgLy8gaW5pdCBsYXlvdXQgbW9kZSBpbnN0YW5jZVxuICAgIHRoaXMubW9kZXNbIG5hbWUgXSA9IG5ldyBNb2RlKCB0aGlzICk7XG4gIH07XG5cblxuICBwcm90by5sYXlvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBpZiBmaXJzdCB0aW1lIGRvaW5nIGxheW91dCwgZG8gYWxsIG1hZ2ljXG4gICAgaWYgKCAhdGhpcy5faXNMYXlvdXRJbml0ZWQgJiYgdGhpcy5fZ2V0T3B0aW9uKCdpbml0TGF5b3V0JykgKSB7XG4gICAgICB0aGlzLmFycmFuZ2UoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fbGF5b3V0KCk7XG4gIH07XG5cbiAgLy8gcHJpdmF0ZSBtZXRob2QgdG8gYmUgdXNlZCBpbiBsYXlvdXQoKSAmIG1hZ2ljKClcbiAgcHJvdG8uX2xheW91dCA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIGRvbid0IGFuaW1hdGUgZmlyc3QgbGF5b3V0XG4gICAgdmFyIGlzSW5zdGFudCA9IHRoaXMuX2dldElzSW5zdGFudCgpO1xuICAgIC8vIGxheW91dCBmbG93XG4gICAgdGhpcy5fcmVzZXRMYXlvdXQoKTtcbiAgICB0aGlzLl9tYW5hZ2VTdGFtcHMoKTtcbiAgICB0aGlzLmxheW91dEl0ZW1zKCB0aGlzLmZpbHRlcmVkSXRlbXMsIGlzSW5zdGFudCApO1xuXG4gICAgLy8gZmxhZyBmb3IgaW5pdGFsaXplZFxuICAgIHRoaXMuX2lzTGF5b3V0SW5pdGVkID0gdHJ1ZTtcbiAgfTtcblxuICAvLyBmaWx0ZXIgKyBzb3J0ICsgbGF5b3V0XG4gIHByb3RvLmFycmFuZ2UgPSBmdW5jdGlvbiggb3B0cyApIHtcbiAgICAvLyBzZXQgYW55IG9wdGlvbnMgcGFzc1xuICAgIHRoaXMub3B0aW9uKCBvcHRzICk7XG4gICAgdGhpcy5fZ2V0SXNJbnN0YW50KCk7XG4gICAgLy8gZmlsdGVyLCBzb3J0LCBhbmQgbGF5b3V0XG5cbiAgICAvLyBmaWx0ZXJcbiAgICB2YXIgZmlsdGVyZWQgPSB0aGlzLl9maWx0ZXIoIHRoaXMuaXRlbXMgKTtcbiAgICB0aGlzLmZpbHRlcmVkSXRlbXMgPSBmaWx0ZXJlZC5tYXRjaGVzO1xuXG4gICAgdGhpcy5fYmluZEFycmFuZ2VDb21wbGV0ZSgpO1xuXG4gICAgaWYgKCB0aGlzLl9pc0luc3RhbnQgKSB7XG4gICAgICB0aGlzLl9ub1RyYW5zaXRpb24oIHRoaXMuX2hpZGVSZXZlYWwsIFsgZmlsdGVyZWQgXSApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9oaWRlUmV2ZWFsKCBmaWx0ZXJlZCApO1xuICAgIH1cblxuICAgIHRoaXMuX3NvcnQoKTtcbiAgICB0aGlzLl9sYXlvdXQoKTtcbiAgfTtcbiAgLy8gYWxpYXMgdG8gX2luaXQgZm9yIG1haW4gcGx1Z2luIG1ldGhvZFxuICBwcm90by5faW5pdCA9IHByb3RvLmFycmFuZ2U7XG5cbiAgcHJvdG8uX2hpZGVSZXZlYWwgPSBmdW5jdGlvbiggZmlsdGVyZWQgKSB7XG4gICAgdGhpcy5yZXZlYWwoIGZpbHRlcmVkLm5lZWRSZXZlYWwgKTtcbiAgICB0aGlzLmhpZGUoIGZpbHRlcmVkLm5lZWRIaWRlICk7XG4gIH07XG5cbiAgLy8gSEFDS1xuICAvLyBEb24ndCBhbmltYXRlL3RyYW5zaXRpb24gZmlyc3QgbGF5b3V0XG4gIC8vIE9yIGRvbid0IGFuaW1hdGUvdHJhbnNpdGlvbiBvdGhlciBsYXlvdXRzXG4gIHByb3RvLl9nZXRJc0luc3RhbnQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaXNMYXlvdXRJbnN0YW50ID0gdGhpcy5fZ2V0T3B0aW9uKCdsYXlvdXRJbnN0YW50Jyk7XG4gICAgdmFyIGlzSW5zdGFudCA9IGlzTGF5b3V0SW5zdGFudCAhPT0gdW5kZWZpbmVkID8gaXNMYXlvdXRJbnN0YW50IDpcbiAgICAgICF0aGlzLl9pc0xheW91dEluaXRlZDtcbiAgICB0aGlzLl9pc0luc3RhbnQgPSBpc0luc3RhbnQ7XG4gICAgcmV0dXJuIGlzSW5zdGFudDtcbiAgfTtcblxuICAvLyBsaXN0ZW4gZm9yIGxheW91dENvbXBsZXRlLCBoaWRlQ29tcGxldGUgYW5kIHJldmVhbENvbXBsZXRlXG4gIC8vIHRvIHRyaWdnZXIgYXJyYW5nZUNvbXBsZXRlXG4gIHByb3RvLl9iaW5kQXJyYW5nZUNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gbGlzdGVuIGZvciAzIGV2ZW50cyB0byB0cmlnZ2VyIGFycmFuZ2VDb21wbGV0ZVxuICAgIHZhciBpc0xheW91dENvbXBsZXRlLCBpc0hpZGVDb21wbGV0ZSwgaXNSZXZlYWxDb21wbGV0ZTtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIGZ1bmN0aW9uIGFycmFuZ2VQYXJhbGxlbENhbGxiYWNrKCkge1xuICAgICAgaWYgKCBpc0xheW91dENvbXBsZXRlICYmIGlzSGlkZUNvbXBsZXRlICYmIGlzUmV2ZWFsQ29tcGxldGUgKSB7XG4gICAgICAgIF90aGlzLmRpc3BhdGNoRXZlbnQoICdhcnJhbmdlQ29tcGxldGUnLCBudWxsLCBbIF90aGlzLmZpbHRlcmVkSXRlbXMgXSApO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLm9uY2UoICdsYXlvdXRDb21wbGV0ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgaXNMYXlvdXRDb21wbGV0ZSA9IHRydWU7XG4gICAgICBhcnJhbmdlUGFyYWxsZWxDYWxsYmFjaygpO1xuICAgIH0pO1xuICAgIHRoaXMub25jZSggJ2hpZGVDb21wbGV0ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgaXNIaWRlQ29tcGxldGUgPSB0cnVlO1xuICAgICAgYXJyYW5nZVBhcmFsbGVsQ2FsbGJhY2soKTtcbiAgICB9KTtcbiAgICB0aGlzLm9uY2UoICdyZXZlYWxDb21wbGV0ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgaXNSZXZlYWxDb21wbGV0ZSA9IHRydWU7XG4gICAgICBhcnJhbmdlUGFyYWxsZWxDYWxsYmFjaygpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGZpbHRlciAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4gIHByb3RvLl9maWx0ZXIgPSBmdW5jdGlvbiggaXRlbXMgKSB7XG4gICAgdmFyIGZpbHRlciA9IHRoaXMub3B0aW9ucy5maWx0ZXI7XG4gICAgZmlsdGVyID0gZmlsdGVyIHx8ICcqJztcbiAgICB2YXIgbWF0Y2hlcyA9IFtdO1xuICAgIHZhciBoaWRkZW5NYXRjaGVkID0gW107XG4gICAgdmFyIHZpc2libGVVbm1hdGNoZWQgPSBbXTtcblxuICAgIHZhciB0ZXN0ID0gdGhpcy5fZ2V0RmlsdGVyVGVzdCggZmlsdGVyICk7XG5cbiAgICAvLyB0ZXN0IGVhY2ggaXRlbVxuICAgIGZvciAoIHZhciBpPTA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKyApIHtcbiAgICAgIHZhciBpdGVtID0gaXRlbXNbaV07XG4gICAgICBpZiAoIGl0ZW0uaXNJZ25vcmVkICkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIC8vIGFkZCBpdGVtIHRvIGVpdGhlciBtYXRjaGVkIG9yIHVubWF0Y2hlZCBncm91cFxuICAgICAgdmFyIGlzTWF0Y2hlZCA9IHRlc3QoIGl0ZW0gKTtcbiAgICAgIC8vIGl0ZW0uaXNGaWx0ZXJNYXRjaGVkID0gaXNNYXRjaGVkO1xuICAgICAgLy8gYWRkIHRvIG1hdGNoZXMgaWYgaXRzIGEgbWF0Y2hcbiAgICAgIGlmICggaXNNYXRjaGVkICkge1xuICAgICAgICBtYXRjaGVzLnB1c2goIGl0ZW0gKTtcbiAgICAgIH1cbiAgICAgIC8vIGFkZCB0byBhZGRpdGlvbmFsIGdyb3VwIGlmIGl0ZW0gbmVlZHMgdG8gYmUgaGlkZGVuIG9yIHJldmVhbGVkXG4gICAgICBpZiAoIGlzTWF0Y2hlZCAmJiBpdGVtLmlzSGlkZGVuICkge1xuICAgICAgICBoaWRkZW5NYXRjaGVkLnB1c2goIGl0ZW0gKTtcbiAgICAgIH0gZWxzZSBpZiAoICFpc01hdGNoZWQgJiYgIWl0ZW0uaXNIaWRkZW4gKSB7XG4gICAgICAgIHZpc2libGVVbm1hdGNoZWQucHVzaCggaXRlbSApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHJldHVybiBjb2xsZWN0aW9ucyBvZiBpdGVtcyB0byBiZSBtYW5pcHVsYXRlZFxuICAgIHJldHVybiB7XG4gICAgICBtYXRjaGVzOiBtYXRjaGVzLFxuICAgICAgbmVlZFJldmVhbDogaGlkZGVuTWF0Y2hlZCxcbiAgICAgIG5lZWRIaWRlOiB2aXNpYmxlVW5tYXRjaGVkXG4gICAgfTtcbiAgfTtcblxuICAvLyBnZXQgYSBqUXVlcnksIGZ1bmN0aW9uLCBvciBhIG1hdGNoZXNTZWxlY3RvciB0ZXN0IGdpdmVuIHRoZSBmaWx0ZXJcbiAgcHJvdG8uX2dldEZpbHRlclRlc3QgPSBmdW5jdGlvbiggZmlsdGVyICkge1xuICAgIGlmICggalF1ZXJ5ICYmIHRoaXMub3B0aW9ucy5pc0pRdWVyeUZpbHRlcmluZyApIHtcbiAgICAgIC8vIHVzZSBqUXVlcnlcbiAgICAgIHJldHVybiBmdW5jdGlvbiggaXRlbSApIHtcbiAgICAgICAgcmV0dXJuIGpRdWVyeSggaXRlbS5lbGVtZW50ICkuaXMoIGZpbHRlciApO1xuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKCB0eXBlb2YgZmlsdGVyID09ICdmdW5jdGlvbicgKSB7XG4gICAgICAvLyB1c2UgZmlsdGVyIGFzIGZ1bmN0aW9uXG4gICAgICByZXR1cm4gZnVuY3Rpb24oIGl0ZW0gKSB7XG4gICAgICAgIHJldHVybiBmaWx0ZXIoIGl0ZW0uZWxlbWVudCApO1xuICAgICAgfTtcbiAgICB9XG4gICAgLy8gZGVmYXVsdCwgdXNlIGZpbHRlciBhcyBzZWxlY3RvciBzdHJpbmdcbiAgICByZXR1cm4gZnVuY3Rpb24oIGl0ZW0gKSB7XG4gICAgICByZXR1cm4gbWF0Y2hlc1NlbGVjdG9yKCBpdGVtLmVsZW1lbnQsIGZpbHRlciApO1xuICAgIH07XG4gIH07XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gc29ydGluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4gIC8qKlxuICAgKiBAcGFyYW1zIHtBcnJheX0gZWxlbXNcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgcHJvdG8udXBkYXRlU29ydERhdGEgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gICAgLy8gZ2V0IGl0ZW1zXG4gICAgdmFyIGl0ZW1zO1xuICAgIGlmICggZWxlbXMgKSB7XG4gICAgICBlbGVtcyA9IHV0aWxzLm1ha2VBcnJheSggZWxlbXMgKTtcbiAgICAgIGl0ZW1zID0gdGhpcy5nZXRJdGVtcyggZWxlbXMgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXBkYXRlIGFsbCBpdGVtcyBpZiBubyBlbGVtcyBwcm92aWRlZFxuICAgICAgaXRlbXMgPSB0aGlzLml0ZW1zO1xuICAgIH1cblxuICAgIHRoaXMuX2dldFNvcnRlcnMoKTtcbiAgICB0aGlzLl91cGRhdGVJdGVtc1NvcnREYXRhKCBpdGVtcyApO1xuICB9O1xuXG4gIHByb3RvLl9nZXRTb3J0ZXJzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGdldFNvcnREYXRhID0gdGhpcy5vcHRpb25zLmdldFNvcnREYXRhO1xuICAgIGZvciAoIHZhciBrZXkgaW4gZ2V0U29ydERhdGEgKSB7XG4gICAgICB2YXIgc29ydGVyID0gZ2V0U29ydERhdGFbIGtleSBdO1xuICAgICAgdGhpcy5fc29ydGVyc1sga2V5IF0gPSBtdW5nZVNvcnRlciggc29ydGVyICk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW1zIHtBcnJheX0gaXRlbXMgLSBvZiBJc290b3BlLkl0ZW1zXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBwcm90by5fdXBkYXRlSXRlbXNTb3J0RGF0YSA9IGZ1bmN0aW9uKCBpdGVtcyApIHtcbiAgICAvLyBkbyBub3QgdXBkYXRlIGlmIG5vIGl0ZW1zXG4gICAgdmFyIGxlbiA9IGl0ZW1zICYmIGl0ZW1zLmxlbmd0aDtcblxuICAgIGZvciAoIHZhciBpPTA7IGxlbiAmJiBpIDwgbGVuOyBpKysgKSB7XG4gICAgICB2YXIgaXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgaXRlbS51cGRhdGVTb3J0RGF0YSgpO1xuICAgIH1cbiAgfTtcblxuICAvLyAtLS0tLSBtdW5nZSBzb3J0ZXIgLS0tLS0gLy9cblxuICAvLyBlbmNhcHN1bGF0ZSB0aGlzLCBhcyB3ZSBqdXN0IG5lZWQgbXVuZ2VTb3J0ZXJcbiAgLy8gb3RoZXIgZnVuY3Rpb25zIGluIGhlcmUgYXJlIGp1c3QgZm9yIG11bmdpbmdcbiAgdmFyIG11bmdlU29ydGVyID0gKCBmdW5jdGlvbigpIHtcbiAgICAvLyBhZGQgYSBtYWdpYyBsYXllciB0byBzb3J0ZXJzIGZvciBjb252aWVuZW50IHNob3J0aGFuZHNcbiAgICAvLyBgLmZvby1iYXJgIHdpbGwgdXNlIHRoZSB0ZXh0IG9mIC5mb28tYmFyIHF1ZXJ5U2VsZWN0b3JcbiAgICAvLyBgW2Zvby1iYXJdYCB3aWxsIHVzZSBhdHRyaWJ1dGVcbiAgICAvLyB5b3UgY2FuIGFsc28gYWRkIHBhcnNlclxuICAgIC8vIGAuZm9vLWJhciBwYXJzZUludGAgd2lsbCBwYXJzZSB0aGF0IGFzIGEgbnVtYmVyXG4gICAgZnVuY3Rpb24gbXVuZ2VTb3J0ZXIoIHNvcnRlciApIHtcbiAgICAgIC8vIGlmIG5vdCBhIHN0cmluZywgcmV0dXJuIGZ1bmN0aW9uIG9yIHdoYXRldmVyIGl0IGlzXG4gICAgICBpZiAoIHR5cGVvZiBzb3J0ZXIgIT0gJ3N0cmluZycgKSB7XG4gICAgICAgIHJldHVybiBzb3J0ZXI7XG4gICAgICB9XG4gICAgICAvLyBwYXJzZSB0aGUgc29ydGVyIHN0cmluZ1xuICAgICAgdmFyIGFyZ3MgPSB0cmltKCBzb3J0ZXIgKS5zcGxpdCgnICcpO1xuICAgICAgdmFyIHF1ZXJ5ID0gYXJnc1swXTtcbiAgICAgIC8vIGNoZWNrIGlmIHF1ZXJ5IGxvb2tzIGxpa2UgW2FuLWF0dHJpYnV0ZV1cbiAgICAgIHZhciBhdHRyTWF0Y2ggPSBxdWVyeS5tYXRjaCggL15cXFsoLispXFxdJC8gKTtcbiAgICAgIHZhciBhdHRyID0gYXR0ck1hdGNoICYmIGF0dHJNYXRjaFsxXTtcbiAgICAgIHZhciBnZXRWYWx1ZSA9IGdldFZhbHVlR2V0dGVyKCBhdHRyLCBxdWVyeSApO1xuICAgICAgLy8gdXNlIHNlY29uZCBhcmd1bWVudCBhcyBhIHBhcnNlclxuICAgICAgdmFyIHBhcnNlciA9IElzb3RvcGUuc29ydERhdGFQYXJzZXJzWyBhcmdzWzFdIF07XG4gICAgICAvLyBwYXJzZSB0aGUgdmFsdWUsIGlmIHRoZXJlIHdhcyBhIHBhcnNlclxuICAgICAgc29ydGVyID0gcGFyc2VyID8gZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICAgIHJldHVybiBlbGVtICYmIHBhcnNlciggZ2V0VmFsdWUoIGVsZW0gKSApO1xuICAgICAgfSA6XG4gICAgICAvLyBvdGhlcndpc2UganVzdCByZXR1cm4gdmFsdWVcbiAgICAgIGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgICByZXR1cm4gZWxlbSAmJiBnZXRWYWx1ZSggZWxlbSApO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHNvcnRlcjtcbiAgICB9XG5cbiAgICAvLyBnZXQgYW4gYXR0cmlidXRlIGdldHRlciwgb3IgZ2V0IHRleHQgb2YgdGhlIHF1ZXJ5U2VsZWN0b3JcbiAgICBmdW5jdGlvbiBnZXRWYWx1ZUdldHRlciggYXR0ciwgcXVlcnkgKSB7XG4gICAgICAvLyBpZiBxdWVyeSBsb29rcyBsaWtlIFtmb28tYmFyXSwgZ2V0IGF0dHJpYnV0ZVxuICAgICAgaWYgKCBhdHRyICkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gZ2V0QXR0cmlidXRlKCBlbGVtICkge1xuICAgICAgICAgIHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggYXR0ciApO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICAvLyBvdGhlcndpc2UsIGFzc3VtZSBpdHMgYSBxdWVyeVNlbGVjdG9yLCBhbmQgZ2V0IGl0cyB0ZXh0XG4gICAgICByZXR1cm4gZnVuY3Rpb24gZ2V0Q2hpbGRUZXh0KCBlbGVtICkge1xuICAgICAgICB2YXIgY2hpbGQgPSBlbGVtLnF1ZXJ5U2VsZWN0b3IoIHF1ZXJ5ICk7XG4gICAgICAgIHJldHVybiBjaGlsZCAmJiBjaGlsZC50ZXh0Q29udGVudDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG11bmdlU29ydGVyO1xuICB9KSgpO1xuXG4gIC8vIHBhcnNlcnMgdXNlZCBpbiBnZXRTb3J0RGF0YSBzaG9ydGN1dCBzdHJpbmdzXG4gIElzb3RvcGUuc29ydERhdGFQYXJzZXJzID0ge1xuICAgICdwYXJzZUludCc6IGZ1bmN0aW9uKCB2YWwgKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQoIHZhbCwgMTAgKTtcbiAgICB9LFxuICAgICdwYXJzZUZsb2F0JzogZnVuY3Rpb24oIHZhbCApIHtcbiAgICAgIHJldHVybiBwYXJzZUZsb2F0KCB2YWwgKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gLS0tLS0gc29ydCBtZXRob2QgLS0tLS0gLy9cblxuICAvLyBzb3J0IGZpbHRlcmVkSXRlbSBvcmRlclxuICBwcm90by5fc29ydCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICggIXRoaXMub3B0aW9ucy5zb3J0QnkgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGtlZXAgdHJhY2sgb2Ygc29ydEJ5IEhpc3RvcnlcbiAgICB2YXIgc29ydEJ5cyA9IHV0aWxzLm1ha2VBcnJheSggdGhpcy5vcHRpb25zLnNvcnRCeSApO1xuICAgIGlmICggIXRoaXMuX2dldElzU2FtZVNvcnRCeSggc29ydEJ5cyApICkge1xuICAgICAgLy8gY29uY2F0IGFsbCBzb3J0QnkgYW5kIHNvcnRIaXN0b3J5LCBhZGQgdG8gZnJvbnQsIG9sZGVzdCBnb2VzIGluIGxhc3RcbiAgICAgIHRoaXMuc29ydEhpc3RvcnkgPSBzb3J0QnlzLmNvbmNhdCggdGhpcy5zb3J0SGlzdG9yeSApO1xuICAgIH1cbiAgICAvLyBzb3J0IG1hZ2ljXG4gICAgdmFyIGl0ZW1Tb3J0ZXIgPSBnZXRJdGVtU29ydGVyKCB0aGlzLnNvcnRIaXN0b3J5LCB0aGlzLm9wdGlvbnMuc29ydEFzY2VuZGluZyApO1xuICAgIHRoaXMuZmlsdGVyZWRJdGVtcy5zb3J0KCBpdGVtU29ydGVyICk7XG4gIH07XG5cbiAgLy8gY2hlY2sgaWYgc29ydEJ5cyBpcyBzYW1lIGFzIHN0YXJ0IG9mIHNvcnRIaXN0b3J5XG4gIHByb3RvLl9nZXRJc1NhbWVTb3J0QnkgPSBmdW5jdGlvbiggc29ydEJ5cyApIHtcbiAgICBmb3IgKCB2YXIgaT0wOyBpIDwgc29ydEJ5cy5sZW5ndGg7IGkrKyApIHtcbiAgICAgIGlmICggc29ydEJ5c1tpXSAhPSB0aGlzLnNvcnRIaXN0b3J5W2ldICkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIC8vIHJldHVybnMgYSBmdW5jdGlvbiB1c2VkIGZvciBzb3J0aW5nXG4gIGZ1bmN0aW9uIGdldEl0ZW1Tb3J0ZXIoIHNvcnRCeXMsIHNvcnRBc2MgKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHNvcnRlciggaXRlbUEsIGl0ZW1CICkge1xuICAgICAgLy8gY3ljbGUgdGhyb3VnaCBhbGwgc29ydEtleXNcbiAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHNvcnRCeXMubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgIHZhciBzb3J0QnkgPSBzb3J0QnlzW2ldO1xuICAgICAgICB2YXIgYSA9IGl0ZW1BLnNvcnREYXRhWyBzb3J0QnkgXTtcbiAgICAgICAgdmFyIGIgPSBpdGVtQi5zb3J0RGF0YVsgc29ydEJ5IF07XG4gICAgICAgIGlmICggYSA+IGIgfHwgYSA8IGIgKSB7XG4gICAgICAgICAgLy8gaWYgc29ydEFzYyBpcyBhbiBvYmplY3QsIHVzZSB0aGUgdmFsdWUgZ2l2ZW4gdGhlIHNvcnRCeSBrZXlcbiAgICAgICAgICB2YXIgaXNBc2NlbmRpbmcgPSBzb3J0QXNjWyBzb3J0QnkgXSAhPT0gdW5kZWZpbmVkID8gc29ydEFzY1sgc29ydEJ5IF0gOiBzb3J0QXNjO1xuICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSBpc0FzY2VuZGluZyA/IDEgOiAtMTtcbiAgICAgICAgICByZXR1cm4gKCBhID4gYiA/IDEgOiAtMSApICogZGlyZWN0aW9uO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9O1xuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gbWV0aG9kcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4gIC8vIGdldCBsYXlvdXQgbW9kZVxuICBwcm90by5fbW9kZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsYXlvdXRNb2RlID0gdGhpcy5vcHRpb25zLmxheW91dE1vZGU7XG4gICAgdmFyIG1vZGUgPSB0aGlzLm1vZGVzWyBsYXlvdXRNb2RlIF07XG4gICAgaWYgKCAhbW9kZSApIHtcbiAgICAgIC8vIFRPRE8gY29uc29sZS5lcnJvclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCAnTm8gbGF5b3V0IG1vZGU6ICcgKyBsYXlvdXRNb2RlICk7XG4gICAgfVxuICAgIC8vIEhBQ0sgc3luYyBtb2RlJ3Mgb3B0aW9uc1xuICAgIC8vIGFueSBvcHRpb25zIHNldCBhZnRlciBpbml0IGZvciBsYXlvdXQgbW9kZSBuZWVkIHRvIGJlIHN5bmNlZFxuICAgIG1vZGUub3B0aW9ucyA9IHRoaXMub3B0aW9uc1sgbGF5b3V0TW9kZSBdO1xuICAgIHJldHVybiBtb2RlO1xuICB9O1xuXG4gIHByb3RvLl9yZXNldExheW91dCA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIHRyaWdnZXIgb3JpZ2luYWwgcmVzZXQgbGF5b3V0XG4gICAgT3V0bGF5ZXIucHJvdG90eXBlLl9yZXNldExheW91dC5jYWxsKCB0aGlzICk7XG4gICAgdGhpcy5fbW9kZSgpLl9yZXNldExheW91dCgpO1xuICB9O1xuXG4gIHByb3RvLl9nZXRJdGVtTGF5b3V0UG9zaXRpb24gPSBmdW5jdGlvbiggaXRlbSAgKSB7XG4gICAgcmV0dXJuIHRoaXMuX21vZGUoKS5fZ2V0SXRlbUxheW91dFBvc2l0aW9uKCBpdGVtICk7XG4gIH07XG5cbiAgcHJvdG8uX21hbmFnZVN0YW1wID0gZnVuY3Rpb24oIHN0YW1wICkge1xuICAgIHRoaXMuX21vZGUoKS5fbWFuYWdlU3RhbXAoIHN0YW1wICk7XG4gIH07XG5cbiAgcHJvdG8uX2dldENvbnRhaW5lclNpemUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kZSgpLl9nZXRDb250YWluZXJTaXplKCk7XG4gIH07XG5cbiAgcHJvdG8ubmVlZHNSZXNpemVMYXlvdXQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kZSgpLm5lZWRzUmVzaXplTGF5b3V0KCk7XG4gIH07XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gYWRkaW5nICYgcmVtb3ZpbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuICAvLyBIRUFEUyBVUCBvdmVyd3JpdGVzIGRlZmF1bHQgT3V0bGF5ZXIgYXBwZW5kZWRcbiAgcHJvdG8uYXBwZW5kZWQgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gICAgdmFyIGl0ZW1zID0gdGhpcy5hZGRJdGVtcyggZWxlbXMgKTtcbiAgICBpZiAoICFpdGVtcy5sZW5ndGggKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGZpbHRlciwgbGF5b3V0LCByZXZlYWwgbmV3IGl0ZW1zXG4gICAgdmFyIGZpbHRlcmVkSXRlbXMgPSB0aGlzLl9maWx0ZXJSZXZlYWxBZGRlZCggaXRlbXMgKTtcbiAgICAvLyBhZGQgdG8gZmlsdGVyZWRJdGVtc1xuICAgIHRoaXMuZmlsdGVyZWRJdGVtcyA9IHRoaXMuZmlsdGVyZWRJdGVtcy5jb25jYXQoIGZpbHRlcmVkSXRlbXMgKTtcbiAgfTtcblxuICAvLyBIRUFEUyBVUCBvdmVyd3JpdGVzIGRlZmF1bHQgT3V0bGF5ZXIgcHJlcGVuZGVkXG4gIHByb3RvLnByZXBlbmRlZCA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgICB2YXIgaXRlbXMgPSB0aGlzLl9pdGVtaXplKCBlbGVtcyApO1xuICAgIGlmICggIWl0ZW1zLmxlbmd0aCApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gc3RhcnQgbmV3IGxheW91dFxuICAgIHRoaXMuX3Jlc2V0TGF5b3V0KCk7XG4gICAgdGhpcy5fbWFuYWdlU3RhbXBzKCk7XG4gICAgLy8gZmlsdGVyLCBsYXlvdXQsIHJldmVhbCBuZXcgaXRlbXNcbiAgICB2YXIgZmlsdGVyZWRJdGVtcyA9IHRoaXMuX2ZpbHRlclJldmVhbEFkZGVkKCBpdGVtcyApO1xuICAgIC8vIGxheW91dCBwcmV2aW91cyBpdGVtc1xuICAgIHRoaXMubGF5b3V0SXRlbXMoIHRoaXMuZmlsdGVyZWRJdGVtcyApO1xuICAgIC8vIGFkZCB0byBpdGVtcyBhbmQgZmlsdGVyZWRJdGVtc1xuICAgIHRoaXMuZmlsdGVyZWRJdGVtcyA9IGZpbHRlcmVkSXRlbXMuY29uY2F0KCB0aGlzLmZpbHRlcmVkSXRlbXMgKTtcbiAgICB0aGlzLml0ZW1zID0gaXRlbXMuY29uY2F0KCB0aGlzLml0ZW1zICk7XG4gIH07XG5cbiAgcHJvdG8uX2ZpbHRlclJldmVhbEFkZGVkID0gZnVuY3Rpb24oIGl0ZW1zICkge1xuICAgIHZhciBmaWx0ZXJlZCA9IHRoaXMuX2ZpbHRlciggaXRlbXMgKTtcbiAgICB0aGlzLmhpZGUoIGZpbHRlcmVkLm5lZWRIaWRlICk7XG4gICAgLy8gcmV2ZWFsIGFsbCBuZXcgaXRlbXNcbiAgICB0aGlzLnJldmVhbCggZmlsdGVyZWQubWF0Y2hlcyApO1xuICAgIC8vIGxheW91dCBuZXcgaXRlbXMsIG5vIHRyYW5zaXRpb25cbiAgICB0aGlzLmxheW91dEl0ZW1zKCBmaWx0ZXJlZC5tYXRjaGVzLCB0cnVlICk7XG4gICAgcmV0dXJuIGZpbHRlcmVkLm1hdGNoZXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEZpbHRlciwgc29ydCwgYW5kIGxheW91dCBuZXdseS1hcHBlbmRlZCBpdGVtIGVsZW1lbnRzXG4gICAqIEBwYXJhbSB7QXJyYXkgb3IgTm9kZUxpc3Qgb3IgRWxlbWVudH0gZWxlbXNcbiAgICovXG4gIHByb3RvLmluc2VydCA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgICB2YXIgaXRlbXMgPSB0aGlzLmFkZEl0ZW1zKCBlbGVtcyApO1xuICAgIGlmICggIWl0ZW1zLmxlbmd0aCApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gYXBwZW5kIGl0ZW0gZWxlbWVudHNcbiAgICB2YXIgaSwgaXRlbTtcbiAgICB2YXIgbGVuID0gaXRlbXMubGVuZ3RoO1xuICAgIGZvciAoIGk9MDsgaSA8IGxlbjsgaSsrICkge1xuICAgICAgaXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKCBpdGVtLmVsZW1lbnQgKTtcbiAgICB9XG4gICAgLy8gZmlsdGVyIG5ldyBzdHVmZlxuICAgIHZhciBmaWx0ZXJlZEluc2VydEl0ZW1zID0gdGhpcy5fZmlsdGVyKCBpdGVtcyApLm1hdGNoZXM7XG4gICAgLy8gc2V0IGZsYWdcbiAgICBmb3IgKCBpPTA7IGkgPCBsZW47IGkrKyApIHtcbiAgICAgIGl0ZW1zW2ldLmlzTGF5b3V0SW5zdGFudCA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuYXJyYW5nZSgpO1xuICAgIC8vIHJlc2V0IGZsYWdcbiAgICBmb3IgKCBpPTA7IGkgPCBsZW47IGkrKyApIHtcbiAgICAgIGRlbGV0ZSBpdGVtc1tpXS5pc0xheW91dEluc3RhbnQ7XG4gICAgfVxuICAgIHRoaXMucmV2ZWFsKCBmaWx0ZXJlZEluc2VydEl0ZW1zICk7XG4gIH07XG5cbiAgdmFyIF9yZW1vdmUgPSBwcm90by5yZW1vdmU7XG4gIHByb3RvLnJlbW92ZSA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgICBlbGVtcyA9IHV0aWxzLm1ha2VBcnJheSggZWxlbXMgKTtcbiAgICB2YXIgcmVtb3ZlSXRlbXMgPSB0aGlzLmdldEl0ZW1zKCBlbGVtcyApO1xuICAgIC8vIGRvIHJlZ3VsYXIgdGhpbmdcbiAgICBfcmVtb3ZlLmNhbGwoIHRoaXMsIGVsZW1zICk7XG4gICAgLy8gYmFpbCBpZiBubyBpdGVtcyB0byByZW1vdmVcbiAgICB2YXIgbGVuID0gcmVtb3ZlSXRlbXMgJiYgcmVtb3ZlSXRlbXMubGVuZ3RoO1xuICAgIC8vIHJlbW92ZSBlbGVtcyBmcm9tIGZpbHRlcmVkSXRlbXNcbiAgICBmb3IgKCB2YXIgaT0wOyBsZW4gJiYgaSA8IGxlbjsgaSsrICkge1xuICAgICAgdmFyIGl0ZW0gPSByZW1vdmVJdGVtc1tpXTtcbiAgICAgIC8vIHJlbW92ZSBpdGVtIGZyb20gY29sbGVjdGlvblxuICAgICAgdXRpbHMucmVtb3ZlRnJvbSggdGhpcy5maWx0ZXJlZEl0ZW1zLCBpdGVtICk7XG4gICAgfVxuICB9O1xuXG4gIHByb3RvLnNodWZmbGUgPSBmdW5jdGlvbigpIHtcbiAgICAvLyB1cGRhdGUgcmFuZG9tIHNvcnREYXRhXG4gICAgZm9yICggdmFyIGk9MDsgaSA8IHRoaXMuaXRlbXMubGVuZ3RoOyBpKysgKSB7XG4gICAgICB2YXIgaXRlbSA9IHRoaXMuaXRlbXNbaV07XG4gICAgICBpdGVtLnNvcnREYXRhLnJhbmRvbSA9IE1hdGgucmFuZG9tKCk7XG4gICAgfVxuICAgIHRoaXMub3B0aW9ucy5zb3J0QnkgPSAncmFuZG9tJztcbiAgICB0aGlzLl9zb3J0KCk7XG4gICAgdGhpcy5fbGF5b3V0KCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIHRyaWdnZXIgZm4gd2l0aG91dCB0cmFuc2l0aW9uXG4gICAqIGtpbmQgb2YgaGFja3kgdG8gaGF2ZSB0aGlzIGluIHRoZSBmaXJzdCBwbGFjZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzXG4gICAqIEByZXR1cm5zIHJldFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcHJvdG8uX25vVHJhbnNpdGlvbiA9IGZ1bmN0aW9uKCBmbiwgYXJncyApIHtcbiAgICAvLyBzYXZlIHRyYW5zaXRpb25EdXJhdGlvbiBiZWZvcmUgZGlzYWJsaW5nXG4gICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IHRoaXMub3B0aW9ucy50cmFuc2l0aW9uRHVyYXRpb247XG4gICAgLy8gZGlzYWJsZSB0cmFuc2l0aW9uXG4gICAgdGhpcy5vcHRpb25zLnRyYW5zaXRpb25EdXJhdGlvbiA9IDA7XG4gICAgLy8gZG8gaXRcbiAgICB2YXIgcmV0dXJuVmFsdWUgPSBmbi5hcHBseSggdGhpcywgYXJncyApO1xuICAgIC8vIHJlLWVuYWJsZSB0cmFuc2l0aW9uIGZvciByZXZlYWxcbiAgICB0aGlzLm9wdGlvbnMudHJhbnNpdGlvbkR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uO1xuICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgfTtcblxuICAvLyAtLS0tLSBoZWxwZXIgbWV0aG9kcyAtLS0tLSAvL1xuXG4gIC8qKlxuICAgKiBnZXR0ZXIgbWV0aG9kIGZvciBnZXR0aW5nIGZpbHRlcmVkIGl0ZW0gZWxlbWVudHNcbiAgICogQHJldHVybnMge0FycmF5fSBlbGVtcyAtIGNvbGxlY3Rpb24gb2YgaXRlbSBlbGVtZW50c1xuICAgKi9cbiAgcHJvdG8uZ2V0RmlsdGVyZWRJdGVtRWxlbWVudHMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5maWx0ZXJlZEl0ZW1zLm1hcCggZnVuY3Rpb24oIGl0ZW0gKSB7XG4gICAgICByZXR1cm4gaXRlbS5lbGVtZW50O1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIC0tLS0tICAtLS0tLSAvL1xuXG4gIHJldHVybiBJc290b3BlO1xuXG59KSk7XG5cbiIsIm1vZHVsZS5leHBvcnRzID0galF1ZXJ5OyIsInZhciBWYW5pbGxhVGlsdCA9IChmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIFxuICAgIC8qKlxuICAgICAqIENyZWF0ZWQgYnkgU2VyZ2l1IMiYYW5kb3IgKG1pY2t1N3p1KSBvbiAxLzI3LzIwMTcuXG4gICAgICogT3JpZ2luYWwgaWRlYTogaHR0cHM6Ly9naXRodWIuY29tL2dpanNyb2dlL3RpbHQuanNcbiAgICAgKiBNSVQgTGljZW5zZS5cbiAgICAgKiBWZXJzaW9uIDEuNy4wXG4gICAgICovXG4gICAgXG4gICAgY2xhc3MgVmFuaWxsYVRpbHQge1xuICAgICAgY29uc3RydWN0b3IoZWxlbWVudCwgc2V0dGluZ3MgPSB7fSkge1xuICAgICAgICBpZiAoIShlbGVtZW50IGluc3RhbmNlb2YgTm9kZSkpIHtcbiAgICAgICAgICB0aHJvdyAoXCJDYW4ndCBpbml0aWFsaXplIFZhbmlsbGFUaWx0IGJlY2F1c2UgXCIgKyBlbGVtZW50ICsgXCIgaXMgbm90IGEgTm9kZS5cIik7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgdGhpcy53aWR0aCA9IG51bGw7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5jbGllbnRXaWR0aCA9IG51bGw7XG4gICAgICAgIHRoaXMuY2xpZW50SGVpZ2h0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5sZWZ0ID0gbnVsbDtcbiAgICAgICAgdGhpcy50b3AgPSBudWxsO1xuICAgIFxuICAgICAgICAvLyBmb3IgR3lyb3Njb3BlIHNhbXBsaW5nXG4gICAgICAgIHRoaXMuZ2FtbWF6ZXJvID0gbnVsbDtcbiAgICAgICAgdGhpcy5iZXRhemVybyA9IG51bGw7XG4gICAgICAgIHRoaXMubGFzdGdhbW1hemVybyA9IG51bGw7XG4gICAgICAgIHRoaXMubGFzdGJldGF6ZXJvID0gbnVsbDtcbiAgICBcbiAgICAgICAgdGhpcy50cmFuc2l0aW9uVGltZW91dCA9IG51bGw7XG4gICAgICAgIHRoaXMudXBkYXRlQ2FsbCA9IG51bGw7XG4gICAgICAgIHRoaXMuZXZlbnQgPSBudWxsO1xuICAgIFxuICAgICAgICB0aGlzLnVwZGF0ZUJpbmQgPSB0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnJlc2V0QmluZCA9IHRoaXMucmVzZXQuYmluZCh0aGlzKTtcbiAgICBcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IHRoaXMuZXh0ZW5kU2V0dGluZ3Moc2V0dGluZ3MpO1xuICAgIFxuICAgICAgICB0aGlzLnJldmVyc2UgPSB0aGlzLnNldHRpbmdzLnJldmVyc2UgPyAtMSA6IDE7XG4gICAgICAgIHRoaXMuZ2xhcmUgPSBWYW5pbGxhVGlsdC5pc1NldHRpbmdUcnVlKHRoaXMuc2V0dGluZ3MuZ2xhcmUpO1xuICAgICAgICB0aGlzLmdsYXJlUHJlcmVuZGVyID0gVmFuaWxsYVRpbHQuaXNTZXR0aW5nVHJ1ZSh0aGlzLnNldHRpbmdzW1wiZ2xhcmUtcHJlcmVuZGVyXCJdKTtcbiAgICAgICAgdGhpcy5mdWxsUGFnZUxpc3RlbmluZyA9IFZhbmlsbGFUaWx0LmlzU2V0dGluZ1RydWUodGhpcy5zZXR0aW5nc1tcImZ1bGwtcGFnZS1saXN0ZW5pbmdcIl0pO1xuICAgICAgICB0aGlzLmd5cm9zY29wZSA9IFZhbmlsbGFUaWx0LmlzU2V0dGluZ1RydWUodGhpcy5zZXR0aW5ncy5neXJvc2NvcGUpO1xuICAgICAgICB0aGlzLmd5cm9zY29wZVNhbXBsZXMgPSB0aGlzLnNldHRpbmdzLmd5cm9zY29wZVNhbXBsZXM7XG4gICAgXG4gICAgICAgIHRoaXMuZWxlbWVudExpc3RlbmVyID0gdGhpcy5nZXRFbGVtZW50TGlzdGVuZXIoKTtcbiAgICBcbiAgICAgICAgaWYgKHRoaXMuZ2xhcmUpIHtcbiAgICAgICAgICB0aGlzLnByZXBhcmVHbGFyZSgpO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGlmICh0aGlzLmZ1bGxQYWdlTGlzdGVuaW5nKSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVDbGllbnRTaXplKCk7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xuICAgICAgICB0aGlzLnVwZGF0ZUluaXRpYWxQb3NpdGlvbigpO1xuICAgICAgfVxuICAgIFxuICAgICAgc3RhdGljIGlzU2V0dGluZ1RydWUoc2V0dGluZykge1xuICAgICAgICByZXR1cm4gc2V0dGluZyA9PT0gXCJcIiB8fCBzZXR0aW5nID09PSB0cnVlIHx8IHNldHRpbmcgPT09IDE7XG4gICAgICB9XG4gICAgXG4gICAgICAvKipcbiAgICAgICAqIE1ldGhvZCByZXR1cm5zIGVsZW1lbnQgd2hhdCB3aWxsIGJlIGxpc3RlbiBtb3VzZSBldmVudHNcbiAgICAgICAqIEByZXR1cm4ge05vZGV9XG4gICAgICAgKi9cbiAgICAgIGdldEVsZW1lbnRMaXN0ZW5lcigpIHtcbiAgICAgICAgaWYgKHRoaXMuZnVsbFBhZ2VMaXN0ZW5pbmcpIHtcbiAgICAgICAgICByZXR1cm4gd2luZG93LmRvY3VtZW50O1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5zZXR0aW5nc1tcIm1vdXNlLWV2ZW50LWVsZW1lbnRcIl0gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICBjb25zdCBtb3VzZUV2ZW50RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5zZXR0aW5nc1tcIm1vdXNlLWV2ZW50LWVsZW1lbnRcIl0pO1xuICAgIFxuICAgICAgICAgIGlmIChtb3VzZUV2ZW50RWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIG1vdXNlRXZlbnRFbGVtZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIFxuICAgICAgICBpZiAodGhpcy5zZXR0aW5nc1tcIm1vdXNlLWV2ZW50LWVsZW1lbnRcIl0gaW5zdGFuY2VvZiBOb2RlKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3NbXCJtb3VzZS1ldmVudC1lbGVtZW50XCJdO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQ7XG4gICAgICB9XG4gICAgXG4gICAgICAvKipcbiAgICAgICAqIE1ldGhvZCBzZXQgbGlzdGVuIG1ldGhvZHMgZm9yIHRoaXMuZWxlbWVudExpc3RlbmVyXG4gICAgICAgKiBAcmV0dXJuIHtOb2RlfVxuICAgICAgICovXG4gICAgICBhZGRFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgdGhpcy5vbk1vdXNlRW50ZXJCaW5kID0gdGhpcy5vbk1vdXNlRW50ZXIuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5vbk1vdXNlTW92ZUJpbmQgPSB0aGlzLm9uTW91c2VNb3ZlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub25Nb3VzZUxlYXZlQmluZCA9IHRoaXMub25Nb3VzZUxlYXZlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub25XaW5kb3dSZXNpemVCaW5kID0gdGhpcy5vbldpbmRvd1Jlc2l6ZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm9uRGV2aWNlT3JpZW50YXRpb25CaW5kID0gdGhpcy5vbkRldmljZU9yaWVudGF0aW9uLmJpbmQodGhpcyk7XG4gICAgXG4gICAgICAgIHRoaXMuZWxlbWVudExpc3RlbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsIHRoaXMub25Nb3VzZUVudGVyQmluZCk7XG4gICAgICAgIHRoaXMuZWxlbWVudExpc3RlbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsIHRoaXMub25Nb3VzZUxlYXZlQmluZCk7XG4gICAgICAgIHRoaXMuZWxlbWVudExpc3RlbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5vbk1vdXNlTW92ZUJpbmQpO1xuICAgIFxuICAgICAgICBpZiAodGhpcy5nbGFyZSB8fCB0aGlzLmZ1bGxQYWdlTGlzdGVuaW5nKSB7XG4gICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5vbldpbmRvd1Jlc2l6ZUJpbmQpO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGlmICh0aGlzLmd5cm9zY29wZSkge1xuICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiZGV2aWNlb3JpZW50YXRpb25cIiwgdGhpcy5vbkRldmljZU9yaWVudGF0aW9uQmluZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBcbiAgICAgIC8qKlxuICAgICAgICogTWV0aG9kIHJlbW92ZSBldmVudCBsaXN0ZW5lcnMgZnJvbSBjdXJyZW50IHRoaXMuZWxlbWVudExpc3RlbmVyXG4gICAgICAgKi9cbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgICB0aGlzLmVsZW1lbnRMaXN0ZW5lci5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLCB0aGlzLm9uTW91c2VFbnRlckJpbmQpO1xuICAgICAgICB0aGlzLmVsZW1lbnRMaXN0ZW5lci5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCB0aGlzLm9uTW91c2VMZWF2ZUJpbmQpO1xuICAgICAgICB0aGlzLmVsZW1lbnRMaXN0ZW5lci5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMub25Nb3VzZU1vdmVCaW5kKTtcbiAgICBcbiAgICAgICAgaWYgKHRoaXMuZ3lyb3Njb3BlKSB7XG4gICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJkZXZpY2VvcmllbnRhdGlvblwiLCB0aGlzLm9uRGV2aWNlT3JpZW50YXRpb25CaW5kKTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBpZiAodGhpcy5nbGFyZSB8fCB0aGlzLmZ1bGxQYWdlTGlzdGVuaW5nKSB7XG4gICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5vbldpbmRvd1Jlc2l6ZUJpbmQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgXG4gICAgICBkZXN0cm95KCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50cmFuc2l0aW9uVGltZW91dCk7XG4gICAgICAgIGlmICh0aGlzLnVwZGF0ZUNhbGwgIT09IG51bGwpIHtcbiAgICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLnVwZGF0ZUNhbGwpO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICBcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpO1xuICAgICAgICB0aGlzLmVsZW1lbnQudmFuaWxsYVRpbHQgPSBudWxsO1xuICAgICAgICBkZWxldGUgdGhpcy5lbGVtZW50LnZhbmlsbGFUaWx0O1xuICAgIFxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBudWxsO1xuICAgICAgfVxuICAgIFxuICAgICAgb25EZXZpY2VPcmllbnRhdGlvbihldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQuZ2FtbWEgPT09IG51bGwgfHwgZXZlbnQuYmV0YSA9PT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnRQb3NpdGlvbigpO1xuICAgIFxuICAgICAgICBpZiAodGhpcy5neXJvc2NvcGVTYW1wbGVzID4gMCkge1xuICAgICAgICAgIHRoaXMubGFzdGdhbW1hemVybyA9IHRoaXMuZ2FtbWF6ZXJvO1xuICAgICAgICAgIHRoaXMubGFzdGJldGF6ZXJvID0gdGhpcy5iZXRhemVybztcbiAgICBcbiAgICAgICAgICBpZiAodGhpcy5nYW1tYXplcm8gPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZ2FtbWF6ZXJvID0gZXZlbnQuZ2FtbWE7XG4gICAgICAgICAgICB0aGlzLmJldGF6ZXJvID0gZXZlbnQuYmV0YTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5nYW1tYXplcm8gPSAoZXZlbnQuZ2FtbWEgKyB0aGlzLmxhc3RnYW1tYXplcm8pIC8gMjtcbiAgICAgICAgICAgIHRoaXMuYmV0YXplcm8gPSAoZXZlbnQuYmV0YSArIHRoaXMubGFzdGJldGF6ZXJvKSAvIDI7XG4gICAgICAgICAgfVxuICAgIFxuICAgICAgICAgIHRoaXMuZ3lyb3Njb3BlU2FtcGxlcyAtPSAxO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGNvbnN0IHRvdGFsQW5nbGVYID0gdGhpcy5zZXR0aW5ncy5neXJvc2NvcGVNYXhBbmdsZVggLSB0aGlzLnNldHRpbmdzLmd5cm9zY29wZU1pbkFuZ2xlWDtcbiAgICAgICAgY29uc3QgdG90YWxBbmdsZVkgPSB0aGlzLnNldHRpbmdzLmd5cm9zY29wZU1heEFuZ2xlWSAtIHRoaXMuc2V0dGluZ3MuZ3lyb3Njb3BlTWluQW5nbGVZO1xuICAgIFxuICAgICAgICBjb25zdCBkZWdyZWVzUGVyUGl4ZWxYID0gdG90YWxBbmdsZVggLyB0aGlzLndpZHRoO1xuICAgICAgICBjb25zdCBkZWdyZWVzUGVyUGl4ZWxZID0gdG90YWxBbmdsZVkgLyB0aGlzLmhlaWdodDtcbiAgICBcbiAgICAgICAgY29uc3QgYW5nbGVYID0gZXZlbnQuZ2FtbWEgLSAodGhpcy5zZXR0aW5ncy5neXJvc2NvcGVNaW5BbmdsZVggKyB0aGlzLmdhbW1hemVybyk7XG4gICAgICAgIGNvbnN0IGFuZ2xlWSA9IGV2ZW50LmJldGEgLSAodGhpcy5zZXR0aW5ncy5neXJvc2NvcGVNaW5BbmdsZVkgKyB0aGlzLmJldGF6ZXJvKTtcbiAgICBcbiAgICAgICAgY29uc3QgcG9zWCA9IGFuZ2xlWCAvIGRlZ3JlZXNQZXJQaXhlbFg7XG4gICAgICAgIGNvbnN0IHBvc1kgPSBhbmdsZVkgLyBkZWdyZWVzUGVyUGl4ZWxZO1xuICAgIFxuICAgICAgICBpZiAodGhpcy51cGRhdGVDYWxsICE9PSBudWxsKSB7XG4gICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy51cGRhdGVDYWxsKTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICB0aGlzLmV2ZW50ID0ge1xuICAgICAgICAgIGNsaWVudFg6IHBvc1ggKyB0aGlzLmxlZnQsXG4gICAgICAgICAgY2xpZW50WTogcG9zWSArIHRoaXMudG9wLFxuICAgICAgICB9O1xuICAgIFxuICAgICAgICB0aGlzLnVwZGF0ZUNhbGwgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy51cGRhdGVCaW5kKTtcbiAgICAgIH1cbiAgICBcbiAgICAgIG9uTW91c2VFbnRlcigpIHtcbiAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50UG9zaXRpb24oKTtcbiAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLndpbGxDaGFuZ2UgPSBcInRyYW5zZm9ybVwiO1xuICAgICAgICB0aGlzLnNldFRyYW5zaXRpb24oKTtcbiAgICAgIH1cbiAgICBcbiAgICAgIG9uTW91c2VNb3ZlKGV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLnVwZGF0ZUNhbGwgIT09IG51bGwpIHtcbiAgICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLnVwZGF0ZUNhbGwpO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIHRoaXMuZXZlbnQgPSBldmVudDtcbiAgICAgICAgdGhpcy51cGRhdGVDYWxsID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMudXBkYXRlQmluZCk7XG4gICAgICB9XG4gICAgXG4gICAgICBvbk1vdXNlTGVhdmUoKSB7XG4gICAgICAgIHRoaXMuc2V0VHJhbnNpdGlvbigpO1xuICAgIFxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5yZXNldCkge1xuICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnJlc2V0QmluZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBcbiAgICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLmV2ZW50ID0ge1xuICAgICAgICAgIGNsaWVudFg6IHRoaXMubGVmdCArIHRoaXMud2lkdGggLyAyLFxuICAgICAgICAgIGNsaWVudFk6IHRoaXMudG9wICsgdGhpcy5oZWlnaHQgLyAyXG4gICAgICAgIH07XG4gICAgXG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnQgJiYgdGhpcy5lbGVtZW50LnN0eWxlKSB7XG4gICAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9IGBwZXJzcGVjdGl2ZSgke3RoaXMuc2V0dGluZ3MucGVyc3BlY3RpdmV9cHgpIGAgK1xuICAgICAgICAgICAgYHJvdGF0ZVgoMGRlZykgYCArXG4gICAgICAgICAgICBgcm90YXRlWSgwZGVnKSBgICtcbiAgICAgICAgICAgIGBzY2FsZTNkKDEsIDEsIDEpYDtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICB0aGlzLnJlc2V0R2xhcmUoKTtcbiAgICAgIH1cbiAgICBcbiAgICAgIHJlc2V0R2xhcmUoKSB7XG4gICAgICAgIGlmICh0aGlzLmdsYXJlKSB7XG4gICAgICAgICAgdGhpcy5nbGFyZUVsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gXCJyb3RhdGUoMTgwZGVnKSB0cmFuc2xhdGUoLTUwJSwgLTUwJSlcIjtcbiAgICAgICAgICB0aGlzLmdsYXJlRWxlbWVudC5zdHlsZS5vcGFjaXR5ID0gXCIwXCI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBcbiAgICAgIHVwZGF0ZUluaXRpYWxQb3NpdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3Muc3RhcnRYID09PSAwICYmIHRoaXMuc2V0dGluZ3Muc3RhcnRZID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIHRoaXMub25Nb3VzZUVudGVyKCk7XG4gICAgXG4gICAgICAgIGlmICh0aGlzLmZ1bGxQYWdlTGlzdGVuaW5nKSB7XG4gICAgICAgICAgdGhpcy5ldmVudCA9IHtcbiAgICAgICAgICAgIGNsaWVudFg6ICh0aGlzLnNldHRpbmdzLnN0YXJ0WCArIHRoaXMuc2V0dGluZ3MubWF4KSAvICgyICogdGhpcy5zZXR0aW5ncy5tYXgpICogdGhpcy5jbGllbnRXaWR0aCxcbiAgICAgICAgICAgIGNsaWVudFk6ICh0aGlzLnNldHRpbmdzLnN0YXJ0WSArIHRoaXMuc2V0dGluZ3MubWF4KSAvICgyICogdGhpcy5zZXR0aW5ncy5tYXgpICogdGhpcy5jbGllbnRIZWlnaHRcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZXZlbnQgPSB7XG4gICAgICAgICAgICBjbGllbnRYOiB0aGlzLmxlZnQgKyAoKHRoaXMuc2V0dGluZ3Muc3RhcnRYICsgdGhpcy5zZXR0aW5ncy5tYXgpIC8gKDIgKiB0aGlzLnNldHRpbmdzLm1heCkgKiB0aGlzLndpZHRoKSxcbiAgICAgICAgICAgIGNsaWVudFk6IHRoaXMudG9wICsgKCh0aGlzLnNldHRpbmdzLnN0YXJ0WSArIHRoaXMuc2V0dGluZ3MubWF4KSAvICgyICogdGhpcy5zZXR0aW5ncy5tYXgpICogdGhpcy5oZWlnaHQpXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIFxuICAgIFxuICAgICAgICBsZXQgYmFja3VwU2NhbGUgPSB0aGlzLnNldHRpbmdzLnNjYWxlO1xuICAgICAgICB0aGlzLnNldHRpbmdzLnNjYWxlID0gMTtcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgdGhpcy5zZXR0aW5ncy5zY2FsZSA9IGJhY2t1cFNjYWxlO1xuICAgICAgICB0aGlzLnJlc2V0R2xhcmUoKTtcbiAgICAgIH1cbiAgICBcbiAgICAgIGdldFZhbHVlcygpIHtcbiAgICAgICAgbGV0IHgsIHk7XG4gICAgXG4gICAgICAgIGlmICh0aGlzLmZ1bGxQYWdlTGlzdGVuaW5nKSB7XG4gICAgICAgICAgeCA9IHRoaXMuZXZlbnQuY2xpZW50WCAvIHRoaXMuY2xpZW50V2lkdGg7XG4gICAgICAgICAgeSA9IHRoaXMuZXZlbnQuY2xpZW50WSAvIHRoaXMuY2xpZW50SGVpZ2h0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHggPSAodGhpcy5ldmVudC5jbGllbnRYIC0gdGhpcy5sZWZ0KSAvIHRoaXMud2lkdGg7XG4gICAgICAgICAgeSA9ICh0aGlzLmV2ZW50LmNsaWVudFkgLSB0aGlzLnRvcCkgLyB0aGlzLmhlaWdodDtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICB4ID0gTWF0aC5taW4oTWF0aC5tYXgoeCwgMCksIDEpO1xuICAgICAgICB5ID0gTWF0aC5taW4oTWF0aC5tYXgoeSwgMCksIDEpO1xuICAgIFxuICAgICAgICBsZXQgdGlsdFggPSAodGhpcy5yZXZlcnNlICogKHRoaXMuc2V0dGluZ3MubWF4IC0geCAqIHRoaXMuc2V0dGluZ3MubWF4ICogMikpLnRvRml4ZWQoMik7XG4gICAgICAgIGxldCB0aWx0WSA9ICh0aGlzLnJldmVyc2UgKiAoeSAqIHRoaXMuc2V0dGluZ3MubWF4ICogMiAtIHRoaXMuc2V0dGluZ3MubWF4KSkudG9GaXhlZCgyKTtcbiAgICAgICAgbGV0IGFuZ2xlID0gTWF0aC5hdGFuMih0aGlzLmV2ZW50LmNsaWVudFggLSAodGhpcy5sZWZ0ICsgdGhpcy53aWR0aCAvIDIpLCAtKHRoaXMuZXZlbnQuY2xpZW50WSAtICh0aGlzLnRvcCArIHRoaXMuaGVpZ2h0IC8gMikpKSAqICgxODAgLyBNYXRoLlBJKTtcbiAgICBcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0aWx0WDogdGlsdFgsXG4gICAgICAgICAgdGlsdFk6IHRpbHRZLFxuICAgICAgICAgIHBlcmNlbnRhZ2VYOiB4ICogMTAwLFxuICAgICAgICAgIHBlcmNlbnRhZ2VZOiB5ICogMTAwLFxuICAgICAgICAgIGFuZ2xlOiBhbmdsZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIFxuICAgICAgdXBkYXRlRWxlbWVudFBvc2l0aW9uKCkge1xuICAgICAgICBsZXQgcmVjdCA9IHRoaXMuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBcbiAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMuZWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLmVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICAgICAgICB0aGlzLmxlZnQgPSByZWN0LmxlZnQ7XG4gICAgICAgIHRoaXMudG9wID0gcmVjdC50b3A7XG4gICAgICB9XG4gICAgXG4gICAgICB1cGRhdGUoKSB7XG4gICAgICAgIGxldCB2YWx1ZXMgPSB0aGlzLmdldFZhbHVlcygpO1xuICAgIFxuICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gXCJwZXJzcGVjdGl2ZShcIiArIHRoaXMuc2V0dGluZ3MucGVyc3BlY3RpdmUgKyBcInB4KSBcIiArXG4gICAgICAgICAgXCJyb3RhdGVYKFwiICsgKHRoaXMuc2V0dGluZ3MuYXhpcyA9PT0gXCJ4XCIgPyAwIDogdmFsdWVzLnRpbHRZKSArIFwiZGVnKSBcIiArXG4gICAgICAgICAgXCJyb3RhdGVZKFwiICsgKHRoaXMuc2V0dGluZ3MuYXhpcyA9PT0gXCJ5XCIgPyAwIDogdmFsdWVzLnRpbHRYKSArIFwiZGVnKSBcIiArXG4gICAgICAgICAgXCJzY2FsZTNkKFwiICsgdGhpcy5zZXR0aW5ncy5zY2FsZSArIFwiLCBcIiArIHRoaXMuc2V0dGluZ3Muc2NhbGUgKyBcIiwgXCIgKyB0aGlzLnNldHRpbmdzLnNjYWxlICsgXCIpXCI7XG4gICAgXG4gICAgICAgIGlmICh0aGlzLmdsYXJlKSB7XG4gICAgICAgICAgdGhpcy5nbGFyZUVsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gYHJvdGF0ZSgke3ZhbHVlcy5hbmdsZX1kZWcpIHRyYW5zbGF0ZSgtNTAlLCAtNTAlKWA7XG4gICAgICAgICAgdGhpcy5nbGFyZUVsZW1lbnQuc3R5bGUub3BhY2l0eSA9IGAke3ZhbHVlcy5wZXJjZW50YWdlWSAqIHRoaXMuc2V0dGluZ3NbXCJtYXgtZ2xhcmVcIl0gLyAxMDB9YDtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICB0aGlzLmVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoXCJ0aWx0Q2hhbmdlXCIsIHtcbiAgICAgICAgICBcImRldGFpbFwiOiB2YWx1ZXNcbiAgICAgICAgfSkpO1xuICAgIFxuICAgICAgICB0aGlzLnVwZGF0ZUNhbGwgPSBudWxsO1xuICAgICAgfVxuICAgIFxuICAgICAgLyoqXG4gICAgICAgKiBBcHBlbmRzIHRoZSBnbGFyZSBlbGVtZW50IChpZiBnbGFyZVByZXJlbmRlciBlcXVhbHMgZmFsc2UpXG4gICAgICAgKiBhbmQgc2V0cyB0aGUgZGVmYXVsdCBzdHlsZVxuICAgICAgICovXG4gICAgICBwcmVwYXJlR2xhcmUoKSB7XG4gICAgICAgIC8vIElmIG9wdGlvbiBwcmUtcmVuZGVyIGlzIGVuYWJsZWQgd2UgYXNzdW1lIGFsbCBodG1sL2NzcyBpcyBwcmVzZW50IGZvciBhbiBvcHRpbWFsIGdsYXJlIGVmZmVjdC5cbiAgICAgICAgaWYgKCF0aGlzLmdsYXJlUHJlcmVuZGVyKSB7XG4gICAgICAgICAgLy8gQ3JlYXRlIGdsYXJlIGVsZW1lbnRcbiAgICAgICAgICBjb25zdCBqc1RpbHRHbGFyZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAganNUaWx0R2xhcmUuY2xhc3NMaXN0LmFkZChcImpzLXRpbHQtZ2xhcmVcIik7XG4gICAgXG4gICAgICAgICAgY29uc3QganNUaWx0R2xhcmVJbm5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAganNUaWx0R2xhcmVJbm5lci5jbGFzc0xpc3QuYWRkKFwianMtdGlsdC1nbGFyZS1pbm5lclwiKTtcbiAgICBcbiAgICAgICAgICBqc1RpbHRHbGFyZS5hcHBlbmRDaGlsZChqc1RpbHRHbGFyZUlubmVyKTtcbiAgICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoanNUaWx0R2xhcmUpO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIHRoaXMuZ2xhcmVFbGVtZW50V3JhcHBlciA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmpzLXRpbHQtZ2xhcmVcIik7XG4gICAgICAgIHRoaXMuZ2xhcmVFbGVtZW50ID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuanMtdGlsdC1nbGFyZS1pbm5lclwiKTtcbiAgICBcbiAgICAgICAgaWYgKHRoaXMuZ2xhcmVQcmVyZW5kZXIpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLmdsYXJlRWxlbWVudFdyYXBwZXIuc3R5bGUsIHtcbiAgICAgICAgICBcInBvc2l0aW9uXCI6IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICBcInRvcFwiOiBcIjBcIixcbiAgICAgICAgICBcImxlZnRcIjogXCIwXCIsXG4gICAgICAgICAgXCJ3aWR0aFwiOiBcIjEwMCVcIixcbiAgICAgICAgICBcImhlaWdodFwiOiBcIjEwMCVcIixcbiAgICAgICAgICBcIm92ZXJmbG93XCI6IFwiaGlkZGVuXCIsXG4gICAgICAgICAgXCJwb2ludGVyLWV2ZW50c1wiOiBcIm5vbmVcIlxuICAgICAgICB9KTtcbiAgICBcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLmdsYXJlRWxlbWVudC5zdHlsZSwge1xuICAgICAgICAgIFwicG9zaXRpb25cIjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICAgIFwidG9wXCI6IFwiNTAlXCIsXG4gICAgICAgICAgXCJsZWZ0XCI6IFwiNTAlXCIsXG4gICAgICAgICAgXCJwb2ludGVyLWV2ZW50c1wiOiBcIm5vbmVcIixcbiAgICAgICAgICBcImJhY2tncm91bmQtaW1hZ2VcIjogYGxpbmVhci1ncmFkaWVudCgwZGVnLCByZ2JhKDI1NSwyNTUsMjU1LDApIDAlLCByZ2JhKDI1NSwyNTUsMjU1LDEpIDEwMCUpYCxcbiAgICAgICAgICBcIndpZHRoXCI6IGAke3RoaXMuZWxlbWVudC5vZmZzZXRXaWR0aCAqIDJ9cHhgLFxuICAgICAgICAgIFwiaGVpZ2h0XCI6IGAke3RoaXMuZWxlbWVudC5vZmZzZXRXaWR0aCAqIDJ9cHhgLFxuICAgICAgICAgIFwidHJhbnNmb3JtXCI6IFwicm90YXRlKDE4MGRlZykgdHJhbnNsYXRlKC01MCUsIC01MCUpXCIsXG4gICAgICAgICAgXCJ0cmFuc2Zvcm0tb3JpZ2luXCI6IFwiMCUgMCVcIixcbiAgICAgICAgICBcIm9wYWNpdHlcIjogXCIwXCIsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIFxuICAgICAgdXBkYXRlR2xhcmVTaXplKCkge1xuICAgICAgICBpZiAodGhpcy5nbGFyZSkge1xuICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5nbGFyZUVsZW1lbnQuc3R5bGUsIHtcbiAgICAgICAgICAgIFwid2lkdGhcIjogYCR7dGhpcy5lbGVtZW50Lm9mZnNldFdpZHRoICogMn1gLFxuICAgICAgICAgICAgXCJoZWlnaHRcIjogYCR7dGhpcy5lbGVtZW50Lm9mZnNldFdpZHRoICogMn1gLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgXG4gICAgICB1cGRhdGVDbGllbnRTaXplKCkge1xuICAgICAgICB0aGlzLmNsaWVudFdpZHRoID0gd2luZG93LmlubmVyV2lkdGhcbiAgICAgICAgICB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGhcbiAgICAgICAgICB8fCBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoO1xuICAgIFxuICAgICAgICB0aGlzLmNsaWVudEhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodFxuICAgICAgICAgIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHRcbiAgICAgICAgICB8fCBkb2N1bWVudC5ib2R5LmNsaWVudEhlaWdodDtcbiAgICAgIH1cbiAgICBcbiAgICAgIG9uV2luZG93UmVzaXplKCkge1xuICAgICAgICB0aGlzLnVwZGF0ZUdsYXJlU2l6ZSgpO1xuICAgICAgICB0aGlzLnVwZGF0ZUNsaWVudFNpemUoKTtcbiAgICAgIH1cbiAgICBcbiAgICAgIHNldFRyYW5zaXRpb24oKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRyYW5zaXRpb25UaW1lb3V0KTtcbiAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLnRyYW5zaXRpb24gPSB0aGlzLnNldHRpbmdzLnNwZWVkICsgXCJtcyBcIiArIHRoaXMuc2V0dGluZ3MuZWFzaW5nO1xuICAgICAgICBpZiAodGhpcy5nbGFyZSkgdGhpcy5nbGFyZUVsZW1lbnQuc3R5bGUudHJhbnNpdGlvbiA9IGBvcGFjaXR5ICR7dGhpcy5zZXR0aW5ncy5zcGVlZH1tcyAke3RoaXMuc2V0dGluZ3MuZWFzaW5nfWA7XG4gICAgXG4gICAgICAgIHRoaXMudHJhbnNpdGlvblRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUudHJhbnNpdGlvbiA9IFwiXCI7XG4gICAgICAgICAgaWYgKHRoaXMuZ2xhcmUpIHtcbiAgICAgICAgICAgIHRoaXMuZ2xhcmVFbGVtZW50LnN0eWxlLnRyYW5zaXRpb24gPSBcIlwiO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgdGhpcy5zZXR0aW5ncy5zcGVlZCk7XG4gICAgXG4gICAgICB9XG4gICAgXG4gICAgICAvKipcbiAgICAgICAqIE1ldGhvZCByZXR1cm4gcGF0Y2hlZCBzZXR0aW5ncyBvZiBpbnN0YW5jZVxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBzZXR0aW5ncy5yZXZlcnNlIC0gcmV2ZXJzZSB0aGUgdGlsdCBkaXJlY3Rpb25cbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzZXR0aW5ncy5tYXggLSBtYXggdGlsdCByb3RhdGlvbiAoZGVncmVlcylcbiAgICAgICAqIEBwYXJhbSB7c3RhcnRYfSBzZXR0aW5ncy5zdGFydFggLSB0aGUgc3RhcnRpbmcgdGlsdCBvbiB0aGUgWCBheGlzLCBpbiBkZWdyZWVzLiBEZWZhdWx0OiAwXG4gICAgICAgKiBAcGFyYW0ge3N0YXJ0WX0gc2V0dGluZ3Muc3RhcnRZIC0gdGhlIHN0YXJ0aW5nIHRpbHQgb24gdGhlIFkgYXhpcywgaW4gZGVncmVlcy4gRGVmYXVsdDogMFxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHNldHRpbmdzLnBlcnNwZWN0aXZlIC0gVHJhbnNmb3JtIHBlcnNwZWN0aXZlLCB0aGUgbG93ZXIgdGhlIG1vcmUgZXh0cmVtZSB0aGUgdGlsdCBnZXRzXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2V0dGluZ3MuZWFzaW5nIC0gRWFzaW5nIG9uIGVudGVyL2V4aXRcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzZXR0aW5ncy5zY2FsZSAtIDIgPSAyMDAlLCAxLjUgPSAxNTAlLCBldGMuLlxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHNldHRpbmdzLnNwZWVkIC0gU3BlZWQgb2YgdGhlIGVudGVyL2V4aXQgdHJhbnNpdGlvblxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBzZXR0aW5ncy50cmFuc2l0aW9uIC0gU2V0IGEgdHJhbnNpdGlvbiBvbiBlbnRlci9leGl0XG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ3xudWxsfSBzZXR0aW5ncy5heGlzIC0gV2hhdCBheGlzIHNob3VsZCBiZSBkaXNhYmxlZC4gQ2FuIGJlIFggb3IgWVxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBzZXR0aW5ncy5nbGFyZSAtIFdoYXQgYXhpcyBzaG91bGQgYmUgZGlzYWJsZWQuIENhbiBiZSBYIG9yIFlcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzZXR0aW5ncy5tYXgtZ2xhcmUgLSB0aGUgbWF4aW11bSBcImdsYXJlXCIgb3BhY2l0eSAoMSA9IDEwMCUsIDAuNSA9IDUwJSlcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gc2V0dGluZ3MuZ2xhcmUtcHJlcmVuZGVyIC0gZmFsc2UgPSBWYW5pbGxhVGlsdCBjcmVhdGVzIHRoZSBnbGFyZSBlbGVtZW50cyBmb3IgeW91LCBvdGhlcndpc2VcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gc2V0dGluZ3MuZnVsbC1wYWdlLWxpc3RlbmluZyAtIElmIHRydWUsIHBhcmFsbGF4IGVmZmVjdCB3aWxsIGxpc3RlbiB0byBtb3VzZSBtb3ZlIGV2ZW50cyBvbiB0aGUgd2hvbGUgZG9jdW1lbnQsIG5vdCBvbmx5IHRoZSBzZWxlY3RlZCBlbGVtZW50XG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHNldHRpbmdzLm1vdXNlLWV2ZW50LWVsZW1lbnQgLSBTdHJpbmcgc2VsZWN0b3Igb3IgbGluayB0byBIVE1MLWVsZW1lbnQgd2hhdCB3aWxsIGJlIGxpc3RlbiBtb3VzZSBldmVudHNcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gc2V0dGluZ3MucmVzZXQgLSBmYWxzZSA9IElmIHRoZSB0aWx0IGVmZmVjdCBoYXMgdG8gYmUgcmVzZXQgb24gZXhpdFxuICAgICAgICogQHBhcmFtIHtneXJvc2NvcGV9IHNldHRpbmdzLmd5cm9zY29wZSAtIEVuYWJsZSB0aWx0aW5nIGJ5IGRldmljZW9yaWVudGF0aW9uIGV2ZW50c1xuICAgICAgICogQHBhcmFtIHtneXJvc2NvcGVTZW5zaXRpdml0eX0gc2V0dGluZ3MuZ3lyb3Njb3BlU2Vuc2l0aXZpdHkgLSBCZXR3ZWVuIDAgYW5kIDEgLSBUaGUgYW5nbGUgYXQgd2hpY2ggbWF4IHRpbHQgcG9zaXRpb24gaXMgcmVhY2hlZC4gMSA9IDkwZGVnLCAwLjUgPSA0NWRlZywgZXRjLi5cbiAgICAgICAqIEBwYXJhbSB7Z3lyb3Njb3BlU2FtcGxlc30gc2V0dGluZ3MuZ3lyb3Njb3BlU2FtcGxlcyAtIEhvdyBtYW55IGd5cm9zY29wZSBtb3ZlcyB0byBkZWNpZGUgdGhlIHN0YXJ0aW5nIHBvc2l0aW9uLlxuICAgICAgICovXG4gICAgICBleHRlbmRTZXR0aW5ncyhzZXR0aW5ncykge1xuICAgICAgICBsZXQgZGVmYXVsdFNldHRpbmdzID0ge1xuICAgICAgICAgIHJldmVyc2U6IGZhbHNlLFxuICAgICAgICAgIG1heDogMTUsXG4gICAgICAgICAgc3RhcnRYOiAwLFxuICAgICAgICAgIHN0YXJ0WTogMCxcbiAgICAgICAgICBwZXJzcGVjdGl2ZTogMTAwMCxcbiAgICAgICAgICBlYXNpbmc6IFwiY3ViaWMtYmV6aWVyKC4wMywuOTgsLjUyLC45OSlcIixcbiAgICAgICAgICBzY2FsZTogMSxcbiAgICAgICAgICBzcGVlZDogMzAwLFxuICAgICAgICAgIHRyYW5zaXRpb246IHRydWUsXG4gICAgICAgICAgYXhpczogbnVsbCxcbiAgICAgICAgICBnbGFyZTogZmFsc2UsXG4gICAgICAgICAgXCJtYXgtZ2xhcmVcIjogMSxcbiAgICAgICAgICBcImdsYXJlLXByZXJlbmRlclwiOiBmYWxzZSxcbiAgICAgICAgICBcImZ1bGwtcGFnZS1saXN0ZW5pbmdcIjogZmFsc2UsXG4gICAgICAgICAgXCJtb3VzZS1ldmVudC1lbGVtZW50XCI6IG51bGwsXG4gICAgICAgICAgcmVzZXQ6IHRydWUsXG4gICAgICAgICAgZ3lyb3Njb3BlOiB0cnVlLFxuICAgICAgICAgIGd5cm9zY29wZU1pbkFuZ2xlWDogLTQ1LFxuICAgICAgICAgIGd5cm9zY29wZU1heEFuZ2xlWDogNDUsXG4gICAgICAgICAgZ3lyb3Njb3BlTWluQW5nbGVZOiAtNDUsXG4gICAgICAgICAgZ3lyb3Njb3BlTWF4QW5nbGVZOiA0NSxcbiAgICAgICAgICBneXJvc2NvcGVTYW1wbGVzOiAxMFxuICAgICAgICB9O1xuICAgIFxuICAgICAgICBsZXQgbmV3U2V0dGluZ3MgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gZGVmYXVsdFNldHRpbmdzKSB7XG4gICAgICAgICAgaWYgKHByb3BlcnR5IGluIHNldHRpbmdzKSB7XG4gICAgICAgICAgICBuZXdTZXR0aW5nc1twcm9wZXJ0eV0gPSBzZXR0aW5nc1twcm9wZXJ0eV07XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmVsZW1lbnQuaGFzQXR0cmlidXRlKFwiZGF0YS10aWx0LVwiICsgcHJvcGVydHkpKSB7XG4gICAgICAgICAgICBsZXQgYXR0cmlidXRlID0gdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtdGlsdC1cIiArIHByb3BlcnR5KTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIG5ld1NldHRpbmdzW3Byb3BlcnR5XSA9IEpTT04ucGFyc2UoYXR0cmlidXRlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgbmV3U2V0dGluZ3NbcHJvcGVydHldID0gYXR0cmlidXRlO1xuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdTZXR0aW5nc1twcm9wZXJ0eV0gPSBkZWZhdWx0U2V0dGluZ3NbcHJvcGVydHldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIFxuICAgICAgICByZXR1cm4gbmV3U2V0dGluZ3M7XG4gICAgICB9XG4gICAgXG4gICAgICBzdGF0aWMgaW5pdChlbGVtZW50cywgc2V0dGluZ3MpIHtcbiAgICAgICAgaWYgKGVsZW1lbnRzIGluc3RhbmNlb2YgTm9kZSkge1xuICAgICAgICAgIGVsZW1lbnRzID0gW2VsZW1lbnRzXTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBpZiAoZWxlbWVudHMgaW5zdGFuY2VvZiBOb2RlTGlzdCkge1xuICAgICAgICAgIGVsZW1lbnRzID0gW10uc2xpY2UuY2FsbChlbGVtZW50cyk7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgaWYgKCEoZWxlbWVudHMgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZWxlbWVudHMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgIGlmICghKFwidmFuaWxsYVRpbHRcIiBpbiBlbGVtZW50KSkge1xuICAgICAgICAgICAgZWxlbWVudC52YW5pbGxhVGlsdCA9IG5ldyBWYW5pbGxhVGlsdChlbGVtZW50LCBzZXR0aW5ncyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgLyogZXhwb3NlIHRoZSBjbGFzcyB0byB3aW5kb3cgKi9cbiAgICAgIHdpbmRvdy5WYW5pbGxhVGlsdCA9IFZhbmlsbGFUaWx0O1xuICAgIFxuICAgICAgLyoqXG4gICAgICAgKiBBdXRvIGxvYWRcbiAgICAgICAqL1xuICAgICAgVmFuaWxsYVRpbHQuaW5pdChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtdGlsdF1cIikpO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gVmFuaWxsYVRpbHQ7XG4gICAgXG4gICAgfSgpKTtcbiAgICAiLCIvLyBSb3RhdGUgb24gc2Nyb2xsXHJcblxyXG53aW5kb3cub25zY3JvbGwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBzY3JvbGxSb3RhdGUoKTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIHNjcm9sbFJvdGF0ZSgpIHtcclxuICAgIGxldCBpbWFnZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm90YXRlLS1zY3JvbGxcIik7XHJcbiAgICBpbWFnZS5zdHlsZS50cmFuc2Zvcm0gPSBcInJvdGF0ZShcIiArIHdpbmRvdy5wYWdlWU9mZnNldC80ICsgXCJkZWcpXCI7XHJcbn1cclxuXHJcblxyXG52YXIgcmVsbGF4ID0gbmV3IFJlbGxheCgnLnJlbGxheCcpOyIsIihmdW5jdGlvbigkKSB7XHJcblxyXG4gICAgbGV0ICR3aW5kb3cgPSAkKHdpbmRvdyk7XHJcbiAgICBsZXQgbGFzdFdpbmRvd1dpZHRoID0gJHdpbmRvdy53aWR0aCgpO1xyXG4gICAgbGV0IHRvZ2dsZSA9ICQoICcubmF2YmFyLXRvZ2dsZXInICk7XHJcbiAgICBsZXQgaGVhZGVyID0gJCggJy5zaXRlLWhlYWRlcicgKTtcclxuICAgIGxldCBuYXZpZ2F0aW9uID0gJCggJy5uYXZiYXItbmF2JyApO1xyXG4gICAgbGV0IGRyb3Bkb3duQnRuID0gJCggJy5kcm9wZG93bi1idG4nICk7XHJcbiAgICBsZXQgZHJvcGRvd24gPSAkKCAnLmRyb3Bkb3duLW1lbnUnICk7XHJcblxyXG4gICAgLy8gRnVuY3Rpb25zXHJcbiAgICBmdW5jdGlvbiB0b2dnbGVNZW51KCkge1xyXG4gICAgICAgIC8vIFRvZ2dsZSAub3BlbiB0byAubmF2YmFyLW5hdlxyXG4gICAgICAgICQobmF2aWdhdGlvbikudG9nZ2xlQ2xhc3MoICdpcy1vcGVuJyApO1xyXG4gICAgICAgIC8vIFRvZ2dsZSAuaXMtYWN0aXZlIHRvIHRoZSBoYW1idXJnZXIgaWNvblxyXG4gICAgICAgICQodG9nZ2xlKS50b2dnbGVDbGFzcyggJ2lzLWFjdGl2ZScgKTtcclxuICAgICAgICAvLyBUb2dnbGUgLmlzLWFjdGl2ZSBvbiBzaXRlLWhlYWRlclxyXG4gICAgICAgICQoaGVhZGVyKS50b2dnbGVDbGFzcyggJ2V4cGFuZGVkJyApO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNsb3NlQWxsRHJvcGRvd25zKCkge1xyXG4gICAgICAgIGlmICgkKGRyb3Bkb3duKS5oYXNDbGFzcyggJ3Nob3cnICkpIHtcclxuICAgICAgICAgICAgJChkcm9wZG93bikucmVtb3ZlQ2xhc3MoICdzaG93JyApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoJChkcm9wZG93bkJ0bikuaGFzQ2xhc3MoICd0b2dnbGVkJyApKSB7XHJcbiAgICAgICAgICAgICQoZHJvcGRvd25CdG4pLnJlbW92ZUNsYXNzKCAndG9nZ2xlZCcgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJChkcm9wZG93bikuYXR0ciggXCJzdHlsZVwiLCBcIiBcIiApO1xyXG4gICAgICAgICQobmF2aWdhdGlvbikuYXR0ciggXCJzdHlsZVwiLCBcIiBcIiApO1xyXG4gICAgICAgICQodG9nZ2xlKS5yZW1vdmVDbGFzcyggJ2lzLWFjdGl2ZScgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBPcGVuIG1vYmlsZSBtZW51XHJcbiAgICAkKHRvZ2dsZSkuY2xpY2soZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgXHJcblxyXG4gICAgICAgIHRvZ2dsZU1lbnUoKTtcclxuICBcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIE9wZW4gZHJvcGRvd24gbWVudXNcclxuICAgICQoZHJvcGRvd25CdG4pLmNsaWNrKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7IFxyXG5cclxuICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xyXG5cclxuICAgICAgICAvLyBBZGQgLyByZW1vdmUgLnRvZ2dsZWQgZnJvbSBkcm9wZG93biBidXR0b25cclxuXHRcdGlmICgkdGhpcy5oYXNDbGFzcyggJ3RvZ2dsZWQnICkpIHtcclxuXHRcdFx0JHRoaXMucmVtb3ZlQ2xhc3MoICd0b2dnbGVkJyApO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0JHRoaXMucGFyZW50KCkucGFyZW50KCkuZmluZCggJy5kcm9wZG93bi1idG4nICkucmVtb3ZlQ2xhc3MoICd0b2dnbGVkJyApO1xyXG5cdFx0XHQkdGhpcy50b2dnbGVDbGFzcyggJ3RvZ2dsZWQnICk7XHJcblx0XHR9XHJcblxyXG4gICAgICAgIC8vIEFkZCAvIHJlbW92ZSAuc2hvdyBmcm9tIGRyb3Bkb3duLW1lbnVcclxuICAgICAgICBpZiAoJHRoaXMubmV4dCgpLmhhc0NsYXNzKCAnc2hvdycgKSkge1xyXG4gICAgICAgICAgICAkdGhpcy5uZXh0KCkucmVtb3ZlQ2xhc3MoICdzaG93JyApO1xyXG4gICAgICAgICAgICAkdGhpcy5uZXh0KCkuc2xpZGVVcCggMzUwICk7XHJcbiAgICAgICAgICAgICR0aGlzLnBhcmVudCgpLnBhcmVudCgpLmZpbmQoICcuZHJvcGRvd24tbWVudScgKS5yZW1vdmVDbGFzcyggJ3Nob3cnICk7XHJcbiAgICAgICAgICAgICR0aGlzLnBhcmVudCgpLnBhcmVudCgpLmZpbmQoICcuZHJvcGRvd24tbWVudScgKS5zbGlkZVVwKCAzNTAgKTtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJHRoaXMucGFyZW50KCkucGFyZW50KCkuZmluZCggJy5kcm9wZG93bi1tZW51JyApLnJlbW92ZUNsYXNzKCAnc2hvdycgKTtcclxuXHRcdFx0JHRoaXMucGFyZW50KCkucGFyZW50KCkuZmluZCggJy5kcm9wZG93bi1tZW51JyApLnNsaWRlVXAoIDM1MCApO1xyXG5cdFx0XHQkdGhpcy5uZXh0KCkudG9nZ2xlQ2xhc3MoICdzaG93JyApO1xyXG4gICAgICAgICAgICAkdGhpcy5uZXh0KCkuc2xpZGVUb2dnbGUoIDM1MCApO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIENsb3NlIGFuZCByZXNldCBvbiB3aW5kb3cgd2lkdGggY2hhbmdlXHJcbiAgICAkd2luZG93LnJlc2l6ZShmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIHZhciB3aW5kb3dXaWR0aCA9ICR3aW5kb3cud2lkdGgoKTtcclxuXHJcbiAgICAgICAgaWYgKGxhc3RXaW5kb3dXaWR0aCAhPT0gd2luZG93V2lkdGgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoJChuYXZpZ2F0aW9uKS5oYXNDbGFzcyggJ2lzLW9wZW4nICkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0b2dnbGVNZW51KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGNsb3NlQWxsRHJvcGRvd25zKCk7XHJcbiAgICAgICAgICAgICAgICAkKG5hdmlnYXRpb24pLnJlbW92ZUF0dHIoICdzdHlsZScgKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgICAgXHJcbn0pKCBqUXVlcnkgKTtcclxuIiwialF1ZXJ5KGZ1bmN0aW9uICgkKSB7XHJcblxyXG4gIHZhciAkZ3JpZCA9ICQoJy5nYWxsZXJ5JykuaXNvdG9wZSh7XHJcbiAgICBpdGVtU2VsZWN0b3I6ICcuZ2FsbGVyeS1pdGVtJyxcclxuICAgIGxheW91dE1vZGU6ICdtYXNvbnJ5JyxcclxuICAgIG1hc29ucnkgOiB7XHJcbiAgICAgIGd1dHRlcjogJy5nYWxsZXJ5LWl0ZW0tZ3V0dGVyJ1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIC8vIGZpbHRlciBmdW5jdGlvbnNcclxuICB2YXIgZmlsdGVyRm5zID0ge1xyXG4gICAgLy8gc2hvdyBpZiBudW1iZXIgaXMgZ3JlYXRlciB0aGFuIDUwXHJcbiAgICBudW1iZXJHcmVhdGVyVGhhbjUwOiBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIG51bWJlciA9ICQodGhpcykuZmluZCgnLm51bWJlcicpLnRleHQoKTtcclxuICAgICAgcmV0dXJuIHBhcnNlSW50KCBudW1iZXIsIDEwICkgPiA1MDtcclxuICAgIH0sXHJcbiAgICAvLyBzaG93IGlmIG5hbWUgZW5kcyB3aXRoIC1pdW1cclxuICAgIGl1bTogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBuYW1lID0gJCh0aGlzKS5maW5kKCcubmFtZScpLnRleHQoKTtcclxuICAgICAgcmV0dXJuIG5hbWUubWF0Y2goIC9pdW0kLyApO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgLy8gYmluZCBmaWx0ZXIgYnV0dG9uIGNsaWNrXHJcbiAgJCgnLmJ0bi1maWx0ZXItZ3JvdXAnKS5vbiggJ2NsaWNrJywgJ2J1dHRvbicsIGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGZpbHRlclZhbHVlID0gJCggdGhpcyApLmF0dHIoJ2RhdGEtZmlsdGVyJyk7XHJcbiAgICAvLyB1c2UgZmlsdGVyRm4gaWYgbWF0Y2hlcyB2YWx1ZVxyXG4gICAgZmlsdGVyVmFsdWUgPSBmaWx0ZXJGbnNbIGZpbHRlclZhbHVlIF0gfHwgZmlsdGVyVmFsdWU7XHJcbiAgICAkZ3JpZC5pc290b3BlKHsgZmlsdGVyOiBmaWx0ZXJWYWx1ZSB9KTtcclxuICB9KTtcclxuICAvLyBjaGFuZ2Ugc2VsZWN0ZWQgY2xhc3Mgb24gYnV0dG9uc1xyXG4gICQoJy5idG4tZ3JvdXAnKS5lYWNoKCBmdW5jdGlvbiggaSwgYnV0dG9uR3JvdXAgKSB7XHJcbiAgICB2YXIgJGJ1dHRvbkdyb3VwID0gJCggYnV0dG9uR3JvdXAgKTtcclxuICAgICRidXR0b25Hcm91cC5vbiggJ2NsaWNrJywgJ2J1dHRvbicsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAkYnV0dG9uR3JvdXAuZmluZCgnLnNlbGVjdGVkJykucmVtb3ZlQ2xhc3MoJ3NlbGVjdGVkJyk7XHJcbiAgICAgICQoIHRoaXMgKS5hZGRDbGFzcygnc2VsZWN0ZWQnKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG4gIFxyXG4gIFxyXG5cclxufSk7XHJcblxyXG5cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==