!function(t){var e={};function i(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(n,s,function(e){return t[e]}.bind(null,s));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){t.exports=i(1)},function(t,e,i){"use strict";i.r(e);i(2),i(4),i(5),i(6),i(7)},function(t,e,i){var n,s,o,r,a,h,l,u,c,d,m,f,p,g,v,y,_,b,x,z,E;function I(t){return(I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}
/*!
 * Isotope PACKAGED v3.0.6
 *
 * Licensed GPLv3 for open source use
 * or Isotope Commercial License for commercial use
 *
 * https://isotope.metafizzy.co
 * Copyright 2010-2018 Metafizzy
 */!function(n,s){z=[i(3)],void 0===(E=function(t){return function(t,e){"use strict";var i=Array.prototype.slice,n=t.console,s=void 0===n?function(){}:function(t){n.error(t)};function o(n,o,a){function h(t,e,i){var o,r="$()."+n+'("'+e+'")';return t.each((function(t,h){var l=a.data(h,n);if(l){var u=l[e];if(u&&"_"!=e.charAt(0)){var c=u.apply(l,i);o=void 0===o?c:o}else s(r+" is not a valid method")}else s(n+" not initialized. Cannot call methods, i.e. "+r)})),void 0!==o?o:t}function l(t,e){t.each((function(t,i){var s=a.data(i,n);s?(s.option(e),s._init()):(s=new o(i,e),a.data(i,n,s))}))}(a=a||e||t.jQuery)&&(o.prototype.option||(o.prototype.option=function(t){a.isPlainObject(t)&&(this.options=a.extend(!0,this.options,t))}),a.fn[n]=function(t){if("string"==typeof t){var e=i.call(arguments,1);return h(this,t,e)}return l(this,t),this},r(a))}function r(t){!t||t&&t.bridget||(t.bridget=o)}return r(e||t.jQuery),o}(n,t)}.apply(e,z))||(t.exports=E)}(window),"undefined"!=typeof window&&window,o={id:"ev-emitter/ev-emitter",exports:{},loaded:!1},n="function"==typeof(s=function(){function t(){}var e=t.prototype;return e.on=function(t,e){if(t&&e){var i=this._events=this._events||{},n=i[t]=i[t]||[];return-1==n.indexOf(e)&&n.push(e),this}},e.once=function(t,e){if(t&&e){this.on(t,e);var i=this._onceEvents=this._onceEvents||{};return(i[t]=i[t]||{})[e]=!0,this}},e.off=function(t,e){var i=this._events&&this._events[t];if(i&&i.length){var n=i.indexOf(e);return-1!=n&&i.splice(n,1),this}},e.emitEvent=function(t,e){var i=this._events&&this._events[t];if(i&&i.length){i=i.slice(0),e=e||[];for(var n=this._onceEvents&&this._onceEvents[t],s=0;s<i.length;s++){var o=i[s];n&&n[o]&&(this.off(t,o),delete n[o]),o.apply(this,e)}return this}},e.allOff=function(){delete this._events,delete this._onceEvents},t})?s.call(o.exports,i,o.exports,o):s,o.loaded=!0,void 0!==n||(n=o.exports),window,h={id:"get-size/get-size",exports:{},loaded:!1},r="function"==typeof(a=function(){"use strict";function t(t){var e=parseFloat(t);return-1==t.indexOf("%")&&!isNaN(e)&&e}var e="undefined"==typeof console?function(){}:function(t){console.error(t)},i=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"],n=i.length;function s(t){var i=getComputedStyle(t);return i||e("Style returned "+i+". Are you running this code in a hidden iframe on Firefox? See https://bit.ly/getsizebug1"),i}var o,r=!1;function a(e){if(function(){if(!r){r=!0;var e=document.createElement("div");e.style.width="200px",e.style.padding="1px 2px 3px 4px",e.style.borderStyle="solid",e.style.borderWidth="1px 2px 3px 4px",e.style.boxSizing="border-box";var i=document.body||document.documentElement;i.appendChild(e);var n=s(e);o=200==Math.round(t(n.width)),a.isBoxSizeOuter=o,i.removeChild(e)}}(),"string"==typeof e&&(e=document.querySelector(e)),e&&"object"==I(e)&&e.nodeType){var h=s(e);if("none"==h.display)return function(){for(var t={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},e=0;e<n;e++)t[i[e]]=0;return t}();var l={};l.width=e.offsetWidth,l.height=e.offsetHeight;for(var u=l.isBorderBox="border-box"==h.boxSizing,c=0;c<n;c++){var d=i[c],m=h[d],f=parseFloat(m);l[d]=isNaN(f)?0:f}var p=l.paddingLeft+l.paddingRight,g=l.paddingTop+l.paddingBottom,v=l.marginLeft+l.marginRight,y=l.marginTop+l.marginBottom,_=l.borderLeftWidth+l.borderRightWidth,b=l.borderTopWidth+l.borderBottomWidth,x=u&&o,z=t(h.width);!1!==z&&(l.width=z+(x?0:p+_));var E=t(h.height);return!1!==E&&(l.height=E+(x?0:g+b)),l.innerWidth=l.width-(p+_),l.innerHeight=l.height-(g+b),l.outerWidth=l.width+v,l.outerHeight=l.height+y,l}}return a})?a.call(h.exports,i,h.exports,h):a,h.loaded=!0,void 0!==r||(r=h.exports),function(t,e){"use strict";c={id:"desandro-matches-selector/matches-selector",exports:{},loaded:!1},l="function"==typeof(u=e)?u.call(c.exports,i,c.exports,c):u,c.loaded=!0,void 0!==l||(l=c.exports)}(window,(function(){"use strict";var t=function(){var t=window.Element.prototype;if(t.matches)return"matches";if(t.matchesSelector)return"matchesSelector";for(var e=["webkit","moz","ms","o"],i=0;i<e.length;i++){var n=e[i]+"MatchesSelector";if(t[n])return n}}();return function(e,i){return e[t](i)}})),function(t,i){d=function(e){return function(t,e){var i={extend:function(t,e){for(var i in e)t[i]=e[i];return t},modulo:function(t,e){return(t%e+e)%e}},n=Array.prototype.slice;i.makeArray=function(t){return Array.isArray(t)?t:null==t?[]:"object"==I(t)&&"number"==typeof t.length?n.call(t):[t]},i.removeFrom=function(t,e){var i=t.indexOf(e);-1!=i&&t.splice(i,1)},i.getParent=function(t,i){for(;t.parentNode&&t!=document.body;)if(t=t.parentNode,e(t,i))return t},i.getQueryElement=function(t){return"string"==typeof t?document.querySelector(t):t},i.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},i.filterFindElements=function(t,n){t=i.makeArray(t);var s=[];return t.forEach((function(t){if(t instanceof HTMLElement)if(n){e(t,n)&&s.push(t);for(var i=t.querySelectorAll(n),o=0;o<i.length;o++)s.push(i[o])}else s.push(t)})),s},i.debounceMethod=function(t,e,i){i=i||100;var n=t.prototype[e],s=e+"Timeout";t.prototype[e]=function(){var t=this[s];clearTimeout(t);var e=arguments,o=this;this[s]=setTimeout((function(){n.apply(o,e),delete o[s]}),i)}},i.docReady=function(t){var e=document.readyState;"complete"==e||"interactive"==e?setTimeout(t):document.addEventListener("DOMContentLoaded",t)},i.toDashed=function(t){return t.replace(/(.)([A-Z])/g,(function(t,e,i){return e+"-"+i})).toLowerCase()};var s=t.console;return i.htmlInit=function(e,n){i.docReady((function(){var o=i.toDashed(n),r="data-"+o,a=document.querySelectorAll("["+r+"]"),h=document.querySelectorAll(".js-"+o),l=i.makeArray(a).concat(i.makeArray(h)),u=r+"-options",c=t.jQuery;l.forEach((function(t){var i,o=t.getAttribute(r)||t.getAttribute(u);try{i=o&&JSON.parse(o)}catch(e){return void(s&&s.error("Error parsing "+r+" on "+t.className+": "+e))}var a=new e(t,i);c&&c.data(t,n,a)}))}))},i}(t,e)}.apply(e,z=[l])}(window),window,z=[n,r],m="function"==typeof(b=function(t,e){"use strict";var i=document.documentElement.style,n="string"==typeof i.transition?"transition":"WebkitTransition",s="string"==typeof i.transform?"transform":"WebkitTransform",o={WebkitTransition:"webkitTransitionEnd",transition:"transitionend"}[n],r={transform:s,transition:n,transitionDuration:n+"Duration",transitionProperty:n+"Property",transitionDelay:n+"Delay"};function a(t,e){t&&(this.element=t,this.layout=e,this.position={x:0,y:0},this._create())}var h=a.prototype=Object.create(t.prototype);h.constructor=a,h._create=function(){this._transn={ingProperties:{},clean:{},onEnd:{}},this.css({position:"absolute"})},h.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},h.getSize=function(){this.size=e(this.element)},h.css=function(t){var e=this.element.style;for(var i in t)e[r[i]||i]=t[i]},h.getPosition=function(){var t=getComputedStyle(this.element),e=this.layout._getOption("originLeft"),i=this.layout._getOption("originTop"),n=t[e?"left":"right"],s=t[i?"top":"bottom"],o=parseFloat(n),r=parseFloat(s),a=this.layout.size;-1!=n.indexOf("%")&&(o=o/100*a.width),-1!=s.indexOf("%")&&(r=r/100*a.height),o=isNaN(o)?0:o,r=isNaN(r)?0:r,o-=e?a.paddingLeft:a.paddingRight,r-=i?a.paddingTop:a.paddingBottom,this.position.x=o,this.position.y=r},h.layoutPosition=function(){var t=this.layout.size,e={},i=this.layout._getOption("originLeft"),n=this.layout._getOption("originTop"),s=i?"paddingLeft":"paddingRight",o=i?"left":"right",r=i?"right":"left",a=this.position.x+t[s];e[o]=this.getXValue(a),e[r]="";var h=n?"paddingTop":"paddingBottom",l=n?"top":"bottom",u=n?"bottom":"top",c=this.position.y+t[h];e[l]=this.getYValue(c),e[u]="",this.css(e),this.emitEvent("layout",[this])},h.getXValue=function(t){var e=this.layout._getOption("horizontal");return this.layout.options.percentPosition&&!e?t/this.layout.size.width*100+"%":t+"px"},h.getYValue=function(t){var e=this.layout._getOption("horizontal");return this.layout.options.percentPosition&&e?t/this.layout.size.height*100+"%":t+"px"},h._transitionTo=function(t,e){this.getPosition();var i=this.position.x,n=this.position.y,s=t==this.position.x&&e==this.position.y;if(this.setPosition(t,e),!s||this.isTransitioning){var o=t-i,r=e-n,a={};a.transform=this.getTranslate(o,r),this.transition({to:a,onTransitionEnd:{transform:this.layoutPosition},isCleaning:!0})}else this.layoutPosition()},h.getTranslate=function(t,e){return"translate3d("+(t=this.layout._getOption("originLeft")?t:-t)+"px, "+(e=this.layout._getOption("originTop")?e:-e)+"px, 0)"},h.goTo=function(t,e){this.setPosition(t,e),this.layoutPosition()},h.moveTo=h._transitionTo,h.setPosition=function(t,e){this.position.x=parseFloat(t),this.position.y=parseFloat(e)},h._nonTransition=function(t){for(var e in this.css(t.to),t.isCleaning&&this._removeStyles(t.to),t.onTransitionEnd)t.onTransitionEnd[e].call(this)},h.transition=function(t){if(parseFloat(this.layout.options.transitionDuration)){var e=this._transn;for(var i in t.onTransitionEnd)e.onEnd[i]=t.onTransitionEnd[i];for(i in t.to)e.ingProperties[i]=!0,t.isCleaning&&(e.clean[i]=!0);t.from&&(this.css(t.from),this.element.offsetHeight),this.enableTransition(t.to),this.css(t.to),this.isTransitioning=!0}else this._nonTransition(t)};var l="opacity,"+s.replace(/([A-Z])/g,(function(t){return"-"+t.toLowerCase()}));h.enableTransition=function(){if(!this.isTransitioning){var t=this.layout.options.transitionDuration;t="number"==typeof t?t+"ms":t,this.css({transitionProperty:l,transitionDuration:t,transitionDelay:this.staggerDelay||0}),this.element.addEventListener(o,this,!1)}},h.onwebkitTransitionEnd=function(t){this.ontransitionend(t)},h.onotransitionend=function(t){this.ontransitionend(t)};var u={"-webkit-transform":"transform"};h.ontransitionend=function(t){if(t.target===this.element){var e=this._transn,i=u[t.propertyName]||t.propertyName;delete e.ingProperties[i],function(t){for(var e in t)return!1;return!0}(e.ingProperties)&&this.disableTransition(),i in e.clean&&(this.element.style[t.propertyName]="",delete e.clean[i]),i in e.onEnd&&(e.onEnd[i].call(this),delete e.onEnd[i]),this.emitEvent("transitionEnd",[this])}},h.disableTransition=function(){this.removeTransitionStyles(),this.element.removeEventListener(o,this,!1),this.isTransitioning=!1},h._removeStyles=function(t){var e={};for(var i in t)e[i]="";this.css(e)};var c={transitionProperty:"",transitionDuration:"",transitionDelay:""};return h.removeTransitionStyles=function(){this.css(c)},h.stagger=function(t){t=isNaN(t)?0:t,this.staggerDelay=t+"ms"},h.removeElem=function(){this.element.parentNode.removeChild(this.element),this.css({display:""}),this.emitEvent("remove",[this])},h.remove=function(){n&&parseFloat(this.layout.options.transitionDuration)?(this.once("transitionEnd",(function(){this.removeElem()})),this.hide()):this.removeElem()},h.reveal=function(){delete this.isHidden,this.css({display:""});var t=this.layout.options,e={};e[this.getHideRevealTransitionEndProperty("visibleStyle")]=this.onRevealTransitionEnd,this.transition({from:t.hiddenStyle,to:t.visibleStyle,isCleaning:!0,onTransitionEnd:e})},h.onRevealTransitionEnd=function(){this.isHidden||this.emitEvent("reveal")},h.getHideRevealTransitionEndProperty=function(t){var e=this.layout.options[t];if(e.opacity)return"opacity";for(var i in e)return i},h.hide=function(){this.isHidden=!0,this.css({display:""});var t=this.layout.options,e={};e[this.getHideRevealTransitionEndProperty("hiddenStyle")]=this.onHideTransitionEnd,this.transition({from:t.visibleStyle,to:t.hiddenStyle,isCleaning:!0,onTransitionEnd:e})},h.onHideTransitionEnd=function(){this.isHidden&&(this.css({display:"none"}),this.emitEvent("hide"))},h.destroy=function(){this.css({position:"",left:"",right:"",top:"",bottom:"",transition:"",transform:""})},a})?b.apply(e,z):b,
/*!
 * Outlayer v2.1.1
 * the brains and guts of a layout library
 * MIT license
 */
function(t,i){"use strict";f=function(e,i,n,s){return function(t,e,i,n,s){var o=t.console,r=t.jQuery,a=function(){},h=0,l={};function u(t,e){var i=n.getQueryElement(t);if(i){this.element=i,r&&(this.$element=r(this.element)),this.options=n.extend({},this.constructor.defaults),this.option(e);var s=++h;this.element.outlayerGUID=s,l[s]=this,this._create(),this._getOption("initLayout")&&this.layout()}else o&&o.error("Bad element for "+this.constructor.namespace+": "+(i||t))}u.namespace="outlayer",u.Item=s,u.defaults={containerStyle:{position:"relative"},initLayout:!0,originLeft:!0,originTop:!0,resize:!0,resizeContainer:!0,transitionDuration:"0.4s",hiddenStyle:{opacity:0,transform:"scale(0.001)"},visibleStyle:{opacity:1,transform:"scale(1)"}};var c=u.prototype;function d(t){function e(){t.apply(this,arguments)}return e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e}n.extend(c,e.prototype),c.option=function(t){n.extend(this.options,t)},c._getOption=function(t){var e=this.constructor.compatOptions[t];return e&&void 0!==this.options[e]?this.options[e]:this.options[t]},u.compatOptions={initLayout:"isInitLayout",horizontal:"isHorizontal",layoutInstant:"isLayoutInstant",originLeft:"isOriginLeft",originTop:"isOriginTop",resize:"isResizeBound",resizeContainer:"isResizingContainer"},c._create=function(){this.reloadItems(),this.stamps=[],this.stamp(this.options.stamp),n.extend(this.element.style,this.options.containerStyle),this._getOption("resize")&&this.bindResize()},c.reloadItems=function(){this.items=this._itemize(this.element.children)},c._itemize=function(t){for(var e=this._filterFindItemElements(t),i=this.constructor.Item,n=[],s=0;s<e.length;s++){var o=new i(e[s],this);n.push(o)}return n},c._filterFindItemElements=function(t){return n.filterFindElements(t,this.options.itemSelector)},c.getItemElements=function(){return this.items.map((function(t){return t.element}))},c.layout=function(){this._resetLayout(),this._manageStamps();var t=this._getOption("layoutInstant"),e=void 0!==t?t:!this._isLayoutInited;this.layoutItems(this.items,e),this._isLayoutInited=!0},c._init=c.layout,c._resetLayout=function(){this.getSize()},c.getSize=function(){this.size=i(this.element)},c._getMeasurement=function(t,e){var n,s=this.options[t];s?("string"==typeof s?n=this.element.querySelector(s):s instanceof HTMLElement&&(n=s),this[t]=n?i(n)[e]:s):this[t]=0},c.layoutItems=function(t,e){t=this._getItemsForLayout(t),this._layoutItems(t,e),this._postLayout()},c._getItemsForLayout=function(t){return t.filter((function(t){return!t.isIgnored}))},c._layoutItems=function(t,e){if(this._emitCompleteOnItems("layout",t),t&&t.length){var i=[];t.forEach((function(t){var n=this._getItemLayoutPosition(t);n.item=t,n.isInstant=e||t.isLayoutInstant,i.push(n)}),this),this._processLayoutQueue(i)}},c._getItemLayoutPosition=function(){return{x:0,y:0}},c._processLayoutQueue=function(t){this.updateStagger(),t.forEach((function(t,e){this._positionItem(t.item,t.x,t.y,t.isInstant,e)}),this)},c.updateStagger=function(){var t=this.options.stagger;if(null!=t)return this.stagger=function(t){if("number"==typeof t)return t;var e=t.match(/(^\d*\.?\d*)(\w*)/),i=e&&e[1],n=e&&e[2];if(!i.length)return 0;return(i=parseFloat(i))*(m[n]||1)}(t),this.stagger;this.stagger=0},c._positionItem=function(t,e,i,n,s){n?t.goTo(e,i):(t.stagger(s*this.stagger),t.moveTo(e,i))},c._postLayout=function(){this.resizeContainer()},c.resizeContainer=function(){if(this._getOption("resizeContainer")){var t=this._getContainerSize();t&&(this._setContainerMeasure(t.width,!0),this._setContainerMeasure(t.height,!1))}},c._getContainerSize=a,c._setContainerMeasure=function(t,e){if(void 0!==t){var i=this.size;i.isBorderBox&&(t+=e?i.paddingLeft+i.paddingRight+i.borderLeftWidth+i.borderRightWidth:i.paddingBottom+i.paddingTop+i.borderTopWidth+i.borderBottomWidth),t=Math.max(t,0),this.element.style[e?"width":"height"]=t+"px"}},c._emitCompleteOnItems=function(t,e){var i=this;function n(){i.dispatchEvent(t+"Complete",null,[e])}var s=e.length;if(e&&s){var o=0;e.forEach((function(e){e.once(t,r)}))}else n();function r(){++o==s&&n()}},c.dispatchEvent=function(t,e,i){var n=e?[e].concat(i):i;if(this.emitEvent(t,n),r)if(this.$element=this.$element||r(this.element),e){var s=r.Event(e);s.type=t,this.$element.trigger(s,i)}else this.$element.trigger(t,i)},c.ignore=function(t){var e=this.getItem(t);e&&(e.isIgnored=!0)},c.unignore=function(t){var e=this.getItem(t);e&&delete e.isIgnored},c.stamp=function(t){(t=this._find(t))&&(this.stamps=this.stamps.concat(t),t.forEach(this.ignore,this))},c.unstamp=function(t){(t=this._find(t))&&t.forEach((function(t){n.removeFrom(this.stamps,t),this.unignore(t)}),this)},c._find=function(t){if(t)return"string"==typeof t&&(t=this.element.querySelectorAll(t)),t=n.makeArray(t)},c._manageStamps=function(){this.stamps&&this.stamps.length&&(this._getBoundingRect(),this.stamps.forEach(this._manageStamp,this))},c._getBoundingRect=function(){var t=this.element.getBoundingClientRect(),e=this.size;this._boundingRect={left:t.left+e.paddingLeft+e.borderLeftWidth,top:t.top+e.paddingTop+e.borderTopWidth,right:t.right-(e.paddingRight+e.borderRightWidth),bottom:t.bottom-(e.paddingBottom+e.borderBottomWidth)}},c._manageStamp=a,c._getElementOffset=function(t){var e=t.getBoundingClientRect(),n=this._boundingRect,s=i(t);return{left:e.left-n.left-s.marginLeft,top:e.top-n.top-s.marginTop,right:n.right-e.right-s.marginRight,bottom:n.bottom-e.bottom-s.marginBottom}},c.handleEvent=n.handleEvent,c.bindResize=function(){t.addEventListener("resize",this),this.isResizeBound=!0},c.unbindResize=function(){t.removeEventListener("resize",this),this.isResizeBound=!1},c.onresize=function(){this.resize()},n.debounceMethod(u,"onresize",100),c.resize=function(){this.isResizeBound&&this.needsResizeLayout()&&this.layout()},c.needsResizeLayout=function(){var t=i(this.element);return this.size&&t&&t.innerWidth!==this.size.innerWidth},c.addItems=function(t){var e=this._itemize(t);return e.length&&(this.items=this.items.concat(e)),e},c.appended=function(t){var e=this.addItems(t);e.length&&(this.layoutItems(e,!0),this.reveal(e))},c.prepended=function(t){var e=this._itemize(t);if(e.length){var i=this.items.slice(0);this.items=e.concat(i),this._resetLayout(),this._manageStamps(),this.layoutItems(e,!0),this.reveal(e),this.layoutItems(i)}},c.reveal=function(t){if(this._emitCompleteOnItems("reveal",t),t&&t.length){var e=this.updateStagger();t.forEach((function(t,i){t.stagger(i*e),t.reveal()}))}},c.hide=function(t){if(this._emitCompleteOnItems("hide",t),t&&t.length){var e=this.updateStagger();t.forEach((function(t,i){t.stagger(i*e),t.hide()}))}},c.revealItemElements=function(t){var e=this.getItems(t);this.reveal(e)},c.hideItemElements=function(t){var e=this.getItems(t);this.hide(e)},c.getItem=function(t){for(var e=0;e<this.items.length;e++){var i=this.items[e];if(i.element==t)return i}},c.getItems=function(t){t=n.makeArray(t);var e=[];return t.forEach((function(t){var i=this.getItem(t);i&&e.push(i)}),this),e},c.remove=function(t){var e=this.getItems(t);this._emitCompleteOnItems("remove",e),e&&e.length&&e.forEach((function(t){t.remove(),n.removeFrom(this.items,t)}),this)},c.destroy=function(){var t=this.element.style;t.height="",t.position="",t.width="",this.items.forEach((function(t){t.destroy()})),this.unbindResize();var e=this.element.outlayerGUID;delete l[e],delete this.element.outlayerGUID,r&&r.removeData(this.element,this.constructor.namespace)},u.data=function(t){var e=(t=n.getQueryElement(t))&&t.outlayerGUID;return e&&l[e]},u.create=function(t,e){var i=d(u);return i.defaults=n.extend({},u.defaults),n.extend(i.defaults,e),i.compatOptions=n.extend({},u.compatOptions),i.namespace=t,i.data=u.data,i.Item=d(s),n.htmlInit(i,t),r&&r.bridget&&r.bridget(t,i),i};var m={ms:1,s:1e3};return u.Item=s,u}(t,e,i,n,s)}.apply(e,z=[n,r,d,m])}(window),window,z=[f],p="function"==typeof(b=function(t){"use strict";function e(){t.Item.apply(this,arguments)}var i=e.prototype=Object.create(t.Item.prototype),n=i._create;i._create=function(){this.id=this.layout.itemGUID++,n.call(this),this.sortData={}},i.updateSortData=function(){if(!this.isIgnored){this.sortData.id=this.id,this.sortData["original-order"]=this.id,this.sortData.random=Math.random();var t=this.layout.options.getSortData,e=this.layout._sorters;for(var i in t){var n=e[i];this.sortData[i]=n(this.element,this)}}};var s=i.destroy;return i.destroy=function(){s.apply(this,arguments),this.css({display:""})},e})?b.apply(e,z):b,window,z=[r,f],g="function"==typeof(b=function(t,e){"use strict";function i(t){this.isotope=t,t&&(this.options=t.options[this.namespace],this.element=t.element,this.items=t.filteredItems,this.size=t.size)}var n=i.prototype;return["_resetLayout","_getItemLayoutPosition","_manageStamp","_getContainerSize","_getElementOffset","needsResizeLayout","_getOption"].forEach((function(t){n[t]=function(){return e.prototype[t].apply(this.isotope,arguments)}})),n.needsVerticalResizeLayout=function(){var e=t(this.isotope.element);return this.isotope.size&&e&&e.innerHeight!=this.isotope.size.innerHeight},n._getMeasurement=function(){this.isotope._getMeasurement.apply(this,arguments)},n.getColumnWidth=function(){this.getSegmentSize("column","Width")},n.getRowHeight=function(){this.getSegmentSize("row","Height")},n.getSegmentSize=function(t,e){var i=t+e,n="outer"+e;if(this._getMeasurement(i,n),!this[i]){var s=this.getFirstItemSize();this[i]=s&&s[n]||this.isotope.size["inner"+e]}},n.getFirstItemSize=function(){var e=this.isotope.filteredItems[0];return e&&e.element&&t(e.element)},n.layout=function(){this.isotope.layout.apply(this.isotope,arguments)},n.getSize=function(){this.isotope.getSize(),this.size=this.isotope.size},i.modes={},i.create=function(t,e){function s(){i.apply(this,arguments)}return s.prototype=Object.create(n),s.prototype.constructor=s,e&&(s.options=e),s.prototype.namespace=t,i.modes[t]=s,s},i})?b.apply(e,z):b,window,z=[f,r],v="function"==typeof(b=function(t,e){var i=t.create("masonry");i.compatOptions.fitWidth="isFitWidth";var n=i.prototype;return n._resetLayout=function(){this.getSize(),this._getMeasurement("columnWidth","outerWidth"),this._getMeasurement("gutter","outerWidth"),this.measureColumns(),this.colYs=[];for(var t=0;t<this.cols;t++)this.colYs.push(0);this.maxY=0,this.horizontalColIndex=0},n.measureColumns=function(){if(this.getContainerWidth(),!this.columnWidth){var t=this.items[0],i=t&&t.element;this.columnWidth=i&&e(i).outerWidth||this.containerWidth}var n=this.columnWidth+=this.gutter,s=this.containerWidth+this.gutter,o=s/n,r=n-s%n;o=Math[r&&r<1?"round":"floor"](o),this.cols=Math.max(o,1)},n.getContainerWidth=function(){var t=this._getOption("fitWidth")?this.element.parentNode:this.element,i=e(t);this.containerWidth=i&&i.innerWidth},n._getItemLayoutPosition=function(t){t.getSize();var e=t.size.outerWidth%this.columnWidth,i=Math[e&&e<1?"round":"ceil"](t.size.outerWidth/this.columnWidth);i=Math.min(i,this.cols);for(var n=this[this.options.horizontalOrder?"_getHorizontalColPosition":"_getTopColPosition"](i,t),s={x:this.columnWidth*n.col,y:n.y},o=n.y+t.size.outerHeight,r=i+n.col,a=n.col;a<r;a++)this.colYs[a]=o;return s},n._getTopColPosition=function(t){var e=this._getTopColGroup(t),i=Math.min.apply(Math,e);return{col:e.indexOf(i),y:i}},n._getTopColGroup=function(t){if(t<2)return this.colYs;for(var e=[],i=this.cols+1-t,n=0;n<i;n++)e[n]=this._getColGroupY(n,t);return e},n._getColGroupY=function(t,e){if(e<2)return this.colYs[t];var i=this.colYs.slice(t,t+e);return Math.max.apply(Math,i)},n._getHorizontalColPosition=function(t,e){var i=this.horizontalColIndex%this.cols;i=t>1&&i+t>this.cols?0:i;var n=e.size.outerWidth&&e.size.outerHeight;return this.horizontalColIndex=n?i+t:this.horizontalColIndex,{col:i,y:this._getColGroupY(i,t)}},n._manageStamp=function(t){var i=e(t),n=this._getElementOffset(t),s=this._getOption("originLeft")?n.left:n.right,o=s+i.outerWidth,r=Math.floor(s/this.columnWidth);r=Math.max(0,r);var a=Math.floor(o/this.columnWidth);a-=o%this.columnWidth?0:1,a=Math.min(this.cols-1,a);for(var h=(this._getOption("originTop")?n.top:n.bottom)+i.outerHeight,l=r;l<=a;l++)this.colYs[l]=Math.max(h,this.colYs[l])},n._getContainerSize=function(){this.maxY=Math.max.apply(Math,this.colYs);var t={height:this.maxY};return this._getOption("fitWidth")&&(t.width=this._getContainerFitWidth()),t},n._getContainerFitWidth=function(){for(var t=0,e=this.cols;--e&&0===this.colYs[e];)t++;return(this.cols-t)*this.columnWidth-this.gutter},n.needsResizeLayout=function(){var t=this.containerWidth;return this.getContainerWidth(),t!=this.containerWidth},i})?b.apply(e,z):b,window,z=[g,v],y="function"==typeof(b=function(t,e){"use strict";var i=t.create("masonry"),n=i.prototype,s={_getElementOffset:!0,layout:!0,_getMeasurement:!0};for(var o in e.prototype)s[o]||(n[o]=e.prototype[o]);var r=n.measureColumns;n.measureColumns=function(){this.items=this.isotope.filteredItems,r.call(this)};var a=n._getOption;return n._getOption=function(t){return"fitWidth"==t?void 0!==this.options.isFitWidth?this.options.isFitWidth:this.options.fitWidth:a.apply(this.isotope,arguments)},i})?b.apply(e,z):b,window,z=[g],_="function"==typeof(b=function(t){"use strict";var e=t.create("fitRows"),i=e.prototype;return i._resetLayout=function(){this.x=0,this.y=0,this.maxY=0,this._getMeasurement("gutter","outerWidth")},i._getItemLayoutPosition=function(t){t.getSize();var e=t.size.outerWidth+this.gutter,i=this.isotope.size.innerWidth+this.gutter;0!==this.x&&e+this.x>i&&(this.x=0,this.y=this.maxY);var n={x:this.x,y:this.y};return this.maxY=Math.max(this.maxY,this.y+t.size.outerHeight),this.x+=e,n},i._getContainerSize=function(){return{height:this.maxY}},e})?b.apply(e,z):b,window,z=[g],x="function"==typeof(b=function(t){"use strict";var e=t.create("vertical",{horizontalAlignment:0}),i=e.prototype;return i._resetLayout=function(){this.y=0},i._getItemLayoutPosition=function(t){t.getSize();var e=(this.isotope.size.innerWidth-t.size.outerWidth)*this.options.horizontalAlignment,i=this.y;return this.y+=t.size.outerHeight,{x:e,y:i}},i._getContainerSize=function(){return{height:this.y}},e})?b.apply(e,z):b,
/*!
 * Isotope v3.0.6
 *
 * Licensed GPLv3 for open source use
 * or Isotope Commercial License for commercial use
 *
 * https://isotope.metafizzy.co
 * Copyright 2010-2018 Metafizzy
 */
function(i,n){void 0===(E=function(t,e,n,s,o,r){return function(t,e,i,n,s,o,r){var a=t.jQuery,h=String.prototype.trim?function(t){return t.trim()}:function(t){return t.replace(/^\s+|\s+$/g,"")},l=e.create("isotope",{layoutMode:"masonry",isJQueryFiltering:!0,sortAscending:!0});l.Item=o,l.LayoutMode=r;var u=l.prototype;u._create=function(){for(var t in this.itemGUID=0,this._sorters={},this._getSorters(),e.prototype._create.call(this),this.modes={},this.filteredItems=this.items,this.sortHistory=["original-order"],r.modes)this._initLayoutMode(t)},u.reloadItems=function(){this.itemGUID=0,e.prototype.reloadItems.call(this)},u._itemize=function(){for(var t=e.prototype._itemize.apply(this,arguments),i=0;i<t.length;i++){var n=t[i];n.id=this.itemGUID++}return this._updateItemsSortData(t),t},u._initLayoutMode=function(t){var e=r.modes[t],i=this.options[t]||{};this.options[t]=e.options?s.extend(e.options,i):i,this.modes[t]=new e(this)},u.layout=function(){this._isLayoutInited||!this._getOption("initLayout")?this._layout():this.arrange()},u._layout=function(){var t=this._getIsInstant();this._resetLayout(),this._manageStamps(),this.layoutItems(this.filteredItems,t),this._isLayoutInited=!0},u.arrange=function(t){this.option(t),this._getIsInstant();var e=this._filter(this.items);this.filteredItems=e.matches,this._bindArrangeComplete(),this._isInstant?this._noTransition(this._hideReveal,[e]):this._hideReveal(e),this._sort(),this._layout()},u._init=u.arrange,u._hideReveal=function(t){this.reveal(t.needReveal),this.hide(t.needHide)},u._getIsInstant=function(){var t=this._getOption("layoutInstant"),e=void 0!==t?t:!this._isLayoutInited;return this._isInstant=e,e},u._bindArrangeComplete=function(){var t,e,i,n=this;function s(){t&&e&&i&&n.dispatchEvent("arrangeComplete",null,[n.filteredItems])}this.once("layoutComplete",(function(){t=!0,s()})),this.once("hideComplete",(function(){e=!0,s()})),this.once("revealComplete",(function(){i=!0,s()}))},u._filter=function(t){var e=this.options.filter;e=e||"*";for(var i=[],n=[],s=[],o=this._getFilterTest(e),r=0;r<t.length;r++){var a=t[r];if(!a.isIgnored){var h=o(a);h&&i.push(a),h&&a.isHidden?n.push(a):h||a.isHidden||s.push(a)}}return{matches:i,needReveal:n,needHide:s}},u._getFilterTest=function(t){return a&&this.options.isJQueryFiltering?function(e){return a(e.element).is(t)}:"function"==typeof t?function(e){return t(e.element)}:function(e){return n(e.element,t)}},u.updateSortData=function(t){var e;t?(t=s.makeArray(t),e=this.getItems(t)):e=this.items,this._getSorters(),this._updateItemsSortData(e)},u._getSorters=function(){var t=this.options.getSortData;for(var e in t){var i=t[e];this._sorters[e]=c(i)}},u._updateItemsSortData=function(t){for(var e=t&&t.length,i=0;e&&i<e;i++){t[i].updateSortData()}};var c=function(t){if("string"!=typeof t)return t;var e=h(t).split(" "),i=e[0],n=i.match(/^\[(.+)\]$/),s=function(t,e){return t?function(e){return e.getAttribute(t)}:function(t){var i=t.querySelector(e);return i&&i.textContent}}(n&&n[1],i),o=l.sortDataParsers[e[1]];return t=o?function(t){return t&&o(s(t))}:function(t){return t&&s(t)}};l.sortDataParsers={parseInt:function(t){function e(e){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}((function(t){return parseInt(t,10)})),parseFloat:function(t){function e(e){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}((function(t){return parseFloat(t)}))},u._sort=function(){if(this.options.sortBy){var t=s.makeArray(this.options.sortBy);this._getIsSameSortBy(t)||(this.sortHistory=t.concat(this.sortHistory));var e=function(t,e){return function(i,n){for(var s=0;s<t.length;s++){var o=t[s],r=i.sortData[o],a=n.sortData[o];if(r>a||r<a)return(r>a?1:-1)*((void 0!==e[o]?e[o]:e)?1:-1)}return 0}}(this.sortHistory,this.options.sortAscending);this.filteredItems.sort(e)}},u._getIsSameSortBy=function(t){for(var e=0;e<t.length;e++)if(t[e]!=this.sortHistory[e])return!1;return!0},u._mode=function(){var t=this.options.layoutMode,e=this.modes[t];if(!e)throw new Error("No layout mode: "+t);return e.options=this.options[t],e},u._resetLayout=function(){e.prototype._resetLayout.call(this),this._mode()._resetLayout()},u._getItemLayoutPosition=function(t){return this._mode()._getItemLayoutPosition(t)},u._manageStamp=function(t){this._mode()._manageStamp(t)},u._getContainerSize=function(){return this._mode()._getContainerSize()},u.needsResizeLayout=function(){return this._mode().needsResizeLayout()},u.appended=function(t){var e=this.addItems(t);if(e.length){var i=this._filterRevealAdded(e);this.filteredItems=this.filteredItems.concat(i)}},u.prepended=function(t){var e=this._itemize(t);if(e.length){this._resetLayout(),this._manageStamps();var i=this._filterRevealAdded(e);this.layoutItems(this.filteredItems),this.filteredItems=i.concat(this.filteredItems),this.items=e.concat(this.items)}},u._filterRevealAdded=function(t){var e=this._filter(t);return this.hide(e.needHide),this.reveal(e.matches),this.layoutItems(e.matches,!0),e.matches},u.insert=function(t){var e=this.addItems(t);if(e.length){var i,n,s=e.length;for(i=0;i<s;i++)n=e[i],this.element.appendChild(n.element);var o=this._filter(e).matches;for(i=0;i<s;i++)e[i].isLayoutInstant=!0;for(this.arrange(),i=0;i<s;i++)delete e[i].isLayoutInstant;this.reveal(o)}};var d=u.remove;return u.remove=function(t){t=s.makeArray(t);var e=this.getItems(t);d.call(this,t);for(var i=e&&e.length,n=0;i&&n<i;n++){var o=e[n];s.removeFrom(this.filteredItems,o)}},u.shuffle=function(){for(var t=0;t<this.items.length;t++){this.items[t].sortData.random=Math.random()}this.options.sortBy="random",this._sort(),this._layout()},u._noTransition=function(t,e){var i=this.options.transitionDuration;this.options.transitionDuration=0;var n=t.apply(this,e);return this.options.transitionDuration=i,n},u.getFilteredItemElements=function(){return this.filteredItems.map((function(t){return t.element}))},l}(i,t,0,n,s,o,r)}.apply(e,z=[f,r,l,d,p,g,y,_,x]))||(t.exports=E)}(window)},function(t,e){t.exports=jQuery},function(t,e){function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function n(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}!function(){"use strict";var t=function(){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(i(this,t),!(e instanceof Node))throw"Can't initialize VanillaTilt because "+e+" is not a Node.";this.width=null,this.height=null,this.clientWidth=null,this.clientHeight=null,this.left=null,this.top=null,this.gammazero=null,this.betazero=null,this.lastgammazero=null,this.lastbetazero=null,this.transitionTimeout=null,this.updateCall=null,this.event=null,this.updateBind=this.update.bind(this),this.resetBind=this.reset.bind(this),this.element=e,this.settings=this.extendSettings(n),this.reverse=this.settings.reverse?-1:1,this.glare=t.isSettingTrue(this.settings.glare),this.glarePrerender=t.isSettingTrue(this.settings["glare-prerender"]),this.fullPageListening=t.isSettingTrue(this.settings["full-page-listening"]),this.gyroscope=t.isSettingTrue(this.settings.gyroscope),this.gyroscopeSamples=this.settings.gyroscopeSamples,this.elementListener=this.getElementListener(),this.glare&&this.prepareGlare(),this.fullPageListening&&this.updateClientSize(),this.addEventListeners(),this.updateInitialPosition()}var e,s,o;return e=t,o=[{key:"isSettingTrue",value:function(t){return""===t||!0===t||1===t}},{key:"init",value:function(e,i){e instanceof Node&&(e=[e]),e instanceof NodeList&&(e=[].slice.call(e)),e instanceof Array&&e.forEach((function(e){"vanillaTilt"in e||(e.vanillaTilt=new t(e,i))}))}}],(s=[{key:"getElementListener",value:function(){if(this.fullPageListening)return window.document;if("string"==typeof this.settings["mouse-event-element"]){var t=document.querySelector(this.settings["mouse-event-element"]);if(t)return t}return this.settings["mouse-event-element"]instanceof Node?this.settings["mouse-event-element"]:this.element}},{key:"addEventListeners",value:function(){this.onMouseEnterBind=this.onMouseEnter.bind(this),this.onMouseMoveBind=this.onMouseMove.bind(this),this.onMouseLeaveBind=this.onMouseLeave.bind(this),this.onWindowResizeBind=this.onWindowResize.bind(this),this.onDeviceOrientationBind=this.onDeviceOrientation.bind(this),this.elementListener.addEventListener("mouseenter",this.onMouseEnterBind),this.elementListener.addEventListener("mouseleave",this.onMouseLeaveBind),this.elementListener.addEventListener("mousemove",this.onMouseMoveBind),(this.glare||this.fullPageListening)&&window.addEventListener("resize",this.onWindowResizeBind),this.gyroscope&&window.addEventListener("deviceorientation",this.onDeviceOrientationBind)}},{key:"removeEventListeners",value:function(){this.elementListener.removeEventListener("mouseenter",this.onMouseEnterBind),this.elementListener.removeEventListener("mouseleave",this.onMouseLeaveBind),this.elementListener.removeEventListener("mousemove",this.onMouseMoveBind),this.gyroscope&&window.removeEventListener("deviceorientation",this.onDeviceOrientationBind),(this.glare||this.fullPageListening)&&window.removeEventListener("resize",this.onWindowResizeBind)}},{key:"destroy",value:function(){clearTimeout(this.transitionTimeout),null!==this.updateCall&&cancelAnimationFrame(this.updateCall),this.reset(),this.removeEventListeners(),this.element.vanillaTilt=null,delete this.element.vanillaTilt,this.element=null}},{key:"onDeviceOrientation",value:function(t){if(null!==t.gamma&&null!==t.beta){this.updateElementPosition(),this.gyroscopeSamples>0&&(this.lastgammazero=this.gammazero,this.lastbetazero=this.betazero,null===this.gammazero?(this.gammazero=t.gamma,this.betazero=t.beta):(this.gammazero=(t.gamma+this.lastgammazero)/2,this.betazero=(t.beta+this.lastbetazero)/2),this.gyroscopeSamples-=1);var e=this.settings.gyroscopeMaxAngleX-this.settings.gyroscopeMinAngleX,i=this.settings.gyroscopeMaxAngleY-this.settings.gyroscopeMinAngleY,n=e/this.width,s=i/this.height,o=(t.gamma-(this.settings.gyroscopeMinAngleX+this.gammazero))/n,r=(t.beta-(this.settings.gyroscopeMinAngleY+this.betazero))/s;null!==this.updateCall&&cancelAnimationFrame(this.updateCall),this.event={clientX:o+this.left,clientY:r+this.top},this.updateCall=requestAnimationFrame(this.updateBind)}}},{key:"onMouseEnter",value:function(){this.updateElementPosition(),this.element.style.willChange="transform",this.setTransition()}},{key:"onMouseMove",value:function(t){null!==this.updateCall&&cancelAnimationFrame(this.updateCall),this.event=t,this.updateCall=requestAnimationFrame(this.updateBind)}},{key:"onMouseLeave",value:function(){this.setTransition(),this.settings.reset&&requestAnimationFrame(this.resetBind)}},{key:"reset",value:function(){this.event={clientX:this.left+this.width/2,clientY:this.top+this.height/2},this.element&&this.element.style&&(this.element.style.transform="perspective(".concat(this.settings.perspective,"px) ")+"rotateX(0deg) rotateY(0deg) scale3d(1, 1, 1)"),this.resetGlare()}},{key:"resetGlare",value:function(){this.glare&&(this.glareElement.style.transform="rotate(180deg) translate(-50%, -50%)",this.glareElement.style.opacity="0")}},{key:"updateInitialPosition",value:function(){if(0!==this.settings.startX||0!==this.settings.startY){this.onMouseEnter(),this.fullPageListening?this.event={clientX:(this.settings.startX+this.settings.max)/(2*this.settings.max)*this.clientWidth,clientY:(this.settings.startY+this.settings.max)/(2*this.settings.max)*this.clientHeight}:this.event={clientX:this.left+(this.settings.startX+this.settings.max)/(2*this.settings.max)*this.width,clientY:this.top+(this.settings.startY+this.settings.max)/(2*this.settings.max)*this.height};var t=this.settings.scale;this.settings.scale=1,this.update(),this.settings.scale=t,this.resetGlare()}}},{key:"getValues",value:function(){var t,e;return this.fullPageListening?(t=this.event.clientX/this.clientWidth,e=this.event.clientY/this.clientHeight):(t=(this.event.clientX-this.left)/this.width,e=(this.event.clientY-this.top)/this.height),t=Math.min(Math.max(t,0),1),e=Math.min(Math.max(e,0),1),{tiltX:(this.reverse*(this.settings.max-t*this.settings.max*2)).toFixed(2),tiltY:(this.reverse*(e*this.settings.max*2-this.settings.max)).toFixed(2),percentageX:100*t,percentageY:100*e,angle:Math.atan2(this.event.clientX-(this.left+this.width/2),-(this.event.clientY-(this.top+this.height/2)))*(180/Math.PI)}}},{key:"updateElementPosition",value:function(){var t=this.element.getBoundingClientRect();this.width=this.element.offsetWidth,this.height=this.element.offsetHeight,this.left=t.left,this.top=t.top}},{key:"update",value:function(){var t=this.getValues();this.element.style.transform="perspective("+this.settings.perspective+"px) rotateX("+("x"===this.settings.axis?0:t.tiltY)+"deg) rotateY("+("y"===this.settings.axis?0:t.tiltX)+"deg) scale3d("+this.settings.scale+", "+this.settings.scale+", "+this.settings.scale+")",this.glare&&(this.glareElement.style.transform="rotate(".concat(t.angle,"deg) translate(-50%, -50%)"),this.glareElement.style.opacity="".concat(t.percentageY*this.settings["max-glare"]/100)),this.element.dispatchEvent(new CustomEvent("tiltChange",{detail:t})),this.updateCall=null}},{key:"prepareGlare",value:function(){if(!this.glarePrerender){var t=document.createElement("div");t.classList.add("js-tilt-glare");var e=document.createElement("div");e.classList.add("js-tilt-glare-inner"),t.appendChild(e),this.element.appendChild(t)}this.glareElementWrapper=this.element.querySelector(".js-tilt-glare"),this.glareElement=this.element.querySelector(".js-tilt-glare-inner"),this.glarePrerender||(Object.assign(this.glareElementWrapper.style,{position:"absolute",top:"0",left:"0",width:"100%",height:"100%",overflow:"hidden","pointer-events":"none"}),Object.assign(this.glareElement.style,{position:"absolute",top:"50%",left:"50%","pointer-events":"none","background-image":"linear-gradient(0deg, rgba(255,255,255,0) 0%, rgba(255,255,255,1) 100%)",width:"".concat(2*this.element.offsetWidth,"px"),height:"".concat(2*this.element.offsetWidth,"px"),transform:"rotate(180deg) translate(-50%, -50%)","transform-origin":"0% 0%",opacity:"0"}))}},{key:"updateGlareSize",value:function(){this.glare&&Object.assign(this.glareElement.style,{width:"".concat(2*this.element.offsetWidth),height:"".concat(2*this.element.offsetWidth)})}},{key:"updateClientSize",value:function(){this.clientWidth=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,this.clientHeight=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}},{key:"onWindowResize",value:function(){this.updateGlareSize(),this.updateClientSize()}},{key:"setTransition",value:function(){var t=this;clearTimeout(this.transitionTimeout),this.element.style.transition=this.settings.speed+"ms "+this.settings.easing,this.glare&&(this.glareElement.style.transition="opacity ".concat(this.settings.speed,"ms ").concat(this.settings.easing)),this.transitionTimeout=setTimeout((function(){t.element.style.transition="",t.glare&&(t.glareElement.style.transition="")}),this.settings.speed)}},{key:"extendSettings",value:function(t){var e={reverse:!1,max:15,startX:0,startY:0,perspective:1e3,easing:"cubic-bezier(.03,.98,.52,.99)",scale:1,speed:300,transition:!0,axis:null,glare:!1,"max-glare":1,"glare-prerender":!1,"full-page-listening":!1,"mouse-event-element":null,reset:!0,gyroscope:!0,gyroscopeMinAngleX:-45,gyroscopeMaxAngleX:45,gyroscopeMinAngleY:-45,gyroscopeMaxAngleY:45,gyroscopeSamples:10},i={};for(var n in e)if(n in t)i[n]=t[n];else if(this.element.hasAttribute("data-tilt-"+n)){var s=this.element.getAttribute("data-tilt-"+n);try{i[n]=JSON.parse(s)}catch(t){i[n]=s}}else i[n]=e[n];return i}}])&&n(e.prototype,s),o&&n(e,o),t}();"undefined"!=typeof document&&(window.VanillaTilt=t,t.init(document.querySelectorAll("[data-tilt]")))}()},function(t,e){window.onscroll=function(){document.getElementById("rotate--scroll").style.transform="rotate("+window.pageYOffset/4+"deg)"};new Rellax(".rellax")},function(t,e){!function(t){var e=t(window),i=e.width(),n=t(".navbar-toggler"),s=t(".site-header"),o=t(".navbar-nav"),r=t(".dropdown-btn"),a=t(".dropdown-menu");function h(){t(o).toggleClass("is-open"),t(n).toggleClass("is-active"),t(s).toggleClass("expanded")}t(n).click((function(t){t.preventDefault(),h()})),t(r).click((function(e){e.preventDefault();var i=t(this);i.hasClass("toggled")?i.removeClass("toggled"):(i.parent().parent().find(".dropdown-btn").removeClass("toggled"),i.toggleClass("toggled")),i.next().hasClass("show")?(i.next().removeClass("show"),i.next().slideUp(350),i.parent().parent().find(".dropdown-menu").removeClass("show"),i.parent().parent().find(".dropdown-menu").slideUp(350)):(i.parent().parent().find(".dropdown-menu").removeClass("show"),i.parent().parent().find(".dropdown-menu").slideUp(350),i.next().toggleClass("show"),i.next().slideToggle(350))})),e.resize((function(){var s=e.width();i!==s&&(t(o).hasClass("is-open")&&h(),t(a).hasClass("show")&&t(a).removeClass("show"),t(r).hasClass("toggled")&&t(r).removeClass("toggled"),t(a).attr("style"," "),t(o).attr("style"," "),t(n).removeClass("is-active"),t(o).removeAttr("style"))}))}(jQuery)},function(t,e){jQuery((function(t){var e={numberGreaterThan50:function(){var e=t(this).find(".number").text();return parseInt(e,10)>50},ium:function(){var e=t(this).find(".name").text();return console.log(e),e.match(/kes$/)},testFunc:function(){var e=t(this).hasClass("webbutveckling");return console.log(e),e},testSeo:function(){var e=t(this).hasClass("seo");return console.log(e),e}};var i=t(".gallery"),n=t(".btn-filter-group");n.on("click","button",(function(){var e=t(this).attr("data-filter");location.hash=""+encodeURIComponent(e)}));var s=!1;function o(){var t=function(){var t=location.hash.match(/([^&]+)/i),e=t&&t[1];return e&&decodeURIComponent(e).substr(1)}();!t&&s||(s=!0,i.isotope({itemSelector:".gallery-item",layoutMode:"masonry",masonry:{gutter:".gallery-item-gutter"},filter:e[t]||t}),t&&(n.find(".selected").removeClass("selected"),n.find('[data-filter="'+t+'"]').addClass("selected")))}t(window).on("hashchange",o),o()}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3NjcmlwdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvdmVuZG9yL2lzb3RvcGUvaXNvdG9wZS5wa2dkLmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcImpRdWVyeVwiIiwid2VicGFjazovLy8uL3NyYy9qcy92ZW5kb3IvdGlsdC90aWx0LmpxdWVyeS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbW9kdWxlcy9jdXN0b20uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL21vZHVsZXMvbmF2aWdhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbW9kdWxlcy9pc290b3BlLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwid2luZG93IiwiZmFjdG9yeSIsImRlZmluZSIsImpRdWVyeSIsImFycmF5U2xpY2UiLCJBcnJheSIsInNsaWNlIiwiY29uc29sZSIsImxvZ0Vycm9yIiwibWVzc2FnZSIsImVycm9yIiwialF1ZXJ5QnJpZGdldCIsIm5hbWVzcGFjZSIsIlBsdWdpbkNsYXNzIiwiJCIsIm1ldGhvZENhbGwiLCIkZWxlbXMiLCJtZXRob2ROYW1lIiwiYXJncyIsInJldHVyblZhbHVlIiwicGx1Z2luTWV0aG9kU3RyIiwiZWFjaCIsImVsZW0iLCJpbnN0YW5jZSIsImRhdGEiLCJtZXRob2QiLCJjaGFyQXQiLCJhcHBseSIsInVuZGVmaW5lZCIsInBsYWluQ2FsbCIsIm9wdGlvbnMiLCJvcHRpb24iLCJfaW5pdCIsIm9wdHMiLCJpc1BsYWluT2JqZWN0IiwidGhpcyIsImV4dGVuZCIsImZuIiwiYXJnMCIsImFyZ3VtZW50cyIsInVwZGF0ZUpRdWVyeSIsImJyaWRnZXQiLCJFdkVtaXR0ZXIiLCJwcm90byIsIm9uIiwiZXZlbnROYW1lIiwibGlzdGVuZXIiLCJldmVudHMiLCJfZXZlbnRzIiwibGlzdGVuZXJzIiwiaW5kZXhPZiIsInB1c2giLCJvbmNlIiwib25jZUV2ZW50cyIsIl9vbmNlRXZlbnRzIiwib2ZmIiwibGVuZ3RoIiwiaW5kZXgiLCJzcGxpY2UiLCJlbWl0RXZlbnQiLCJvbmNlTGlzdGVuZXJzIiwiYWxsT2ZmIiwiZ2V0U3R5bGVTaXplIiwibnVtIiwicGFyc2VGbG9hdCIsImlzTmFOIiwibWVhc3VyZW1lbnRzIiwibWVhc3VyZW1lbnRzTGVuZ3RoIiwiZ2V0U3R5bGUiLCJzdHlsZSIsImdldENvbXB1dGVkU3R5bGUiLCJpc0JveFNpemVPdXRlciIsImlzU2V0dXAiLCJnZXRTaXplIiwiZGl2IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwid2lkdGgiLCJwYWRkaW5nIiwiYm9yZGVyU3R5bGUiLCJib3JkZXJXaWR0aCIsImJveFNpemluZyIsImJvZHkiLCJkb2N1bWVudEVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsIk1hdGgiLCJyb3VuZCIsInJlbW92ZUNoaWxkIiwic2V0dXAiLCJxdWVyeVNlbGVjdG9yIiwibm9kZVR5cGUiLCJkaXNwbGF5Iiwic2l6ZSIsImhlaWdodCIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsIm91dGVyV2lkdGgiLCJvdXRlckhlaWdodCIsImdldFplcm9TaXplIiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJpc0JvcmRlckJveCIsIm1lYXN1cmVtZW50IiwicGFkZGluZ1dpZHRoIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJwYWRkaW5nSGVpZ2h0IiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJtYXJnaW5XaWR0aCIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsIm1hcmdpbkhlaWdodCIsIm1hcmdpblRvcCIsIm1hcmdpbkJvdHRvbSIsImJvcmRlckxlZnRXaWR0aCIsImJvcmRlclJpZ2h0V2lkdGgiLCJib3JkZXJIZWlnaHQiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckJvdHRvbVdpZHRoIiwiaXNCb3JkZXJCb3hTaXplT3V0ZXIiLCJzdHlsZVdpZHRoIiwic3R5bGVIZWlnaHQiLCJtYXRjaGVzTWV0aG9kIiwiRWxlbVByb3RvIiwiRWxlbWVudCIsIm1hdGNoZXMiLCJtYXRjaGVzU2VsZWN0b3IiLCJwcmVmaXhlcyIsInNlbGVjdG9yIiwidXRpbHMiLCJhIiwiYiIsInByb3AiLCJtYWtlQXJyYXkiLCJvYmoiLCJpc0FycmF5IiwicmVtb3ZlRnJvbSIsImFyeSIsImdldFBhcmVudCIsInBhcmVudE5vZGUiLCJnZXRRdWVyeUVsZW1lbnQiLCJoYW5kbGVFdmVudCIsImV2ZW50IiwidHlwZSIsImZpbHRlckZpbmRFbGVtZW50cyIsImVsZW1zIiwiZmZFbGVtcyIsImZvckVhY2giLCJIVE1MRWxlbWVudCIsImNoaWxkRWxlbXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZGVib3VuY2VNZXRob2QiLCJfY2xhc3MiLCJ0aHJlc2hvbGQiLCJ0aW1lb3V0TmFtZSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJfdGhpcyIsInNldFRpbWVvdXQiLCJkb2NSZWFkeSIsImNhbGxiYWNrIiwicmVhZHlTdGF0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0b0Rhc2hlZCIsInN0ciIsInJlcGxhY2UiLCJtYXRjaCIsIiQxIiwiJDIiLCJ0b0xvd2VyQ2FzZSIsImh0bWxJbml0IiwiV2lkZ2V0Q2xhc3MiLCJkYXNoZWROYW1lc3BhY2UiLCJkYXRhQXR0ciIsImRhdGFBdHRyRWxlbXMiLCJqc0Rhc2hFbGVtcyIsImNvbmNhdCIsImRhdGFPcHRpb25zQXR0ciIsImF0dHIiLCJnZXRBdHRyaWJ1dGUiLCJKU09OIiwicGFyc2UiLCJjbGFzc05hbWUiLCJkb2NFbGVtU3R5bGUiLCJ0cmFuc2l0aW9uUHJvcGVydHkiLCJ0cmFuc2l0aW9uIiwidHJhbnNmb3JtUHJvcGVydHkiLCJ0cmFuc2Zvcm0iLCJ0cmFuc2l0aW9uRW5kRXZlbnQiLCJXZWJraXRUcmFuc2l0aW9uIiwidmVuZG9yUHJvcGVydGllcyIsInRyYW5zaXRpb25EdXJhdGlvbiIsInRyYW5zaXRpb25EZWxheSIsIkl0ZW0iLCJlbGVtZW50IiwibGF5b3V0IiwicG9zaXRpb24iLCJ4IiwieSIsIl9jcmVhdGUiLCJjb25zdHJ1Y3RvciIsIl90cmFuc24iLCJpbmdQcm9wZXJ0aWVzIiwiY2xlYW4iLCJvbkVuZCIsImNzcyIsImVsZW1TdHlsZSIsImdldFBvc2l0aW9uIiwiaXNPcmlnaW5MZWZ0IiwiX2dldE9wdGlvbiIsImlzT3JpZ2luVG9wIiwieFZhbHVlIiwieVZhbHVlIiwibGF5b3V0U2l6ZSIsImxheW91dFBvc2l0aW9uIiwieFBhZGRpbmciLCJ4UHJvcGVydHkiLCJ4UmVzZXRQcm9wZXJ0eSIsImdldFhWYWx1ZSIsInlQYWRkaW5nIiwieVByb3BlcnR5IiwieVJlc2V0UHJvcGVydHkiLCJnZXRZVmFsdWUiLCJpc0hvcml6b250YWwiLCJwZXJjZW50UG9zaXRpb24iLCJfdHJhbnNpdGlvblRvIiwiY3VyWCIsImN1clkiLCJkaWROb3RNb3ZlIiwic2V0UG9zaXRpb24iLCJpc1RyYW5zaXRpb25pbmciLCJ0cmFuc1giLCJ0cmFuc1kiLCJ0cmFuc2l0aW9uU3R5bGUiLCJnZXRUcmFuc2xhdGUiLCJ0byIsIm9uVHJhbnNpdGlvbkVuZCIsImlzQ2xlYW5pbmciLCJnb1RvIiwibW92ZVRvIiwiX25vblRyYW5zaXRpb24iLCJfcmVtb3ZlU3R5bGVzIiwiX3RyYW5zaXRpb24iLCJmcm9tIiwiZW5hYmxlVHJhbnNpdGlvbiIsInRyYW5zaXRpb25Qcm9wcyIsImR1cmF0aW9uIiwic3RhZ2dlckRlbGF5Iiwib253ZWJraXRUcmFuc2l0aW9uRW5kIiwib250cmFuc2l0aW9uZW5kIiwib25vdHJhbnNpdGlvbmVuZCIsImRhc2hlZFZlbmRvclByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wZXJ0eU5hbWUiLCJpc0VtcHR5T2JqIiwiZGlzYWJsZVRyYW5zaXRpb24iLCJyZW1vdmVUcmFuc2l0aW9uU3R5bGVzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNsZWFuU3R5bGUiLCJjbGVhblRyYW5zaXRpb25TdHlsZSIsInN0YWdnZXIiLCJkZWxheSIsInJlbW92ZUVsZW0iLCJyZW1vdmUiLCJoaWRlIiwicmV2ZWFsIiwiaXNIaWRkZW4iLCJnZXRIaWRlUmV2ZWFsVHJhbnNpdGlvbkVuZFByb3BlcnR5Iiwib25SZXZlYWxUcmFuc2l0aW9uRW5kIiwiaGlkZGVuU3R5bGUiLCJ2aXNpYmxlU3R5bGUiLCJzdHlsZVByb3BlcnR5Iiwib3B0aW9uU3R5bGUiLCJvcGFjaXR5Iiwib25IaWRlVHJhbnNpdGlvbkVuZCIsImRlc3Ryb3kiLCJsZWZ0IiwicmlnaHQiLCJ0b3AiLCJib3R0b20iLCJub29wIiwiR1VJRCIsImluc3RhbmNlcyIsIk91dGxheWVyIiwicXVlcnlFbGVtZW50IiwiJGVsZW1lbnQiLCJkZWZhdWx0cyIsImlkIiwib3V0bGF5ZXJHVUlEIiwiY29udGFpbmVyU3R5bGUiLCJpbml0TGF5b3V0Iiwib3JpZ2luTGVmdCIsIm9yaWdpblRvcCIsInJlc2l6ZSIsInJlc2l6ZUNvbnRhaW5lciIsInN1YmNsYXNzIiwiUGFyZW50IiwiU3ViQ2xhc3MiLCJvbGRPcHRpb24iLCJjb21wYXRPcHRpb25zIiwiaG9yaXpvbnRhbCIsImxheW91dEluc3RhbnQiLCJyZWxvYWRJdGVtcyIsInN0YW1wcyIsInN0YW1wIiwiYmluZFJlc2l6ZSIsIml0ZW1zIiwiX2l0ZW1pemUiLCJjaGlsZHJlbiIsIml0ZW1FbGVtcyIsIl9maWx0ZXJGaW5kSXRlbUVsZW1lbnRzIiwiaXRlbSIsIml0ZW1TZWxlY3RvciIsImdldEl0ZW1FbGVtZW50cyIsIm1hcCIsIl9yZXNldExheW91dCIsIl9tYW5hZ2VTdGFtcHMiLCJpc0luc3RhbnQiLCJfaXNMYXlvdXRJbml0ZWQiLCJsYXlvdXRJdGVtcyIsIl9nZXRNZWFzdXJlbWVudCIsIl9nZXRJdGVtc0ZvckxheW91dCIsIl9sYXlvdXRJdGVtcyIsIl9wb3N0TGF5b3V0IiwiZmlsdGVyIiwiaXNJZ25vcmVkIiwiX2VtaXRDb21wbGV0ZU9uSXRlbXMiLCJxdWV1ZSIsIl9nZXRJdGVtTGF5b3V0UG9zaXRpb24iLCJpc0xheW91dEluc3RhbnQiLCJfcHJvY2Vzc0xheW91dFF1ZXVlIiwidXBkYXRlU3RhZ2dlciIsIl9wb3NpdGlvbkl0ZW0iLCJ0aW1lIiwidW5pdCIsIm1zVW5pdHMiLCJnZXRNaWxsaXNlY29uZHMiLCJfZ2V0Q29udGFpbmVyU2l6ZSIsIl9zZXRDb250YWluZXJNZWFzdXJlIiwibWVhc3VyZSIsImlzV2lkdGgiLCJlbGVtU2l6ZSIsIm1heCIsIm9uQ29tcGxldGUiLCJkaXNwYXRjaEV2ZW50IiwiY291bnQiLCJkb25lQ291bnQiLCJ0aWNrIiwiZW1pdEFyZ3MiLCIkZXZlbnQiLCJFdmVudCIsInRyaWdnZXIiLCJpZ25vcmUiLCJnZXRJdGVtIiwidW5pZ25vcmUiLCJfZmluZCIsInVuc3RhbXAiLCJfZ2V0Qm91bmRpbmdSZWN0IiwiX21hbmFnZVN0YW1wIiwiYm91bmRpbmdSZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiX2JvdW5kaW5nUmVjdCIsIl9nZXRFbGVtZW50T2Zmc2V0IiwidGhpc1JlY3QiLCJpc1Jlc2l6ZUJvdW5kIiwidW5iaW5kUmVzaXplIiwib25yZXNpemUiLCJuZWVkc1Jlc2l6ZUxheW91dCIsImFkZEl0ZW1zIiwiYXBwZW5kZWQiLCJwcmVwZW5kZWQiLCJwcmV2aW91c0l0ZW1zIiwicmV2ZWFsSXRlbUVsZW1lbnRzIiwiZ2V0SXRlbXMiLCJoaWRlSXRlbUVsZW1lbnRzIiwicmVtb3ZlSXRlbXMiLCJyZW1vdmVEYXRhIiwiTGF5b3V0IiwibXMiLCJpdGVtR1VJRCIsInNvcnREYXRhIiwidXBkYXRlU29ydERhdGEiLCJyYW5kb20iLCJnZXRTb3J0RGF0YSIsInNvcnRlcnMiLCJfc29ydGVycyIsInNvcnRlciIsIl9kZXN0cm95IiwiTGF5b3V0TW9kZSIsImlzb3RvcGUiLCJmaWx0ZXJlZEl0ZW1zIiwibmVlZHNWZXJ0aWNhbFJlc2l6ZUxheW91dCIsImdldENvbHVtbldpZHRoIiwiZ2V0U2VnbWVudFNpemUiLCJnZXRSb3dIZWlnaHQiLCJzZWdtZW50Iiwic2VnbWVudE5hbWUiLCJvdXRlclNpemUiLCJmaXJzdEl0ZW1TaXplIiwiZ2V0Rmlyc3RJdGVtU2l6ZSIsImZpcnN0SXRlbSIsIm1vZGVzIiwiTW9kZSIsIk1hc29ucnkiLCJmaXRXaWR0aCIsIm1lYXN1cmVDb2x1bW5zIiwiY29sWXMiLCJjb2xzIiwibWF4WSIsImhvcml6b250YWxDb2xJbmRleCIsImdldENvbnRhaW5lcldpZHRoIiwiY29sdW1uV2lkdGgiLCJmaXJzdEl0ZW1FbGVtIiwiY29udGFpbmVyV2lkdGgiLCJndXR0ZXIiLCJleGNlc3MiLCJjb250YWluZXIiLCJyZW1haW5kZXIiLCJjb2xTcGFuIiwibWluIiwiY29sUG9zaXRpb24iLCJob3Jpem9udGFsT3JkZXIiLCJjb2wiLCJzZXRIZWlnaHQiLCJzZXRNYXgiLCJfZ2V0VG9wQ29sUG9zaXRpb24iLCJjb2xHcm91cCIsIl9nZXRUb3BDb2xHcm91cCIsIm1pbmltdW1ZIiwiZ3JvdXBDb3VudCIsIl9nZXRDb2xHcm91cFkiLCJncm91cENvbFlzIiwiX2dldEhvcml6b250YWxDb2xQb3NpdGlvbiIsImhhc1NpemUiLCJzdGFtcFNpemUiLCJvZmZzZXQiLCJmaXJzdFgiLCJsYXN0WCIsImZpcnN0Q29sIiwiZmxvb3IiLCJsYXN0Q29sIiwic3RhbXBNYXhZIiwiX2dldENvbnRhaW5lckZpdFdpZHRoIiwidW51c2VkQ29scyIsInByZXZpb3VzV2lkdGgiLCJNYXNvbnJ5TW9kZSIsImtlZXBNb2RlTWV0aG9kcyIsImlzRml0V2lkdGgiLCJGaXRSb3dzIiwiaXRlbVdpZHRoIiwiVmVydGljYWwiLCJob3Jpem9udGFsQWxpZ25tZW50IiwidHJpbSIsIlN0cmluZyIsIklzb3RvcGUiLCJsYXlvdXRNb2RlIiwiaXNKUXVlcnlGaWx0ZXJpbmciLCJzb3J0QXNjZW5kaW5nIiwiX2dldFNvcnRlcnMiLCJzb3J0SGlzdG9yeSIsIl9pbml0TGF5b3V0TW9kZSIsIl91cGRhdGVJdGVtc1NvcnREYXRhIiwiaW5pdGlhbE9wdHMiLCJfbGF5b3V0IiwiYXJyYW5nZSIsIl9nZXRJc0luc3RhbnQiLCJmaWx0ZXJlZCIsIl9maWx0ZXIiLCJfYmluZEFycmFuZ2VDb21wbGV0ZSIsIl9pc0luc3RhbnQiLCJfbm9UcmFuc2l0aW9uIiwiX2hpZGVSZXZlYWwiLCJfc29ydCIsIm5lZWRSZXZlYWwiLCJuZWVkSGlkZSIsImlzTGF5b3V0Q29tcGxldGUiLCJpc0hpZGVDb21wbGV0ZSIsImlzUmV2ZWFsQ29tcGxldGUiLCJhcnJhbmdlUGFyYWxsZWxDYWxsYmFjayIsImhpZGRlbk1hdGNoZWQiLCJ2aXNpYmxlVW5tYXRjaGVkIiwidGVzdCIsIl9nZXRGaWx0ZXJUZXN0IiwiaXNNYXRjaGVkIiwiaXMiLCJtdW5nZVNvcnRlciIsImxlbiIsInNwbGl0IiwicXVlcnkiLCJhdHRyTWF0Y2giLCJnZXRWYWx1ZSIsImNoaWxkIiwidGV4dENvbnRlbnQiLCJnZXRWYWx1ZUdldHRlciIsInBhcnNlciIsInNvcnREYXRhUGFyc2VycyIsInZhbCIsInBhcnNlSW50Iiwic29ydEJ5Iiwic29ydEJ5cyIsIl9nZXRJc1NhbWVTb3J0QnkiLCJpdGVtU29ydGVyIiwic29ydEFzYyIsIml0ZW1BIiwiaXRlbUIiLCJnZXRJdGVtU29ydGVyIiwic29ydCIsIl9tb2RlIiwiRXJyb3IiLCJfZmlsdGVyUmV2ZWFsQWRkZWQiLCJpbnNlcnQiLCJmaWx0ZXJlZEluc2VydEl0ZW1zIiwiX3JlbW92ZSIsInNodWZmbGUiLCJnZXRGaWx0ZXJlZEl0ZW1FbGVtZW50cyIsIlZhbmlsbGFUaWx0Iiwic2V0dGluZ3MiLCJOb2RlIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJnYW1tYXplcm8iLCJiZXRhemVybyIsImxhc3RnYW1tYXplcm8iLCJsYXN0YmV0YXplcm8iLCJ0cmFuc2l0aW9uVGltZW91dCIsInVwZGF0ZUNhbGwiLCJ1cGRhdGVCaW5kIiwidXBkYXRlIiwicmVzZXRCaW5kIiwicmVzZXQiLCJleHRlbmRTZXR0aW5ncyIsInJldmVyc2UiLCJnbGFyZSIsImlzU2V0dGluZ1RydWUiLCJnbGFyZVByZXJlbmRlciIsImZ1bGxQYWdlTGlzdGVuaW5nIiwiZ3lyb3Njb3BlIiwiZ3lyb3Njb3BlU2FtcGxlcyIsImVsZW1lbnRMaXN0ZW5lciIsImdldEVsZW1lbnRMaXN0ZW5lciIsInByZXBhcmVHbGFyZSIsInVwZGF0ZUNsaWVudFNpemUiLCJhZGRFdmVudExpc3RlbmVycyIsInVwZGF0ZUluaXRpYWxQb3NpdGlvbiIsInNldHRpbmciLCJlbGVtZW50cyIsIk5vZGVMaXN0IiwidmFuaWxsYVRpbHQiLCJtb3VzZUV2ZW50RWxlbWVudCIsIm9uTW91c2VFbnRlckJpbmQiLCJvbk1vdXNlRW50ZXIiLCJvbk1vdXNlTW92ZUJpbmQiLCJvbk1vdXNlTW92ZSIsIm9uTW91c2VMZWF2ZUJpbmQiLCJvbk1vdXNlTGVhdmUiLCJvbldpbmRvd1Jlc2l6ZUJpbmQiLCJvbldpbmRvd1Jlc2l6ZSIsIm9uRGV2aWNlT3JpZW50YXRpb25CaW5kIiwib25EZXZpY2VPcmllbnRhdGlvbiIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicmVtb3ZlRXZlbnRMaXN0ZW5lcnMiLCJnYW1tYSIsImJldGEiLCJ1cGRhdGVFbGVtZW50UG9zaXRpb24iLCJ0b3RhbEFuZ2xlWCIsImd5cm9zY29wZU1heEFuZ2xlWCIsImd5cm9zY29wZU1pbkFuZ2xlWCIsInRvdGFsQW5nbGVZIiwiZ3lyb3Njb3BlTWF4QW5nbGVZIiwiZ3lyb3Njb3BlTWluQW5nbGVZIiwiZGVncmVlc1BlclBpeGVsWCIsImRlZ3JlZXNQZXJQaXhlbFkiLCJwb3NYIiwicG9zWSIsImNsaWVudFgiLCJjbGllbnRZIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwid2lsbENoYW5nZSIsInNldFRyYW5zaXRpb24iLCJwZXJzcGVjdGl2ZSIsInJlc2V0R2xhcmUiLCJnbGFyZUVsZW1lbnQiLCJzdGFydFgiLCJzdGFydFkiLCJiYWNrdXBTY2FsZSIsInNjYWxlIiwidGlsdFgiLCJ0b0ZpeGVkIiwidGlsdFkiLCJwZXJjZW50YWdlWCIsInBlcmNlbnRhZ2VZIiwiYW5nbGUiLCJhdGFuMiIsIlBJIiwicmVjdCIsInZhbHVlcyIsImdldFZhbHVlcyIsImF4aXMiLCJDdXN0b21FdmVudCIsImpzVGlsdEdsYXJlIiwiY2xhc3NMaXN0IiwiYWRkIiwianNUaWx0R2xhcmVJbm5lciIsImdsYXJlRWxlbWVudFdyYXBwZXIiLCJhc3NpZ24iLCJ1cGRhdGVHbGFyZVNpemUiLCJzcGVlZCIsImVhc2luZyIsImRlZmF1bHRTZXR0aW5ncyIsIm5ld1NldHRpbmdzIiwiaGFzQXR0cmlidXRlIiwiYXR0cmlidXRlIiwiZSIsImluaXQiLCJvbnNjcm9sbCIsImdldEVsZW1lbnRCeUlkIiwicGFnZVlPZmZzZXQiLCJSZWxsYXgiLCIkd2luZG93IiwibGFzdFdpbmRvd1dpZHRoIiwidG9nZ2xlIiwiaGVhZGVyIiwibmF2aWdhdGlvbiIsImRyb3Bkb3duQnRuIiwiZHJvcGRvd24iLCJ0b2dnbGVNZW51IiwidG9nZ2xlQ2xhc3MiLCJjbGljayIsInByZXZlbnREZWZhdWx0IiwiJHRoaXMiLCJoYXNDbGFzcyIsInJlbW92ZUNsYXNzIiwicGFyZW50IiwiZmluZCIsIm5leHQiLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJ3aW5kb3dXaWR0aCIsInJlbW92ZUF0dHIiLCJmaWx0ZXJGbnMiLCJudW1iZXJHcmVhdGVyVGhhbjUwIiwibnVtYmVyIiwidGV4dCIsIml1bSIsImxvZyIsInRlc3RGdW5jIiwidGVzdFNlbyIsIiRncmlkIiwiJGZpbHRlckJ1dHRvbkdyb3VwIiwiZmlsdGVyQXR0ciIsImxvY2F0aW9uIiwiaGFzaCIsImVuY29kZVVSSUNvbXBvbmVudCIsImlzSXNvdG9wZUluaXQiLCJvbkhhc2hjaGFuZ2UiLCJoYXNoRmlsdGVyIiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwic3Vic3RyIiwiZ2V0SGFzaEZpbHRlciIsIm1hc29ucnkiLCJhZGRDbGFzcyJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUXJCLEVBQW9CcUIsSUFDL0IsRUFBUEUsRUFBVSxPQUFPRixFQUNwQixHQUFXLEVBQVBFLEdBQThCLGlCQUFWRixHQUFzQkEsR0FBU0EsRUFBTUcsV0FBWSxPQUFPSCxFQUNoRixJQUFJSSxFQUFLWCxPQUFPWSxP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IG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiaW1wb3J0ICcuL3ZlbmRvci9pc290b3BlL2lzb3RvcGUucGtnZCdcclxuaW1wb3J0ICcuL3ZlbmRvci90aWx0L3RpbHQuanF1ZXJ5J1xyXG5cclxuaW1wb3J0ICcuL21vZHVsZXMvY3VzdG9tJ1xyXG5pbXBvcnQgJy4vbW9kdWxlcy9uYXZpZ2F0aW9uJ1xyXG5pbXBvcnQgJy4vbW9kdWxlcy9pc290b3BlJ1xyXG4iLCIvKiFcclxuICogSXNvdG9wZSBQQUNLQUdFRCB2My4wLjZcclxuICpcclxuICogTGljZW5zZWQgR1BMdjMgZm9yIG9wZW4gc291cmNlIHVzZVxyXG4gKiBvciBJc290b3BlIENvbW1lcmNpYWwgTGljZW5zZSBmb3IgY29tbWVyY2lhbCB1c2VcclxuICpcclxuICogaHR0cHM6Ly9pc290b3BlLm1ldGFmaXp6eS5jb1xyXG4gKiBDb3B5cmlnaHQgMjAxMC0yMDE4IE1ldGFmaXp6eVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBCcmlkZ2V0IG1ha2VzIGpRdWVyeSB3aWRnZXRzXHJcbiAqIHYyLjAuMVxyXG4gKiBNSVQgbGljZW5zZVxyXG4gKi9cclxuXHJcbi8qIGpzaGludCBicm93c2VyOiB0cnVlLCBzdHJpY3Q6IHRydWUsIHVuZGVmOiB0cnVlLCB1bnVzZWQ6IHRydWUgKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcclxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cclxuICAvKmpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qIGdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHJlcXVpcmUgKi9cclxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG4gICAgLy8gQU1EXHJcbiAgICBkZWZpbmUoICdqcXVlcnktYnJpZGdldC9qcXVlcnktYnJpZGdldCcsWyAnanF1ZXJ5JyBdLCBmdW5jdGlvbiggalF1ZXJ5ICkge1xyXG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBqUXVlcnkgKTtcclxuICAgIH0pO1xyXG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XHJcbiAgICAvLyBDb21tb25KU1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3csXHJcbiAgICAgIHJlcXVpcmUoJ2pxdWVyeScpXHJcbiAgICApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBicm93c2VyIGdsb2JhbFxyXG4gICAgd2luZG93LmpRdWVyeUJyaWRnZXQgPSBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3csXHJcbiAgICAgIHdpbmRvdy5qUXVlcnlcclxuICAgICk7XHJcbiAgfVxyXG5cclxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIGpRdWVyeSApIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuLy8gLS0tLS0gdXRpbHMgLS0tLS0gLy9cclxuXHJcbnZhciBhcnJheVNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xyXG5cclxuLy8gaGVscGVyIGZ1bmN0aW9uIGZvciBsb2dnaW5nIGVycm9yc1xyXG4vLyAkLmVycm9yIGJyZWFrcyBqUXVlcnkgY2hhaW5pbmdcclxudmFyIGNvbnNvbGUgPSB3aW5kb3cuY29uc29sZTtcclxudmFyIGxvZ0Vycm9yID0gdHlwZW9mIGNvbnNvbGUgPT0gJ3VuZGVmaW5lZCcgPyBmdW5jdGlvbigpIHt9IDpcclxuICBmdW5jdGlvbiggbWVzc2FnZSApIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoIG1lc3NhZ2UgKTtcclxuICB9O1xyXG5cclxuLy8gLS0tLS0galF1ZXJ5QnJpZGdldCAtLS0tLSAvL1xyXG5cclxuZnVuY3Rpb24galF1ZXJ5QnJpZGdldCggbmFtZXNwYWNlLCBQbHVnaW5DbGFzcywgJCApIHtcclxuICAkID0gJCB8fCBqUXVlcnkgfHwgd2luZG93LmpRdWVyeTtcclxuICBpZiAoICEkICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLy8gYWRkIG9wdGlvbiBtZXRob2QgLT4gJCgpLnBsdWdpbignb3B0aW9uJywgey4uLn0pXHJcbiAgaWYgKCAhUGx1Z2luQ2xhc3MucHJvdG90eXBlLm9wdGlvbiApIHtcclxuICAgIC8vIG9wdGlvbiBzZXR0ZXJcclxuICAgIFBsdWdpbkNsYXNzLnByb3RvdHlwZS5vcHRpb24gPSBmdW5jdGlvbiggb3B0cyApIHtcclxuICAgICAgLy8gYmFpbCBvdXQgaWYgbm90IGFuIG9iamVjdFxyXG4gICAgICBpZiAoICEkLmlzUGxhaW5PYmplY3QoIG9wdHMgKSApe1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCggdHJ1ZSwgdGhpcy5vcHRpb25zLCBvcHRzICk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLy8gbWFrZSBqUXVlcnkgcGx1Z2luXHJcbiAgJC5mblsgbmFtZXNwYWNlIF0gPSBmdW5jdGlvbiggYXJnMCAvKiwgYXJnMSAqLyApIHtcclxuICAgIGlmICggdHlwZW9mIGFyZzAgPT0gJ3N0cmluZycgKSB7XHJcbiAgICAgIC8vIG1ldGhvZCBjYWxsICQoKS5wbHVnaW4oICdtZXRob2ROYW1lJywgeyBvcHRpb25zIH0gKVxyXG4gICAgICAvLyBzaGlmdCBhcmd1bWVudHMgYnkgMVxyXG4gICAgICB2YXIgYXJncyA9IGFycmF5U2xpY2UuY2FsbCggYXJndW1lbnRzLCAxICk7XHJcbiAgICAgIHJldHVybiBtZXRob2RDYWxsKCB0aGlzLCBhcmcwLCBhcmdzICk7XHJcbiAgICB9XHJcbiAgICAvLyBqdXN0ICQoKS5wbHVnaW4oeyBvcHRpb25zIH0pXHJcbiAgICBwbGFpbkNhbGwoIHRoaXMsIGFyZzAgKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH07XHJcblxyXG4gIC8vICQoKS5wbHVnaW4oJ21ldGhvZE5hbWUnKVxyXG4gIGZ1bmN0aW9uIG1ldGhvZENhbGwoICRlbGVtcywgbWV0aG9kTmFtZSwgYXJncyApIHtcclxuICAgIHZhciByZXR1cm5WYWx1ZTtcclxuICAgIHZhciBwbHVnaW5NZXRob2RTdHIgPSAnJCgpLicgKyBuYW1lc3BhY2UgKyAnKFwiJyArIG1ldGhvZE5hbWUgKyAnXCIpJztcclxuXHJcbiAgICAkZWxlbXMuZWFjaCggZnVuY3Rpb24oIGksIGVsZW0gKSB7XHJcbiAgICAgIC8vIGdldCBpbnN0YW5jZVxyXG4gICAgICB2YXIgaW5zdGFuY2UgPSAkLmRhdGEoIGVsZW0sIG5hbWVzcGFjZSApO1xyXG4gICAgICBpZiAoICFpbnN0YW5jZSApIHtcclxuICAgICAgICBsb2dFcnJvciggbmFtZXNwYWNlICsgJyBub3QgaW5pdGlhbGl6ZWQuIENhbm5vdCBjYWxsIG1ldGhvZHMsIGkuZS4gJyArXHJcbiAgICAgICAgICBwbHVnaW5NZXRob2RTdHIgKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBtZXRob2QgPSBpbnN0YW5jZVsgbWV0aG9kTmFtZSBdO1xyXG4gICAgICBpZiAoICFtZXRob2QgfHwgbWV0aG9kTmFtZS5jaGFyQXQoMCkgPT0gJ18nICkge1xyXG4gICAgICAgIGxvZ0Vycm9yKCBwbHVnaW5NZXRob2RTdHIgKyAnIGlzIG5vdCBhIHZhbGlkIG1ldGhvZCcgKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIGFwcGx5IG1ldGhvZCwgZ2V0IHJldHVybiB2YWx1ZVxyXG4gICAgICB2YXIgdmFsdWUgPSBtZXRob2QuYXBwbHkoIGluc3RhbmNlLCBhcmdzICk7XHJcbiAgICAgIC8vIHNldCByZXR1cm4gdmFsdWUgaWYgdmFsdWUgaXMgcmV0dXJuZWQsIHVzZSBvbmx5IGZpcnN0IHZhbHVlXHJcbiAgICAgIHJldHVyblZhbHVlID0gcmV0dXJuVmFsdWUgPT09IHVuZGVmaW5lZCA/IHZhbHVlIDogcmV0dXJuVmFsdWU7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gcmV0dXJuVmFsdWUgIT09IHVuZGVmaW5lZCA/IHJldHVyblZhbHVlIDogJGVsZW1zO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcGxhaW5DYWxsKCAkZWxlbXMsIG9wdGlvbnMgKSB7XHJcbiAgICAkZWxlbXMuZWFjaCggZnVuY3Rpb24oIGksIGVsZW0gKSB7XHJcbiAgICAgIHZhciBpbnN0YW5jZSA9ICQuZGF0YSggZWxlbSwgbmFtZXNwYWNlICk7XHJcbiAgICAgIGlmICggaW5zdGFuY2UgKSB7XHJcbiAgICAgICAgLy8gc2V0IG9wdGlvbnMgJiBpbml0XHJcbiAgICAgICAgaW5zdGFuY2Uub3B0aW9uKCBvcHRpb25zICk7XHJcbiAgICAgICAgaW5zdGFuY2UuX2luaXQoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBpbml0aWFsaXplIG5ldyBpbnN0YW5jZVxyXG4gICAgICAgIGluc3RhbmNlID0gbmV3IFBsdWdpbkNsYXNzKCBlbGVtLCBvcHRpb25zICk7XHJcbiAgICAgICAgJC5kYXRhKCBlbGVtLCBuYW1lc3BhY2UsIGluc3RhbmNlICk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlSlF1ZXJ5KCAkICk7XHJcblxyXG59XHJcblxyXG4vLyAtLS0tLSB1cGRhdGVKUXVlcnkgLS0tLS0gLy9cclxuXHJcbi8vIHNldCAkLmJyaWRnZXQgZm9yIHYxIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XHJcbmZ1bmN0aW9uIHVwZGF0ZUpRdWVyeSggJCApIHtcclxuICBpZiAoICEkIHx8ICggJCAmJiAkLmJyaWRnZXQgKSApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgJC5icmlkZ2V0ID0galF1ZXJ5QnJpZGdldDtcclxufVxyXG5cclxudXBkYXRlSlF1ZXJ5KCBqUXVlcnkgfHwgd2luZG93LmpRdWVyeSApO1xyXG5cclxuLy8gLS0tLS0gIC0tLS0tIC8vXHJcblxyXG5yZXR1cm4galF1ZXJ5QnJpZGdldDtcclxuXHJcbn0pKTtcclxuXHJcbi8qKlxyXG4gKiBFdkVtaXR0ZXIgdjEuMS4wXHJcbiAqIExpbCcgZXZlbnQgZW1pdHRlclxyXG4gKiBNSVQgTGljZW5zZVxyXG4gKi9cclxuXHJcbi8qIGpzaGludCB1bnVzZWQ6IHRydWUsIHVuZGVmOiB0cnVlLCBzdHJpY3Q6IHRydWUgKi9cclxuXHJcbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcclxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cclxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKiBnbG9iYWxzIGRlZmluZSwgbW9kdWxlLCB3aW5kb3cgKi9cclxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG4gICAgLy8gQU1EIC0gUmVxdWlyZUpTXHJcbiAgICBkZWZpbmUoICdldi1lbWl0dGVyL2V2LWVtaXR0ZXInLGZhY3RvcnkgKTtcclxuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xyXG4gICAgLy8gQ29tbW9uSlMgLSBCcm93c2VyaWZ5LCBXZWJwYWNrXHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gQnJvd3NlciBnbG9iYWxzXHJcbiAgICBnbG9iYWwuRXZFbWl0dGVyID0gZmFjdG9yeSgpO1xyXG4gIH1cclxuXHJcbn0oIHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbigpIHtcclxuXHJcblxyXG5cclxuZnVuY3Rpb24gRXZFbWl0dGVyKCkge31cclxuXHJcbnZhciBwcm90byA9IEV2RW1pdHRlci5wcm90b3R5cGU7XHJcblxyXG5wcm90by5vbiA9IGZ1bmN0aW9uKCBldmVudE5hbWUsIGxpc3RlbmVyICkge1xyXG4gIGlmICggIWV2ZW50TmFtZSB8fCAhbGlzdGVuZXIgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8vIHNldCBldmVudHMgaGFzaFxyXG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMgfHwge307XHJcbiAgLy8gc2V0IGxpc3RlbmVycyBhcnJheVxyXG4gIHZhciBsaXN0ZW5lcnMgPSBldmVudHNbIGV2ZW50TmFtZSBdID0gZXZlbnRzWyBldmVudE5hbWUgXSB8fCBbXTtcclxuICAvLyBvbmx5IGFkZCBvbmNlXHJcbiAgaWYgKCBsaXN0ZW5lcnMuaW5kZXhPZiggbGlzdGVuZXIgKSA9PSAtMSApIHtcclxuICAgIGxpc3RlbmVycy5wdXNoKCBsaXN0ZW5lciApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG5wcm90by5vbmNlID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKSB7XHJcbiAgaWYgKCAhZXZlbnROYW1lIHx8ICFsaXN0ZW5lciApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLy8gYWRkIGV2ZW50XHJcbiAgdGhpcy5vbiggZXZlbnROYW1lLCBsaXN0ZW5lciApO1xyXG4gIC8vIHNldCBvbmNlIGZsYWdcclxuICAvLyBzZXQgb25jZUV2ZW50cyBoYXNoXHJcbiAgdmFyIG9uY2VFdmVudHMgPSB0aGlzLl9vbmNlRXZlbnRzID0gdGhpcy5fb25jZUV2ZW50cyB8fCB7fTtcclxuICAvLyBzZXQgb25jZUxpc3RlbmVycyBvYmplY3RcclxuICB2YXIgb25jZUxpc3RlbmVycyA9IG9uY2VFdmVudHNbIGV2ZW50TmFtZSBdID0gb25jZUV2ZW50c1sgZXZlbnROYW1lIF0gfHwge307XHJcbiAgLy8gc2V0IGZsYWdcclxuICBvbmNlTGlzdGVuZXJzWyBsaXN0ZW5lciBdID0gdHJ1ZTtcclxuXHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG5wcm90by5vZmYgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBsaXN0ZW5lciApIHtcclxuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzICYmIHRoaXMuX2V2ZW50c1sgZXZlbnROYW1lIF07XHJcbiAgaWYgKCAhbGlzdGVuZXJzIHx8ICFsaXN0ZW5lcnMubGVuZ3RoICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICB2YXIgaW5kZXggPSBsaXN0ZW5lcnMuaW5kZXhPZiggbGlzdGVuZXIgKTtcclxuICBpZiAoIGluZGV4ICE9IC0xICkge1xyXG4gICAgbGlzdGVuZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcclxuICB9XHJcblxyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxucHJvdG8uZW1pdEV2ZW50ID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgYXJncyApIHtcclxuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzICYmIHRoaXMuX2V2ZW50c1sgZXZlbnROYW1lIF07XHJcbiAgaWYgKCAhbGlzdGVuZXJzIHx8ICFsaXN0ZW5lcnMubGVuZ3RoICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICAvLyBjb3B5IG92ZXIgdG8gYXZvaWQgaW50ZXJmZXJlbmNlIGlmIC5vZmYoKSBpbiBsaXN0ZW5lclxyXG4gIGxpc3RlbmVycyA9IGxpc3RlbmVycy5zbGljZSgwKTtcclxuICBhcmdzID0gYXJncyB8fCBbXTtcclxuICAvLyBvbmNlIHN0dWZmXHJcbiAgdmFyIG9uY2VMaXN0ZW5lcnMgPSB0aGlzLl9vbmNlRXZlbnRzICYmIHRoaXMuX29uY2VFdmVudHNbIGV2ZW50TmFtZSBdO1xyXG5cclxuICBmb3IgKCB2YXIgaT0wOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrICkge1xyXG4gICAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJzW2ldXHJcbiAgICB2YXIgaXNPbmNlID0gb25jZUxpc3RlbmVycyAmJiBvbmNlTGlzdGVuZXJzWyBsaXN0ZW5lciBdO1xyXG4gICAgaWYgKCBpc09uY2UgKSB7XHJcbiAgICAgIC8vIHJlbW92ZSBsaXN0ZW5lclxyXG4gICAgICAvLyByZW1vdmUgYmVmb3JlIHRyaWdnZXIgdG8gcHJldmVudCByZWN1cnNpb25cclxuICAgICAgdGhpcy5vZmYoIGV2ZW50TmFtZSwgbGlzdGVuZXIgKTtcclxuICAgICAgLy8gdW5zZXQgb25jZSBmbGFnXHJcbiAgICAgIGRlbGV0ZSBvbmNlTGlzdGVuZXJzWyBsaXN0ZW5lciBdO1xyXG4gICAgfVxyXG4gICAgLy8gdHJpZ2dlciBsaXN0ZW5lclxyXG4gICAgbGlzdGVuZXIuYXBwbHkoIHRoaXMsIGFyZ3MgKTtcclxuICB9XHJcblxyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxucHJvdG8uYWxsT2ZmID0gZnVuY3Rpb24oKSB7XHJcbiAgZGVsZXRlIHRoaXMuX2V2ZW50cztcclxuICBkZWxldGUgdGhpcy5fb25jZUV2ZW50cztcclxufTtcclxuXHJcbnJldHVybiBFdkVtaXR0ZXI7XHJcblxyXG59KSk7XHJcblxyXG4vKiFcclxuICogZ2V0U2l6ZSB2Mi4wLjNcclxuICogbWVhc3VyZSBzaXplIG9mIGVsZW1lbnRzXHJcbiAqIE1JVCBsaWNlbnNlXHJcbiAqL1xyXG5cclxuLyoganNoaW50IGJyb3dzZXI6IHRydWUsIHN0cmljdDogdHJ1ZSwgdW5kZWY6IHRydWUsIHVudXNlZDogdHJ1ZSAqL1xyXG4vKiBnbG9iYWxzIGNvbnNvbGU6IGZhbHNlICovXHJcblxyXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XHJcbiAgLyoganNoaW50IHN0cmljdDogZmFsc2UgKi8gLyogZ2xvYmFscyBkZWZpbmUsIG1vZHVsZSAqL1xyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgICAvLyBBTURcclxuICAgIGRlZmluZSggJ2dldC1zaXplL2dldC1zaXplJyxmYWN0b3J5ICk7XHJcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcclxuICAgIC8vIENvbW1vbkpTXHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gYnJvd3NlciBnbG9iYWxcclxuICAgIHdpbmRvdy5nZXRTaXplID0gZmFjdG9yeSgpO1xyXG4gIH1cclxuXHJcbn0pKCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGhlbHBlcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbi8vIGdldCBhIG51bWJlciBmcm9tIGEgc3RyaW5nLCBub3QgYSBwZXJjZW50YWdlXHJcbmZ1bmN0aW9uIGdldFN0eWxlU2l6ZSggdmFsdWUgKSB7XHJcbiAgdmFyIG51bSA9IHBhcnNlRmxvYXQoIHZhbHVlICk7XHJcbiAgLy8gbm90IGEgcGVyY2VudCBsaWtlICcxMDAlJywgYW5kIGEgbnVtYmVyXHJcbiAgdmFyIGlzVmFsaWQgPSB2YWx1ZS5pbmRleE9mKCclJykgPT0gLTEgJiYgIWlzTmFOKCBudW0gKTtcclxuICByZXR1cm4gaXNWYWxpZCAmJiBudW07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG5vb3AoKSB7fVxyXG5cclxudmFyIGxvZ0Vycm9yID0gdHlwZW9mIGNvbnNvbGUgPT0gJ3VuZGVmaW5lZCcgPyBub29wIDpcclxuICBmdW5jdGlvbiggbWVzc2FnZSApIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoIG1lc3NhZ2UgKTtcclxuICB9O1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gbWVhc3VyZW1lbnRzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG52YXIgbWVhc3VyZW1lbnRzID0gW1xyXG4gICdwYWRkaW5nTGVmdCcsXHJcbiAgJ3BhZGRpbmdSaWdodCcsXHJcbiAgJ3BhZGRpbmdUb3AnLFxyXG4gICdwYWRkaW5nQm90dG9tJyxcclxuICAnbWFyZ2luTGVmdCcsXHJcbiAgJ21hcmdpblJpZ2h0JyxcclxuICAnbWFyZ2luVG9wJyxcclxuICAnbWFyZ2luQm90dG9tJyxcclxuICAnYm9yZGVyTGVmdFdpZHRoJyxcclxuICAnYm9yZGVyUmlnaHRXaWR0aCcsXHJcbiAgJ2JvcmRlclRvcFdpZHRoJyxcclxuICAnYm9yZGVyQm90dG9tV2lkdGgnXHJcbl07XHJcblxyXG52YXIgbWVhc3VyZW1lbnRzTGVuZ3RoID0gbWVhc3VyZW1lbnRzLmxlbmd0aDtcclxuXHJcbmZ1bmN0aW9uIGdldFplcm9TaXplKCkge1xyXG4gIHZhciBzaXplID0ge1xyXG4gICAgd2lkdGg6IDAsXHJcbiAgICBoZWlnaHQ6IDAsXHJcbiAgICBpbm5lcldpZHRoOiAwLFxyXG4gICAgaW5uZXJIZWlnaHQ6IDAsXHJcbiAgICBvdXRlcldpZHRoOiAwLFxyXG4gICAgb3V0ZXJIZWlnaHQ6IDBcclxuICB9O1xyXG4gIGZvciAoIHZhciBpPTA7IGkgPCBtZWFzdXJlbWVudHNMZW5ndGg7IGkrKyApIHtcclxuICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50c1tpXTtcclxuICAgIHNpemVbIG1lYXN1cmVtZW50IF0gPSAwO1xyXG4gIH1cclxuICByZXR1cm4gc2l6ZTtcclxufVxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZ2V0U3R5bGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbi8qKlxyXG4gKiBnZXRTdHlsZSwgZ2V0IHN0eWxlIG9mIGVsZW1lbnQsIGNoZWNrIGZvciBGaXJlZm94IGJ1Z1xyXG4gKiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD01NDgzOTdcclxuICovXHJcbmZ1bmN0aW9uIGdldFN0eWxlKCBlbGVtICkge1xyXG4gIHZhciBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcclxuICBpZiAoICFzdHlsZSApIHtcclxuICAgIGxvZ0Vycm9yKCAnU3R5bGUgcmV0dXJuZWQgJyArIHN0eWxlICtcclxuICAgICAgJy4gQXJlIHlvdSBydW5uaW5nIHRoaXMgY29kZSBpbiBhIGhpZGRlbiBpZnJhbWUgb24gRmlyZWZveD8gJyArXHJcbiAgICAgICdTZWUgaHR0cHM6Ly9iaXQubHkvZ2V0c2l6ZWJ1ZzEnICk7XHJcbiAgfVxyXG4gIHJldHVybiBzdHlsZTtcclxufVxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gc2V0dXAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbnZhciBpc1NldHVwID0gZmFsc2U7XHJcblxyXG52YXIgaXNCb3hTaXplT3V0ZXI7XHJcblxyXG4vKipcclxuICogc2V0dXBcclxuICogY2hlY2sgaXNCb3hTaXplck91dGVyXHJcbiAqIGRvIG9uIGZpcnN0IGdldFNpemUoKSByYXRoZXIgdGhhbiBvbiBwYWdlIGxvYWQgZm9yIEZpcmVmb3ggYnVnXHJcbiAqL1xyXG5mdW5jdGlvbiBzZXR1cCgpIHtcclxuICAvLyBzZXR1cCBvbmNlXHJcbiAgaWYgKCBpc1NldHVwICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBpc1NldHVwID0gdHJ1ZTtcclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gYm94IHNpemluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuICAvKipcclxuICAgKiBDaHJvbWUgJiBTYWZhcmkgbWVhc3VyZSB0aGUgb3V0ZXItd2lkdGggb24gc3R5bGUud2lkdGggb24gYm9yZGVyLWJveCBlbGVtc1xyXG4gICAqIElFMTEgJiBGaXJlZm94PDI5IG1lYXN1cmVzIHRoZSBpbm5lci13aWR0aFxyXG4gICAqL1xyXG4gIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICBkaXYuc3R5bGUud2lkdGggPSAnMjAwcHgnO1xyXG4gIGRpdi5zdHlsZS5wYWRkaW5nID0gJzFweCAycHggM3B4IDRweCc7XHJcbiAgZGl2LnN0eWxlLmJvcmRlclN0eWxlID0gJ3NvbGlkJztcclxuICBkaXYuc3R5bGUuYm9yZGVyV2lkdGggPSAnMXB4IDJweCAzcHggNHB4JztcclxuICBkaXYuc3R5bGUuYm94U2l6aW5nID0gJ2JvcmRlci1ib3gnO1xyXG5cclxuICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHkgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xyXG4gIGJvZHkuYXBwZW5kQ2hpbGQoIGRpdiApO1xyXG4gIHZhciBzdHlsZSA9IGdldFN0eWxlKCBkaXYgKTtcclxuICAvLyByb3VuZCB2YWx1ZSBmb3IgYnJvd3NlciB6b29tLiBkZXNhbmRyby9tYXNvbnJ5IzkyOFxyXG4gIGlzQm94U2l6ZU91dGVyID0gTWF0aC5yb3VuZCggZ2V0U3R5bGVTaXplKCBzdHlsZS53aWR0aCApICkgPT0gMjAwO1xyXG4gIGdldFNpemUuaXNCb3hTaXplT3V0ZXIgPSBpc0JveFNpemVPdXRlcjtcclxuXHJcbiAgYm9keS5yZW1vdmVDaGlsZCggZGl2ICk7XHJcbn1cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGdldFNpemUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbmZ1bmN0aW9uIGdldFNpemUoIGVsZW0gKSB7XHJcbiAgc2V0dXAoKTtcclxuXHJcbiAgLy8gdXNlIHF1ZXJ5U2VsZXRvciBpZiBlbGVtIGlzIHN0cmluZ1xyXG4gIGlmICggdHlwZW9mIGVsZW0gPT0gJ3N0cmluZycgKSB7XHJcbiAgICBlbGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvciggZWxlbSApO1xyXG4gIH1cclxuXHJcbiAgLy8gZG8gbm90IHByb2NlZWQgb24gbm9uLW9iamVjdHNcclxuICBpZiAoICFlbGVtIHx8IHR5cGVvZiBlbGVtICE9ICdvYmplY3QnIHx8ICFlbGVtLm5vZGVUeXBlICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgdmFyIHN0eWxlID0gZ2V0U3R5bGUoIGVsZW0gKTtcclxuXHJcbiAgLy8gaWYgaGlkZGVuLCBldmVyeXRoaW5nIGlzIDBcclxuICBpZiAoIHN0eWxlLmRpc3BsYXkgPT0gJ25vbmUnICkge1xyXG4gICAgcmV0dXJuIGdldFplcm9TaXplKCk7XHJcbiAgfVxyXG5cclxuICB2YXIgc2l6ZSA9IHt9O1xyXG4gIHNpemUud2lkdGggPSBlbGVtLm9mZnNldFdpZHRoO1xyXG4gIHNpemUuaGVpZ2h0ID0gZWxlbS5vZmZzZXRIZWlnaHQ7XHJcblxyXG4gIHZhciBpc0JvcmRlckJveCA9IHNpemUuaXNCb3JkZXJCb3ggPSBzdHlsZS5ib3hTaXppbmcgPT0gJ2JvcmRlci1ib3gnO1xyXG5cclxuICAvLyBnZXQgYWxsIG1lYXN1cmVtZW50c1xyXG4gIGZvciAoIHZhciBpPTA7IGkgPCBtZWFzdXJlbWVudHNMZW5ndGg7IGkrKyApIHtcclxuICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50c1tpXTtcclxuICAgIHZhciB2YWx1ZSA9IHN0eWxlWyBtZWFzdXJlbWVudCBdO1xyXG4gICAgdmFyIG51bSA9IHBhcnNlRmxvYXQoIHZhbHVlICk7XHJcbiAgICAvLyBhbnkgJ2F1dG8nLCAnbWVkaXVtJyB2YWx1ZSB3aWxsIGJlIDBcclxuICAgIHNpemVbIG1lYXN1cmVtZW50IF0gPSAhaXNOYU4oIG51bSApID8gbnVtIDogMDtcclxuICB9XHJcblxyXG4gIHZhciBwYWRkaW5nV2lkdGggPSBzaXplLnBhZGRpbmdMZWZ0ICsgc2l6ZS5wYWRkaW5nUmlnaHQ7XHJcbiAgdmFyIHBhZGRpbmdIZWlnaHQgPSBzaXplLnBhZGRpbmdUb3AgKyBzaXplLnBhZGRpbmdCb3R0b207XHJcbiAgdmFyIG1hcmdpbldpZHRoID0gc2l6ZS5tYXJnaW5MZWZ0ICsgc2l6ZS5tYXJnaW5SaWdodDtcclxuICB2YXIgbWFyZ2luSGVpZ2h0ID0gc2l6ZS5tYXJnaW5Ub3AgKyBzaXplLm1hcmdpbkJvdHRvbTtcclxuICB2YXIgYm9yZGVyV2lkdGggPSBzaXplLmJvcmRlckxlZnRXaWR0aCArIHNpemUuYm9yZGVyUmlnaHRXaWR0aDtcclxuICB2YXIgYm9yZGVySGVpZ2h0ID0gc2l6ZS5ib3JkZXJUb3BXaWR0aCArIHNpemUuYm9yZGVyQm90dG9tV2lkdGg7XHJcblxyXG4gIHZhciBpc0JvcmRlckJveFNpemVPdXRlciA9IGlzQm9yZGVyQm94ICYmIGlzQm94U2l6ZU91dGVyO1xyXG5cclxuICAvLyBvdmVyd3JpdGUgd2lkdGggYW5kIGhlaWdodCBpZiB3ZSBjYW4gZ2V0IGl0IGZyb20gc3R5bGVcclxuICB2YXIgc3R5bGVXaWR0aCA9IGdldFN0eWxlU2l6ZSggc3R5bGUud2lkdGggKTtcclxuICBpZiAoIHN0eWxlV2lkdGggIT09IGZhbHNlICkge1xyXG4gICAgc2l6ZS53aWR0aCA9IHN0eWxlV2lkdGggK1xyXG4gICAgICAvLyBhZGQgcGFkZGluZyBhbmQgYm9yZGVyIHVubGVzcyBpdCdzIGFscmVhZHkgaW5jbHVkaW5nIGl0XHJcbiAgICAgICggaXNCb3JkZXJCb3hTaXplT3V0ZXIgPyAwIDogcGFkZGluZ1dpZHRoICsgYm9yZGVyV2lkdGggKTtcclxuICB9XHJcblxyXG4gIHZhciBzdHlsZUhlaWdodCA9IGdldFN0eWxlU2l6ZSggc3R5bGUuaGVpZ2h0ICk7XHJcbiAgaWYgKCBzdHlsZUhlaWdodCAhPT0gZmFsc2UgKSB7XHJcbiAgICBzaXplLmhlaWdodCA9IHN0eWxlSGVpZ2h0ICtcclxuICAgICAgLy8gYWRkIHBhZGRpbmcgYW5kIGJvcmRlciB1bmxlc3MgaXQncyBhbHJlYWR5IGluY2x1ZGluZyBpdFxyXG4gICAgICAoIGlzQm9yZGVyQm94U2l6ZU91dGVyID8gMCA6IHBhZGRpbmdIZWlnaHQgKyBib3JkZXJIZWlnaHQgKTtcclxuICB9XHJcblxyXG4gIHNpemUuaW5uZXJXaWR0aCA9IHNpemUud2lkdGggLSAoIHBhZGRpbmdXaWR0aCArIGJvcmRlcldpZHRoICk7XHJcbiAgc2l6ZS5pbm5lckhlaWdodCA9IHNpemUuaGVpZ2h0IC0gKCBwYWRkaW5nSGVpZ2h0ICsgYm9yZGVySGVpZ2h0ICk7XHJcblxyXG4gIHNpemUub3V0ZXJXaWR0aCA9IHNpemUud2lkdGggKyBtYXJnaW5XaWR0aDtcclxuICBzaXplLm91dGVySGVpZ2h0ID0gc2l6ZS5oZWlnaHQgKyBtYXJnaW5IZWlnaHQ7XHJcblxyXG4gIHJldHVybiBzaXplO1xyXG59XHJcblxyXG5yZXR1cm4gZ2V0U2l6ZTtcclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIG1hdGNoZXNTZWxlY3RvciB2Mi4wLjJcclxuICogbWF0Y2hlc1NlbGVjdG9yKCBlbGVtZW50LCAnLnNlbGVjdG9yJyApXHJcbiAqIE1JVCBsaWNlbnNlXHJcbiAqL1xyXG5cclxuLypqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgc3RyaWN0OiB0cnVlLCB1bmRlZjogdHJ1ZSwgdW51c2VkOiB0cnVlICovXHJcblxyXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XHJcbiAgLypnbG9iYWwgZGVmaW5lOiBmYWxzZSwgbW9kdWxlOiBmYWxzZSAqL1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cclxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG4gICAgLy8gQU1EXHJcbiAgICBkZWZpbmUoICdkZXNhbmRyby1tYXRjaGVzLXNlbGVjdG9yL21hdGNoZXMtc2VsZWN0b3InLGZhY3RvcnkgKTtcclxuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xyXG4gICAgLy8gQ29tbW9uSlNcclxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBicm93c2VyIGdsb2JhbFxyXG4gICAgd2luZG93Lm1hdGNoZXNTZWxlY3RvciA9IGZhY3RvcnkoKTtcclxuICB9XHJcblxyXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICB2YXIgbWF0Y2hlc01ldGhvZCA9ICggZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgRWxlbVByb3RvID0gd2luZG93LkVsZW1lbnQucHJvdG90eXBlO1xyXG4gICAgLy8gY2hlY2sgZm9yIHRoZSBzdGFuZGFyZCBtZXRob2QgbmFtZSBmaXJzdFxyXG4gICAgaWYgKCBFbGVtUHJvdG8ubWF0Y2hlcyApIHtcclxuICAgICAgcmV0dXJuICdtYXRjaGVzJztcclxuICAgIH1cclxuICAgIC8vIGNoZWNrIHVuLXByZWZpeGVkXHJcbiAgICBpZiAoIEVsZW1Qcm90by5tYXRjaGVzU2VsZWN0b3IgKSB7XHJcbiAgICAgIHJldHVybiAnbWF0Y2hlc1NlbGVjdG9yJztcclxuICAgIH1cclxuICAgIC8vIGNoZWNrIHZlbmRvciBwcmVmaXhlc1xyXG4gICAgdmFyIHByZWZpeGVzID0gWyAnd2Via2l0JywgJ21veicsICdtcycsICdvJyBdO1xyXG5cclxuICAgIGZvciAoIHZhciBpPTA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKyApIHtcclxuICAgICAgdmFyIHByZWZpeCA9IHByZWZpeGVzW2ldO1xyXG4gICAgICB2YXIgbWV0aG9kID0gcHJlZml4ICsgJ01hdGNoZXNTZWxlY3Rvcic7XHJcbiAgICAgIGlmICggRWxlbVByb3RvWyBtZXRob2QgXSApIHtcclxuICAgICAgICByZXR1cm4gbWV0aG9kO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSkoKTtcclxuXHJcbiAgcmV0dXJuIGZ1bmN0aW9uIG1hdGNoZXNTZWxlY3RvciggZWxlbSwgc2VsZWN0b3IgKSB7XHJcbiAgICByZXR1cm4gZWxlbVsgbWF0Y2hlc01ldGhvZCBdKCBzZWxlY3RvciApO1xyXG4gIH07XHJcblxyXG59KSk7XHJcblxyXG4vKipcclxuICogRml6enkgVUkgdXRpbHMgdjIuMC43XHJcbiAqIE1JVCBsaWNlbnNlXHJcbiAqL1xyXG5cclxuLypqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgdW5kZWY6IHRydWUsIHVudXNlZDogdHJ1ZSwgc3RyaWN0OiB0cnVlICovXHJcblxyXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XHJcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXHJcbiAgLypqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKmdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHJlcXVpcmUgKi9cclxuXHJcbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAgIC8vIEFNRFxyXG4gICAgZGVmaW5lKCAnZml6enktdWktdXRpbHMvdXRpbHMnLFtcclxuICAgICAgJ2Rlc2FuZHJvLW1hdGNoZXMtc2VsZWN0b3IvbWF0Y2hlcy1zZWxlY3RvcidcclxuICAgIF0sIGZ1bmN0aW9uKCBtYXRjaGVzU2VsZWN0b3IgKSB7XHJcbiAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIG1hdGNoZXNTZWxlY3RvciApO1xyXG4gICAgfSk7XHJcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcclxuICAgIC8vIENvbW1vbkpTXHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdyxcclxuICAgICAgcmVxdWlyZSgnZGVzYW5kcm8tbWF0Y2hlcy1zZWxlY3RvcicpXHJcbiAgICApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBicm93c2VyIGdsb2JhbFxyXG4gICAgd2luZG93LmZpenp5VUlVdGlscyA9IGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdyxcclxuICAgICAgd2luZG93Lm1hdGNoZXNTZWxlY3RvclxyXG4gICAgKTtcclxuICB9XHJcblxyXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgbWF0Y2hlc1NlbGVjdG9yICkge1xyXG5cclxuXHJcblxyXG52YXIgdXRpbHMgPSB7fTtcclxuXHJcbi8vIC0tLS0tIGV4dGVuZCAtLS0tLSAvL1xyXG5cclxuLy8gZXh0ZW5kcyBvYmplY3RzXHJcbnV0aWxzLmV4dGVuZCA9IGZ1bmN0aW9uKCBhLCBiICkge1xyXG4gIGZvciAoIHZhciBwcm9wIGluIGIgKSB7XHJcbiAgICBhWyBwcm9wIF0gPSBiWyBwcm9wIF07XHJcbiAgfVxyXG4gIHJldHVybiBhO1xyXG59O1xyXG5cclxuLy8gLS0tLS0gbW9kdWxvIC0tLS0tIC8vXHJcblxyXG51dGlscy5tb2R1bG8gPSBmdW5jdGlvbiggbnVtLCBkaXYgKSB7XHJcbiAgcmV0dXJuICggKCBudW0gJSBkaXYgKSArIGRpdiApICUgZGl2O1xyXG59O1xyXG5cclxuLy8gLS0tLS0gbWFrZUFycmF5IC0tLS0tIC8vXHJcblxyXG52YXIgYXJyYXlTbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcclxuXHJcbi8vIHR1cm4gZWxlbWVudCBvciBub2RlTGlzdCBpbnRvIGFuIGFycmF5XHJcbnV0aWxzLm1ha2VBcnJheSA9IGZ1bmN0aW9uKCBvYmogKSB7XHJcbiAgaWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcclxuICAgIC8vIHVzZSBvYmplY3QgaWYgYWxyZWFkeSBhbiBhcnJheVxyXG4gICAgcmV0dXJuIG9iajtcclxuICB9XHJcbiAgLy8gcmV0dXJuIGVtcHR5IGFycmF5IGlmIHVuZGVmaW5lZCBvciBudWxsLiAjNlxyXG4gIGlmICggb2JqID09PSBudWxsIHx8IG9iaiA9PT0gdW5kZWZpbmVkICkge1xyXG4gICAgcmV0dXJuIFtdO1xyXG4gIH1cclxuXHJcbiAgdmFyIGlzQXJyYXlMaWtlID0gdHlwZW9mIG9iaiA9PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqLmxlbmd0aCA9PSAnbnVtYmVyJztcclxuICBpZiAoIGlzQXJyYXlMaWtlICkge1xyXG4gICAgLy8gY29udmVydCBub2RlTGlzdCB0byBhcnJheVxyXG4gICAgcmV0dXJuIGFycmF5U2xpY2UuY2FsbCggb2JqICk7XHJcbiAgfVxyXG5cclxuICAvLyBhcnJheSBvZiBzaW5nbGUgaW5kZXhcclxuICByZXR1cm4gWyBvYmogXTtcclxufTtcclxuXHJcbi8vIC0tLS0tIHJlbW92ZUZyb20gLS0tLS0gLy9cclxuXHJcbnV0aWxzLnJlbW92ZUZyb20gPSBmdW5jdGlvbiggYXJ5LCBvYmogKSB7XHJcbiAgdmFyIGluZGV4ID0gYXJ5LmluZGV4T2YoIG9iaiApO1xyXG4gIGlmICggaW5kZXggIT0gLTEgKSB7XHJcbiAgICBhcnkuc3BsaWNlKCBpbmRleCwgMSApO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIC0tLS0tIGdldFBhcmVudCAtLS0tLSAvL1xyXG5cclxudXRpbHMuZ2V0UGFyZW50ID0gZnVuY3Rpb24oIGVsZW0sIHNlbGVjdG9yICkge1xyXG4gIHdoaWxlICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0gIT0gZG9jdW1lbnQuYm9keSApIHtcclxuICAgIGVsZW0gPSBlbGVtLnBhcmVudE5vZGU7XHJcbiAgICBpZiAoIG1hdGNoZXNTZWxlY3RvciggZWxlbSwgc2VsZWN0b3IgKSApIHtcclxuICAgICAgcmV0dXJuIGVsZW07XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gLS0tLS0gZ2V0UXVlcnlFbGVtZW50IC0tLS0tIC8vXHJcblxyXG4vLyB1c2UgZWxlbWVudCBhcyBzZWxlY3RvciBzdHJpbmdcclxudXRpbHMuZ2V0UXVlcnlFbGVtZW50ID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgaWYgKCB0eXBlb2YgZWxlbSA9PSAnc3RyaW5nJyApIHtcclxuICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBlbGVtICk7XHJcbiAgfVxyXG4gIHJldHVybiBlbGVtO1xyXG59O1xyXG5cclxuLy8gLS0tLS0gaGFuZGxlRXZlbnQgLS0tLS0gLy9cclxuXHJcbi8vIGVuYWJsZSAub250eXBlIHRvIHRyaWdnZXIgZnJvbSAuYWRkRXZlbnRMaXN0ZW5lciggZWxlbSwgJ3R5cGUnIClcclxudXRpbHMuaGFuZGxlRXZlbnQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XHJcbiAgdmFyIG1ldGhvZCA9ICdvbicgKyBldmVudC50eXBlO1xyXG4gIGlmICggdGhpc1sgbWV0aG9kIF0gKSB7XHJcbiAgICB0aGlzWyBtZXRob2QgXSggZXZlbnQgKTtcclxuICB9XHJcbn07XHJcblxyXG4vLyAtLS0tLSBmaWx0ZXJGaW5kRWxlbWVudHMgLS0tLS0gLy9cclxuXHJcbnV0aWxzLmZpbHRlckZpbmRFbGVtZW50cyA9IGZ1bmN0aW9uKCBlbGVtcywgc2VsZWN0b3IgKSB7XHJcbiAgLy8gbWFrZSBhcnJheSBvZiBlbGVtc1xyXG4gIGVsZW1zID0gdXRpbHMubWFrZUFycmF5KCBlbGVtcyApO1xyXG4gIHZhciBmZkVsZW1zID0gW107XHJcblxyXG4gIGVsZW1zLmZvckVhY2goIGZ1bmN0aW9uKCBlbGVtICkge1xyXG4gICAgLy8gY2hlY2sgdGhhdCBlbGVtIGlzIGFuIGFjdHVhbCBlbGVtZW50XHJcbiAgICBpZiAoICEoIGVsZW0gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCApICkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyBhZGQgZWxlbSBpZiBubyBzZWxlY3RvclxyXG4gICAgaWYgKCAhc2VsZWN0b3IgKSB7XHJcbiAgICAgIGZmRWxlbXMucHVzaCggZWxlbSApO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyBmaWx0ZXIgJiBmaW5kIGl0ZW1zIGlmIHdlIGhhdmUgYSBzZWxlY3RvclxyXG4gICAgLy8gZmlsdGVyXHJcbiAgICBpZiAoIG1hdGNoZXNTZWxlY3RvciggZWxlbSwgc2VsZWN0b3IgKSApIHtcclxuICAgICAgZmZFbGVtcy5wdXNoKCBlbGVtICk7XHJcbiAgICB9XHJcbiAgICAvLyBmaW5kIGNoaWxkcmVuXHJcbiAgICB2YXIgY2hpbGRFbGVtcyA9IGVsZW0ucXVlcnlTZWxlY3RvckFsbCggc2VsZWN0b3IgKTtcclxuICAgIC8vIGNvbmNhdCBjaGlsZEVsZW1zIHRvIGZpbHRlckZvdW5kIGFycmF5XHJcbiAgICBmb3IgKCB2YXIgaT0wOyBpIDwgY2hpbGRFbGVtcy5sZW5ndGg7IGkrKyApIHtcclxuICAgICAgZmZFbGVtcy5wdXNoKCBjaGlsZEVsZW1zW2ldICk7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiBmZkVsZW1zO1xyXG59O1xyXG5cclxuLy8gLS0tLS0gZGVib3VuY2VNZXRob2QgLS0tLS0gLy9cclxuXHJcbnV0aWxzLmRlYm91bmNlTWV0aG9kID0gZnVuY3Rpb24oIF9jbGFzcywgbWV0aG9kTmFtZSwgdGhyZXNob2xkICkge1xyXG4gIHRocmVzaG9sZCA9IHRocmVzaG9sZCB8fCAxMDA7XHJcbiAgLy8gb3JpZ2luYWwgbWV0aG9kXHJcbiAgdmFyIG1ldGhvZCA9IF9jbGFzcy5wcm90b3R5cGVbIG1ldGhvZE5hbWUgXTtcclxuICB2YXIgdGltZW91dE5hbWUgPSBtZXRob2ROYW1lICsgJ1RpbWVvdXQnO1xyXG5cclxuICBfY2xhc3MucHJvdG90eXBlWyBtZXRob2ROYW1lIF0gPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciB0aW1lb3V0ID0gdGhpc1sgdGltZW91dE5hbWUgXTtcclxuICAgIGNsZWFyVGltZW91dCggdGltZW91dCApO1xyXG5cclxuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIHRoaXNbIHRpbWVvdXROYW1lIF0gPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcclxuICAgICAgbWV0aG9kLmFwcGx5KCBfdGhpcywgYXJncyApO1xyXG4gICAgICBkZWxldGUgX3RoaXNbIHRpbWVvdXROYW1lIF07XHJcbiAgICB9LCB0aHJlc2hvbGQgKTtcclxuICB9O1xyXG59O1xyXG5cclxuLy8gLS0tLS0gZG9jUmVhZHkgLS0tLS0gLy9cclxuXHJcbnV0aWxzLmRvY1JlYWR5ID0gZnVuY3Rpb24oIGNhbGxiYWNrICkge1xyXG4gIHZhciByZWFkeVN0YXRlID0gZG9jdW1lbnQucmVhZHlTdGF0ZTtcclxuICBpZiAoIHJlYWR5U3RhdGUgPT0gJ2NvbXBsZXRlJyB8fCByZWFkeVN0YXRlID09ICdpbnRlcmFjdGl2ZScgKSB7XHJcbiAgICAvLyBkbyBhc3luYyB0byBhbGxvdyBmb3Igb3RoZXIgc2NyaXB0cyB0byBydW4uIG1ldGFmaXp6eS9mbGlja2l0eSM0NDFcclxuICAgIHNldFRpbWVvdXQoIGNhbGxiYWNrICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdET01Db250ZW50TG9hZGVkJywgY2FsbGJhY2sgKTtcclxuICB9XHJcbn07XHJcblxyXG4vLyAtLS0tLSBodG1sSW5pdCAtLS0tLSAvL1xyXG5cclxuLy8gaHR0cDovL2phbWVzcm9iZXJ0cy5uYW1lL2Jsb2cvMjAxMC8wMi8yMi9zdHJpbmctZnVuY3Rpb25zLWZvci1qYXZhc2NyaXB0LXRyaW0tdG8tY2FtZWwtY2FzZS10by1kYXNoZWQtYW5kLXRvLXVuZGVyc2NvcmUvXHJcbnV0aWxzLnRvRGFzaGVkID0gZnVuY3Rpb24oIHN0ciApIHtcclxuICByZXR1cm4gc3RyLnJlcGxhY2UoIC8oLikoW0EtWl0pL2csIGZ1bmN0aW9uKCBtYXRjaCwgJDEsICQyICkge1xyXG4gICAgcmV0dXJuICQxICsgJy0nICsgJDI7XHJcbiAgfSkudG9Mb3dlckNhc2UoKTtcclxufTtcclxuXHJcbnZhciBjb25zb2xlID0gd2luZG93LmNvbnNvbGU7XHJcbi8qKlxyXG4gKiBhbGxvdyB1c2VyIHRvIGluaXRpYWxpemUgY2xhc3NlcyB2aWEgW2RhdGEtbmFtZXNwYWNlXSBvciAuanMtbmFtZXNwYWNlIGNsYXNzXHJcbiAqIGh0bWxJbml0KCBXaWRnZXQsICd3aWRnZXROYW1lJyApXHJcbiAqIG9wdGlvbnMgYXJlIHBhcnNlZCBmcm9tIGRhdGEtbmFtZXNwYWNlLW9wdGlvbnNcclxuICovXHJcbnV0aWxzLmh0bWxJbml0ID0gZnVuY3Rpb24oIFdpZGdldENsYXNzLCBuYW1lc3BhY2UgKSB7XHJcbiAgdXRpbHMuZG9jUmVhZHkoIGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGRhc2hlZE5hbWVzcGFjZSA9IHV0aWxzLnRvRGFzaGVkKCBuYW1lc3BhY2UgKTtcclxuICAgIHZhciBkYXRhQXR0ciA9ICdkYXRhLScgKyBkYXNoZWROYW1lc3BhY2U7XHJcbiAgICB2YXIgZGF0YUF0dHJFbGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoICdbJyArIGRhdGFBdHRyICsgJ10nICk7XHJcbiAgICB2YXIganNEYXNoRWxlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCAnLmpzLScgKyBkYXNoZWROYW1lc3BhY2UgKTtcclxuICAgIHZhciBlbGVtcyA9IHV0aWxzLm1ha2VBcnJheSggZGF0YUF0dHJFbGVtcyApXHJcbiAgICAgIC5jb25jYXQoIHV0aWxzLm1ha2VBcnJheSgganNEYXNoRWxlbXMgKSApO1xyXG4gICAgdmFyIGRhdGFPcHRpb25zQXR0ciA9IGRhdGFBdHRyICsgJy1vcHRpb25zJztcclxuICAgIHZhciBqUXVlcnkgPSB3aW5kb3cualF1ZXJ5O1xyXG5cclxuICAgIGVsZW1zLmZvckVhY2goIGZ1bmN0aW9uKCBlbGVtICkge1xyXG4gICAgICB2YXIgYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKCBkYXRhQXR0ciApIHx8XHJcbiAgICAgICAgZWxlbS5nZXRBdHRyaWJ1dGUoIGRhdGFPcHRpb25zQXR0ciApO1xyXG4gICAgICB2YXIgb3B0aW9ucztcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBvcHRpb25zID0gYXR0ciAmJiBKU09OLnBhcnNlKCBhdHRyICk7XHJcbiAgICAgIH0gY2F0Y2ggKCBlcnJvciApIHtcclxuICAgICAgICAvLyBsb2cgZXJyb3IsIGRvIG5vdCBpbml0aWFsaXplXHJcbiAgICAgICAgaWYgKCBjb25zb2xlICkge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvciggJ0Vycm9yIHBhcnNpbmcgJyArIGRhdGFBdHRyICsgJyBvbiAnICsgZWxlbS5jbGFzc05hbWUgK1xyXG4gICAgICAgICAgJzogJyArIGVycm9yICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICAvLyBpbml0aWFsaXplXHJcbiAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyBXaWRnZXRDbGFzcyggZWxlbSwgb3B0aW9ucyApO1xyXG4gICAgICAvLyBtYWtlIGF2YWlsYWJsZSB2aWEgJCgpLmRhdGEoJ25hbWVzcGFjZScpXHJcbiAgICAgIGlmICggalF1ZXJ5ICkge1xyXG4gICAgICAgIGpRdWVyeS5kYXRhKCBlbGVtLCBuYW1lc3BhY2UsIGluc3RhbmNlICk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICB9KTtcclxufTtcclxuXHJcbi8vIC0tLS0tICAtLS0tLSAvL1xyXG5cclxucmV0dXJuIHV0aWxzO1xyXG5cclxufSkpO1xyXG5cclxuLyoqXHJcbiAqIE91dGxheWVyIEl0ZW1cclxuICovXHJcblxyXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XHJcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXHJcbiAgLyoganNoaW50IHN0cmljdDogZmFsc2UgKi8gLyogZ2xvYmFscyBkZWZpbmUsIG1vZHVsZSwgcmVxdWlyZSAqL1xyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgICAvLyBBTUQgLSBSZXF1aXJlSlNcclxuICAgIGRlZmluZSggJ291dGxheWVyL2l0ZW0nLFtcclxuICAgICAgICAnZXYtZW1pdHRlci9ldi1lbWl0dGVyJyxcclxuICAgICAgICAnZ2V0LXNpemUvZ2V0LXNpemUnXHJcbiAgICAgIF0sXHJcbiAgICAgIGZhY3RvcnlcclxuICAgICk7XHJcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcclxuICAgIC8vIENvbW1vbkpTIC0gQnJvd3NlcmlmeSwgV2VicGFja1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxyXG4gICAgICByZXF1aXJlKCdldi1lbWl0dGVyJyksXHJcbiAgICAgIHJlcXVpcmUoJ2dldC1zaXplJylcclxuICAgICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgICB3aW5kb3cuT3V0bGF5ZXIgPSB7fTtcclxuICAgIHdpbmRvdy5PdXRsYXllci5JdGVtID0gZmFjdG9yeShcclxuICAgICAgd2luZG93LkV2RW1pdHRlcixcclxuICAgICAgd2luZG93LmdldFNpemVcclxuICAgICk7XHJcbiAgfVxyXG5cclxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCBFdkVtaXR0ZXIsIGdldFNpemUgKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbi8vIC0tLS0tIGhlbHBlcnMgLS0tLS0gLy9cclxuXHJcbmZ1bmN0aW9uIGlzRW1wdHlPYmooIG9iaiApIHtcclxuICBmb3IgKCB2YXIgcHJvcCBpbiBvYmogKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG4gIHByb3AgPSBudWxsO1xyXG4gIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDU1MzIHN1cHBvcnQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcblxyXG52YXIgZG9jRWxlbVN0eWxlID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlO1xyXG5cclxudmFyIHRyYW5zaXRpb25Qcm9wZXJ0eSA9IHR5cGVvZiBkb2NFbGVtU3R5bGUudHJhbnNpdGlvbiA9PSAnc3RyaW5nJyA/XHJcbiAgJ3RyYW5zaXRpb24nIDogJ1dlYmtpdFRyYW5zaXRpb24nO1xyXG52YXIgdHJhbnNmb3JtUHJvcGVydHkgPSB0eXBlb2YgZG9jRWxlbVN0eWxlLnRyYW5zZm9ybSA9PSAnc3RyaW5nJyA/XHJcbiAgJ3RyYW5zZm9ybScgOiAnV2Via2l0VHJhbnNmb3JtJztcclxuXHJcbnZhciB0cmFuc2l0aW9uRW5kRXZlbnQgPSB7XHJcbiAgV2Via2l0VHJhbnNpdGlvbjogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxyXG4gIHRyYW5zaXRpb246ICd0cmFuc2l0aW9uZW5kJ1xyXG59WyB0cmFuc2l0aW9uUHJvcGVydHkgXTtcclxuXHJcbi8vIGNhY2hlIGFsbCB2ZW5kb3IgcHJvcGVydGllcyB0aGF0IGNvdWxkIGhhdmUgdmVuZG9yIHByZWZpeFxyXG52YXIgdmVuZG9yUHJvcGVydGllcyA9IHtcclxuICB0cmFuc2Zvcm06IHRyYW5zZm9ybVByb3BlcnR5LFxyXG4gIHRyYW5zaXRpb246IHRyYW5zaXRpb25Qcm9wZXJ0eSxcclxuICB0cmFuc2l0aW9uRHVyYXRpb246IHRyYW5zaXRpb25Qcm9wZXJ0eSArICdEdXJhdGlvbicsXHJcbiAgdHJhbnNpdGlvblByb3BlcnR5OiB0cmFuc2l0aW9uUHJvcGVydHkgKyAnUHJvcGVydHknLFxyXG4gIHRyYW5zaXRpb25EZWxheTogdHJhbnNpdGlvblByb3BlcnR5ICsgJ0RlbGF5J1xyXG59O1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gSXRlbSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuZnVuY3Rpb24gSXRlbSggZWxlbWVudCwgbGF5b3V0ICkge1xyXG4gIGlmICggIWVsZW1lbnQgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gIC8vIHBhcmVudCBsYXlvdXQgY2xhc3MsIGkuZS4gTWFzb25yeSwgSXNvdG9wZSwgb3IgUGFja2VyeVxyXG4gIHRoaXMubGF5b3V0ID0gbGF5b3V0O1xyXG4gIHRoaXMucG9zaXRpb24gPSB7XHJcbiAgICB4OiAwLFxyXG4gICAgeTogMFxyXG4gIH07XHJcblxyXG4gIHRoaXMuX2NyZWF0ZSgpO1xyXG59XHJcblxyXG4vLyBpbmhlcml0IEV2RW1pdHRlclxyXG52YXIgcHJvdG8gPSBJdGVtLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEV2RW1pdHRlci5wcm90b3R5cGUgKTtcclxucHJvdG8uY29uc3RydWN0b3IgPSBJdGVtO1xyXG5cclxucHJvdG8uX2NyZWF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIHRyYW5zaXRpb24gb2JqZWN0c1xyXG4gIHRoaXMuX3RyYW5zbiA9IHtcclxuICAgIGluZ1Byb3BlcnRpZXM6IHt9LFxyXG4gICAgY2xlYW46IHt9LFxyXG4gICAgb25FbmQ6IHt9XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5jc3Moe1xyXG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcclxuICB9KTtcclxufTtcclxuXHJcbi8vIHRyaWdnZXIgc3BlY2lmaWVkIGhhbmRsZXIgZm9yIGV2ZW50IHR5cGVcclxucHJvdG8uaGFuZGxlRXZlbnQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XHJcbiAgdmFyIG1ldGhvZCA9ICdvbicgKyBldmVudC50eXBlO1xyXG4gIGlmICggdGhpc1sgbWV0aG9kIF0gKSB7XHJcbiAgICB0aGlzWyBtZXRob2QgXSggZXZlbnQgKTtcclxuICB9XHJcbn07XHJcblxyXG5wcm90by5nZXRTaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5zaXplID0gZ2V0U2l6ZSggdGhpcy5lbGVtZW50ICk7XHJcbn07XHJcblxyXG4vKipcclxuICogYXBwbHkgQ1NTIHN0eWxlcyB0byBlbGVtZW50XHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZVxyXG4gKi9cclxucHJvdG8uY3NzID0gZnVuY3Rpb24oIHN0eWxlICkge1xyXG4gIHZhciBlbGVtU3R5bGUgPSB0aGlzLmVsZW1lbnQuc3R5bGU7XHJcblxyXG4gIGZvciAoIHZhciBwcm9wIGluIHN0eWxlICkge1xyXG4gICAgLy8gdXNlIHZlbmRvciBwcm9wZXJ0eSBpZiBhdmFpbGFibGVcclxuICAgIHZhciBzdXBwb3J0ZWRQcm9wID0gdmVuZG9yUHJvcGVydGllc1sgcHJvcCBdIHx8IHByb3A7XHJcbiAgICBlbGVtU3R5bGVbIHN1cHBvcnRlZFByb3AgXSA9IHN0eWxlWyBwcm9wIF07XHJcbiAgfVxyXG59O1xyXG5cclxuIC8vIG1lYXN1cmUgcG9zaXRpb24sIGFuZCBzZXRzIGl0XHJcbnByb3RvLmdldFBvc2l0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSggdGhpcy5lbGVtZW50ICk7XHJcbiAgdmFyIGlzT3JpZ2luTGVmdCA9IHRoaXMubGF5b3V0Ll9nZXRPcHRpb24oJ29yaWdpbkxlZnQnKTtcclxuICB2YXIgaXNPcmlnaW5Ub3AgPSB0aGlzLmxheW91dC5fZ2V0T3B0aW9uKCdvcmlnaW5Ub3AnKTtcclxuICB2YXIgeFZhbHVlID0gc3R5bGVbIGlzT3JpZ2luTGVmdCA/ICdsZWZ0JyA6ICdyaWdodCcgXTtcclxuICB2YXIgeVZhbHVlID0gc3R5bGVbIGlzT3JpZ2luVG9wID8gJ3RvcCcgOiAnYm90dG9tJyBdO1xyXG4gIHZhciB4ID0gcGFyc2VGbG9hdCggeFZhbHVlICk7XHJcbiAgdmFyIHkgPSBwYXJzZUZsb2F0KCB5VmFsdWUgKTtcclxuICAvLyBjb252ZXJ0IHBlcmNlbnQgdG8gcGl4ZWxzXHJcbiAgdmFyIGxheW91dFNpemUgPSB0aGlzLmxheW91dC5zaXplO1xyXG4gIGlmICggeFZhbHVlLmluZGV4T2YoJyUnKSAhPSAtMSApIHtcclxuICAgIHggPSAoIHggLyAxMDAgKSAqIGxheW91dFNpemUud2lkdGg7XHJcbiAgfVxyXG4gIGlmICggeVZhbHVlLmluZGV4T2YoJyUnKSAhPSAtMSApIHtcclxuICAgIHkgPSAoIHkgLyAxMDAgKSAqIGxheW91dFNpemUuaGVpZ2h0O1xyXG4gIH1cclxuICAvLyBjbGVhbiB1cCAnYXV0bycgb3Igb3RoZXIgbm9uLWludGVnZXIgdmFsdWVzXHJcbiAgeCA9IGlzTmFOKCB4ICkgPyAwIDogeDtcclxuICB5ID0gaXNOYU4oIHkgKSA/IDAgOiB5O1xyXG4gIC8vIHJlbW92ZSBwYWRkaW5nIGZyb20gbWVhc3VyZW1lbnRcclxuICB4IC09IGlzT3JpZ2luTGVmdCA/IGxheW91dFNpemUucGFkZGluZ0xlZnQgOiBsYXlvdXRTaXplLnBhZGRpbmdSaWdodDtcclxuICB5IC09IGlzT3JpZ2luVG9wID8gbGF5b3V0U2l6ZS5wYWRkaW5nVG9wIDogbGF5b3V0U2l6ZS5wYWRkaW5nQm90dG9tO1xyXG5cclxuICB0aGlzLnBvc2l0aW9uLnggPSB4O1xyXG4gIHRoaXMucG9zaXRpb24ueSA9IHk7XHJcbn07XHJcblxyXG4vLyBzZXQgc2V0dGxlZCBwb3NpdGlvbiwgYXBwbHkgcGFkZGluZ1xyXG5wcm90by5sYXlvdXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciBsYXlvdXRTaXplID0gdGhpcy5sYXlvdXQuc2l6ZTtcclxuICB2YXIgc3R5bGUgPSB7fTtcclxuICB2YXIgaXNPcmlnaW5MZWZ0ID0gdGhpcy5sYXlvdXQuX2dldE9wdGlvbignb3JpZ2luTGVmdCcpO1xyXG4gIHZhciBpc09yaWdpblRvcCA9IHRoaXMubGF5b3V0Ll9nZXRPcHRpb24oJ29yaWdpblRvcCcpO1xyXG5cclxuICAvLyB4XHJcbiAgdmFyIHhQYWRkaW5nID0gaXNPcmlnaW5MZWZ0ID8gJ3BhZGRpbmdMZWZ0JyA6ICdwYWRkaW5nUmlnaHQnO1xyXG4gIHZhciB4UHJvcGVydHkgPSBpc09yaWdpbkxlZnQgPyAnbGVmdCcgOiAncmlnaHQnO1xyXG4gIHZhciB4UmVzZXRQcm9wZXJ0eSA9IGlzT3JpZ2luTGVmdCA/ICdyaWdodCcgOiAnbGVmdCc7XHJcblxyXG4gIHZhciB4ID0gdGhpcy5wb3NpdGlvbi54ICsgbGF5b3V0U2l6ZVsgeFBhZGRpbmcgXTtcclxuICAvLyBzZXQgaW4gcGVyY2VudGFnZSBvciBwaXhlbHNcclxuICBzdHlsZVsgeFByb3BlcnR5IF0gPSB0aGlzLmdldFhWYWx1ZSggeCApO1xyXG4gIC8vIHJlc2V0IG90aGVyIHByb3BlcnR5XHJcbiAgc3R5bGVbIHhSZXNldFByb3BlcnR5IF0gPSAnJztcclxuXHJcbiAgLy8geVxyXG4gIHZhciB5UGFkZGluZyA9IGlzT3JpZ2luVG9wID8gJ3BhZGRpbmdUb3AnIDogJ3BhZGRpbmdCb3R0b20nO1xyXG4gIHZhciB5UHJvcGVydHkgPSBpc09yaWdpblRvcCA/ICd0b3AnIDogJ2JvdHRvbSc7XHJcbiAgdmFyIHlSZXNldFByb3BlcnR5ID0gaXNPcmlnaW5Ub3AgPyAnYm90dG9tJyA6ICd0b3AnO1xyXG5cclxuICB2YXIgeSA9IHRoaXMucG9zaXRpb24ueSArIGxheW91dFNpemVbIHlQYWRkaW5nIF07XHJcbiAgLy8gc2V0IGluIHBlcmNlbnRhZ2Ugb3IgcGl4ZWxzXHJcbiAgc3R5bGVbIHlQcm9wZXJ0eSBdID0gdGhpcy5nZXRZVmFsdWUoIHkgKTtcclxuICAvLyByZXNldCBvdGhlciBwcm9wZXJ0eVxyXG4gIHN0eWxlWyB5UmVzZXRQcm9wZXJ0eSBdID0gJyc7XHJcblxyXG4gIHRoaXMuY3NzKCBzdHlsZSApO1xyXG4gIHRoaXMuZW1pdEV2ZW50KCAnbGF5b3V0JywgWyB0aGlzIF0gKTtcclxufTtcclxuXHJcbnByb3RvLmdldFhWYWx1ZSA9IGZ1bmN0aW9uKCB4ICkge1xyXG4gIHZhciBpc0hvcml6b250YWwgPSB0aGlzLmxheW91dC5fZ2V0T3B0aW9uKCdob3Jpem9udGFsJyk7XHJcbiAgcmV0dXJuIHRoaXMubGF5b3V0Lm9wdGlvbnMucGVyY2VudFBvc2l0aW9uICYmICFpc0hvcml6b250YWwgP1xyXG4gICAgKCAoIHggLyB0aGlzLmxheW91dC5zaXplLndpZHRoICkgKiAxMDAgKSArICclJyA6IHggKyAncHgnO1xyXG59O1xyXG5cclxucHJvdG8uZ2V0WVZhbHVlID0gZnVuY3Rpb24oIHkgKSB7XHJcbiAgdmFyIGlzSG9yaXpvbnRhbCA9IHRoaXMubGF5b3V0Ll9nZXRPcHRpb24oJ2hvcml6b250YWwnKTtcclxuICByZXR1cm4gdGhpcy5sYXlvdXQub3B0aW9ucy5wZXJjZW50UG9zaXRpb24gJiYgaXNIb3Jpem9udGFsID9cclxuICAgICggKCB5IC8gdGhpcy5sYXlvdXQuc2l6ZS5oZWlnaHQgKSAqIDEwMCApICsgJyUnIDogeSArICdweCc7XHJcbn07XHJcblxyXG5wcm90by5fdHJhbnNpdGlvblRvID0gZnVuY3Rpb24oIHgsIHkgKSB7XHJcbiAgdGhpcy5nZXRQb3NpdGlvbigpO1xyXG4gIC8vIGdldCBjdXJyZW50IHggJiB5IGZyb20gdG9wL2xlZnRcclxuICB2YXIgY3VyWCA9IHRoaXMucG9zaXRpb24ueDtcclxuICB2YXIgY3VyWSA9IHRoaXMucG9zaXRpb24ueTtcclxuXHJcbiAgdmFyIGRpZE5vdE1vdmUgPSB4ID09IHRoaXMucG9zaXRpb24ueCAmJiB5ID09IHRoaXMucG9zaXRpb24ueTtcclxuXHJcbiAgLy8gc2F2ZSBlbmQgcG9zaXRpb25cclxuICB0aGlzLnNldFBvc2l0aW9uKCB4LCB5ICk7XHJcblxyXG4gIC8vIGlmIGRpZCBub3QgbW92ZSBhbmQgbm90IHRyYW5zaXRpb25pbmcsIGp1c3QgZ28gdG8gbGF5b3V0XHJcbiAgaWYgKCBkaWROb3RNb3ZlICYmICF0aGlzLmlzVHJhbnNpdGlvbmluZyApIHtcclxuICAgIHRoaXMubGF5b3V0UG9zaXRpb24oKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHZhciB0cmFuc1ggPSB4IC0gY3VyWDtcclxuICB2YXIgdHJhbnNZID0geSAtIGN1clk7XHJcbiAgdmFyIHRyYW5zaXRpb25TdHlsZSA9IHt9O1xyXG4gIHRyYW5zaXRpb25TdHlsZS50cmFuc2Zvcm0gPSB0aGlzLmdldFRyYW5zbGF0ZSggdHJhbnNYLCB0cmFuc1kgKTtcclxuXHJcbiAgdGhpcy50cmFuc2l0aW9uKHtcclxuICAgIHRvOiB0cmFuc2l0aW9uU3R5bGUsXHJcbiAgICBvblRyYW5zaXRpb25FbmQ6IHtcclxuICAgICAgdHJhbnNmb3JtOiB0aGlzLmxheW91dFBvc2l0aW9uXHJcbiAgICB9LFxyXG4gICAgaXNDbGVhbmluZzogdHJ1ZVxyXG4gIH0pO1xyXG59O1xyXG5cclxucHJvdG8uZ2V0VHJhbnNsYXRlID0gZnVuY3Rpb24oIHgsIHkgKSB7XHJcbiAgLy8gZmxpcCBjb29yaWRpbmF0ZXMgaWYgb3JpZ2luIG9uIHJpZ2h0IG9yIGJvdHRvbVxyXG4gIHZhciBpc09yaWdpbkxlZnQgPSB0aGlzLmxheW91dC5fZ2V0T3B0aW9uKCdvcmlnaW5MZWZ0Jyk7XHJcbiAgdmFyIGlzT3JpZ2luVG9wID0gdGhpcy5sYXlvdXQuX2dldE9wdGlvbignb3JpZ2luVG9wJyk7XHJcbiAgeCA9IGlzT3JpZ2luTGVmdCA/IHggOiAteDtcclxuICB5ID0gaXNPcmlnaW5Ub3AgPyB5IDogLXk7XHJcbiAgcmV0dXJuICd0cmFuc2xhdGUzZCgnICsgeCArICdweCwgJyArIHkgKyAncHgsIDApJztcclxufTtcclxuXHJcbi8vIG5vbiB0cmFuc2l0aW9uICsgdHJhbnNmb3JtIHN1cHBvcnRcclxucHJvdG8uZ29UbyA9IGZ1bmN0aW9uKCB4LCB5ICkge1xyXG4gIHRoaXMuc2V0UG9zaXRpb24oIHgsIHkgKTtcclxuICB0aGlzLmxheW91dFBvc2l0aW9uKCk7XHJcbn07XHJcblxyXG5wcm90by5tb3ZlVG8gPSBwcm90by5fdHJhbnNpdGlvblRvO1xyXG5cclxucHJvdG8uc2V0UG9zaXRpb24gPSBmdW5jdGlvbiggeCwgeSApIHtcclxuICB0aGlzLnBvc2l0aW9uLnggPSBwYXJzZUZsb2F0KCB4ICk7XHJcbiAgdGhpcy5wb3NpdGlvbi55ID0gcGFyc2VGbG9hdCggeSApO1xyXG59O1xyXG5cclxuLy8gLS0tLS0gdHJhbnNpdGlvbiAtLS0tLSAvL1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZSAtIENTU1xyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvblRyYW5zaXRpb25FbmRcclxuICovXHJcblxyXG4vLyBub24gdHJhbnNpdGlvbiwganVzdCB0cmlnZ2VyIGNhbGxiYWNrXHJcbnByb3RvLl9ub25UcmFuc2l0aW9uID0gZnVuY3Rpb24oIGFyZ3MgKSB7XHJcbiAgdGhpcy5jc3MoIGFyZ3MudG8gKTtcclxuICBpZiAoIGFyZ3MuaXNDbGVhbmluZyApIHtcclxuICAgIHRoaXMuX3JlbW92ZVN0eWxlcyggYXJncy50byApO1xyXG4gIH1cclxuICBmb3IgKCB2YXIgcHJvcCBpbiBhcmdzLm9uVHJhbnNpdGlvbkVuZCApIHtcclxuICAgIGFyZ3Mub25UcmFuc2l0aW9uRW5kWyBwcm9wIF0uY2FsbCggdGhpcyApO1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBwcm9wZXIgdHJhbnNpdGlvblxyXG4gKiBAcGFyYW0ge09iamVjdH0gYXJncyAtIGFyZ3VtZW50c1xyXG4gKiAgIEBwYXJhbSB7T2JqZWN0fSB0byAtIHN0eWxlIHRvIHRyYW5zaXRpb24gdG9cclxuICogICBAcGFyYW0ge09iamVjdH0gZnJvbSAtIHN0eWxlIHRvIHN0YXJ0IHRyYW5zaXRpb24gZnJvbVxyXG4gKiAgIEBwYXJhbSB7Qm9vbGVhbn0gaXNDbGVhbmluZyAtIHJlbW92ZXMgdHJhbnNpdGlvbiBzdHlsZXMgYWZ0ZXIgdHJhbnNpdGlvblxyXG4gKiAgIEBwYXJhbSB7RnVuY3Rpb259IG9uVHJhbnNpdGlvbkVuZCAtIGNhbGxiYWNrXHJcbiAqL1xyXG5wcm90by50cmFuc2l0aW9uID0gZnVuY3Rpb24oIGFyZ3MgKSB7XHJcbiAgLy8gcmVkaXJlY3QgdG8gbm9uVHJhbnNpdGlvbiBpZiBubyB0cmFuc2l0aW9uIGR1cmF0aW9uXHJcbiAgaWYgKCAhcGFyc2VGbG9hdCggdGhpcy5sYXlvdXQub3B0aW9ucy50cmFuc2l0aW9uRHVyYXRpb24gKSApIHtcclxuICAgIHRoaXMuX25vblRyYW5zaXRpb24oIGFyZ3MgKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHZhciBfdHJhbnNpdGlvbiA9IHRoaXMuX3RyYW5zbjtcclxuICAvLyBrZWVwIHRyYWNrIG9mIG9uVHJhbnNpdGlvbkVuZCBjYWxsYmFjayBieSBjc3MgcHJvcGVydHlcclxuICBmb3IgKCB2YXIgcHJvcCBpbiBhcmdzLm9uVHJhbnNpdGlvbkVuZCApIHtcclxuICAgIF90cmFuc2l0aW9uLm9uRW5kWyBwcm9wIF0gPSBhcmdzLm9uVHJhbnNpdGlvbkVuZFsgcHJvcCBdO1xyXG4gIH1cclxuICAvLyBrZWVwIHRyYWNrIG9mIHByb3BlcnRpZXMgdGhhdCBhcmUgdHJhbnNpdGlvbmluZ1xyXG4gIGZvciAoIHByb3AgaW4gYXJncy50byApIHtcclxuICAgIF90cmFuc2l0aW9uLmluZ1Byb3BlcnRpZXNbIHByb3AgXSA9IHRydWU7XHJcbiAgICAvLyBrZWVwIHRyYWNrIG9mIHByb3BlcnRpZXMgdG8gY2xlYW4gdXAgd2hlbiB0cmFuc2l0aW9uIGlzIGRvbmVcclxuICAgIGlmICggYXJncy5pc0NsZWFuaW5nICkge1xyXG4gICAgICBfdHJhbnNpdGlvbi5jbGVhblsgcHJvcCBdID0gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIHNldCBmcm9tIHN0eWxlc1xyXG4gIGlmICggYXJncy5mcm9tICkge1xyXG4gICAgdGhpcy5jc3MoIGFyZ3MuZnJvbSApO1xyXG4gICAgLy8gZm9yY2UgcmVkcmF3LiBodHRwOi8vYmxvZy5hbGV4bWFjY2F3LmNvbS9jc3MtdHJhbnNpdGlvbnNcclxuICAgIHZhciBoID0gdGhpcy5lbGVtZW50Lm9mZnNldEhlaWdodDtcclxuICAgIC8vIGhhY2sgZm9yIEpTSGludCB0byBodXNoIGFib3V0IHVudXNlZCB2YXJcclxuICAgIGggPSBudWxsO1xyXG4gIH1cclxuICAvLyBlbmFibGUgdHJhbnNpdGlvblxyXG4gIHRoaXMuZW5hYmxlVHJhbnNpdGlvbiggYXJncy50byApO1xyXG4gIC8vIHNldCBzdHlsZXMgdGhhdCBhcmUgdHJhbnNpdGlvbmluZ1xyXG4gIHRoaXMuY3NzKCBhcmdzLnRvICk7XHJcblxyXG4gIHRoaXMuaXNUcmFuc2l0aW9uaW5nID0gdHJ1ZTtcclxuXHJcbn07XHJcblxyXG4vLyBkYXNoIGJlZm9yZSBhbGwgY2FwIGxldHRlcnMsIGluY2x1ZGluZyBmaXJzdCBmb3JcclxuLy8gV2Via2l0VHJhbnNmb3JtID0+IC13ZWJraXQtdHJhbnNmb3JtXHJcbmZ1bmN0aW9uIHRvRGFzaGVkQWxsKCBzdHIgKSB7XHJcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKCAvKFtBLVpdKS9nLCBmdW5jdGlvbiggJDEgKSB7XHJcbiAgICByZXR1cm4gJy0nICsgJDEudG9Mb3dlckNhc2UoKTtcclxuICB9KTtcclxufVxyXG5cclxudmFyIHRyYW5zaXRpb25Qcm9wcyA9ICdvcGFjaXR5LCcgKyB0b0Rhc2hlZEFsbCggdHJhbnNmb3JtUHJvcGVydHkgKTtcclxuXHJcbnByb3RvLmVuYWJsZVRyYW5zaXRpb24gPSBmdW5jdGlvbigvKiBzdHlsZSAqLykge1xyXG4gIC8vIEhBQ0sgY2hhbmdpbmcgdHJhbnNpdGlvblByb3BlcnR5IGR1cmluZyBhIHRyYW5zaXRpb25cclxuICAvLyB3aWxsIGNhdXNlIHRyYW5zaXRpb24gdG8ganVtcFxyXG4gIGlmICggdGhpcy5pc1RyYW5zaXRpb25pbmcgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvLyBtYWtlIGB0cmFuc2l0aW9uOiBmb28sIGJhciwgYmF6YCBmcm9tIHN0eWxlIG9iamVjdFxyXG4gIC8vIEhBQ0sgdW4tY29tbWVudCB0aGlzIHdoZW4gZW5hYmxlVHJhbnNpdGlvbiBjYW4gd29ya1xyXG4gIC8vIHdoaWxlIGEgdHJhbnNpdGlvbiBpcyBoYXBwZW5pbmdcclxuICAvLyB2YXIgdHJhbnNpdGlvblZhbHVlcyA9IFtdO1xyXG4gIC8vIGZvciAoIHZhciBwcm9wIGluIHN0eWxlICkge1xyXG4gIC8vICAgLy8gZGFzaC1pZnkgY2FtZWxDYXNlZCBwcm9wZXJ0aWVzIGxpa2UgV2Via2l0VHJhbnNpdGlvblxyXG4gIC8vICAgcHJvcCA9IHZlbmRvclByb3BlcnRpZXNbIHByb3AgXSB8fCBwcm9wO1xyXG4gIC8vICAgdHJhbnNpdGlvblZhbHVlcy5wdXNoKCB0b0Rhc2hlZEFsbCggcHJvcCApICk7XHJcbiAgLy8gfVxyXG4gIC8vIG11bmdlIG51bWJlciB0byBtaWxsaXNlY29uZCwgdG8gbWF0Y2ggc3RhZ2dlclxyXG4gIHZhciBkdXJhdGlvbiA9IHRoaXMubGF5b3V0Lm9wdGlvbnMudHJhbnNpdGlvbkR1cmF0aW9uO1xyXG4gIGR1cmF0aW9uID0gdHlwZW9mIGR1cmF0aW9uID09ICdudW1iZXInID8gZHVyYXRpb24gKyAnbXMnIDogZHVyYXRpb247XHJcbiAgLy8gZW5hYmxlIHRyYW5zaXRpb24gc3R5bGVzXHJcbiAgdGhpcy5jc3Moe1xyXG4gICAgdHJhbnNpdGlvblByb3BlcnR5OiB0cmFuc2l0aW9uUHJvcHMsXHJcbiAgICB0cmFuc2l0aW9uRHVyYXRpb246IGR1cmF0aW9uLFxyXG4gICAgdHJhbnNpdGlvbkRlbGF5OiB0aGlzLnN0YWdnZXJEZWxheSB8fCAwXHJcbiAgfSk7XHJcbiAgLy8gbGlzdGVuIGZvciB0cmFuc2l0aW9uIGVuZCBldmVudFxyXG4gIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCB0cmFuc2l0aW9uRW5kRXZlbnQsIHRoaXMsIGZhbHNlICk7XHJcbn07XHJcblxyXG4vLyAtLS0tLSBldmVudHMgLS0tLS0gLy9cclxuXHJcbnByb3RvLm9ud2Via2l0VHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uKCBldmVudCApIHtcclxuICB0aGlzLm9udHJhbnNpdGlvbmVuZCggZXZlbnQgKTtcclxufTtcclxuXHJcbnByb3RvLm9ub3RyYW5zaXRpb25lbmQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XHJcbiAgdGhpcy5vbnRyYW5zaXRpb25lbmQoIGV2ZW50ICk7XHJcbn07XHJcblxyXG4vLyBwcm9wZXJ0aWVzIHRoYXQgSSBtdW5nZSB0byBtYWtlIG15IGxpZmUgZWFzaWVyXHJcbnZhciBkYXNoZWRWZW5kb3JQcm9wZXJ0aWVzID0ge1xyXG4gICctd2Via2l0LXRyYW5zZm9ybSc6ICd0cmFuc2Zvcm0nXHJcbn07XHJcblxyXG5wcm90by5vbnRyYW5zaXRpb25lbmQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XHJcbiAgLy8gZGlzcmVnYXJkIGJ1YmJsZWQgZXZlbnRzIGZyb20gY2hpbGRyZW5cclxuICBpZiAoIGV2ZW50LnRhcmdldCAhPT0gdGhpcy5lbGVtZW50ICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICB2YXIgX3RyYW5zaXRpb24gPSB0aGlzLl90cmFuc247XHJcbiAgLy8gZ2V0IHByb3BlcnR5IG5hbWUgb2YgdHJhbnNpdGlvbmVkIHByb3BlcnR5LCBjb252ZXJ0IHRvIHByZWZpeC1mcmVlXHJcbiAgdmFyIHByb3BlcnR5TmFtZSA9IGRhc2hlZFZlbmRvclByb3BlcnRpZXNbIGV2ZW50LnByb3BlcnR5TmFtZSBdIHx8IGV2ZW50LnByb3BlcnR5TmFtZTtcclxuXHJcbiAgLy8gcmVtb3ZlIHByb3BlcnR5IHRoYXQgaGFzIGNvbXBsZXRlZCB0cmFuc2l0aW9uaW5nXHJcbiAgZGVsZXRlIF90cmFuc2l0aW9uLmluZ1Byb3BlcnRpZXNbIHByb3BlcnR5TmFtZSBdO1xyXG4gIC8vIGNoZWNrIGlmIGFueSBwcm9wZXJ0aWVzIGFyZSBzdGlsbCB0cmFuc2l0aW9uaW5nXHJcbiAgaWYgKCBpc0VtcHR5T2JqKCBfdHJhbnNpdGlvbi5pbmdQcm9wZXJ0aWVzICkgKSB7XHJcbiAgICAvLyBhbGwgcHJvcGVydGllcyBoYXZlIGNvbXBsZXRlZCB0cmFuc2l0aW9uaW5nXHJcbiAgICB0aGlzLmRpc2FibGVUcmFuc2l0aW9uKCk7XHJcbiAgfVxyXG4gIC8vIGNsZWFuIHN0eWxlXHJcbiAgaWYgKCBwcm9wZXJ0eU5hbWUgaW4gX3RyYW5zaXRpb24uY2xlYW4gKSB7XHJcbiAgICAvLyBjbGVhbiB1cCBzdHlsZVxyXG4gICAgdGhpcy5lbGVtZW50LnN0eWxlWyBldmVudC5wcm9wZXJ0eU5hbWUgXSA9ICcnO1xyXG4gICAgZGVsZXRlIF90cmFuc2l0aW9uLmNsZWFuWyBwcm9wZXJ0eU5hbWUgXTtcclxuICB9XHJcbiAgLy8gdHJpZ2dlciBvblRyYW5zaXRpb25FbmQgY2FsbGJhY2tcclxuICBpZiAoIHByb3BlcnR5TmFtZSBpbiBfdHJhbnNpdGlvbi5vbkVuZCApIHtcclxuICAgIHZhciBvblRyYW5zaXRpb25FbmQgPSBfdHJhbnNpdGlvbi5vbkVuZFsgcHJvcGVydHlOYW1lIF07XHJcbiAgICBvblRyYW5zaXRpb25FbmQuY2FsbCggdGhpcyApO1xyXG4gICAgZGVsZXRlIF90cmFuc2l0aW9uLm9uRW5kWyBwcm9wZXJ0eU5hbWUgXTtcclxuICB9XHJcblxyXG4gIHRoaXMuZW1pdEV2ZW50KCAndHJhbnNpdGlvbkVuZCcsIFsgdGhpcyBdICk7XHJcbn07XHJcblxyXG5wcm90by5kaXNhYmxlVHJhbnNpdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMucmVtb3ZlVHJhbnNpdGlvblN0eWxlcygpO1xyXG4gIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCB0cmFuc2l0aW9uRW5kRXZlbnQsIHRoaXMsIGZhbHNlICk7XHJcbiAgdGhpcy5pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiByZW1vdmVzIHN0eWxlIHByb3BlcnR5IGZyb20gZWxlbWVudFxyXG4gKiBAcGFyYW0ge09iamVjdH0gc3R5bGVcclxuKiovXHJcbnByb3RvLl9yZW1vdmVTdHlsZXMgPSBmdW5jdGlvbiggc3R5bGUgKSB7XHJcbiAgLy8gY2xlYW4gdXAgdHJhbnNpdGlvbiBzdHlsZXNcclxuICB2YXIgY2xlYW5TdHlsZSA9IHt9O1xyXG4gIGZvciAoIHZhciBwcm9wIGluIHN0eWxlICkge1xyXG4gICAgY2xlYW5TdHlsZVsgcHJvcCBdID0gJyc7XHJcbiAgfVxyXG4gIHRoaXMuY3NzKCBjbGVhblN0eWxlICk7XHJcbn07XHJcblxyXG52YXIgY2xlYW5UcmFuc2l0aW9uU3R5bGUgPSB7XHJcbiAgdHJhbnNpdGlvblByb3BlcnR5OiAnJyxcclxuICB0cmFuc2l0aW9uRHVyYXRpb246ICcnLFxyXG4gIHRyYW5zaXRpb25EZWxheTogJydcclxufTtcclxuXHJcbnByb3RvLnJlbW92ZVRyYW5zaXRpb25TdHlsZXMgPSBmdW5jdGlvbigpIHtcclxuICAvLyByZW1vdmUgdHJhbnNpdGlvblxyXG4gIHRoaXMuY3NzKCBjbGVhblRyYW5zaXRpb25TdHlsZSApO1xyXG59O1xyXG5cclxuLy8gLS0tLS0gc3RhZ2dlciAtLS0tLSAvL1xyXG5cclxucHJvdG8uc3RhZ2dlciA9IGZ1bmN0aW9uKCBkZWxheSApIHtcclxuICBkZWxheSA9IGlzTmFOKCBkZWxheSApID8gMCA6IGRlbGF5O1xyXG4gIHRoaXMuc3RhZ2dlckRlbGF5ID0gZGVsYXkgKyAnbXMnO1xyXG59O1xyXG5cclxuLy8gLS0tLS0gc2hvdy9oaWRlL3JlbW92ZSAtLS0tLSAvL1xyXG5cclxuLy8gcmVtb3ZlIGVsZW1lbnQgZnJvbSBET01cclxucHJvdG8ucmVtb3ZlRWxlbSA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0aGlzLmVsZW1lbnQgKTtcclxuICAvLyByZW1vdmUgZGlzcGxheTogbm9uZVxyXG4gIHRoaXMuY3NzKHsgZGlzcGxheTogJycgfSk7XHJcbiAgdGhpcy5lbWl0RXZlbnQoICdyZW1vdmUnLCBbIHRoaXMgXSApO1xyXG59O1xyXG5cclxucHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24oKSB7XHJcbiAgLy8ganVzdCByZW1vdmUgZWxlbWVudCBpZiBubyB0cmFuc2l0aW9uIHN1cHBvcnQgb3Igbm8gdHJhbnNpdGlvblxyXG4gIGlmICggIXRyYW5zaXRpb25Qcm9wZXJ0eSB8fCAhcGFyc2VGbG9hdCggdGhpcy5sYXlvdXQub3B0aW9ucy50cmFuc2l0aW9uRHVyYXRpb24gKSApIHtcclxuICAgIHRoaXMucmVtb3ZlRWxlbSgpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLy8gc3RhcnQgdHJhbnNpdGlvblxyXG4gIHRoaXMub25jZSggJ3RyYW5zaXRpb25FbmQnLCBmdW5jdGlvbigpIHtcclxuICAgIHRoaXMucmVtb3ZlRWxlbSgpO1xyXG4gIH0pO1xyXG4gIHRoaXMuaGlkZSgpO1xyXG59O1xyXG5cclxucHJvdG8ucmV2ZWFsID0gZnVuY3Rpb24oKSB7XHJcbiAgZGVsZXRlIHRoaXMuaXNIaWRkZW47XHJcbiAgLy8gcmVtb3ZlIGRpc3BsYXk6IG5vbmVcclxuICB0aGlzLmNzcyh7IGRpc3BsYXk6ICcnIH0pO1xyXG5cclxuICB2YXIgb3B0aW9ucyA9IHRoaXMubGF5b3V0Lm9wdGlvbnM7XHJcblxyXG4gIHZhciBvblRyYW5zaXRpb25FbmQgPSB7fTtcclxuICB2YXIgdHJhbnNpdGlvbkVuZFByb3BlcnR5ID0gdGhpcy5nZXRIaWRlUmV2ZWFsVHJhbnNpdGlvbkVuZFByb3BlcnR5KCd2aXNpYmxlU3R5bGUnKTtcclxuICBvblRyYW5zaXRpb25FbmRbIHRyYW5zaXRpb25FbmRQcm9wZXJ0eSBdID0gdGhpcy5vblJldmVhbFRyYW5zaXRpb25FbmQ7XHJcblxyXG4gIHRoaXMudHJhbnNpdGlvbih7XHJcbiAgICBmcm9tOiBvcHRpb25zLmhpZGRlblN0eWxlLFxyXG4gICAgdG86IG9wdGlvbnMudmlzaWJsZVN0eWxlLFxyXG4gICAgaXNDbGVhbmluZzogdHJ1ZSxcclxuICAgIG9uVHJhbnNpdGlvbkVuZDogb25UcmFuc2l0aW9uRW5kXHJcbiAgfSk7XHJcbn07XHJcblxyXG5wcm90by5vblJldmVhbFRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbigpIHtcclxuICAvLyBjaGVjayBpZiBzdGlsbCB2aXNpYmxlXHJcbiAgLy8gZHVyaW5nIHRyYW5zaXRpb24sIGl0ZW0gbWF5IGhhdmUgYmVlbiBoaWRkZW5cclxuICBpZiAoICF0aGlzLmlzSGlkZGVuICkge1xyXG4gICAgdGhpcy5lbWl0RXZlbnQoJ3JldmVhbCcpO1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBnZXQgc3R5bGUgcHJvcGVydHkgdXNlIGZvciBoaWRlL3JldmVhbCB0cmFuc2l0aW9uIGVuZFxyXG4gKiBAcGFyYW0ge1N0cmluZ30gc3R5bGVQcm9wZXJ0eSAtIGhpZGRlblN0eWxlL3Zpc2libGVTdHlsZVxyXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxyXG4gKi9cclxucHJvdG8uZ2V0SGlkZVJldmVhbFRyYW5zaXRpb25FbmRQcm9wZXJ0eSA9IGZ1bmN0aW9uKCBzdHlsZVByb3BlcnR5ICkge1xyXG4gIHZhciBvcHRpb25TdHlsZSA9IHRoaXMubGF5b3V0Lm9wdGlvbnNbIHN0eWxlUHJvcGVydHkgXTtcclxuICAvLyB1c2Ugb3BhY2l0eVxyXG4gIGlmICggb3B0aW9uU3R5bGUub3BhY2l0eSApIHtcclxuICAgIHJldHVybiAnb3BhY2l0eSc7XHJcbiAgfVxyXG4gIC8vIGdldCBmaXJzdCBwcm9wZXJ0eVxyXG4gIGZvciAoIHZhciBwcm9wIGluIG9wdGlvblN0eWxlICkge1xyXG4gICAgcmV0dXJuIHByb3A7XHJcbiAgfVxyXG59O1xyXG5cclxucHJvdG8uaGlkZSA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIHNldCBmbGFnXHJcbiAgdGhpcy5pc0hpZGRlbiA9IHRydWU7XHJcbiAgLy8gcmVtb3ZlIGRpc3BsYXk6IG5vbmVcclxuICB0aGlzLmNzcyh7IGRpc3BsYXk6ICcnIH0pO1xyXG5cclxuICB2YXIgb3B0aW9ucyA9IHRoaXMubGF5b3V0Lm9wdGlvbnM7XHJcblxyXG4gIHZhciBvblRyYW5zaXRpb25FbmQgPSB7fTtcclxuICB2YXIgdHJhbnNpdGlvbkVuZFByb3BlcnR5ID0gdGhpcy5nZXRIaWRlUmV2ZWFsVHJhbnNpdGlvbkVuZFByb3BlcnR5KCdoaWRkZW5TdHlsZScpO1xyXG4gIG9uVHJhbnNpdGlvbkVuZFsgdHJhbnNpdGlvbkVuZFByb3BlcnR5IF0gPSB0aGlzLm9uSGlkZVRyYW5zaXRpb25FbmQ7XHJcblxyXG4gIHRoaXMudHJhbnNpdGlvbih7XHJcbiAgICBmcm9tOiBvcHRpb25zLnZpc2libGVTdHlsZSxcclxuICAgIHRvOiBvcHRpb25zLmhpZGRlblN0eWxlLFxyXG4gICAgLy8ga2VlcCBoaWRkZW4gc3R1ZmYgaGlkZGVuXHJcbiAgICBpc0NsZWFuaW5nOiB0cnVlLFxyXG4gICAgb25UcmFuc2l0aW9uRW5kOiBvblRyYW5zaXRpb25FbmRcclxuICB9KTtcclxufTtcclxuXHJcbnByb3RvLm9uSGlkZVRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbigpIHtcclxuICAvLyBjaGVjayBpZiBzdGlsbCBoaWRkZW5cclxuICAvLyBkdXJpbmcgdHJhbnNpdGlvbiwgaXRlbSBtYXkgaGF2ZSBiZWVuIHVuLWhpZGRlblxyXG4gIGlmICggdGhpcy5pc0hpZGRlbiApIHtcclxuICAgIHRoaXMuY3NzKHsgZGlzcGxheTogJ25vbmUnIH0pO1xyXG4gICAgdGhpcy5lbWl0RXZlbnQoJ2hpZGUnKTtcclxuICB9XHJcbn07XHJcblxyXG5wcm90by5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5jc3Moe1xyXG4gICAgcG9zaXRpb246ICcnLFxyXG4gICAgbGVmdDogJycsXHJcbiAgICByaWdodDogJycsXHJcbiAgICB0b3A6ICcnLFxyXG4gICAgYm90dG9tOiAnJyxcclxuICAgIHRyYW5zaXRpb246ICcnLFxyXG4gICAgdHJhbnNmb3JtOiAnJ1xyXG4gIH0pO1xyXG59O1xyXG5cclxucmV0dXJuIEl0ZW07XHJcblxyXG59KSk7XHJcblxyXG4vKiFcclxuICogT3V0bGF5ZXIgdjIuMS4xXHJcbiAqIHRoZSBicmFpbnMgYW5kIGd1dHMgb2YgYSBsYXlvdXQgbGlicmFyeVxyXG4gKiBNSVQgbGljZW5zZVxyXG4gKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXHJcbiAgLyoganNoaW50IHN0cmljdDogZmFsc2UgKi8gLyogZ2xvYmFscyBkZWZpbmUsIG1vZHVsZSwgcmVxdWlyZSAqL1xyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgICAvLyBBTUQgLSBSZXF1aXJlSlNcclxuICAgIGRlZmluZSggJ291dGxheWVyL291dGxheWVyJyxbXHJcbiAgICAgICAgJ2V2LWVtaXR0ZXIvZXYtZW1pdHRlcicsXHJcbiAgICAgICAgJ2dldC1zaXplL2dldC1zaXplJyxcclxuICAgICAgICAnZml6enktdWktdXRpbHMvdXRpbHMnLFxyXG4gICAgICAgICcuL2l0ZW0nXHJcbiAgICAgIF0sXHJcbiAgICAgIGZ1bmN0aW9uKCBFdkVtaXR0ZXIsIGdldFNpemUsIHV0aWxzLCBJdGVtICkge1xyXG4gICAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIEV2RW1pdHRlciwgZ2V0U2l6ZSwgdXRpbHMsIEl0ZW0pO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XHJcbiAgICAvLyBDb21tb25KUyAtIEJyb3dzZXJpZnksIFdlYnBhY2tcclxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcclxuICAgICAgd2luZG93LFxyXG4gICAgICByZXF1aXJlKCdldi1lbWl0dGVyJyksXHJcbiAgICAgIHJlcXVpcmUoJ2dldC1zaXplJyksXHJcbiAgICAgIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJyksXHJcbiAgICAgIHJlcXVpcmUoJy4vaXRlbScpXHJcbiAgICApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBicm93c2VyIGdsb2JhbFxyXG4gICAgd2luZG93Lk91dGxheWVyID0gZmFjdG9yeShcclxuICAgICAgd2luZG93LFxyXG4gICAgICB3aW5kb3cuRXZFbWl0dGVyLFxyXG4gICAgICB3aW5kb3cuZ2V0U2l6ZSxcclxuICAgICAgd2luZG93LmZpenp5VUlVdGlscyxcclxuICAgICAgd2luZG93Lk91dGxheWVyLkl0ZW1cclxuICAgICk7XHJcbiAgfVxyXG5cclxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIEV2RW1pdHRlciwgZ2V0U2l6ZSwgdXRpbHMsIEl0ZW0gKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbi8vIC0tLS0tIHZhcnMgLS0tLS0gLy9cclxuXHJcbnZhciBjb25zb2xlID0gd2luZG93LmNvbnNvbGU7XHJcbnZhciBqUXVlcnkgPSB3aW5kb3cualF1ZXJ5O1xyXG52YXIgbm9vcCA9IGZ1bmN0aW9uKCkge307XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBPdXRsYXllciAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuLy8gZ2xvYmFsbHkgdW5pcXVlIGlkZW50aWZpZXJzXHJcbnZhciBHVUlEID0gMDtcclxuLy8gaW50ZXJuYWwgc3RvcmUgb2YgYWxsIE91dGxheWVyIGludGFuY2VzXHJcbnZhciBpbnN0YW5jZXMgPSB7fTtcclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHtFbGVtZW50LCBTdHJpbmd9IGVsZW1lbnRcclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG5mdW5jdGlvbiBPdXRsYXllciggZWxlbWVudCwgb3B0aW9ucyApIHtcclxuICB2YXIgcXVlcnlFbGVtZW50ID0gdXRpbHMuZ2V0UXVlcnlFbGVtZW50KCBlbGVtZW50ICk7XHJcbiAgaWYgKCAhcXVlcnlFbGVtZW50ICkge1xyXG4gICAgaWYgKCBjb25zb2xlICkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCAnQmFkIGVsZW1lbnQgZm9yICcgKyB0aGlzLmNvbnN0cnVjdG9yLm5hbWVzcGFjZSArXHJcbiAgICAgICAgJzogJyArICggcXVlcnlFbGVtZW50IHx8IGVsZW1lbnQgKSApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICB0aGlzLmVsZW1lbnQgPSBxdWVyeUVsZW1lbnQ7XHJcbiAgLy8gYWRkIGpRdWVyeVxyXG4gIGlmICggalF1ZXJ5ICkge1xyXG4gICAgdGhpcy4kZWxlbWVudCA9IGpRdWVyeSggdGhpcy5lbGVtZW50ICk7XHJcbiAgfVxyXG5cclxuICAvLyBvcHRpb25zXHJcbiAgdGhpcy5vcHRpb25zID0gdXRpbHMuZXh0ZW5kKCB7fSwgdGhpcy5jb25zdHJ1Y3Rvci5kZWZhdWx0cyApO1xyXG4gIHRoaXMub3B0aW9uKCBvcHRpb25zICk7XHJcblxyXG4gIC8vIGFkZCBpZCBmb3IgT3V0bGF5ZXIuZ2V0RnJvbUVsZW1lbnRcclxuICB2YXIgaWQgPSArK0dVSUQ7XHJcbiAgdGhpcy5lbGVtZW50Lm91dGxheWVyR1VJRCA9IGlkOyAvLyBleHBhbmRvXHJcbiAgaW5zdGFuY2VzWyBpZCBdID0gdGhpczsgLy8gYXNzb2NpYXRlIHZpYSBpZFxyXG5cclxuICAvLyBraWNrIGl0IG9mZlxyXG4gIHRoaXMuX2NyZWF0ZSgpO1xyXG5cclxuICB2YXIgaXNJbml0TGF5b3V0ID0gdGhpcy5fZ2V0T3B0aW9uKCdpbml0TGF5b3V0Jyk7XHJcbiAgaWYgKCBpc0luaXRMYXlvdXQgKSB7XHJcbiAgICB0aGlzLmxheW91dCgpO1xyXG4gIH1cclxufVxyXG5cclxuLy8gc2V0dGluZ3MgYXJlIGZvciBpbnRlcm5hbCB1c2Ugb25seVxyXG5PdXRsYXllci5uYW1lc3BhY2UgPSAnb3V0bGF5ZXInO1xyXG5PdXRsYXllci5JdGVtID0gSXRlbTtcclxuXHJcbi8vIGRlZmF1bHQgb3B0aW9uc1xyXG5PdXRsYXllci5kZWZhdWx0cyA9IHtcclxuICBjb250YWluZXJTdHlsZToge1xyXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcclxuICB9LFxyXG4gIGluaXRMYXlvdXQ6IHRydWUsXHJcbiAgb3JpZ2luTGVmdDogdHJ1ZSxcclxuICBvcmlnaW5Ub3A6IHRydWUsXHJcbiAgcmVzaXplOiB0cnVlLFxyXG4gIHJlc2l6ZUNvbnRhaW5lcjogdHJ1ZSxcclxuICAvLyBpdGVtIG9wdGlvbnNcclxuICB0cmFuc2l0aW9uRHVyYXRpb246ICcwLjRzJyxcclxuICBoaWRkZW5TdHlsZToge1xyXG4gICAgb3BhY2l0eTogMCxcclxuICAgIHRyYW5zZm9ybTogJ3NjYWxlKDAuMDAxKSdcclxuICB9LFxyXG4gIHZpc2libGVTdHlsZToge1xyXG4gICAgb3BhY2l0eTogMSxcclxuICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpJ1xyXG4gIH1cclxufTtcclxuXHJcbnZhciBwcm90byA9IE91dGxheWVyLnByb3RvdHlwZTtcclxuLy8gaW5oZXJpdCBFdkVtaXR0ZXJcclxudXRpbHMuZXh0ZW5kKCBwcm90bywgRXZFbWl0dGVyLnByb3RvdHlwZSApO1xyXG5cclxuLyoqXHJcbiAqIHNldCBvcHRpb25zXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXHJcbiAqL1xyXG5wcm90by5vcHRpb24gPSBmdW5jdGlvbiggb3B0cyApIHtcclxuICB1dGlscy5leHRlbmQoIHRoaXMub3B0aW9ucywgb3B0cyApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIGdldCBiYWNrd2FyZHMgY29tcGF0aWJsZSBvcHRpb24gdmFsdWUsIGNoZWNrIG9sZCBuYW1lXHJcbiAqL1xyXG5wcm90by5fZ2V0T3B0aW9uID0gZnVuY3Rpb24oIG9wdGlvbiApIHtcclxuICB2YXIgb2xkT3B0aW9uID0gdGhpcy5jb25zdHJ1Y3Rvci5jb21wYXRPcHRpb25zWyBvcHRpb24gXTtcclxuICByZXR1cm4gb2xkT3B0aW9uICYmIHRoaXMub3B0aW9uc1sgb2xkT3B0aW9uIF0gIT09IHVuZGVmaW5lZCA/XHJcbiAgICB0aGlzLm9wdGlvbnNbIG9sZE9wdGlvbiBdIDogdGhpcy5vcHRpb25zWyBvcHRpb24gXTtcclxufTtcclxuXHJcbk91dGxheWVyLmNvbXBhdE9wdGlvbnMgPSB7XHJcbiAgLy8gY3VycmVudE5hbWU6IG9sZE5hbWVcclxuICBpbml0TGF5b3V0OiAnaXNJbml0TGF5b3V0JyxcclxuICBob3Jpem9udGFsOiAnaXNIb3Jpem9udGFsJyxcclxuICBsYXlvdXRJbnN0YW50OiAnaXNMYXlvdXRJbnN0YW50JyxcclxuICBvcmlnaW5MZWZ0OiAnaXNPcmlnaW5MZWZ0JyxcclxuICBvcmlnaW5Ub3A6ICdpc09yaWdpblRvcCcsXHJcbiAgcmVzaXplOiAnaXNSZXNpemVCb3VuZCcsXHJcbiAgcmVzaXplQ29udGFpbmVyOiAnaXNSZXNpemluZ0NvbnRhaW5lcidcclxufTtcclxuXHJcbnByb3RvLl9jcmVhdGUgPSBmdW5jdGlvbigpIHtcclxuICAvLyBnZXQgaXRlbXMgZnJvbSBjaGlsZHJlblxyXG4gIHRoaXMucmVsb2FkSXRlbXMoKTtcclxuICAvLyBlbGVtZW50cyB0aGF0IGFmZmVjdCBsYXlvdXQsIGJ1dCBhcmUgbm90IGxhaWQgb3V0XHJcbiAgdGhpcy5zdGFtcHMgPSBbXTtcclxuICB0aGlzLnN0YW1wKCB0aGlzLm9wdGlvbnMuc3RhbXAgKTtcclxuICAvLyBzZXQgY29udGFpbmVyIHN0eWxlXHJcbiAgdXRpbHMuZXh0ZW5kKCB0aGlzLmVsZW1lbnQuc3R5bGUsIHRoaXMub3B0aW9ucy5jb250YWluZXJTdHlsZSApO1xyXG5cclxuICAvLyBiaW5kIHJlc2l6ZSBtZXRob2RcclxuICB2YXIgY2FuQmluZFJlc2l6ZSA9IHRoaXMuX2dldE9wdGlvbigncmVzaXplJyk7XHJcbiAgaWYgKCBjYW5CaW5kUmVzaXplICkge1xyXG4gICAgdGhpcy5iaW5kUmVzaXplKCk7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gZ29lcyB0aHJvdWdoIGFsbCBjaGlsZHJlbiBhZ2FpbiBhbmQgZ2V0cyBicmlja3MgaW4gcHJvcGVyIG9yZGVyXHJcbnByb3RvLnJlbG9hZEl0ZW1zID0gZnVuY3Rpb24oKSB7XHJcbiAgLy8gY29sbGVjdGlvbiBvZiBpdGVtIGVsZW1lbnRzXHJcbiAgdGhpcy5pdGVtcyA9IHRoaXMuX2l0ZW1pemUoIHRoaXMuZWxlbWVudC5jaGlsZHJlbiApO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiB0dXJuIGVsZW1lbnRzIGludG8gT3V0bGF5ZXIuSXRlbXMgdG8gYmUgdXNlZCBpbiBsYXlvdXRcclxuICogQHBhcmFtIHtBcnJheSBvciBOb2RlTGlzdCBvciBIVE1MRWxlbWVudH0gZWxlbXNcclxuICogQHJldHVybnMge0FycmF5fSBpdGVtcyAtIGNvbGxlY3Rpb24gb2YgbmV3IE91dGxheWVyIEl0ZW1zXHJcbiAqL1xyXG5wcm90by5faXRlbWl6ZSA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuXHJcbiAgdmFyIGl0ZW1FbGVtcyA9IHRoaXMuX2ZpbHRlckZpbmRJdGVtRWxlbWVudHMoIGVsZW1zICk7XHJcbiAgdmFyIEl0ZW0gPSB0aGlzLmNvbnN0cnVjdG9yLkl0ZW07XHJcblxyXG4gIC8vIGNyZWF0ZSBuZXcgT3V0bGF5ZXIgSXRlbXMgZm9yIGNvbGxlY3Rpb25cclxuICB2YXIgaXRlbXMgPSBbXTtcclxuICBmb3IgKCB2YXIgaT0wOyBpIDwgaXRlbUVsZW1zLmxlbmd0aDsgaSsrICkge1xyXG4gICAgdmFyIGVsZW0gPSBpdGVtRWxlbXNbaV07XHJcbiAgICB2YXIgaXRlbSA9IG5ldyBJdGVtKCBlbGVtLCB0aGlzICk7XHJcbiAgICBpdGVtcy5wdXNoKCBpdGVtICk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gaXRlbXM7XHJcbn07XHJcblxyXG4vKipcclxuICogZ2V0IGl0ZW0gZWxlbWVudHMgdG8gYmUgdXNlZCBpbiBsYXlvdXRcclxuICogQHBhcmFtIHtBcnJheSBvciBOb2RlTGlzdCBvciBIVE1MRWxlbWVudH0gZWxlbXNcclxuICogQHJldHVybnMge0FycmF5fSBpdGVtcyAtIGl0ZW0gZWxlbWVudHNcclxuICovXHJcbnByb3RvLl9maWx0ZXJGaW5kSXRlbUVsZW1lbnRzID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG4gIHJldHVybiB1dGlscy5maWx0ZXJGaW5kRWxlbWVudHMoIGVsZW1zLCB0aGlzLm9wdGlvbnMuaXRlbVNlbGVjdG9yICk7XHJcbn07XHJcblxyXG4vKipcclxuICogZ2V0dGVyIG1ldGhvZCBmb3IgZ2V0dGluZyBpdGVtIGVsZW1lbnRzXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gZWxlbXMgLSBjb2xsZWN0aW9uIG9mIGl0ZW0gZWxlbWVudHNcclxuICovXHJcbnByb3RvLmdldEl0ZW1FbGVtZW50cyA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLml0ZW1zLm1hcCggZnVuY3Rpb24oIGl0ZW0gKSB7XHJcbiAgICByZXR1cm4gaXRlbS5lbGVtZW50O1xyXG4gIH0pO1xyXG59O1xyXG5cclxuLy8gLS0tLS0gaW5pdCAmIGxheW91dCAtLS0tLSAvL1xyXG5cclxuLyoqXHJcbiAqIGxheXMgb3V0IGFsbCBpdGVtc1xyXG4gKi9cclxucHJvdG8ubGF5b3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5fcmVzZXRMYXlvdXQoKTtcclxuICB0aGlzLl9tYW5hZ2VTdGFtcHMoKTtcclxuXHJcbiAgLy8gZG9uJ3QgYW5pbWF0ZSBmaXJzdCBsYXlvdXRcclxuICB2YXIgbGF5b3V0SW5zdGFudCA9IHRoaXMuX2dldE9wdGlvbignbGF5b3V0SW5zdGFudCcpO1xyXG4gIHZhciBpc0luc3RhbnQgPSBsYXlvdXRJbnN0YW50ICE9PSB1bmRlZmluZWQgP1xyXG4gICAgbGF5b3V0SW5zdGFudCA6ICF0aGlzLl9pc0xheW91dEluaXRlZDtcclxuICB0aGlzLmxheW91dEl0ZW1zKCB0aGlzLml0ZW1zLCBpc0luc3RhbnQgKTtcclxuXHJcbiAgLy8gZmxhZyBmb3IgaW5pdGFsaXplZFxyXG4gIHRoaXMuX2lzTGF5b3V0SW5pdGVkID0gdHJ1ZTtcclxufTtcclxuXHJcbi8vIF9pbml0IGlzIGFsaWFzIGZvciBsYXlvdXRcclxucHJvdG8uX2luaXQgPSBwcm90by5sYXlvdXQ7XHJcblxyXG4vKipcclxuICogbG9naWMgYmVmb3JlIGFueSBuZXcgbGF5b3V0XHJcbiAqL1xyXG5wcm90by5fcmVzZXRMYXlvdXQgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLmdldFNpemUoKTtcclxufTtcclxuXHJcblxyXG5wcm90by5nZXRTaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5zaXplID0gZ2V0U2l6ZSggdGhpcy5lbGVtZW50ICk7XHJcbn07XHJcblxyXG4vKipcclxuICogZ2V0IG1lYXN1cmVtZW50IGZyb20gb3B0aW9uLCBmb3IgY29sdW1uV2lkdGgsIHJvd0hlaWdodCwgZ3V0dGVyXHJcbiAqIGlmIG9wdGlvbiBpcyBTdHJpbmcgLT4gZ2V0IGVsZW1lbnQgZnJvbSBzZWxlY3RvciBzdHJpbmcsICYgZ2V0IHNpemUgb2YgZWxlbWVudFxyXG4gKiBpZiBvcHRpb24gaXMgRWxlbWVudCAtPiBnZXQgc2l6ZSBvZiBlbGVtZW50XHJcbiAqIGVsc2UgdXNlIG9wdGlvbiBhcyBhIG51bWJlclxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVhc3VyZW1lbnRcclxuICogQHBhcmFtIHtTdHJpbmd9IHNpemUgLSB3aWR0aCBvciBoZWlnaHRcclxuICogQHByaXZhdGVcclxuICovXHJcbnByb3RvLl9nZXRNZWFzdXJlbWVudCA9IGZ1bmN0aW9uKCBtZWFzdXJlbWVudCwgc2l6ZSApIHtcclxuICB2YXIgb3B0aW9uID0gdGhpcy5vcHRpb25zWyBtZWFzdXJlbWVudCBdO1xyXG4gIHZhciBlbGVtO1xyXG4gIGlmICggIW9wdGlvbiApIHtcclxuICAgIC8vIGRlZmF1bHQgdG8gMFxyXG4gICAgdGhpc1sgbWVhc3VyZW1lbnQgXSA9IDA7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIHVzZSBvcHRpb24gYXMgYW4gZWxlbWVudFxyXG4gICAgaWYgKCB0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnICkge1xyXG4gICAgICBlbGVtID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoIG9wdGlvbiApO1xyXG4gICAgfSBlbHNlIGlmICggb3B0aW9uIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgKSB7XHJcbiAgICAgIGVsZW0gPSBvcHRpb247XHJcbiAgICB9XHJcbiAgICAvLyB1c2Ugc2l6ZSBvZiBlbGVtZW50LCBpZiBlbGVtZW50XHJcbiAgICB0aGlzWyBtZWFzdXJlbWVudCBdID0gZWxlbSA/IGdldFNpemUoIGVsZW0gKVsgc2l6ZSBdIDogb3B0aW9uO1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBsYXlvdXQgYSBjb2xsZWN0aW9uIG9mIGl0ZW0gZWxlbWVudHNcclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcbnByb3RvLmxheW91dEl0ZW1zID0gZnVuY3Rpb24oIGl0ZW1zLCBpc0luc3RhbnQgKSB7XHJcbiAgaXRlbXMgPSB0aGlzLl9nZXRJdGVtc0ZvckxheW91dCggaXRlbXMgKTtcclxuXHJcbiAgdGhpcy5fbGF5b3V0SXRlbXMoIGl0ZW1zLCBpc0luc3RhbnQgKTtcclxuXHJcbiAgdGhpcy5fcG9zdExheW91dCgpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIGdldCB0aGUgaXRlbXMgdG8gYmUgbGFpZCBvdXRcclxuICogeW91IG1heSB3YW50IHRvIHNraXAgb3ZlciBzb21lIGl0ZW1zXHJcbiAqIEBwYXJhbSB7QXJyYXl9IGl0ZW1zXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gaXRlbXNcclxuICovXHJcbnByb3RvLl9nZXRJdGVtc0ZvckxheW91dCA9IGZ1bmN0aW9uKCBpdGVtcyApIHtcclxuICByZXR1cm4gaXRlbXMuZmlsdGVyKCBmdW5jdGlvbiggaXRlbSApIHtcclxuICAgIHJldHVybiAhaXRlbS5pc0lnbm9yZWQ7XHJcbiAgfSk7XHJcbn07XHJcblxyXG4vKipcclxuICogbGF5b3V0IGl0ZW1zXHJcbiAqIEBwYXJhbSB7QXJyYXl9IGl0ZW1zXHJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNJbnN0YW50XHJcbiAqL1xyXG5wcm90by5fbGF5b3V0SXRlbXMgPSBmdW5jdGlvbiggaXRlbXMsIGlzSW5zdGFudCApIHtcclxuICB0aGlzLl9lbWl0Q29tcGxldGVPbkl0ZW1zKCAnbGF5b3V0JywgaXRlbXMgKTtcclxuXHJcbiAgaWYgKCAhaXRlbXMgfHwgIWl0ZW1zLmxlbmd0aCApIHtcclxuICAgIC8vIG5vIGl0ZW1zLCBlbWl0IGV2ZW50IHdpdGggZW1wdHkgYXJyYXlcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHZhciBxdWV1ZSA9IFtdO1xyXG5cclxuICBpdGVtcy5mb3JFYWNoKCBmdW5jdGlvbiggaXRlbSApIHtcclxuICAgIC8vIGdldCB4L3kgb2JqZWN0IGZyb20gbWV0aG9kXHJcbiAgICB2YXIgcG9zaXRpb24gPSB0aGlzLl9nZXRJdGVtTGF5b3V0UG9zaXRpb24oIGl0ZW0gKTtcclxuICAgIC8vIGVucXVldWVcclxuICAgIHBvc2l0aW9uLml0ZW0gPSBpdGVtO1xyXG4gICAgcG9zaXRpb24uaXNJbnN0YW50ID0gaXNJbnN0YW50IHx8IGl0ZW0uaXNMYXlvdXRJbnN0YW50O1xyXG4gICAgcXVldWUucHVzaCggcG9zaXRpb24gKTtcclxuICB9LCB0aGlzICk7XHJcblxyXG4gIHRoaXMuX3Byb2Nlc3NMYXlvdXRRdWV1ZSggcXVldWUgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBnZXQgaXRlbSBsYXlvdXQgcG9zaXRpb25cclxuICogQHBhcmFtIHtPdXRsYXllci5JdGVtfSBpdGVtXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IHggYW5kIHkgcG9zaXRpb25cclxuICovXHJcbnByb3RvLl9nZXRJdGVtTGF5b3V0UG9zaXRpb24gPSBmdW5jdGlvbiggLyogaXRlbSAqLyApIHtcclxuICByZXR1cm4ge1xyXG4gICAgeDogMCxcclxuICAgIHk6IDBcclxuICB9O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIGl0ZXJhdGUgb3ZlciBhcnJheSBhbmQgcG9zaXRpb24gZWFjaCBpdGVtXHJcbiAqIFJlYXNvbiBiZWluZyAtIHNlcGFyYXRpbmcgdGhpcyBsb2dpYyBwcmV2ZW50cyAnbGF5b3V0IGludmFsaWRhdGlvbidcclxuICogdGh4IEBwYXVsX2lyaXNoXHJcbiAqIEBwYXJhbSB7QXJyYXl9IHF1ZXVlXHJcbiAqL1xyXG5wcm90by5fcHJvY2Vzc0xheW91dFF1ZXVlID0gZnVuY3Rpb24oIHF1ZXVlICkge1xyXG4gIHRoaXMudXBkYXRlU3RhZ2dlcigpO1xyXG4gIHF1ZXVlLmZvckVhY2goIGZ1bmN0aW9uKCBvYmosIGkgKSB7XHJcbiAgICB0aGlzLl9wb3NpdGlvbkl0ZW0oIG9iai5pdGVtLCBvYmoueCwgb2JqLnksIG9iai5pc0luc3RhbnQsIGkgKTtcclxuICB9LCB0aGlzICk7XHJcbn07XHJcblxyXG4vLyBzZXQgc3RhZ2dlciBmcm9tIG9wdGlvbiBpbiBtaWxsaXNlY29uZHMgbnVtYmVyXHJcbnByb3RvLnVwZGF0ZVN0YWdnZXIgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgc3RhZ2dlciA9IHRoaXMub3B0aW9ucy5zdGFnZ2VyO1xyXG4gIGlmICggc3RhZ2dlciA9PT0gbnVsbCB8fCBzdGFnZ2VyID09PSB1bmRlZmluZWQgKSB7XHJcbiAgICB0aGlzLnN0YWdnZXIgPSAwO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICB0aGlzLnN0YWdnZXIgPSBnZXRNaWxsaXNlY29uZHMoIHN0YWdnZXIgKTtcclxuICByZXR1cm4gdGhpcy5zdGFnZ2VyO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFNldHMgcG9zaXRpb24gb2YgaXRlbSBpbiBET01cclxuICogQHBhcmFtIHtPdXRsYXllci5JdGVtfSBpdGVtXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IC0gaG9yaXpvbnRhbCBwb3NpdGlvblxyXG4gKiBAcGFyYW0ge051bWJlcn0geSAtIHZlcnRpY2FsIHBvc2l0aW9uXHJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNJbnN0YW50IC0gZGlzYWJsZXMgdHJhbnNpdGlvbnNcclxuICovXHJcbnByb3RvLl9wb3NpdGlvbkl0ZW0gPSBmdW5jdGlvbiggaXRlbSwgeCwgeSwgaXNJbnN0YW50LCBpICkge1xyXG4gIGlmICggaXNJbnN0YW50ICkge1xyXG4gICAgLy8gaWYgbm90IHRyYW5zaXRpb24sIGp1c3Qgc2V0IENTU1xyXG4gICAgaXRlbS5nb1RvKCB4LCB5ICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGl0ZW0uc3RhZ2dlciggaSAqIHRoaXMuc3RhZ2dlciApO1xyXG4gICAgaXRlbS5tb3ZlVG8oIHgsIHkgKTtcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogQW55IGxvZ2ljIHlvdSB3YW50IHRvIGRvIGFmdGVyIGVhY2ggbGF5b3V0LFxyXG4gKiBpLmUuIHNpemUgdGhlIGNvbnRhaW5lclxyXG4gKi9cclxucHJvdG8uX3Bvc3RMYXlvdXQgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLnJlc2l6ZUNvbnRhaW5lcigpO1xyXG59O1xyXG5cclxucHJvdG8ucmVzaXplQ29udGFpbmVyID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIGlzUmVzaXppbmdDb250YWluZXIgPSB0aGlzLl9nZXRPcHRpb24oJ3Jlc2l6ZUNvbnRhaW5lcicpO1xyXG4gIGlmICggIWlzUmVzaXppbmdDb250YWluZXIgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIHZhciBzaXplID0gdGhpcy5fZ2V0Q29udGFpbmVyU2l6ZSgpO1xyXG4gIGlmICggc2l6ZSApIHtcclxuICAgIHRoaXMuX3NldENvbnRhaW5lck1lYXN1cmUoIHNpemUud2lkdGgsIHRydWUgKTtcclxuICAgIHRoaXMuX3NldENvbnRhaW5lck1lYXN1cmUoIHNpemUuaGVpZ2h0LCBmYWxzZSApO1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBTZXRzIHdpZHRoIG9yIGhlaWdodCBvZiBjb250YWluZXIgaWYgcmV0dXJuZWRcclxuICogQHJldHVybnMge09iamVjdH0gc2l6ZVxyXG4gKiAgIEBwYXJhbSB7TnVtYmVyfSB3aWR0aFxyXG4gKiAgIEBwYXJhbSB7TnVtYmVyfSBoZWlnaHRcclxuICovXHJcbnByb3RvLl9nZXRDb250YWluZXJTaXplID0gbm9vcDtcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge051bWJlcn0gbWVhc3VyZSAtIHNpemUgb2Ygd2lkdGggb3IgaGVpZ2h0XHJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNXaWR0aFxyXG4gKi9cclxucHJvdG8uX3NldENvbnRhaW5lck1lYXN1cmUgPSBmdW5jdGlvbiggbWVhc3VyZSwgaXNXaWR0aCApIHtcclxuICBpZiAoIG1lYXN1cmUgPT09IHVuZGVmaW5lZCApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHZhciBlbGVtU2l6ZSA9IHRoaXMuc2l6ZTtcclxuICAvLyBhZGQgcGFkZGluZyBhbmQgYm9yZGVyIHdpZHRoIGlmIGJvcmRlciBib3hcclxuICBpZiAoIGVsZW1TaXplLmlzQm9yZGVyQm94ICkge1xyXG4gICAgbWVhc3VyZSArPSBpc1dpZHRoID8gZWxlbVNpemUucGFkZGluZ0xlZnQgKyBlbGVtU2l6ZS5wYWRkaW5nUmlnaHQgK1xyXG4gICAgICBlbGVtU2l6ZS5ib3JkZXJMZWZ0V2lkdGggKyBlbGVtU2l6ZS5ib3JkZXJSaWdodFdpZHRoIDpcclxuICAgICAgZWxlbVNpemUucGFkZGluZ0JvdHRvbSArIGVsZW1TaXplLnBhZGRpbmdUb3AgK1xyXG4gICAgICBlbGVtU2l6ZS5ib3JkZXJUb3BXaWR0aCArIGVsZW1TaXplLmJvcmRlckJvdHRvbVdpZHRoO1xyXG4gIH1cclxuXHJcbiAgbWVhc3VyZSA9IE1hdGgubWF4KCBtZWFzdXJlLCAwICk7XHJcbiAgdGhpcy5lbGVtZW50LnN0eWxlWyBpc1dpZHRoID8gJ3dpZHRoJyA6ICdoZWlnaHQnIF0gPSBtZWFzdXJlICsgJ3B4JztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBlbWl0IGV2ZW50Q29tcGxldGUgb24gYSBjb2xsZWN0aW9uIG9mIGl0ZW1zIGV2ZW50c1xyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnROYW1lXHJcbiAqIEBwYXJhbSB7QXJyYXl9IGl0ZW1zIC0gT3V0bGF5ZXIuSXRlbXNcclxuICovXHJcbnByb3RvLl9lbWl0Q29tcGxldGVPbkl0ZW1zID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgaXRlbXMgKSB7XHJcbiAgdmFyIF90aGlzID0gdGhpcztcclxuICBmdW5jdGlvbiBvbkNvbXBsZXRlKCkge1xyXG4gICAgX3RoaXMuZGlzcGF0Y2hFdmVudCggZXZlbnROYW1lICsgJ0NvbXBsZXRlJywgbnVsbCwgWyBpdGVtcyBdICk7XHJcbiAgfVxyXG5cclxuICB2YXIgY291bnQgPSBpdGVtcy5sZW5ndGg7XHJcbiAgaWYgKCAhaXRlbXMgfHwgIWNvdW50ICkge1xyXG4gICAgb25Db21wbGV0ZSgpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgdmFyIGRvbmVDb3VudCA9IDA7XHJcbiAgZnVuY3Rpb24gdGljaygpIHtcclxuICAgIGRvbmVDb3VudCsrO1xyXG4gICAgaWYgKCBkb25lQ291bnQgPT0gY291bnQgKSB7XHJcbiAgICAgIG9uQ29tcGxldGUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIGJpbmQgY2FsbGJhY2tcclxuICBpdGVtcy5mb3JFYWNoKCBmdW5jdGlvbiggaXRlbSApIHtcclxuICAgIGl0ZW0ub25jZSggZXZlbnROYW1lLCB0aWNrICk7XHJcbiAgfSk7XHJcbn07XHJcblxyXG4vKipcclxuICogZW1pdHMgZXZlbnRzIHZpYSBFdkVtaXR0ZXIgYW5kIGpRdWVyeSBldmVudHNcclxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgLSBuYW1lIG9mIGV2ZW50XHJcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gb3JpZ2luYWwgZXZlbnRcclxuICogQHBhcmFtIHtBcnJheX0gYXJncyAtIGV4dHJhIGFyZ3VtZW50c1xyXG4gKi9cclxucHJvdG8uZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uKCB0eXBlLCBldmVudCwgYXJncyApIHtcclxuICAvLyBhZGQgb3JpZ2luYWwgZXZlbnQgdG8gYXJndW1lbnRzXHJcbiAgdmFyIGVtaXRBcmdzID0gZXZlbnQgPyBbIGV2ZW50IF0uY29uY2F0KCBhcmdzICkgOiBhcmdzO1xyXG4gIHRoaXMuZW1pdEV2ZW50KCB0eXBlLCBlbWl0QXJncyApO1xyXG5cclxuICBpZiAoIGpRdWVyeSApIHtcclxuICAgIC8vIHNldCB0aGlzLiRlbGVtZW50XHJcbiAgICB0aGlzLiRlbGVtZW50ID0gdGhpcy4kZWxlbWVudCB8fCBqUXVlcnkoIHRoaXMuZWxlbWVudCApO1xyXG4gICAgaWYgKCBldmVudCApIHtcclxuICAgICAgLy8gY3JlYXRlIGpRdWVyeSBldmVudFxyXG4gICAgICB2YXIgJGV2ZW50ID0galF1ZXJ5LkV2ZW50KCBldmVudCApO1xyXG4gICAgICAkZXZlbnQudHlwZSA9IHR5cGU7XHJcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlciggJGV2ZW50LCBhcmdzICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBqdXN0IHRyaWdnZXIgd2l0aCB0eXBlIGlmIG5vIGV2ZW50IGF2YWlsYWJsZVxyXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoIHR5cGUsIGFyZ3MgKTtcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBpZ25vcmUgJiBzdGFtcHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcblxyXG4vKipcclxuICoga2VlcCBpdGVtIGluIGNvbGxlY3Rpb24sIGJ1dCBkbyBub3QgbGF5IGl0IG91dFxyXG4gKiBpZ25vcmVkIGl0ZW1zIGRvIG5vdCBnZXQgc2tpcHBlZCBpbiBsYXlvdXRcclxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtXHJcbiAqL1xyXG5wcm90by5pZ25vcmUgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuICB2YXIgaXRlbSA9IHRoaXMuZ2V0SXRlbSggZWxlbSApO1xyXG4gIGlmICggaXRlbSApIHtcclxuICAgIGl0ZW0uaXNJZ25vcmVkID0gdHJ1ZTtcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogcmV0dXJuIGl0ZW0gdG8gbGF5b3V0IGNvbGxlY3Rpb25cclxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtXHJcbiAqL1xyXG5wcm90by51bmlnbm9yZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG4gIHZhciBpdGVtID0gdGhpcy5nZXRJdGVtKCBlbGVtICk7XHJcbiAgaWYgKCBpdGVtICkge1xyXG4gICAgZGVsZXRlIGl0ZW0uaXNJZ25vcmVkO1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBhZGRzIGVsZW1lbnRzIHRvIHN0YW1wc1xyXG4gKiBAcGFyYW0ge05vZGVMaXN0LCBBcnJheSwgRWxlbWVudCwgb3IgU3RyaW5nfSBlbGVtc1xyXG4gKi9cclxucHJvdG8uc3RhbXAgPSBmdW5jdGlvbiggZWxlbXMgKSB7XHJcbiAgZWxlbXMgPSB0aGlzLl9maW5kKCBlbGVtcyApO1xyXG4gIGlmICggIWVsZW1zICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgdGhpcy5zdGFtcHMgPSB0aGlzLnN0YW1wcy5jb25jYXQoIGVsZW1zICk7XHJcbiAgLy8gaWdub3JlXHJcbiAgZWxlbXMuZm9yRWFjaCggdGhpcy5pZ25vcmUsIHRoaXMgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiByZW1vdmVzIGVsZW1lbnRzIHRvIHN0YW1wc1xyXG4gKiBAcGFyYW0ge05vZGVMaXN0LCBBcnJheSwgb3IgRWxlbWVudH0gZWxlbXNcclxuICovXHJcbnByb3RvLnVuc3RhbXAgPSBmdW5jdGlvbiggZWxlbXMgKSB7XHJcbiAgZWxlbXMgPSB0aGlzLl9maW5kKCBlbGVtcyApO1xyXG4gIGlmICggIWVsZW1zICl7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBlbGVtcy5mb3JFYWNoKCBmdW5jdGlvbiggZWxlbSApIHtcclxuICAgIC8vIGZpbHRlciBvdXQgcmVtb3ZlZCBzdGFtcCBlbGVtZW50c1xyXG4gICAgdXRpbHMucmVtb3ZlRnJvbSggdGhpcy5zdGFtcHMsIGVsZW0gKTtcclxuICAgIHRoaXMudW5pZ25vcmUoIGVsZW0gKTtcclxuICB9LCB0aGlzICk7XHJcbn07XHJcblxyXG4vKipcclxuICogZmluZHMgY2hpbGQgZWxlbWVudHNcclxuICogQHBhcmFtIHtOb2RlTGlzdCwgQXJyYXksIEVsZW1lbnQsIG9yIFN0cmluZ30gZWxlbXNcclxuICogQHJldHVybnMge0FycmF5fSBlbGVtc1xyXG4gKi9cclxucHJvdG8uX2ZpbmQgPSBmdW5jdGlvbiggZWxlbXMgKSB7XHJcbiAgaWYgKCAhZWxlbXMgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8vIGlmIHN0cmluZywgdXNlIGFyZ3VtZW50IGFzIHNlbGVjdG9yIHN0cmluZ1xyXG4gIGlmICggdHlwZW9mIGVsZW1zID09ICdzdHJpbmcnICkge1xyXG4gICAgZWxlbXMgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCggZWxlbXMgKTtcclxuICB9XHJcbiAgZWxlbXMgPSB1dGlscy5tYWtlQXJyYXkoIGVsZW1zICk7XHJcbiAgcmV0dXJuIGVsZW1zO1xyXG59O1xyXG5cclxucHJvdG8uX21hbmFnZVN0YW1wcyA9IGZ1bmN0aW9uKCkge1xyXG4gIGlmICggIXRoaXMuc3RhbXBzIHx8ICF0aGlzLnN0YW1wcy5sZW5ndGggKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICB0aGlzLl9nZXRCb3VuZGluZ1JlY3QoKTtcclxuXHJcbiAgdGhpcy5zdGFtcHMuZm9yRWFjaCggdGhpcy5fbWFuYWdlU3RhbXAsIHRoaXMgKTtcclxufTtcclxuXHJcbi8vIHVwZGF0ZSBib3VuZGluZ0xlZnQgLyBUb3BcclxucHJvdG8uX2dldEJvdW5kaW5nUmVjdCA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIGdldCBib3VuZGluZyByZWN0IGZvciBjb250YWluZXIgZWxlbWVudFxyXG4gIHZhciBib3VuZGluZ1JlY3QgPSB0aGlzLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgdmFyIHNpemUgPSB0aGlzLnNpemU7XHJcbiAgdGhpcy5fYm91bmRpbmdSZWN0ID0ge1xyXG4gICAgbGVmdDogYm91bmRpbmdSZWN0LmxlZnQgKyBzaXplLnBhZGRpbmdMZWZ0ICsgc2l6ZS5ib3JkZXJMZWZ0V2lkdGgsXHJcbiAgICB0b3A6IGJvdW5kaW5nUmVjdC50b3AgKyBzaXplLnBhZGRpbmdUb3AgKyBzaXplLmJvcmRlclRvcFdpZHRoLFxyXG4gICAgcmlnaHQ6IGJvdW5kaW5nUmVjdC5yaWdodCAtICggc2l6ZS5wYWRkaW5nUmlnaHQgKyBzaXplLmJvcmRlclJpZ2h0V2lkdGggKSxcclxuICAgIGJvdHRvbTogYm91bmRpbmdSZWN0LmJvdHRvbSAtICggc2l6ZS5wYWRkaW5nQm90dG9tICsgc2l6ZS5ib3JkZXJCb3R0b21XaWR0aCApXHJcbiAgfTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHN0YW1wXHJcbioqL1xyXG5wcm90by5fbWFuYWdlU3RhbXAgPSBub29wO1xyXG5cclxuLyoqXHJcbiAqIGdldCB4L3kgcG9zaXRpb24gb2YgZWxlbWVudCByZWxhdGl2ZSB0byBjb250YWluZXIgZWxlbWVudFxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1cclxuICogQHJldHVybnMge09iamVjdH0gb2Zmc2V0IC0gaGFzIGxlZnQsIHRvcCwgcmlnaHQsIGJvdHRvbVxyXG4gKi9cclxucHJvdG8uX2dldEVsZW1lbnRPZmZzZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuICB2YXIgYm91bmRpbmdSZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICB2YXIgdGhpc1JlY3QgPSB0aGlzLl9ib3VuZGluZ1JlY3Q7XHJcbiAgdmFyIHNpemUgPSBnZXRTaXplKCBlbGVtICk7XHJcbiAgdmFyIG9mZnNldCA9IHtcclxuICAgIGxlZnQ6IGJvdW5kaW5nUmVjdC5sZWZ0IC0gdGhpc1JlY3QubGVmdCAtIHNpemUubWFyZ2luTGVmdCxcclxuICAgIHRvcDogYm91bmRpbmdSZWN0LnRvcCAtIHRoaXNSZWN0LnRvcCAtIHNpemUubWFyZ2luVG9wLFxyXG4gICAgcmlnaHQ6IHRoaXNSZWN0LnJpZ2h0IC0gYm91bmRpbmdSZWN0LnJpZ2h0IC0gc2l6ZS5tYXJnaW5SaWdodCxcclxuICAgIGJvdHRvbTogdGhpc1JlY3QuYm90dG9tIC0gYm91bmRpbmdSZWN0LmJvdHRvbSAtIHNpemUubWFyZ2luQm90dG9tXHJcbiAgfTtcclxuICByZXR1cm4gb2Zmc2V0O1xyXG59O1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gcmVzaXplIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4vLyBlbmFibGUgZXZlbnQgaGFuZGxlcnMgZm9yIGxpc3RlbmVyc1xyXG4vLyBpLmUuIHJlc2l6ZSAtPiBvbnJlc2l6ZVxyXG5wcm90by5oYW5kbGVFdmVudCA9IHV0aWxzLmhhbmRsZUV2ZW50O1xyXG5cclxuLyoqXHJcbiAqIEJpbmQgbGF5b3V0IHRvIHdpbmRvdyByZXNpemluZ1xyXG4gKi9cclxucHJvdG8uYmluZFJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCAncmVzaXplJywgdGhpcyApO1xyXG4gIHRoaXMuaXNSZXNpemVCb3VuZCA9IHRydWU7XHJcbn07XHJcblxyXG4vKipcclxuICogVW5iaW5kIGxheW91dCB0byB3aW5kb3cgcmVzaXppbmdcclxuICovXHJcbnByb3RvLnVuYmluZFJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCAncmVzaXplJywgdGhpcyApO1xyXG4gIHRoaXMuaXNSZXNpemVCb3VuZCA9IGZhbHNlO1xyXG59O1xyXG5cclxucHJvdG8ub25yZXNpemUgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLnJlc2l6ZSgpO1xyXG59O1xyXG5cclxudXRpbHMuZGVib3VuY2VNZXRob2QoIE91dGxheWVyLCAnb25yZXNpemUnLCAxMDAgKTtcclxuXHJcbnByb3RvLnJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIGRvbid0IHRyaWdnZXIgaWYgc2l6ZSBkaWQgbm90IGNoYW5nZVxyXG4gIC8vIG9yIGlmIHJlc2l6ZSB3YXMgdW5ib3VuZC4gU2VlICM5XHJcbiAgaWYgKCAhdGhpcy5pc1Jlc2l6ZUJvdW5kIHx8ICF0aGlzLm5lZWRzUmVzaXplTGF5b3V0KCkgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICB0aGlzLmxheW91dCgpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIGNoZWNrIGlmIGxheW91dCBpcyBuZWVkZWQgcG9zdCBsYXlvdXRcclxuICogQHJldHVybnMgQm9vbGVhblxyXG4gKi9cclxucHJvdG8ubmVlZHNSZXNpemVMYXlvdXQgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgc2l6ZSA9IGdldFNpemUoIHRoaXMuZWxlbWVudCApO1xyXG4gIC8vIGNoZWNrIHRoYXQgdGhpcy5zaXplIGFuZCBzaXplIGFyZSB0aGVyZVxyXG4gIC8vIElFOCB0cmlnZ2VycyByZXNpemUgb24gYm9keSBzaXplIGNoYW5nZSwgc28gdGhleSBtaWdodCBub3QgYmVcclxuICB2YXIgaGFzU2l6ZXMgPSB0aGlzLnNpemUgJiYgc2l6ZTtcclxuICByZXR1cm4gaGFzU2l6ZXMgJiYgc2l6ZS5pbm5lcldpZHRoICE9PSB0aGlzLnNpemUuaW5uZXJXaWR0aDtcclxufTtcclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIG1ldGhvZHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbi8qKlxyXG4gKiBhZGQgaXRlbXMgdG8gT3V0bGF5ZXIgaW5zdGFuY2VcclxuICogQHBhcmFtIHtBcnJheSBvciBOb2RlTGlzdCBvciBFbGVtZW50fSBlbGVtc1xyXG4gKiBAcmV0dXJucyB7QXJyYXl9IGl0ZW1zIC0gT3V0bGF5ZXIuSXRlbXNcclxuKiovXHJcbnByb3RvLmFkZEl0ZW1zID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG4gIHZhciBpdGVtcyA9IHRoaXMuX2l0ZW1pemUoIGVsZW1zICk7XHJcbiAgLy8gYWRkIGl0ZW1zIHRvIGNvbGxlY3Rpb25cclxuICBpZiAoIGl0ZW1zLmxlbmd0aCApIHtcclxuICAgIHRoaXMuaXRlbXMgPSB0aGlzLml0ZW1zLmNvbmNhdCggaXRlbXMgKTtcclxuICB9XHJcbiAgcmV0dXJuIGl0ZW1zO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIExheW91dCBuZXdseS1hcHBlbmRlZCBpdGVtIGVsZW1lbnRzXHJcbiAqIEBwYXJhbSB7QXJyYXkgb3IgTm9kZUxpc3Qgb3IgRWxlbWVudH0gZWxlbXNcclxuICovXHJcbnByb3RvLmFwcGVuZGVkID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG4gIHZhciBpdGVtcyA9IHRoaXMuYWRkSXRlbXMoIGVsZW1zICk7XHJcbiAgaWYgKCAhaXRlbXMubGVuZ3RoICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICAvLyBsYXlvdXQgYW5kIHJldmVhbCBqdXN0IHRoZSBuZXcgaXRlbXNcclxuICB0aGlzLmxheW91dEl0ZW1zKCBpdGVtcywgdHJ1ZSApO1xyXG4gIHRoaXMucmV2ZWFsKCBpdGVtcyApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIExheW91dCBwcmVwZW5kZWQgZWxlbWVudHNcclxuICogQHBhcmFtIHtBcnJheSBvciBOb2RlTGlzdCBvciBFbGVtZW50fSBlbGVtc1xyXG4gKi9cclxucHJvdG8ucHJlcGVuZGVkID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG4gIHZhciBpdGVtcyA9IHRoaXMuX2l0ZW1pemUoIGVsZW1zICk7XHJcbiAgaWYgKCAhaXRlbXMubGVuZ3RoICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICAvLyBhZGQgaXRlbXMgdG8gYmVnaW5uaW5nIG9mIGNvbGxlY3Rpb25cclxuICB2YXIgcHJldmlvdXNJdGVtcyA9IHRoaXMuaXRlbXMuc2xpY2UoMCk7XHJcbiAgdGhpcy5pdGVtcyA9IGl0ZW1zLmNvbmNhdCggcHJldmlvdXNJdGVtcyApO1xyXG4gIC8vIHN0YXJ0IG5ldyBsYXlvdXRcclxuICB0aGlzLl9yZXNldExheW91dCgpO1xyXG4gIHRoaXMuX21hbmFnZVN0YW1wcygpO1xyXG4gIC8vIGxheW91dCBuZXcgc3R1ZmYgd2l0aG91dCB0cmFuc2l0aW9uXHJcbiAgdGhpcy5sYXlvdXRJdGVtcyggaXRlbXMsIHRydWUgKTtcclxuICB0aGlzLnJldmVhbCggaXRlbXMgKTtcclxuICAvLyBsYXlvdXQgcHJldmlvdXMgaXRlbXNcclxuICB0aGlzLmxheW91dEl0ZW1zKCBwcmV2aW91c0l0ZW1zICk7XHJcbn07XHJcblxyXG4vKipcclxuICogcmV2ZWFsIGEgY29sbGVjdGlvbiBvZiBpdGVtc1xyXG4gKiBAcGFyYW0ge0FycmF5IG9mIE91dGxheWVyLkl0ZW1zfSBpdGVtc1xyXG4gKi9cclxucHJvdG8ucmV2ZWFsID0gZnVuY3Rpb24oIGl0ZW1zICkge1xyXG4gIHRoaXMuX2VtaXRDb21wbGV0ZU9uSXRlbXMoICdyZXZlYWwnLCBpdGVtcyApO1xyXG4gIGlmICggIWl0ZW1zIHx8ICFpdGVtcy5sZW5ndGggKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIHZhciBzdGFnZ2VyID0gdGhpcy51cGRhdGVTdGFnZ2VyKCk7XHJcbiAgaXRlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGl0ZW0sIGkgKSB7XHJcbiAgICBpdGVtLnN0YWdnZXIoIGkgKiBzdGFnZ2VyICk7XHJcbiAgICBpdGVtLnJldmVhbCgpO1xyXG4gIH0pO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIGhpZGUgYSBjb2xsZWN0aW9uIG9mIGl0ZW1zXHJcbiAqIEBwYXJhbSB7QXJyYXkgb2YgT3V0bGF5ZXIuSXRlbXN9IGl0ZW1zXHJcbiAqL1xyXG5wcm90by5oaWRlID0gZnVuY3Rpb24oIGl0ZW1zICkge1xyXG4gIHRoaXMuX2VtaXRDb21wbGV0ZU9uSXRlbXMoICdoaWRlJywgaXRlbXMgKTtcclxuICBpZiAoICFpdGVtcyB8fCAhaXRlbXMubGVuZ3RoICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICB2YXIgc3RhZ2dlciA9IHRoaXMudXBkYXRlU3RhZ2dlcigpO1xyXG4gIGl0ZW1zLmZvckVhY2goIGZ1bmN0aW9uKCBpdGVtLCBpICkge1xyXG4gICAgaXRlbS5zdGFnZ2VyKCBpICogc3RhZ2dlciApO1xyXG4gICAgaXRlbS5oaWRlKCk7XHJcbiAgfSk7XHJcbn07XHJcblxyXG4vKipcclxuICogcmV2ZWFsIGl0ZW0gZWxlbWVudHNcclxuICogQHBhcmFtIHtBcnJheX0sIHtFbGVtZW50fSwge05vZGVMaXN0fSBpdGVtc1xyXG4gKi9cclxucHJvdG8ucmV2ZWFsSXRlbUVsZW1lbnRzID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG4gIHZhciBpdGVtcyA9IHRoaXMuZ2V0SXRlbXMoIGVsZW1zICk7XHJcbiAgdGhpcy5yZXZlYWwoIGl0ZW1zICk7XHJcbn07XHJcblxyXG4vKipcclxuICogaGlkZSBpdGVtIGVsZW1lbnRzXHJcbiAqIEBwYXJhbSB7QXJyYXl9LCB7RWxlbWVudH0sIHtOb2RlTGlzdH0gaXRlbXNcclxuICovXHJcbnByb3RvLmhpZGVJdGVtRWxlbWVudHMgPSBmdW5jdGlvbiggZWxlbXMgKSB7XHJcbiAgdmFyIGl0ZW1zID0gdGhpcy5nZXRJdGVtcyggZWxlbXMgKTtcclxuICB0aGlzLmhpZGUoIGl0ZW1zICk7XHJcbn07XHJcblxyXG4vKipcclxuICogZ2V0IE91dGxheWVyLkl0ZW0sIGdpdmVuIGFuIEVsZW1lbnRcclxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXHJcbiAqIEByZXR1cm5zIHtPdXRsYXllci5JdGVtfSBpdGVtXHJcbiAqL1xyXG5wcm90by5nZXRJdGVtID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgLy8gbG9vcCB0aHJvdWdoIGl0ZW1zIHRvIGdldCB0aGUgb25lIHRoYXQgbWF0Y2hlc1xyXG4gIGZvciAoIHZhciBpPTA7IGkgPCB0aGlzLml0ZW1zLmxlbmd0aDsgaSsrICkge1xyXG4gICAgdmFyIGl0ZW0gPSB0aGlzLml0ZW1zW2ldO1xyXG4gICAgaWYgKCBpdGVtLmVsZW1lbnQgPT0gZWxlbSApIHtcclxuICAgICAgLy8gcmV0dXJuIGl0ZW1cclxuICAgICAgcmV0dXJuIGl0ZW07XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIGdldCBjb2xsZWN0aW9uIG9mIE91dGxheWVyLkl0ZW1zLCBnaXZlbiBFbGVtZW50c1xyXG4gKiBAcGFyYW0ge0FycmF5fSBlbGVtc1xyXG4gKiBAcmV0dXJucyB7QXJyYXl9IGl0ZW1zIC0gT3V0bGF5ZXIuSXRlbXNcclxuICovXHJcbnByb3RvLmdldEl0ZW1zID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG4gIGVsZW1zID0gdXRpbHMubWFrZUFycmF5KCBlbGVtcyApO1xyXG4gIHZhciBpdGVtcyA9IFtdO1xyXG4gIGVsZW1zLmZvckVhY2goIGZ1bmN0aW9uKCBlbGVtICkge1xyXG4gICAgdmFyIGl0ZW0gPSB0aGlzLmdldEl0ZW0oIGVsZW0gKTtcclxuICAgIGlmICggaXRlbSApIHtcclxuICAgICAgaXRlbXMucHVzaCggaXRlbSApO1xyXG4gICAgfVxyXG4gIH0sIHRoaXMgKTtcclxuXHJcbiAgcmV0dXJuIGl0ZW1zO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIHJlbW92ZSBlbGVtZW50KHMpIGZyb20gaW5zdGFuY2UgYW5kIERPTVxyXG4gKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEVsZW1lbnR9IGVsZW1zXHJcbiAqL1xyXG5wcm90by5yZW1vdmUgPSBmdW5jdGlvbiggZWxlbXMgKSB7XHJcbiAgdmFyIHJlbW92ZUl0ZW1zID0gdGhpcy5nZXRJdGVtcyggZWxlbXMgKTtcclxuXHJcbiAgdGhpcy5fZW1pdENvbXBsZXRlT25JdGVtcyggJ3JlbW92ZScsIHJlbW92ZUl0ZW1zICk7XHJcblxyXG4gIC8vIGJhaWwgaWYgbm8gaXRlbXMgdG8gcmVtb3ZlXHJcbiAgaWYgKCAhcmVtb3ZlSXRlbXMgfHwgIXJlbW92ZUl0ZW1zLmxlbmd0aCApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHJlbW92ZUl0ZW1zLmZvckVhY2goIGZ1bmN0aW9uKCBpdGVtICkge1xyXG4gICAgaXRlbS5yZW1vdmUoKTtcclxuICAgIC8vIHJlbW92ZSBpdGVtIGZyb20gY29sbGVjdGlvblxyXG4gICAgdXRpbHMucmVtb3ZlRnJvbSggdGhpcy5pdGVtcywgaXRlbSApO1xyXG4gIH0sIHRoaXMgKTtcclxufTtcclxuXHJcbi8vIC0tLS0tIGRlc3Ryb3kgLS0tLS0gLy9cclxuXHJcbi8vIHJlbW92ZSBhbmQgZGlzYWJsZSBPdXRsYXllciBpbnN0YW5jZVxyXG5wcm90by5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XHJcbiAgLy8gY2xlYW4gdXAgZHluYW1pYyBzdHlsZXNcclxuICB2YXIgc3R5bGUgPSB0aGlzLmVsZW1lbnQuc3R5bGU7XHJcbiAgc3R5bGUuaGVpZ2h0ID0gJyc7XHJcbiAgc3R5bGUucG9zaXRpb24gPSAnJztcclxuICBzdHlsZS53aWR0aCA9ICcnO1xyXG4gIC8vIGRlc3Ryb3kgaXRlbXNcclxuICB0aGlzLml0ZW1zLmZvckVhY2goIGZ1bmN0aW9uKCBpdGVtICkge1xyXG4gICAgaXRlbS5kZXN0cm95KCk7XHJcbiAgfSk7XHJcblxyXG4gIHRoaXMudW5iaW5kUmVzaXplKCk7XHJcblxyXG4gIHZhciBpZCA9IHRoaXMuZWxlbWVudC5vdXRsYXllckdVSUQ7XHJcbiAgZGVsZXRlIGluc3RhbmNlc1sgaWQgXTsgLy8gcmVtb3ZlIHJlZmVyZW5jZSB0byBpbnN0YW5jZSBieSBpZFxyXG4gIGRlbGV0ZSB0aGlzLmVsZW1lbnQub3V0bGF5ZXJHVUlEO1xyXG4gIC8vIHJlbW92ZSBkYXRhIGZvciBqUXVlcnlcclxuICBpZiAoIGpRdWVyeSApIHtcclxuICAgIGpRdWVyeS5yZW1vdmVEYXRhKCB0aGlzLmVsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IubmFtZXNwYWNlICk7XHJcbiAgfVxyXG5cclxufTtcclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGRhdGEgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbi8qKlxyXG4gKiBnZXQgT3V0bGF5ZXIgaW5zdGFuY2UgZnJvbSBlbGVtZW50XHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbVxyXG4gKiBAcmV0dXJucyB7T3V0bGF5ZXJ9XHJcbiAqL1xyXG5PdXRsYXllci5kYXRhID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgZWxlbSA9IHV0aWxzLmdldFF1ZXJ5RWxlbWVudCggZWxlbSApO1xyXG4gIHZhciBpZCA9IGVsZW0gJiYgZWxlbS5vdXRsYXllckdVSUQ7XHJcbiAgcmV0dXJuIGlkICYmIGluc3RhbmNlc1sgaWQgXTtcclxufTtcclxuXHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBjcmVhdGUgT3V0bGF5ZXIgY2xhc3MgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbi8qKlxyXG4gKiBjcmVhdGUgYSBsYXlvdXQgY2xhc3NcclxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxyXG4gKi9cclxuT3V0bGF5ZXIuY3JlYXRlID0gZnVuY3Rpb24oIG5hbWVzcGFjZSwgb3B0aW9ucyApIHtcclxuICAvLyBzdWItY2xhc3MgT3V0bGF5ZXJcclxuICB2YXIgTGF5b3V0ID0gc3ViY2xhc3MoIE91dGxheWVyICk7XHJcbiAgLy8gYXBwbHkgbmV3IG9wdGlvbnMgYW5kIGNvbXBhdE9wdGlvbnNcclxuICBMYXlvdXQuZGVmYXVsdHMgPSB1dGlscy5leHRlbmQoIHt9LCBPdXRsYXllci5kZWZhdWx0cyApO1xyXG4gIHV0aWxzLmV4dGVuZCggTGF5b3V0LmRlZmF1bHRzLCBvcHRpb25zICk7XHJcbiAgTGF5b3V0LmNvbXBhdE9wdGlvbnMgPSB1dGlscy5leHRlbmQoIHt9LCBPdXRsYXllci5jb21wYXRPcHRpb25zICApO1xyXG5cclxuICBMYXlvdXQubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xyXG5cclxuICBMYXlvdXQuZGF0YSA9IE91dGxheWVyLmRhdGE7XHJcblxyXG4gIC8vIHN1Yi1jbGFzcyBJdGVtXHJcbiAgTGF5b3V0Lkl0ZW0gPSBzdWJjbGFzcyggSXRlbSApO1xyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBkZWNsYXJhdGl2ZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuICB1dGlscy5odG1sSW5pdCggTGF5b3V0LCBuYW1lc3BhY2UgKTtcclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0galF1ZXJ5IGJyaWRnZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuICAvLyBtYWtlIGludG8galF1ZXJ5IHBsdWdpblxyXG4gIGlmICggalF1ZXJ5ICYmIGpRdWVyeS5icmlkZ2V0ICkge1xyXG4gICAgalF1ZXJ5LmJyaWRnZXQoIG5hbWVzcGFjZSwgTGF5b3V0ICk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gTGF5b3V0O1xyXG59O1xyXG5cclxuZnVuY3Rpb24gc3ViY2xhc3MoIFBhcmVudCApIHtcclxuICBmdW5jdGlvbiBTdWJDbGFzcygpIHtcclxuICAgIFBhcmVudC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XHJcbiAgfVxyXG5cclxuICBTdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBQYXJlbnQucHJvdG90eXBlICk7XHJcbiAgU3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ViQ2xhc3M7XHJcblxyXG4gIHJldHVybiBTdWJDbGFzcztcclxufVxyXG5cclxuLy8gLS0tLS0gaGVscGVycyAtLS0tLSAvL1xyXG5cclxuLy8gaG93IG1hbnkgbWlsbGlzZWNvbmRzIGFyZSBpbiBlYWNoIHVuaXRcclxudmFyIG1zVW5pdHMgPSB7XHJcbiAgbXM6IDEsXHJcbiAgczogMTAwMFxyXG59O1xyXG5cclxuLy8gbXVuZ2UgdGltZS1saWtlIHBhcmFtZXRlciBpbnRvIG1pbGxpc2Vjb25kIG51bWJlclxyXG4vLyAnMC40cycgLT4gNDBcclxuZnVuY3Rpb24gZ2V0TWlsbGlzZWNvbmRzKCB0aW1lICkge1xyXG4gIGlmICggdHlwZW9mIHRpbWUgPT0gJ251bWJlcicgKSB7XHJcbiAgICByZXR1cm4gdGltZTtcclxuICB9XHJcbiAgdmFyIG1hdGNoZXMgPSB0aW1lLm1hdGNoKCAvKF5cXGQqXFwuP1xcZCopKFxcdyopLyApO1xyXG4gIHZhciBudW0gPSBtYXRjaGVzICYmIG1hdGNoZXNbMV07XHJcbiAgdmFyIHVuaXQgPSBtYXRjaGVzICYmIG1hdGNoZXNbMl07XHJcbiAgaWYgKCAhbnVtLmxlbmd0aCApIHtcclxuICAgIHJldHVybiAwO1xyXG4gIH1cclxuICBudW0gPSBwYXJzZUZsb2F0KCBudW0gKTtcclxuICB2YXIgbXVsdCA9IG1zVW5pdHNbIHVuaXQgXSB8fCAxO1xyXG4gIHJldHVybiBudW0gKiBtdWx0O1xyXG59XHJcblxyXG4vLyAtLS0tLSBmaW4gLS0tLS0gLy9cclxuXHJcbi8vIGJhY2sgaW4gZ2xvYmFsXHJcbk91dGxheWVyLkl0ZW0gPSBJdGVtO1xyXG5cclxucmV0dXJuIE91dGxheWVyO1xyXG5cclxufSkpO1xyXG5cclxuLyoqXHJcbiAqIElzb3RvcGUgSXRlbVxyXG4qKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcclxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cclxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKmdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHJlcXVpcmUgKi9cclxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG4gICAgLy8gQU1EXHJcbiAgICBkZWZpbmUoICdpc290b3BlLWxheW91dC9qcy9pdGVtJyxbXHJcbiAgICAgICAgJ291dGxheWVyL291dGxheWVyJ1xyXG4gICAgICBdLFxyXG4gICAgICBmYWN0b3J5ICk7XHJcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcclxuICAgIC8vIENvbW1vbkpTXHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXHJcbiAgICAgIHJlcXVpcmUoJ291dGxheWVyJylcclxuICAgICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgICB3aW5kb3cuSXNvdG9wZSA9IHdpbmRvdy5Jc290b3BlIHx8IHt9O1xyXG4gICAgd2luZG93Lklzb3RvcGUuSXRlbSA9IGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdy5PdXRsYXllclxyXG4gICAgKTtcclxuICB9XHJcblxyXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIE91dGxheWVyICkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBJdGVtIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4vLyBzdWItY2xhc3MgT3V0bGF5ZXIgSXRlbVxyXG5mdW5jdGlvbiBJdGVtKCkge1xyXG4gIE91dGxheWVyLkl0ZW0uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xyXG59XHJcblxyXG52YXIgcHJvdG8gPSBJdGVtLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE91dGxheWVyLkl0ZW0ucHJvdG90eXBlICk7XHJcblxyXG52YXIgX2NyZWF0ZSA9IHByb3RvLl9jcmVhdGU7XHJcbnByb3RvLl9jcmVhdGUgPSBmdW5jdGlvbigpIHtcclxuICAvLyBhc3NpZ24gaWQsIHVzZWQgZm9yIG9yaWdpbmFsLW9yZGVyIHNvcnRpbmdcclxuICB0aGlzLmlkID0gdGhpcy5sYXlvdXQuaXRlbUdVSUQrKztcclxuICBfY3JlYXRlLmNhbGwoIHRoaXMgKTtcclxuICB0aGlzLnNvcnREYXRhID0ge307XHJcbn07XHJcblxyXG5wcm90by51cGRhdGVTb3J0RGF0YSA9IGZ1bmN0aW9uKCkge1xyXG4gIGlmICggdGhpcy5pc0lnbm9yZWQgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8vIGRlZmF1bHQgc29ydGVyc1xyXG4gIHRoaXMuc29ydERhdGEuaWQgPSB0aGlzLmlkO1xyXG4gIC8vIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XHJcbiAgdGhpcy5zb3J0RGF0YVsnb3JpZ2luYWwtb3JkZXInXSA9IHRoaXMuaWQ7XHJcbiAgdGhpcy5zb3J0RGF0YS5yYW5kb20gPSBNYXRoLnJhbmRvbSgpO1xyXG4gIC8vIGdvIHRocnUgZ2V0U29ydERhdGEgb2JqIGFuZCBhcHBseSB0aGUgc29ydGVyc1xyXG4gIHZhciBnZXRTb3J0RGF0YSA9IHRoaXMubGF5b3V0Lm9wdGlvbnMuZ2V0U29ydERhdGE7XHJcbiAgdmFyIHNvcnRlcnMgPSB0aGlzLmxheW91dC5fc29ydGVycztcclxuICBmb3IgKCB2YXIga2V5IGluIGdldFNvcnREYXRhICkge1xyXG4gICAgdmFyIHNvcnRlciA9IHNvcnRlcnNbIGtleSBdO1xyXG4gICAgdGhpcy5zb3J0RGF0YVsga2V5IF0gPSBzb3J0ZXIoIHRoaXMuZWxlbWVudCwgdGhpcyApO1xyXG4gIH1cclxufTtcclxuXHJcbnZhciBfZGVzdHJveSA9IHByb3RvLmRlc3Ryb3k7XHJcbnByb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuICAvLyBjYWxsIHN1cGVyXHJcbiAgX2Rlc3Ryb3kuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xyXG4gIC8vIHJlc2V0IGRpc3BsYXksICM3NDFcclxuICB0aGlzLmNzcyh7XHJcbiAgICBkaXNwbGF5OiAnJ1xyXG4gIH0pO1xyXG59O1xyXG5cclxucmV0dXJuIEl0ZW07XHJcblxyXG59KSk7XHJcblxyXG4vKipcclxuICogSXNvdG9wZSBMYXlvdXRNb2RlXHJcbiAqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xyXG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxyXG4gIC8qIGpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qZ2xvYmFscyBkZWZpbmUsIG1vZHVsZSwgcmVxdWlyZSAqL1xyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgICAvLyBBTURcclxuICAgIGRlZmluZSggJ2lzb3RvcGUtbGF5b3V0L2pzL2xheW91dC1tb2RlJyxbXHJcbiAgICAgICAgJ2dldC1zaXplL2dldC1zaXplJyxcclxuICAgICAgICAnb3V0bGF5ZXIvb3V0bGF5ZXInXHJcbiAgICAgIF0sXHJcbiAgICAgIGZhY3RvcnkgKTtcclxuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xyXG4gICAgLy8gQ29tbW9uSlNcclxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcclxuICAgICAgcmVxdWlyZSgnZ2V0LXNpemUnKSxcclxuICAgICAgcmVxdWlyZSgnb3V0bGF5ZXInKVxyXG4gICAgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gYnJvd3NlciBnbG9iYWxcclxuICAgIHdpbmRvdy5Jc290b3BlID0gd2luZG93Lklzb3RvcGUgfHwge307XHJcbiAgICB3aW5kb3cuSXNvdG9wZS5MYXlvdXRNb2RlID0gZmFjdG9yeShcclxuICAgICAgd2luZG93LmdldFNpemUsXHJcbiAgICAgIHdpbmRvdy5PdXRsYXllclxyXG4gICAgKTtcclxuICB9XHJcblxyXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIGdldFNpemUsIE91dGxheWVyICkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgLy8gbGF5b3V0IG1vZGUgY2xhc3NcclxuICBmdW5jdGlvbiBMYXlvdXRNb2RlKCBpc290b3BlICkge1xyXG4gICAgdGhpcy5pc290b3BlID0gaXNvdG9wZTtcclxuICAgIC8vIGxpbmsgcHJvcGVydGllc1xyXG4gICAgaWYgKCBpc290b3BlICkge1xyXG4gICAgICB0aGlzLm9wdGlvbnMgPSBpc290b3BlLm9wdGlvbnNbIHRoaXMubmFtZXNwYWNlIF07XHJcbiAgICAgIHRoaXMuZWxlbWVudCA9IGlzb3RvcGUuZWxlbWVudDtcclxuICAgICAgdGhpcy5pdGVtcyA9IGlzb3RvcGUuZmlsdGVyZWRJdGVtcztcclxuICAgICAgdGhpcy5zaXplID0gaXNvdG9wZS5zaXplO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdmFyIHByb3RvID0gTGF5b3V0TW9kZS5wcm90b3R5cGU7XHJcblxyXG4gIC8qKlxyXG4gICAqIHNvbWUgbWV0aG9kcyBzaG91bGQganVzdCBkZWZlciB0byBkZWZhdWx0IE91dGxheWVyIG1ldGhvZFxyXG4gICAqIGFuZCByZWZlcmVuY2UgdGhlIElzb3RvcGUgaW5zdGFuY2UgYXMgYHRoaXNgXHJcbiAgKiovXHJcbiAgdmFyIGZhY2FkZU1ldGhvZHMgPSBbXHJcbiAgICAnX3Jlc2V0TGF5b3V0JyxcclxuICAgICdfZ2V0SXRlbUxheW91dFBvc2l0aW9uJyxcclxuICAgICdfbWFuYWdlU3RhbXAnLFxyXG4gICAgJ19nZXRDb250YWluZXJTaXplJyxcclxuICAgICdfZ2V0RWxlbWVudE9mZnNldCcsXHJcbiAgICAnbmVlZHNSZXNpemVMYXlvdXQnLFxyXG4gICAgJ19nZXRPcHRpb24nXHJcbiAgXTtcclxuXHJcbiAgZmFjYWRlTWV0aG9kcy5mb3JFYWNoKCBmdW5jdGlvbiggbWV0aG9kTmFtZSApIHtcclxuICAgIHByb3RvWyBtZXRob2ROYW1lIF0gPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIE91dGxheWVyLnByb3RvdHlwZVsgbWV0aG9kTmFtZSBdLmFwcGx5KCB0aGlzLmlzb3RvcGUsIGFyZ3VtZW50cyApO1xyXG4gICAgfTtcclxuICB9KTtcclxuXHJcbiAgLy8gLS0tLS0gIC0tLS0tIC8vXHJcblxyXG4gIC8vIGZvciBob3Jpem9udGFsIGxheW91dCBtb2RlcywgY2hlY2sgdmVydGljYWwgc2l6ZVxyXG4gIHByb3RvLm5lZWRzVmVydGljYWxSZXNpemVMYXlvdXQgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIGRvbid0IHRyaWdnZXIgaWYgc2l6ZSBkaWQgbm90IGNoYW5nZVxyXG4gICAgdmFyIHNpemUgPSBnZXRTaXplKCB0aGlzLmlzb3RvcGUuZWxlbWVudCApO1xyXG4gICAgLy8gY2hlY2sgdGhhdCB0aGlzLnNpemUgYW5kIHNpemUgYXJlIHRoZXJlXHJcbiAgICAvLyBJRTggdHJpZ2dlcnMgcmVzaXplIG9uIGJvZHkgc2l6ZSBjaGFuZ2UsIHNvIHRoZXkgbWlnaHQgbm90IGJlXHJcbiAgICB2YXIgaGFzU2l6ZXMgPSB0aGlzLmlzb3RvcGUuc2l6ZSAmJiBzaXplO1xyXG4gICAgcmV0dXJuIGhhc1NpemVzICYmIHNpemUuaW5uZXJIZWlnaHQgIT0gdGhpcy5pc290b3BlLnNpemUuaW5uZXJIZWlnaHQ7XHJcbiAgfTtcclxuXHJcbiAgLy8gLS0tLS0gbWVhc3VyZW1lbnRzIC0tLS0tIC8vXHJcblxyXG4gIHByb3RvLl9nZXRNZWFzdXJlbWVudCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5pc290b3BlLl9nZXRNZWFzdXJlbWVudC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XHJcbiAgfTtcclxuXHJcbiAgcHJvdG8uZ2V0Q29sdW1uV2lkdGggPSBmdW5jdGlvbigpIHtcclxuICAgIHRoaXMuZ2V0U2VnbWVudFNpemUoICdjb2x1bW4nLCAnV2lkdGgnICk7XHJcbiAgfTtcclxuXHJcbiAgcHJvdG8uZ2V0Um93SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB0aGlzLmdldFNlZ21lbnRTaXplKCAncm93JywgJ0hlaWdodCcgKTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBnZXQgY29sdW1uV2lkdGggb3Igcm93SGVpZ2h0XHJcbiAgICogc2VnbWVudDogJ2NvbHVtbicgb3IgJ3JvdydcclxuICAgKiBzaXplICdXaWR0aCcgb3IgJ0hlaWdodCdcclxuICAqKi9cclxuICBwcm90by5nZXRTZWdtZW50U2l6ZSA9IGZ1bmN0aW9uKCBzZWdtZW50LCBzaXplICkge1xyXG4gICAgdmFyIHNlZ21lbnROYW1lID0gc2VnbWVudCArIHNpemU7XHJcbiAgICB2YXIgb3V0ZXJTaXplID0gJ291dGVyJyArIHNpemU7XHJcbiAgICAvLyBjb2x1bW5XaWR0aCAvIG91dGVyV2lkdGggLy8gcm93SGVpZ2h0IC8gb3V0ZXJIZWlnaHRcclxuICAgIHRoaXMuX2dldE1lYXN1cmVtZW50KCBzZWdtZW50TmFtZSwgb3V0ZXJTaXplICk7XHJcbiAgICAvLyBnb3Qgcm93SGVpZ2h0IG9yIGNvbHVtbldpZHRoLCB3ZSBjYW4gY2hpbGxcclxuICAgIGlmICggdGhpc1sgc2VnbWVudE5hbWUgXSApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy8gZmFsbCBiYWNrIHRvIGl0ZW0gb2YgZmlyc3QgZWxlbWVudFxyXG4gICAgdmFyIGZpcnN0SXRlbVNpemUgPSB0aGlzLmdldEZpcnN0SXRlbVNpemUoKTtcclxuICAgIHRoaXNbIHNlZ21lbnROYW1lIF0gPSBmaXJzdEl0ZW1TaXplICYmIGZpcnN0SXRlbVNpemVbIG91dGVyU2l6ZSBdIHx8XHJcbiAgICAgIC8vIG9yIHNpemUgb2YgY29udGFpbmVyXHJcbiAgICAgIHRoaXMuaXNvdG9wZS5zaXplWyAnaW5uZXInICsgc2l6ZSBdO1xyXG4gIH07XHJcblxyXG4gIHByb3RvLmdldEZpcnN0SXRlbVNpemUgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBmaXJzdEl0ZW0gPSB0aGlzLmlzb3RvcGUuZmlsdGVyZWRJdGVtc1swXTtcclxuICAgIHJldHVybiBmaXJzdEl0ZW0gJiYgZmlyc3RJdGVtLmVsZW1lbnQgJiYgZ2V0U2l6ZSggZmlyc3RJdGVtLmVsZW1lbnQgKTtcclxuICB9O1xyXG5cclxuICAvLyAtLS0tLSBtZXRob2RzIHRoYXQgc2hvdWxkIHJlZmVyZW5jZSBpc290b3BlIC0tLS0tIC8vXHJcblxyXG4gIHByb3RvLmxheW91dCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5pc290b3BlLmxheW91dC5hcHBseSggdGhpcy5pc290b3BlLCBhcmd1bWVudHMgKTtcclxuICB9O1xyXG5cclxuICBwcm90by5nZXRTaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgICB0aGlzLmlzb3RvcGUuZ2V0U2l6ZSgpO1xyXG4gICAgdGhpcy5zaXplID0gdGhpcy5pc290b3BlLnNpemU7XHJcbiAgfTtcclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gY3JlYXRlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4gIExheW91dE1vZGUubW9kZXMgPSB7fTtcclxuXHJcbiAgTGF5b3V0TW9kZS5jcmVhdGUgPSBmdW5jdGlvbiggbmFtZXNwYWNlLCBvcHRpb25zICkge1xyXG5cclxuICAgIGZ1bmN0aW9uIE1vZGUoKSB7XHJcbiAgICAgIExheW91dE1vZGUuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xyXG4gICAgfVxyXG5cclxuICAgIE1vZGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggcHJvdG8gKTtcclxuICAgIE1vZGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTW9kZTtcclxuXHJcbiAgICAvLyBkZWZhdWx0IG9wdGlvbnNcclxuICAgIGlmICggb3B0aW9ucyApIHtcclxuICAgICAgTW9kZS5vcHRpb25zID0gb3B0aW9ucztcclxuICAgIH1cclxuXHJcbiAgICBNb2RlLnByb3RvdHlwZS5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XHJcbiAgICAvLyByZWdpc3RlciBpbiBJc290b3BlXHJcbiAgICBMYXlvdXRNb2RlLm1vZGVzWyBuYW1lc3BhY2UgXSA9IE1vZGU7XHJcblxyXG4gICAgcmV0dXJuIE1vZGU7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIExheW91dE1vZGU7XHJcblxyXG59KSk7XHJcblxyXG4vKiFcclxuICogTWFzb25yeSB2NC4yLjFcclxuICogQ2FzY2FkaW5nIGdyaWQgbGF5b3V0IGxpYnJhcnlcclxuICogaHR0cHM6Ly9tYXNvbnJ5LmRlc2FuZHJvLmNvbVxyXG4gKiBNSVQgTGljZW5zZVxyXG4gKiBieSBEYXZpZCBEZVNhbmRyb1xyXG4gKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcclxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cclxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKmdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHJlcXVpcmUgKi9cclxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG4gICAgLy8gQU1EXHJcbiAgICBkZWZpbmUoICdtYXNvbnJ5LWxheW91dC9tYXNvbnJ5JyxbXHJcbiAgICAgICAgJ291dGxheWVyL291dGxheWVyJyxcclxuICAgICAgICAnZ2V0LXNpemUvZ2V0LXNpemUnXHJcbiAgICAgIF0sXHJcbiAgICAgIGZhY3RvcnkgKTtcclxuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xyXG4gICAgLy8gQ29tbW9uSlNcclxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcclxuICAgICAgcmVxdWlyZSgnb3V0bGF5ZXInKSxcclxuICAgICAgcmVxdWlyZSgnZ2V0LXNpemUnKVxyXG4gICAgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gYnJvd3NlciBnbG9iYWxcclxuICAgIHdpbmRvdy5NYXNvbnJ5ID0gZmFjdG9yeShcclxuICAgICAgd2luZG93Lk91dGxheWVyLFxyXG4gICAgICB3aW5kb3cuZ2V0U2l6ZVxyXG4gICAgKTtcclxuICB9XHJcblxyXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIE91dGxheWVyLCBnZXRTaXplICkge1xyXG5cclxuXHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBtYXNvbnJ5RGVmaW5pdGlvbiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuICAvLyBjcmVhdGUgYW4gT3V0bGF5ZXIgbGF5b3V0IGNsYXNzXHJcbiAgdmFyIE1hc29ucnkgPSBPdXRsYXllci5jcmVhdGUoJ21hc29ucnknKTtcclxuICAvLyBpc0ZpdFdpZHRoIC0+IGZpdFdpZHRoXHJcbiAgTWFzb25yeS5jb21wYXRPcHRpb25zLmZpdFdpZHRoID0gJ2lzRml0V2lkdGgnO1xyXG5cclxuICB2YXIgcHJvdG8gPSBNYXNvbnJ5LnByb3RvdHlwZTtcclxuXHJcbiAgcHJvdG8uX3Jlc2V0TGF5b3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB0aGlzLmdldFNpemUoKTtcclxuICAgIHRoaXMuX2dldE1lYXN1cmVtZW50KCAnY29sdW1uV2lkdGgnLCAnb3V0ZXJXaWR0aCcgKTtcclxuICAgIHRoaXMuX2dldE1lYXN1cmVtZW50KCAnZ3V0dGVyJywgJ291dGVyV2lkdGgnICk7XHJcbiAgICB0aGlzLm1lYXN1cmVDb2x1bW5zKCk7XHJcblxyXG4gICAgLy8gcmVzZXQgY29sdW1uIFlcclxuICAgIHRoaXMuY29sWXMgPSBbXTtcclxuICAgIGZvciAoIHZhciBpPTA7IGkgPCB0aGlzLmNvbHM7IGkrKyApIHtcclxuICAgICAgdGhpcy5jb2xZcy5wdXNoKCAwICk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5tYXhZID0gMDtcclxuICAgIHRoaXMuaG9yaXpvbnRhbENvbEluZGV4ID0gMDtcclxuICB9O1xyXG5cclxuICBwcm90by5tZWFzdXJlQ29sdW1ucyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5nZXRDb250YWluZXJXaWR0aCgpO1xyXG4gICAgLy8gaWYgY29sdW1uV2lkdGggaXMgMCwgZGVmYXVsdCB0byBvdXRlcldpZHRoIG9mIGZpcnN0IGl0ZW1cclxuICAgIGlmICggIXRoaXMuY29sdW1uV2lkdGggKSB7XHJcbiAgICAgIHZhciBmaXJzdEl0ZW0gPSB0aGlzLml0ZW1zWzBdO1xyXG4gICAgICB2YXIgZmlyc3RJdGVtRWxlbSA9IGZpcnN0SXRlbSAmJiBmaXJzdEl0ZW0uZWxlbWVudDtcclxuICAgICAgLy8gY29sdW1uV2lkdGggZmFsbCBiYWNrIHRvIGl0ZW0gb2YgZmlyc3QgZWxlbWVudFxyXG4gICAgICB0aGlzLmNvbHVtbldpZHRoID0gZmlyc3RJdGVtRWxlbSAmJiBnZXRTaXplKCBmaXJzdEl0ZW1FbGVtICkub3V0ZXJXaWR0aCB8fFxyXG4gICAgICAgIC8vIGlmIGZpcnN0IGVsZW0gaGFzIG5vIHdpZHRoLCBkZWZhdWx0IHRvIHNpemUgb2YgY29udGFpbmVyXHJcbiAgICAgICAgdGhpcy5jb250YWluZXJXaWR0aDtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgY29sdW1uV2lkdGggPSB0aGlzLmNvbHVtbldpZHRoICs9IHRoaXMuZ3V0dGVyO1xyXG5cclxuICAgIC8vIGNhbGN1bGF0ZSBjb2x1bW5zXHJcbiAgICB2YXIgY29udGFpbmVyV2lkdGggPSB0aGlzLmNvbnRhaW5lcldpZHRoICsgdGhpcy5ndXR0ZXI7XHJcbiAgICB2YXIgY29scyA9IGNvbnRhaW5lcldpZHRoIC8gY29sdW1uV2lkdGg7XHJcbiAgICAvLyBmaXggcm91bmRpbmcgZXJyb3JzLCB0eXBpY2FsbHkgd2l0aCBndXR0ZXJzXHJcbiAgICB2YXIgZXhjZXNzID0gY29sdW1uV2lkdGggLSBjb250YWluZXJXaWR0aCAlIGNvbHVtbldpZHRoO1xyXG4gICAgLy8gaWYgb3ZlcnNob290IGlzIGxlc3MgdGhhbiBhIHBpeGVsLCByb3VuZCB1cCwgb3RoZXJ3aXNlIGZsb29yIGl0XHJcbiAgICB2YXIgbWF0aE1ldGhvZCA9IGV4Y2VzcyAmJiBleGNlc3MgPCAxID8gJ3JvdW5kJyA6ICdmbG9vcic7XHJcbiAgICBjb2xzID0gTWF0aFsgbWF0aE1ldGhvZCBdKCBjb2xzICk7XHJcbiAgICB0aGlzLmNvbHMgPSBNYXRoLm1heCggY29scywgMSApO1xyXG4gIH07XHJcblxyXG4gIHByb3RvLmdldENvbnRhaW5lcldpZHRoID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBjb250YWluZXIgaXMgcGFyZW50IGlmIGZpdCB3aWR0aFxyXG4gICAgdmFyIGlzRml0V2lkdGggPSB0aGlzLl9nZXRPcHRpb24oJ2ZpdFdpZHRoJyk7XHJcbiAgICB2YXIgY29udGFpbmVyID0gaXNGaXRXaWR0aCA/IHRoaXMuZWxlbWVudC5wYXJlbnROb2RlIDogdGhpcy5lbGVtZW50O1xyXG4gICAgLy8gY2hlY2sgdGhhdCB0aGlzLnNpemUgYW5kIHNpemUgYXJlIHRoZXJlXHJcbiAgICAvLyBJRTggdHJpZ2dlcnMgcmVzaXplIG9uIGJvZHkgc2l6ZSBjaGFuZ2UsIHNvIHRoZXkgbWlnaHQgbm90IGJlXHJcbiAgICB2YXIgc2l6ZSA9IGdldFNpemUoIGNvbnRhaW5lciApO1xyXG4gICAgdGhpcy5jb250YWluZXJXaWR0aCA9IHNpemUgJiYgc2l6ZS5pbm5lcldpZHRoO1xyXG4gIH07XHJcblxyXG4gIHByb3RvLl9nZXRJdGVtTGF5b3V0UG9zaXRpb24gPSBmdW5jdGlvbiggaXRlbSApIHtcclxuICAgIGl0ZW0uZ2V0U2l6ZSgpO1xyXG4gICAgLy8gaG93IG1hbnkgY29sdW1ucyBkb2VzIHRoaXMgYnJpY2sgc3BhblxyXG4gICAgdmFyIHJlbWFpbmRlciA9IGl0ZW0uc2l6ZS5vdXRlcldpZHRoICUgdGhpcy5jb2x1bW5XaWR0aDtcclxuICAgIHZhciBtYXRoTWV0aG9kID0gcmVtYWluZGVyICYmIHJlbWFpbmRlciA8IDEgPyAncm91bmQnIDogJ2NlaWwnO1xyXG4gICAgLy8gcm91bmQgaWYgb2ZmIGJ5IDEgcGl4ZWwsIG90aGVyd2lzZSB1c2UgY2VpbFxyXG4gICAgdmFyIGNvbFNwYW4gPSBNYXRoWyBtYXRoTWV0aG9kIF0oIGl0ZW0uc2l6ZS5vdXRlcldpZHRoIC8gdGhpcy5jb2x1bW5XaWR0aCApO1xyXG4gICAgY29sU3BhbiA9IE1hdGgubWluKCBjb2xTcGFuLCB0aGlzLmNvbHMgKTtcclxuICAgIC8vIHVzZSBob3Jpem9udGFsIG9yIHRvcCBjb2x1bW4gcG9zaXRpb25cclxuICAgIHZhciBjb2xQb3NNZXRob2QgPSB0aGlzLm9wdGlvbnMuaG9yaXpvbnRhbE9yZGVyID9cclxuICAgICAgJ19nZXRIb3Jpem9udGFsQ29sUG9zaXRpb24nIDogJ19nZXRUb3BDb2xQb3NpdGlvbic7XHJcbiAgICB2YXIgY29sUG9zaXRpb24gPSB0aGlzWyBjb2xQb3NNZXRob2QgXSggY29sU3BhbiwgaXRlbSApO1xyXG4gICAgLy8gcG9zaXRpb24gdGhlIGJyaWNrXHJcbiAgICB2YXIgcG9zaXRpb24gPSB7XHJcbiAgICAgIHg6IHRoaXMuY29sdW1uV2lkdGggKiBjb2xQb3NpdGlvbi5jb2wsXHJcbiAgICAgIHk6IGNvbFBvc2l0aW9uLnlcclxuICAgIH07XHJcbiAgICAvLyBhcHBseSBzZXRIZWlnaHQgdG8gbmVjZXNzYXJ5IGNvbHVtbnNcclxuICAgIHZhciBzZXRIZWlnaHQgPSBjb2xQb3NpdGlvbi55ICsgaXRlbS5zaXplLm91dGVySGVpZ2h0O1xyXG4gICAgdmFyIHNldE1heCA9IGNvbFNwYW4gKyBjb2xQb3NpdGlvbi5jb2w7XHJcbiAgICBmb3IgKCB2YXIgaSA9IGNvbFBvc2l0aW9uLmNvbDsgaSA8IHNldE1heDsgaSsrICkge1xyXG4gICAgICB0aGlzLmNvbFlzW2ldID0gc2V0SGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBwb3NpdGlvbjtcclxuICB9O1xyXG5cclxuICBwcm90by5fZ2V0VG9wQ29sUG9zaXRpb24gPSBmdW5jdGlvbiggY29sU3BhbiApIHtcclxuICAgIHZhciBjb2xHcm91cCA9IHRoaXMuX2dldFRvcENvbEdyb3VwKCBjb2xTcGFuICk7XHJcbiAgICAvLyBnZXQgdGhlIG1pbmltdW0gWSB2YWx1ZSBmcm9tIHRoZSBjb2x1bW5zXHJcbiAgICB2YXIgbWluaW11bVkgPSBNYXRoLm1pbi5hcHBseSggTWF0aCwgY29sR3JvdXAgKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBjb2w6IGNvbEdyb3VwLmluZGV4T2YoIG1pbmltdW1ZICksXHJcbiAgICAgIHk6IG1pbmltdW1ZLFxyXG4gICAgfTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge051bWJlcn0gY29sU3BhbiAtIG51bWJlciBvZiBjb2x1bW5zIHRoZSBlbGVtZW50IHNwYW5zXHJcbiAgICogQHJldHVybnMge0FycmF5fSBjb2xHcm91cFxyXG4gICAqL1xyXG4gIHByb3RvLl9nZXRUb3BDb2xHcm91cCA9IGZ1bmN0aW9uKCBjb2xTcGFuICkge1xyXG4gICAgaWYgKCBjb2xTcGFuIDwgMiApIHtcclxuICAgICAgLy8gaWYgYnJpY2sgc3BhbnMgb25seSBvbmUgY29sdW1uLCB1c2UgYWxsIHRoZSBjb2x1bW4gWXNcclxuICAgICAgcmV0dXJuIHRoaXMuY29sWXM7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGNvbEdyb3VwID0gW107XHJcbiAgICAvLyBob3cgbWFueSBkaWZmZXJlbnQgcGxhY2VzIGNvdWxkIHRoaXMgYnJpY2sgZml0IGhvcml6b250YWxseVxyXG4gICAgdmFyIGdyb3VwQ291bnQgPSB0aGlzLmNvbHMgKyAxIC0gY29sU3BhbjtcclxuICAgIC8vIGZvciBlYWNoIGdyb3VwIHBvdGVudGlhbCBob3Jpem9udGFsIHBvc2l0aW9uXHJcbiAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBncm91cENvdW50OyBpKysgKSB7XHJcbiAgICAgIGNvbEdyb3VwW2ldID0gdGhpcy5fZ2V0Q29sR3JvdXBZKCBpLCBjb2xTcGFuICk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29sR3JvdXA7XHJcbiAgfTtcclxuXHJcbiAgcHJvdG8uX2dldENvbEdyb3VwWSA9IGZ1bmN0aW9uKCBjb2wsIGNvbFNwYW4gKSB7XHJcbiAgICBpZiAoIGNvbFNwYW4gPCAyICkge1xyXG4gICAgICByZXR1cm4gdGhpcy5jb2xZc1sgY29sIF07XHJcbiAgICB9XHJcbiAgICAvLyBtYWtlIGFuIGFycmF5IG9mIGNvbFkgdmFsdWVzIGZvciB0aGF0IG9uZSBncm91cFxyXG4gICAgdmFyIGdyb3VwQ29sWXMgPSB0aGlzLmNvbFlzLnNsaWNlKCBjb2wsIGNvbCArIGNvbFNwYW4gKTtcclxuICAgIC8vIGFuZCBnZXQgdGhlIG1heCB2YWx1ZSBvZiB0aGUgYXJyYXlcclxuICAgIHJldHVybiBNYXRoLm1heC5hcHBseSggTWF0aCwgZ3JvdXBDb2xZcyApO1xyXG4gIH07XHJcblxyXG4gIC8vIGdldCBjb2x1bW4gcG9zaXRpb24gYmFzZWQgb24gaG9yaXpvbnRhbCBpbmRleC4gIzg3M1xyXG4gIHByb3RvLl9nZXRIb3Jpem9udGFsQ29sUG9zaXRpb24gPSBmdW5jdGlvbiggY29sU3BhbiwgaXRlbSApIHtcclxuICAgIHZhciBjb2wgPSB0aGlzLmhvcml6b250YWxDb2xJbmRleCAlIHRoaXMuY29scztcclxuICAgIHZhciBpc092ZXIgPSBjb2xTcGFuID4gMSAmJiBjb2wgKyBjb2xTcGFuID4gdGhpcy5jb2xzO1xyXG4gICAgLy8gc2hpZnQgdG8gbmV4dCByb3cgaWYgaXRlbSBjYW4ndCBmaXQgb24gY3VycmVudCByb3dcclxuICAgIGNvbCA9IGlzT3ZlciA/IDAgOiBjb2w7XHJcbiAgICAvLyBkb24ndCBsZXQgemVyby1zaXplIGl0ZW1zIHRha2UgdXAgc3BhY2VcclxuICAgIHZhciBoYXNTaXplID0gaXRlbS5zaXplLm91dGVyV2lkdGggJiYgaXRlbS5zaXplLm91dGVySGVpZ2h0O1xyXG4gICAgdGhpcy5ob3Jpem9udGFsQ29sSW5kZXggPSBoYXNTaXplID8gY29sICsgY29sU3BhbiA6IHRoaXMuaG9yaXpvbnRhbENvbEluZGV4O1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGNvbDogY29sLFxyXG4gICAgICB5OiB0aGlzLl9nZXRDb2xHcm91cFkoIGNvbCwgY29sU3BhbiApLFxyXG4gICAgfTtcclxuICB9O1xyXG5cclxuICBwcm90by5fbWFuYWdlU3RhbXAgPSBmdW5jdGlvbiggc3RhbXAgKSB7XHJcbiAgICB2YXIgc3RhbXBTaXplID0gZ2V0U2l6ZSggc3RhbXAgKTtcclxuICAgIHZhciBvZmZzZXQgPSB0aGlzLl9nZXRFbGVtZW50T2Zmc2V0KCBzdGFtcCApO1xyXG4gICAgLy8gZ2V0IHRoZSBjb2x1bW5zIHRoYXQgdGhpcyBzdGFtcCBhZmZlY3RzXHJcbiAgICB2YXIgaXNPcmlnaW5MZWZ0ID0gdGhpcy5fZ2V0T3B0aW9uKCdvcmlnaW5MZWZ0Jyk7XHJcbiAgICB2YXIgZmlyc3RYID0gaXNPcmlnaW5MZWZ0ID8gb2Zmc2V0LmxlZnQgOiBvZmZzZXQucmlnaHQ7XHJcbiAgICB2YXIgbGFzdFggPSBmaXJzdFggKyBzdGFtcFNpemUub3V0ZXJXaWR0aDtcclxuICAgIHZhciBmaXJzdENvbCA9IE1hdGguZmxvb3IoIGZpcnN0WCAvIHRoaXMuY29sdW1uV2lkdGggKTtcclxuICAgIGZpcnN0Q29sID0gTWF0aC5tYXgoIDAsIGZpcnN0Q29sICk7XHJcbiAgICB2YXIgbGFzdENvbCA9IE1hdGguZmxvb3IoIGxhc3RYIC8gdGhpcy5jb2x1bW5XaWR0aCApO1xyXG4gICAgLy8gbGFzdENvbCBzaG91bGQgbm90IGdvIG92ZXIgaWYgbXVsdGlwbGUgb2YgY29sdW1uV2lkdGggIzQyNVxyXG4gICAgbGFzdENvbCAtPSBsYXN0WCAlIHRoaXMuY29sdW1uV2lkdGggPyAwIDogMTtcclxuICAgIGxhc3RDb2wgPSBNYXRoLm1pbiggdGhpcy5jb2xzIC0gMSwgbGFzdENvbCApO1xyXG4gICAgLy8gc2V0IGNvbFlzIHRvIGJvdHRvbSBvZiB0aGUgc3RhbXBcclxuXHJcbiAgICB2YXIgaXNPcmlnaW5Ub3AgPSB0aGlzLl9nZXRPcHRpb24oJ29yaWdpblRvcCcpO1xyXG4gICAgdmFyIHN0YW1wTWF4WSA9ICggaXNPcmlnaW5Ub3AgPyBvZmZzZXQudG9wIDogb2Zmc2V0LmJvdHRvbSApICtcclxuICAgICAgc3RhbXBTaXplLm91dGVySGVpZ2h0O1xyXG4gICAgZm9yICggdmFyIGkgPSBmaXJzdENvbDsgaSA8PSBsYXN0Q29sOyBpKysgKSB7XHJcbiAgICAgIHRoaXMuY29sWXNbaV0gPSBNYXRoLm1heCggc3RhbXBNYXhZLCB0aGlzLmNvbFlzW2ldICk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgcHJvdG8uX2dldENvbnRhaW5lclNpemUgPSBmdW5jdGlvbigpIHtcclxuICAgIHRoaXMubWF4WSA9IE1hdGgubWF4LmFwcGx5KCBNYXRoLCB0aGlzLmNvbFlzICk7XHJcbiAgICB2YXIgc2l6ZSA9IHtcclxuICAgICAgaGVpZ2h0OiB0aGlzLm1heFlcclxuICAgIH07XHJcblxyXG4gICAgaWYgKCB0aGlzLl9nZXRPcHRpb24oJ2ZpdFdpZHRoJykgKSB7XHJcbiAgICAgIHNpemUud2lkdGggPSB0aGlzLl9nZXRDb250YWluZXJGaXRXaWR0aCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzaXplO1xyXG4gIH07XHJcblxyXG4gIHByb3RvLl9nZXRDb250YWluZXJGaXRXaWR0aCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHVudXNlZENvbHMgPSAwO1xyXG4gICAgLy8gY291bnQgdW51c2VkIGNvbHVtbnNcclxuICAgIHZhciBpID0gdGhpcy5jb2xzO1xyXG4gICAgd2hpbGUgKCAtLWkgKSB7XHJcbiAgICAgIGlmICggdGhpcy5jb2xZc1tpXSAhPT0gMCApIHtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICB1bnVzZWRDb2xzKys7XHJcbiAgICB9XHJcbiAgICAvLyBmaXQgY29udGFpbmVyIHRvIGNvbHVtbnMgdGhhdCBoYXZlIGJlZW4gdXNlZFxyXG4gICAgcmV0dXJuICggdGhpcy5jb2xzIC0gdW51c2VkQ29scyApICogdGhpcy5jb2x1bW5XaWR0aCAtIHRoaXMuZ3V0dGVyO1xyXG4gIH07XHJcblxyXG4gIHByb3RvLm5lZWRzUmVzaXplTGF5b3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgcHJldmlvdXNXaWR0aCA9IHRoaXMuY29udGFpbmVyV2lkdGg7XHJcbiAgICB0aGlzLmdldENvbnRhaW5lcldpZHRoKCk7XHJcbiAgICByZXR1cm4gcHJldmlvdXNXaWR0aCAhPSB0aGlzLmNvbnRhaW5lcldpZHRoO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBNYXNvbnJ5O1xyXG5cclxufSkpO1xyXG5cclxuLyohXHJcbiAqIE1hc29ucnkgbGF5b3V0IG1vZGVcclxuICogc3ViLWNsYXNzZXMgTWFzb25yeVxyXG4gKiBodHRwczovL21hc29ucnkuZGVzYW5kcm8uY29tXHJcbiAqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xyXG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxyXG4gIC8qIGpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qZ2xvYmFscyBkZWZpbmUsIG1vZHVsZSwgcmVxdWlyZSAqL1xyXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XHJcbiAgICAvLyBBTURcclxuICAgIGRlZmluZSggJ2lzb3RvcGUtbGF5b3V0L2pzL2xheW91dC1tb2Rlcy9tYXNvbnJ5JyxbXHJcbiAgICAgICAgJy4uL2xheW91dC1tb2RlJyxcclxuICAgICAgICAnbWFzb25yeS1sYXlvdXQvbWFzb25yeSdcclxuICAgICAgXSxcclxuICAgICAgZmFjdG9yeSApO1xyXG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XHJcbiAgICAvLyBDb21tb25KU1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxyXG4gICAgICByZXF1aXJlKCcuLi9sYXlvdXQtbW9kZScpLFxyXG4gICAgICByZXF1aXJlKCdtYXNvbnJ5LWxheW91dCcpXHJcbiAgICApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBicm93c2VyIGdsb2JhbFxyXG4gICAgZmFjdG9yeShcclxuICAgICAgd2luZG93Lklzb3RvcGUuTGF5b3V0TW9kZSxcclxuICAgICAgd2luZG93Lk1hc29ucnlcclxuICAgICk7XHJcbiAgfVxyXG5cclxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCBMYXlvdXRNb2RlLCBNYXNvbnJ5ICkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBtYXNvbnJ5RGVmaW5pdGlvbiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuICAvLyBjcmVhdGUgYW4gT3V0bGF5ZXIgbGF5b3V0IGNsYXNzXHJcbiAgdmFyIE1hc29ucnlNb2RlID0gTGF5b3V0TW9kZS5jcmVhdGUoJ21hc29ucnknKTtcclxuXHJcbiAgdmFyIHByb3RvID0gTWFzb25yeU1vZGUucHJvdG90eXBlO1xyXG5cclxuICB2YXIga2VlcE1vZGVNZXRob2RzID0ge1xyXG4gICAgX2dldEVsZW1lbnRPZmZzZXQ6IHRydWUsXHJcbiAgICBsYXlvdXQ6IHRydWUsXHJcbiAgICBfZ2V0TWVhc3VyZW1lbnQ6IHRydWVcclxuICB9O1xyXG5cclxuICAvLyBpbmhlcml0IE1hc29ucnkgcHJvdG90eXBlXHJcbiAgZm9yICggdmFyIG1ldGhvZCBpbiBNYXNvbnJ5LnByb3RvdHlwZSApIHtcclxuICAgIC8vIGRvIG5vdCBpbmhlcml0IG1vZGUgbWV0aG9kc1xyXG4gICAgaWYgKCAha2VlcE1vZGVNZXRob2RzWyBtZXRob2QgXSApIHtcclxuICAgICAgcHJvdG9bIG1ldGhvZCBdID0gTWFzb25yeS5wcm90b3R5cGVbIG1ldGhvZCBdO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdmFyIG1lYXN1cmVDb2x1bW5zID0gcHJvdG8ubWVhc3VyZUNvbHVtbnM7XHJcbiAgcHJvdG8ubWVhc3VyZUNvbHVtbnMgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIHNldCBpdGVtcywgdXNlZCBpZiBtZWFzdXJpbmcgZmlyc3QgaXRlbVxyXG4gICAgdGhpcy5pdGVtcyA9IHRoaXMuaXNvdG9wZS5maWx0ZXJlZEl0ZW1zO1xyXG4gICAgbWVhc3VyZUNvbHVtbnMuY2FsbCggdGhpcyApO1xyXG4gIH07XHJcblxyXG4gIC8vIHBvaW50IHRvIG1vZGUgb3B0aW9ucyBmb3IgZml0V2lkdGhcclxuICB2YXIgX2dldE9wdGlvbiA9IHByb3RvLl9nZXRPcHRpb247XHJcbiAgcHJvdG8uX2dldE9wdGlvbiA9IGZ1bmN0aW9uKCBvcHRpb24gKSB7XHJcbiAgICBpZiAoIG9wdGlvbiA9PSAnZml0V2lkdGgnICkge1xyXG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmlzRml0V2lkdGggIT09IHVuZGVmaW5lZCA/XHJcbiAgICAgICAgdGhpcy5vcHRpb25zLmlzRml0V2lkdGggOiB0aGlzLm9wdGlvbnMuZml0V2lkdGg7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX2dldE9wdGlvbi5hcHBseSggdGhpcy5pc290b3BlLCBhcmd1bWVudHMgKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gTWFzb25yeU1vZGU7XHJcblxyXG59KSk7XHJcblxyXG4vKipcclxuICogZml0Um93cyBsYXlvdXQgbW9kZVxyXG4gKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcclxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cclxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKmdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHJlcXVpcmUgKi9cclxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG4gICAgLy8gQU1EXHJcbiAgICBkZWZpbmUoICdpc290b3BlLWxheW91dC9qcy9sYXlvdXQtbW9kZXMvZml0LXJvd3MnLFtcclxuICAgICAgICAnLi4vbGF5b3V0LW1vZGUnXHJcbiAgICAgIF0sXHJcbiAgICAgIGZhY3RvcnkgKTtcclxuICB9IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyApIHtcclxuICAgIC8vIENvbW1vbkpTXHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXHJcbiAgICAgIHJlcXVpcmUoJy4uL2xheW91dC1tb2RlJylcclxuICAgICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgICBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3cuSXNvdG9wZS5MYXlvdXRNb2RlXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggTGF5b3V0TW9kZSApIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIEZpdFJvd3MgPSBMYXlvdXRNb2RlLmNyZWF0ZSgnZml0Um93cycpO1xyXG5cclxudmFyIHByb3RvID0gRml0Um93cy5wcm90b3R5cGU7XHJcblxyXG5wcm90by5fcmVzZXRMYXlvdXQgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLnggPSAwO1xyXG4gIHRoaXMueSA9IDA7XHJcbiAgdGhpcy5tYXhZID0gMDtcclxuICB0aGlzLl9nZXRNZWFzdXJlbWVudCggJ2d1dHRlcicsICdvdXRlcldpZHRoJyApO1xyXG59O1xyXG5cclxucHJvdG8uX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCBpdGVtICkge1xyXG4gIGl0ZW0uZ2V0U2l6ZSgpO1xyXG5cclxuICB2YXIgaXRlbVdpZHRoID0gaXRlbS5zaXplLm91dGVyV2lkdGggKyB0aGlzLmd1dHRlcjtcclxuICAvLyBpZiB0aGlzIGVsZW1lbnQgY2Fubm90IGZpdCBpbiB0aGUgY3VycmVudCByb3dcclxuICB2YXIgY29udGFpbmVyV2lkdGggPSB0aGlzLmlzb3RvcGUuc2l6ZS5pbm5lcldpZHRoICsgdGhpcy5ndXR0ZXI7XHJcbiAgaWYgKCB0aGlzLnggIT09IDAgJiYgaXRlbVdpZHRoICsgdGhpcy54ID4gY29udGFpbmVyV2lkdGggKSB7XHJcbiAgICB0aGlzLnggPSAwO1xyXG4gICAgdGhpcy55ID0gdGhpcy5tYXhZO1xyXG4gIH1cclxuXHJcbiAgdmFyIHBvc2l0aW9uID0ge1xyXG4gICAgeDogdGhpcy54LFxyXG4gICAgeTogdGhpcy55XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5tYXhZID0gTWF0aC5tYXgoIHRoaXMubWF4WSwgdGhpcy55ICsgaXRlbS5zaXplLm91dGVySGVpZ2h0ICk7XHJcbiAgdGhpcy54ICs9IGl0ZW1XaWR0aDtcclxuXHJcbiAgcmV0dXJuIHBvc2l0aW9uO1xyXG59O1xyXG5cclxucHJvdG8uX2dldENvbnRhaW5lclNpemUgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4geyBoZWlnaHQ6IHRoaXMubWF4WSB9O1xyXG59O1xyXG5cclxucmV0dXJuIEZpdFJvd3M7XHJcblxyXG59KSk7XHJcblxyXG4vKipcclxuICogdmVydGljYWwgbGF5b3V0IG1vZGVcclxuICovXHJcblxyXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XHJcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXHJcbiAgLyoganNoaW50IHN0cmljdDogZmFsc2UgKi8gLypnbG9iYWxzIGRlZmluZSwgbW9kdWxlLCByZXF1aXJlICovXHJcbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcclxuICAgIC8vIEFNRFxyXG4gICAgZGVmaW5lKCAnaXNvdG9wZS1sYXlvdXQvanMvbGF5b3V0LW1vZGVzL3ZlcnRpY2FsJyxbXHJcbiAgICAgICAgJy4uL2xheW91dC1tb2RlJ1xyXG4gICAgICBdLFxyXG4gICAgICBmYWN0b3J5ICk7XHJcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcclxuICAgIC8vIENvbW1vbkpTXHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXHJcbiAgICAgIHJlcXVpcmUoJy4uL2xheW91dC1tb2RlJylcclxuICAgICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgICBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3cuSXNvdG9wZS5MYXlvdXRNb2RlXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggTGF5b3V0TW9kZSApIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIFZlcnRpY2FsID0gTGF5b3V0TW9kZS5jcmVhdGUoICd2ZXJ0aWNhbCcsIHtcclxuICBob3Jpem9udGFsQWxpZ25tZW50OiAwXHJcbn0pO1xyXG5cclxudmFyIHByb3RvID0gVmVydGljYWwucHJvdG90eXBlO1xyXG5cclxucHJvdG8uX3Jlc2V0TGF5b3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy55ID0gMDtcclxufTtcclxuXHJcbnByb3RvLl9nZXRJdGVtTGF5b3V0UG9zaXRpb24gPSBmdW5jdGlvbiggaXRlbSApIHtcclxuICBpdGVtLmdldFNpemUoKTtcclxuICB2YXIgeCA9ICggdGhpcy5pc290b3BlLnNpemUuaW5uZXJXaWR0aCAtIGl0ZW0uc2l6ZS5vdXRlcldpZHRoICkgKlxyXG4gICAgdGhpcy5vcHRpb25zLmhvcml6b250YWxBbGlnbm1lbnQ7XHJcbiAgdmFyIHkgPSB0aGlzLnk7XHJcbiAgdGhpcy55ICs9IGl0ZW0uc2l6ZS5vdXRlckhlaWdodDtcclxuICByZXR1cm4geyB4OiB4LCB5OiB5IH07XHJcbn07XHJcblxyXG5wcm90by5fZ2V0Q29udGFpbmVyU2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7IGhlaWdodDogdGhpcy55IH07XHJcbn07XHJcblxyXG5yZXR1cm4gVmVydGljYWw7XHJcblxyXG59KSk7XHJcblxyXG4vKiFcclxuICogSXNvdG9wZSB2My4wLjZcclxuICpcclxuICogTGljZW5zZWQgR1BMdjMgZm9yIG9wZW4gc291cmNlIHVzZVxyXG4gKiBvciBJc290b3BlIENvbW1lcmNpYWwgTGljZW5zZSBmb3IgY29tbWVyY2lhbCB1c2VcclxuICpcclxuICogaHR0cHM6Ly9pc290b3BlLm1ldGFmaXp6eS5jb1xyXG4gKiBDb3B5cmlnaHQgMjAxMC0yMDE4IE1ldGFmaXp6eVxyXG4gKi9cclxuXHJcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcclxuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cclxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKmdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHJlcXVpcmUgKi9cclxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG4gICAgLy8gQU1EXHJcbiAgICBkZWZpbmUoIFtcclxuICAgICAgICAnb3V0bGF5ZXIvb3V0bGF5ZXInLFxyXG4gICAgICAgICdnZXQtc2l6ZS9nZXQtc2l6ZScsXHJcbiAgICAgICAgJ2Rlc2FuZHJvLW1hdGNoZXMtc2VsZWN0b3IvbWF0Y2hlcy1zZWxlY3RvcicsXHJcbiAgICAgICAgJ2Zpenp5LXVpLXV0aWxzL3V0aWxzJyxcclxuICAgICAgICAnaXNvdG9wZS1sYXlvdXQvanMvaXRlbScsXHJcbiAgICAgICAgJ2lzb3RvcGUtbGF5b3V0L2pzL2xheW91dC1tb2RlJyxcclxuICAgICAgICAvLyBpbmNsdWRlIGRlZmF1bHQgbGF5b3V0IG1vZGVzXHJcbiAgICAgICAgJ2lzb3RvcGUtbGF5b3V0L2pzL2xheW91dC1tb2Rlcy9tYXNvbnJ5JyxcclxuICAgICAgICAnaXNvdG9wZS1sYXlvdXQvanMvbGF5b3V0LW1vZGVzL2ZpdC1yb3dzJyxcclxuICAgICAgICAnaXNvdG9wZS1sYXlvdXQvanMvbGF5b3V0LW1vZGVzL3ZlcnRpY2FsJ1xyXG4gICAgICBdLFxyXG4gICAgICBmdW5jdGlvbiggT3V0bGF5ZXIsIGdldFNpemUsIG1hdGNoZXNTZWxlY3RvciwgdXRpbHMsIEl0ZW0sIExheW91dE1vZGUgKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgT3V0bGF5ZXIsIGdldFNpemUsIG1hdGNoZXNTZWxlY3RvciwgdXRpbHMsIEl0ZW0sIExheW91dE1vZGUgKTtcclxuICAgICAgfSk7XHJcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcclxuICAgIC8vIENvbW1vbkpTXHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXHJcbiAgICAgIHdpbmRvdyxcclxuICAgICAgcmVxdWlyZSgnb3V0bGF5ZXInKSxcclxuICAgICAgcmVxdWlyZSgnZ2V0LXNpemUnKSxcclxuICAgICAgcmVxdWlyZSgnZGVzYW5kcm8tbWF0Y2hlcy1zZWxlY3RvcicpLFxyXG4gICAgICByZXF1aXJlKCdmaXp6eS11aS11dGlscycpLFxyXG4gICAgICByZXF1aXJlKCdpc290b3BlLWxheW91dC9qcy9pdGVtJyksXHJcbiAgICAgIHJlcXVpcmUoJ2lzb3RvcGUtbGF5b3V0L2pzL2xheW91dC1tb2RlJyksXHJcbiAgICAgIC8vIGluY2x1ZGUgZGVmYXVsdCBsYXlvdXQgbW9kZXNcclxuICAgICAgcmVxdWlyZSgnaXNvdG9wZS1sYXlvdXQvanMvbGF5b3V0LW1vZGVzL21hc29ucnknKSxcclxuICAgICAgcmVxdWlyZSgnaXNvdG9wZS1sYXlvdXQvanMvbGF5b3V0LW1vZGVzL2ZpdC1yb3dzJyksXHJcbiAgICAgIHJlcXVpcmUoJ2lzb3RvcGUtbGF5b3V0L2pzL2xheW91dC1tb2Rlcy92ZXJ0aWNhbCcpXHJcbiAgICApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBicm93c2VyIGdsb2JhbFxyXG4gICAgd2luZG93Lklzb3RvcGUgPSBmYWN0b3J5KFxyXG4gICAgICB3aW5kb3csXHJcbiAgICAgIHdpbmRvdy5PdXRsYXllcixcclxuICAgICAgd2luZG93LmdldFNpemUsXHJcbiAgICAgIHdpbmRvdy5tYXRjaGVzU2VsZWN0b3IsXHJcbiAgICAgIHdpbmRvdy5maXp6eVVJVXRpbHMsXHJcbiAgICAgIHdpbmRvdy5Jc290b3BlLkl0ZW0sXHJcbiAgICAgIHdpbmRvdy5Jc290b3BlLkxheW91dE1vZGVcclxuICAgICk7XHJcbiAgfVxyXG5cclxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIE91dGxheWVyLCBnZXRTaXplLCBtYXRjaGVzU2VsZWN0b3IsIHV0aWxzLFxyXG4gIEl0ZW0sIExheW91dE1vZGUgKSB7XHJcblxyXG5cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHZhcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbnZhciBqUXVlcnkgPSB3aW5kb3cualF1ZXJ5O1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gaGVscGVycyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxudmFyIHRyaW0gPSBTdHJpbmcucHJvdG90eXBlLnRyaW0gP1xyXG4gIGZ1bmN0aW9uKCBzdHIgKSB7XHJcbiAgICByZXR1cm4gc3RyLnRyaW0oKTtcclxuICB9IDpcclxuICBmdW5jdGlvbiggc3RyICkge1xyXG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKCAvXlxccyt8XFxzKyQvZywgJycgKTtcclxuICB9O1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gaXNvdG9wZURlZmluaXRpb24gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbiAgLy8gY3JlYXRlIGFuIE91dGxheWVyIGxheW91dCBjbGFzc1xyXG4gIHZhciBJc290b3BlID0gT3V0bGF5ZXIuY3JlYXRlKCAnaXNvdG9wZScsIHtcclxuICAgIGxheW91dE1vZGU6ICdtYXNvbnJ5JyxcclxuICAgIGlzSlF1ZXJ5RmlsdGVyaW5nOiB0cnVlLFxyXG4gICAgc29ydEFzY2VuZGluZzogdHJ1ZVxyXG4gIH0pO1xyXG5cclxuICBJc290b3BlLkl0ZW0gPSBJdGVtO1xyXG4gIElzb3RvcGUuTGF5b3V0TW9kZSA9IExheW91dE1vZGU7XHJcblxyXG4gIHZhciBwcm90byA9IElzb3RvcGUucHJvdG90eXBlO1xyXG5cclxuICBwcm90by5fY3JlYXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICB0aGlzLml0ZW1HVUlEID0gMDtcclxuICAgIC8vIGZ1bmN0aW9ucyB0aGF0IHNvcnQgaXRlbXNcclxuICAgIHRoaXMuX3NvcnRlcnMgPSB7fTtcclxuICAgIHRoaXMuX2dldFNvcnRlcnMoKTtcclxuICAgIC8vIGNhbGwgc3VwZXJcclxuICAgIE91dGxheWVyLnByb3RvdHlwZS5fY3JlYXRlLmNhbGwoIHRoaXMgKTtcclxuXHJcbiAgICAvLyBjcmVhdGUgbGF5b3V0IG1vZGVzXHJcbiAgICB0aGlzLm1vZGVzID0ge307XHJcbiAgICAvLyBzdGFydCBmaWx0ZXJlZEl0ZW1zIHdpdGggYWxsIGl0ZW1zXHJcbiAgICB0aGlzLmZpbHRlcmVkSXRlbXMgPSB0aGlzLml0ZW1zO1xyXG4gICAgLy8ga2VlcCBvZiB0cmFjayBvZiBzb3J0QnlzXHJcbiAgICB0aGlzLnNvcnRIaXN0b3J5ID0gWyAnb3JpZ2luYWwtb3JkZXInIF07XHJcbiAgICAvLyBjcmVhdGUgZnJvbSByZWdpc3RlcmVkIGxheW91dCBtb2Rlc1xyXG4gICAgZm9yICggdmFyIG5hbWUgaW4gTGF5b3V0TW9kZS5tb2RlcyApIHtcclxuICAgICAgdGhpcy5faW5pdExheW91dE1vZGUoIG5hbWUgKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBwcm90by5yZWxvYWRJdGVtcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gcmVzZXQgaXRlbSBJRCBjb3VudGVyXHJcbiAgICB0aGlzLml0ZW1HVUlEID0gMDtcclxuICAgIC8vIGNhbGwgc3VwZXJcclxuICAgIE91dGxheWVyLnByb3RvdHlwZS5yZWxvYWRJdGVtcy5jYWxsKCB0aGlzICk7XHJcbiAgfTtcclxuXHJcbiAgcHJvdG8uX2l0ZW1pemUgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBpdGVtcyA9IE91dGxheWVyLnByb3RvdHlwZS5faXRlbWl6ZS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XHJcbiAgICAvLyBhc3NpZ24gSUQgZm9yIG9yaWdpbmFsLW9yZGVyXHJcbiAgICBmb3IgKCB2YXIgaT0wOyBpIDwgaXRlbXMubGVuZ3RoOyBpKysgKSB7XHJcbiAgICAgIHZhciBpdGVtID0gaXRlbXNbaV07XHJcbiAgICAgIGl0ZW0uaWQgPSB0aGlzLml0ZW1HVUlEKys7XHJcbiAgICB9XHJcbiAgICB0aGlzLl91cGRhdGVJdGVtc1NvcnREYXRhKCBpdGVtcyApO1xyXG4gICAgcmV0dXJuIGl0ZW1zO1xyXG4gIH07XHJcblxyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBsYXlvdXQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcbiAgcHJvdG8uX2luaXRMYXlvdXRNb2RlID0gZnVuY3Rpb24oIG5hbWUgKSB7XHJcbiAgICB2YXIgTW9kZSA9IExheW91dE1vZGUubW9kZXNbIG5hbWUgXTtcclxuICAgIC8vIHNldCBtb2RlIG9wdGlvbnNcclxuICAgIC8vIEhBQ0sgZXh0ZW5kIGluaXRpYWwgb3B0aW9ucywgYmFjay1maWxsIGluIGRlZmF1bHQgb3B0aW9uc1xyXG4gICAgdmFyIGluaXRpYWxPcHRzID0gdGhpcy5vcHRpb25zWyBuYW1lIF0gfHwge307XHJcbiAgICB0aGlzLm9wdGlvbnNbIG5hbWUgXSA9IE1vZGUub3B0aW9ucyA/XHJcbiAgICAgIHV0aWxzLmV4dGVuZCggTW9kZS5vcHRpb25zLCBpbml0aWFsT3B0cyApIDogaW5pdGlhbE9wdHM7XHJcbiAgICAvLyBpbml0IGxheW91dCBtb2RlIGluc3RhbmNlXHJcbiAgICB0aGlzLm1vZGVzWyBuYW1lIF0gPSBuZXcgTW9kZSggdGhpcyApO1xyXG4gIH07XHJcblxyXG5cclxuICBwcm90by5sYXlvdXQgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIGlmIGZpcnN0IHRpbWUgZG9pbmcgbGF5b3V0LCBkbyBhbGwgbWFnaWNcclxuICAgIGlmICggIXRoaXMuX2lzTGF5b3V0SW5pdGVkICYmIHRoaXMuX2dldE9wdGlvbignaW5pdExheW91dCcpICkge1xyXG4gICAgICB0aGlzLmFycmFuZ2UoKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5fbGF5b3V0KCk7XHJcbiAgfTtcclxuXHJcbiAgLy8gcHJpdmF0ZSBtZXRob2QgdG8gYmUgdXNlZCBpbiBsYXlvdXQoKSAmIG1hZ2ljKClcclxuICBwcm90by5fbGF5b3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBkb24ndCBhbmltYXRlIGZpcnN0IGxheW91dFxyXG4gICAgdmFyIGlzSW5zdGFudCA9IHRoaXMuX2dldElzSW5zdGFudCgpO1xyXG4gICAgLy8gbGF5b3V0IGZsb3dcclxuICAgIHRoaXMuX3Jlc2V0TGF5b3V0KCk7XHJcbiAgICB0aGlzLl9tYW5hZ2VTdGFtcHMoKTtcclxuICAgIHRoaXMubGF5b3V0SXRlbXMoIHRoaXMuZmlsdGVyZWRJdGVtcywgaXNJbnN0YW50ICk7XHJcblxyXG4gICAgLy8gZmxhZyBmb3IgaW5pdGFsaXplZFxyXG4gICAgdGhpcy5faXNMYXlvdXRJbml0ZWQgPSB0cnVlO1xyXG4gIH07XHJcblxyXG4gIC8vIGZpbHRlciArIHNvcnQgKyBsYXlvdXRcclxuICBwcm90by5hcnJhbmdlID0gZnVuY3Rpb24oIG9wdHMgKSB7XHJcbiAgICAvLyBzZXQgYW55IG9wdGlvbnMgcGFzc1xyXG4gICAgdGhpcy5vcHRpb24oIG9wdHMgKTtcclxuICAgIHRoaXMuX2dldElzSW5zdGFudCgpO1xyXG4gICAgLy8gZmlsdGVyLCBzb3J0LCBhbmQgbGF5b3V0XHJcblxyXG4gICAgLy8gZmlsdGVyXHJcbiAgICB2YXIgZmlsdGVyZWQgPSB0aGlzLl9maWx0ZXIoIHRoaXMuaXRlbXMgKTtcclxuICAgIHRoaXMuZmlsdGVyZWRJdGVtcyA9IGZpbHRlcmVkLm1hdGNoZXM7XHJcblxyXG4gICAgdGhpcy5fYmluZEFycmFuZ2VDb21wbGV0ZSgpO1xyXG5cclxuICAgIGlmICggdGhpcy5faXNJbnN0YW50ICkge1xyXG4gICAgICB0aGlzLl9ub1RyYW5zaXRpb24oIHRoaXMuX2hpZGVSZXZlYWwsIFsgZmlsdGVyZWQgXSApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5faGlkZVJldmVhbCggZmlsdGVyZWQgKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9zb3J0KCk7XHJcbiAgICB0aGlzLl9sYXlvdXQoKTtcclxuICB9O1xyXG4gIC8vIGFsaWFzIHRvIF9pbml0IGZvciBtYWluIHBsdWdpbiBtZXRob2RcclxuICBwcm90by5faW5pdCA9IHByb3RvLmFycmFuZ2U7XHJcblxyXG4gIHByb3RvLl9oaWRlUmV2ZWFsID0gZnVuY3Rpb24oIGZpbHRlcmVkICkge1xyXG4gICAgdGhpcy5yZXZlYWwoIGZpbHRlcmVkLm5lZWRSZXZlYWwgKTtcclxuICAgIHRoaXMuaGlkZSggZmlsdGVyZWQubmVlZEhpZGUgKTtcclxuICB9O1xyXG5cclxuICAvLyBIQUNLXHJcbiAgLy8gRG9uJ3QgYW5pbWF0ZS90cmFuc2l0aW9uIGZpcnN0IGxheW91dFxyXG4gIC8vIE9yIGRvbid0IGFuaW1hdGUvdHJhbnNpdGlvbiBvdGhlciBsYXlvdXRzXHJcbiAgcHJvdG8uX2dldElzSW5zdGFudCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGlzTGF5b3V0SW5zdGFudCA9IHRoaXMuX2dldE9wdGlvbignbGF5b3V0SW5zdGFudCcpO1xyXG4gICAgdmFyIGlzSW5zdGFudCA9IGlzTGF5b3V0SW5zdGFudCAhPT0gdW5kZWZpbmVkID8gaXNMYXlvdXRJbnN0YW50IDpcclxuICAgICAgIXRoaXMuX2lzTGF5b3V0SW5pdGVkO1xyXG4gICAgdGhpcy5faXNJbnN0YW50ID0gaXNJbnN0YW50O1xyXG4gICAgcmV0dXJuIGlzSW5zdGFudDtcclxuICB9O1xyXG5cclxuICAvLyBsaXN0ZW4gZm9yIGxheW91dENvbXBsZXRlLCBoaWRlQ29tcGxldGUgYW5kIHJldmVhbENvbXBsZXRlXHJcbiAgLy8gdG8gdHJpZ2dlciBhcnJhbmdlQ29tcGxldGVcclxuICBwcm90by5fYmluZEFycmFuZ2VDb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gbGlzdGVuIGZvciAzIGV2ZW50cyB0byB0cmlnZ2VyIGFycmFuZ2VDb21wbGV0ZVxyXG4gICAgdmFyIGlzTGF5b3V0Q29tcGxldGUsIGlzSGlkZUNvbXBsZXRlLCBpc1JldmVhbENvbXBsZXRlO1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIGZ1bmN0aW9uIGFycmFuZ2VQYXJhbGxlbENhbGxiYWNrKCkge1xyXG4gICAgICBpZiAoIGlzTGF5b3V0Q29tcGxldGUgJiYgaXNIaWRlQ29tcGxldGUgJiYgaXNSZXZlYWxDb21wbGV0ZSApIHtcclxuICAgICAgICBfdGhpcy5kaXNwYXRjaEV2ZW50KCAnYXJyYW5nZUNvbXBsZXRlJywgbnVsbCwgWyBfdGhpcy5maWx0ZXJlZEl0ZW1zIF0gKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5vbmNlKCAnbGF5b3V0Q29tcGxldGUnLCBmdW5jdGlvbigpIHtcclxuICAgICAgaXNMYXlvdXRDb21wbGV0ZSA9IHRydWU7XHJcbiAgICAgIGFycmFuZ2VQYXJhbGxlbENhbGxiYWNrKCk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMub25jZSggJ2hpZGVDb21wbGV0ZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICBpc0hpZGVDb21wbGV0ZSA9IHRydWU7XHJcbiAgICAgIGFycmFuZ2VQYXJhbGxlbENhbGxiYWNrKCk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMub25jZSggJ3JldmVhbENvbXBsZXRlJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlzUmV2ZWFsQ29tcGxldGUgPSB0cnVlO1xyXG4gICAgICBhcnJhbmdlUGFyYWxsZWxDYWxsYmFjaygpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZmlsdGVyIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4gIHByb3RvLl9maWx0ZXIgPSBmdW5jdGlvbiggaXRlbXMgKSB7XHJcbiAgICB2YXIgZmlsdGVyID0gdGhpcy5vcHRpb25zLmZpbHRlcjtcclxuICAgIGZpbHRlciA9IGZpbHRlciB8fCAnKic7XHJcbiAgICB2YXIgbWF0Y2hlcyA9IFtdO1xyXG4gICAgdmFyIGhpZGRlbk1hdGNoZWQgPSBbXTtcclxuICAgIHZhciB2aXNpYmxlVW5tYXRjaGVkID0gW107XHJcblxyXG4gICAgdmFyIHRlc3QgPSB0aGlzLl9nZXRGaWx0ZXJUZXN0KCBmaWx0ZXIgKTtcclxuXHJcbiAgICAvLyB0ZXN0IGVhY2ggaXRlbVxyXG4gICAgZm9yICggdmFyIGk9MDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrICkge1xyXG4gICAgICB2YXIgaXRlbSA9IGl0ZW1zW2ldO1xyXG4gICAgICBpZiAoIGl0ZW0uaXNJZ25vcmVkICkge1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIGFkZCBpdGVtIHRvIGVpdGhlciBtYXRjaGVkIG9yIHVubWF0Y2hlZCBncm91cFxyXG4gICAgICB2YXIgaXNNYXRjaGVkID0gdGVzdCggaXRlbSApO1xyXG4gICAgICAvLyBpdGVtLmlzRmlsdGVyTWF0Y2hlZCA9IGlzTWF0Y2hlZDtcclxuICAgICAgLy8gYWRkIHRvIG1hdGNoZXMgaWYgaXRzIGEgbWF0Y2hcclxuICAgICAgaWYgKCBpc01hdGNoZWQgKSB7XHJcbiAgICAgICAgbWF0Y2hlcy5wdXNoKCBpdGVtICk7XHJcbiAgICAgIH1cclxuICAgICAgLy8gYWRkIHRvIGFkZGl0aW9uYWwgZ3JvdXAgaWYgaXRlbSBuZWVkcyB0byBiZSBoaWRkZW4gb3IgcmV2ZWFsZWRcclxuICAgICAgaWYgKCBpc01hdGNoZWQgJiYgaXRlbS5pc0hpZGRlbiApIHtcclxuICAgICAgICBoaWRkZW5NYXRjaGVkLnB1c2goIGl0ZW0gKTtcclxuICAgICAgfSBlbHNlIGlmICggIWlzTWF0Y2hlZCAmJiAhaXRlbS5pc0hpZGRlbiApIHtcclxuICAgICAgICB2aXNpYmxlVW5tYXRjaGVkLnB1c2goIGl0ZW0gKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIHJldHVybiBjb2xsZWN0aW9ucyBvZiBpdGVtcyB0byBiZSBtYW5pcHVsYXRlZFxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbWF0Y2hlczogbWF0Y2hlcyxcclxuICAgICAgbmVlZFJldmVhbDogaGlkZGVuTWF0Y2hlZCxcclxuICAgICAgbmVlZEhpZGU6IHZpc2libGVVbm1hdGNoZWRcclxuICAgIH07XHJcbiAgfTtcclxuXHJcbiAgLy8gZ2V0IGEgalF1ZXJ5LCBmdW5jdGlvbiwgb3IgYSBtYXRjaGVzU2VsZWN0b3IgdGVzdCBnaXZlbiB0aGUgZmlsdGVyXHJcbiAgcHJvdG8uX2dldEZpbHRlclRlc3QgPSBmdW5jdGlvbiggZmlsdGVyICkge1xyXG4gICAgaWYgKCBqUXVlcnkgJiYgdGhpcy5vcHRpb25zLmlzSlF1ZXJ5RmlsdGVyaW5nICkge1xyXG4gICAgICAvLyB1c2UgalF1ZXJ5XHJcbiAgICAgIHJldHVybiBmdW5jdGlvbiggaXRlbSApIHtcclxuICAgICAgICByZXR1cm4galF1ZXJ5KCBpdGVtLmVsZW1lbnQgKS5pcyggZmlsdGVyICk7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICBpZiAoIHR5cGVvZiBmaWx0ZXIgPT0gJ2Z1bmN0aW9uJyApIHtcclxuICAgICAgLy8gdXNlIGZpbHRlciBhcyBmdW5jdGlvblxyXG4gICAgICByZXR1cm4gZnVuY3Rpb24oIGl0ZW0gKSB7XHJcbiAgICAgICAgcmV0dXJuIGZpbHRlciggaXRlbS5lbGVtZW50ICk7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICAvLyBkZWZhdWx0LCB1c2UgZmlsdGVyIGFzIHNlbGVjdG9yIHN0cmluZ1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCBpdGVtICkge1xyXG4gICAgICByZXR1cm4gbWF0Y2hlc1NlbGVjdG9yKCBpdGVtLmVsZW1lbnQsIGZpbHRlciApO1xyXG4gICAgfTtcclxuICB9O1xyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBzb3J0aW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbXMge0FycmF5fSBlbGVtc1xyXG4gICAqIEBwdWJsaWNcclxuICAgKi9cclxuICBwcm90by51cGRhdGVTb3J0RGF0YSA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuICAgIC8vIGdldCBpdGVtc1xyXG4gICAgdmFyIGl0ZW1zO1xyXG4gICAgaWYgKCBlbGVtcyApIHtcclxuICAgICAgZWxlbXMgPSB1dGlscy5tYWtlQXJyYXkoIGVsZW1zICk7XHJcbiAgICAgIGl0ZW1zID0gdGhpcy5nZXRJdGVtcyggZWxlbXMgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIHVwZGF0ZSBhbGwgaXRlbXMgaWYgbm8gZWxlbXMgcHJvdmlkZWRcclxuICAgICAgaXRlbXMgPSB0aGlzLml0ZW1zO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2dldFNvcnRlcnMoKTtcclxuICAgIHRoaXMuX3VwZGF0ZUl0ZW1zU29ydERhdGEoIGl0ZW1zICk7XHJcbiAgfTtcclxuXHJcbiAgcHJvdG8uX2dldFNvcnRlcnMgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBnZXRTb3J0RGF0YSA9IHRoaXMub3B0aW9ucy5nZXRTb3J0RGF0YTtcclxuICAgIGZvciAoIHZhciBrZXkgaW4gZ2V0U29ydERhdGEgKSB7XHJcbiAgICAgIHZhciBzb3J0ZXIgPSBnZXRTb3J0RGF0YVsga2V5IF07XHJcbiAgICAgIHRoaXMuX3NvcnRlcnNbIGtleSBdID0gbXVuZ2VTb3J0ZXIoIHNvcnRlciApO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbXMge0FycmF5fSBpdGVtcyAtIG9mIElzb3RvcGUuSXRlbXNcclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIHByb3RvLl91cGRhdGVJdGVtc1NvcnREYXRhID0gZnVuY3Rpb24oIGl0ZW1zICkge1xyXG4gICAgLy8gZG8gbm90IHVwZGF0ZSBpZiBubyBpdGVtc1xyXG4gICAgdmFyIGxlbiA9IGl0ZW1zICYmIGl0ZW1zLmxlbmd0aDtcclxuXHJcbiAgICBmb3IgKCB2YXIgaT0wOyBsZW4gJiYgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgICB2YXIgaXRlbSA9IGl0ZW1zW2ldO1xyXG4gICAgICBpdGVtLnVwZGF0ZVNvcnREYXRhKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLy8gLS0tLS0gbXVuZ2Ugc29ydGVyIC0tLS0tIC8vXHJcblxyXG4gIC8vIGVuY2Fwc3VsYXRlIHRoaXMsIGFzIHdlIGp1c3QgbmVlZCBtdW5nZVNvcnRlclxyXG4gIC8vIG90aGVyIGZ1bmN0aW9ucyBpbiBoZXJlIGFyZSBqdXN0IGZvciBtdW5naW5nXHJcbiAgdmFyIG11bmdlU29ydGVyID0gKCBmdW5jdGlvbigpIHtcclxuICAgIC8vIGFkZCBhIG1hZ2ljIGxheWVyIHRvIHNvcnRlcnMgZm9yIGNvbnZpZW5lbnQgc2hvcnRoYW5kc1xyXG4gICAgLy8gYC5mb28tYmFyYCB3aWxsIHVzZSB0aGUgdGV4dCBvZiAuZm9vLWJhciBxdWVyeVNlbGVjdG9yXHJcbiAgICAvLyBgW2Zvby1iYXJdYCB3aWxsIHVzZSBhdHRyaWJ1dGVcclxuICAgIC8vIHlvdSBjYW4gYWxzbyBhZGQgcGFyc2VyXHJcbiAgICAvLyBgLmZvby1iYXIgcGFyc2VJbnRgIHdpbGwgcGFyc2UgdGhhdCBhcyBhIG51bWJlclxyXG4gICAgZnVuY3Rpb24gbXVuZ2VTb3J0ZXIoIHNvcnRlciApIHtcclxuICAgICAgLy8gaWYgbm90IGEgc3RyaW5nLCByZXR1cm4gZnVuY3Rpb24gb3Igd2hhdGV2ZXIgaXQgaXNcclxuICAgICAgaWYgKCB0eXBlb2Ygc29ydGVyICE9ICdzdHJpbmcnICkge1xyXG4gICAgICAgIHJldHVybiBzb3J0ZXI7XHJcbiAgICAgIH1cclxuICAgICAgLy8gcGFyc2UgdGhlIHNvcnRlciBzdHJpbmdcclxuICAgICAgdmFyIGFyZ3MgPSB0cmltKCBzb3J0ZXIgKS5zcGxpdCgnICcpO1xyXG4gICAgICB2YXIgcXVlcnkgPSBhcmdzWzBdO1xyXG4gICAgICAvLyBjaGVjayBpZiBxdWVyeSBsb29rcyBsaWtlIFthbi1hdHRyaWJ1dGVdXHJcbiAgICAgIHZhciBhdHRyTWF0Y2ggPSBxdWVyeS5tYXRjaCggL15cXFsoLispXFxdJC8gKTtcclxuICAgICAgdmFyIGF0dHIgPSBhdHRyTWF0Y2ggJiYgYXR0ck1hdGNoWzFdO1xyXG4gICAgICB2YXIgZ2V0VmFsdWUgPSBnZXRWYWx1ZUdldHRlciggYXR0ciwgcXVlcnkgKTtcclxuICAgICAgLy8gdXNlIHNlY29uZCBhcmd1bWVudCBhcyBhIHBhcnNlclxyXG4gICAgICB2YXIgcGFyc2VyID0gSXNvdG9wZS5zb3J0RGF0YVBhcnNlcnNbIGFyZ3NbMV0gXTtcclxuICAgICAgLy8gcGFyc2UgdGhlIHZhbHVlLCBpZiB0aGVyZSB3YXMgYSBwYXJzZXJcclxuICAgICAgc29ydGVyID0gcGFyc2VyID8gZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgICAgICAgcmV0dXJuIGVsZW0gJiYgcGFyc2VyKCBnZXRWYWx1ZSggZWxlbSApICk7XHJcbiAgICAgIH0gOlxyXG4gICAgICAvLyBvdGhlcndpc2UganVzdCByZXR1cm4gdmFsdWVcclxuICAgICAgZnVuY3Rpb24oIGVsZW0gKSB7XHJcbiAgICAgICAgcmV0dXJuIGVsZW0gJiYgZ2V0VmFsdWUoIGVsZW0gKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHJldHVybiBzb3J0ZXI7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZ2V0IGFuIGF0dHJpYnV0ZSBnZXR0ZXIsIG9yIGdldCB0ZXh0IG9mIHRoZSBxdWVyeVNlbGVjdG9yXHJcbiAgICBmdW5jdGlvbiBnZXRWYWx1ZUdldHRlciggYXR0ciwgcXVlcnkgKSB7XHJcbiAgICAgIC8vIGlmIHF1ZXJ5IGxvb2tzIGxpa2UgW2Zvby1iYXJdLCBnZXQgYXR0cmlidXRlXHJcbiAgICAgIGlmICggYXR0ciApIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gZ2V0QXR0cmlidXRlKCBlbGVtICkge1xyXG4gICAgICAgICAgcmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBhdHRyICk7XHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gb3RoZXJ3aXNlLCBhc3N1bWUgaXRzIGEgcXVlcnlTZWxlY3RvciwgYW5kIGdldCBpdHMgdGV4dFxyXG4gICAgICByZXR1cm4gZnVuY3Rpb24gZ2V0Q2hpbGRUZXh0KCBlbGVtICkge1xyXG4gICAgICAgIHZhciBjaGlsZCA9IGVsZW0ucXVlcnlTZWxlY3RvciggcXVlcnkgKTtcclxuICAgICAgICByZXR1cm4gY2hpbGQgJiYgY2hpbGQudGV4dENvbnRlbnQ7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG11bmdlU29ydGVyO1xyXG4gIH0pKCk7XHJcblxyXG4gIC8vIHBhcnNlcnMgdXNlZCBpbiBnZXRTb3J0RGF0YSBzaG9ydGN1dCBzdHJpbmdzXHJcbiAgSXNvdG9wZS5zb3J0RGF0YVBhcnNlcnMgPSB7XHJcbiAgICAncGFyc2VJbnQnOiBmdW5jdGlvbiggdmFsICkge1xyXG4gICAgICByZXR1cm4gcGFyc2VJbnQoIHZhbCwgMTAgKTtcclxuICAgIH0sXHJcbiAgICAncGFyc2VGbG9hdCc6IGZ1bmN0aW9uKCB2YWwgKSB7XHJcbiAgICAgIHJldHVybiBwYXJzZUZsb2F0KCB2YWwgKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyAtLS0tLSBzb3J0IG1ldGhvZCAtLS0tLSAvL1xyXG5cclxuICAvLyBzb3J0IGZpbHRlcmVkSXRlbSBvcmRlclxyXG4gIHByb3RvLl9zb3J0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAoICF0aGlzLm9wdGlvbnMuc29ydEJ5ICkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyBrZWVwIHRyYWNrIG9mIHNvcnRCeSBIaXN0b3J5XHJcbiAgICB2YXIgc29ydEJ5cyA9IHV0aWxzLm1ha2VBcnJheSggdGhpcy5vcHRpb25zLnNvcnRCeSApO1xyXG4gICAgaWYgKCAhdGhpcy5fZ2V0SXNTYW1lU29ydEJ5KCBzb3J0QnlzICkgKSB7XHJcbiAgICAgIC8vIGNvbmNhdCBhbGwgc29ydEJ5IGFuZCBzb3J0SGlzdG9yeSwgYWRkIHRvIGZyb250LCBvbGRlc3QgZ29lcyBpbiBsYXN0XHJcbiAgICAgIHRoaXMuc29ydEhpc3RvcnkgPSBzb3J0QnlzLmNvbmNhdCggdGhpcy5zb3J0SGlzdG9yeSApO1xyXG4gICAgfVxyXG4gICAgLy8gc29ydCBtYWdpY1xyXG4gICAgdmFyIGl0ZW1Tb3J0ZXIgPSBnZXRJdGVtU29ydGVyKCB0aGlzLnNvcnRIaXN0b3J5LCB0aGlzLm9wdGlvbnMuc29ydEFzY2VuZGluZyApO1xyXG4gICAgdGhpcy5maWx0ZXJlZEl0ZW1zLnNvcnQoIGl0ZW1Tb3J0ZXIgKTtcclxuICB9O1xyXG5cclxuICAvLyBjaGVjayBpZiBzb3J0QnlzIGlzIHNhbWUgYXMgc3RhcnQgb2Ygc29ydEhpc3RvcnlcclxuICBwcm90by5fZ2V0SXNTYW1lU29ydEJ5ID0gZnVuY3Rpb24oIHNvcnRCeXMgKSB7XHJcbiAgICBmb3IgKCB2YXIgaT0wOyBpIDwgc29ydEJ5cy5sZW5ndGg7IGkrKyApIHtcclxuICAgICAgaWYgKCBzb3J0QnlzW2ldICE9IHRoaXMuc29ydEhpc3RvcnlbaV0gKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9O1xyXG5cclxuICAvLyByZXR1cm5zIGEgZnVuY3Rpb24gdXNlZCBmb3Igc29ydGluZ1xyXG4gIGZ1bmN0aW9uIGdldEl0ZW1Tb3J0ZXIoIHNvcnRCeXMsIHNvcnRBc2MgKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gc29ydGVyKCBpdGVtQSwgaXRlbUIgKSB7XHJcbiAgICAgIC8vIGN5Y2xlIHRocm91Z2ggYWxsIHNvcnRLZXlzXHJcbiAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHNvcnRCeXMubGVuZ3RoOyBpKysgKSB7XHJcbiAgICAgICAgdmFyIHNvcnRCeSA9IHNvcnRCeXNbaV07XHJcbiAgICAgICAgdmFyIGEgPSBpdGVtQS5zb3J0RGF0YVsgc29ydEJ5IF07XHJcbiAgICAgICAgdmFyIGIgPSBpdGVtQi5zb3J0RGF0YVsgc29ydEJ5IF07XHJcbiAgICAgICAgaWYgKCBhID4gYiB8fCBhIDwgYiApIHtcclxuICAgICAgICAgIC8vIGlmIHNvcnRBc2MgaXMgYW4gb2JqZWN0LCB1c2UgdGhlIHZhbHVlIGdpdmVuIHRoZSBzb3J0Qnkga2V5XHJcbiAgICAgICAgICB2YXIgaXNBc2NlbmRpbmcgPSBzb3J0QXNjWyBzb3J0QnkgXSAhPT0gdW5kZWZpbmVkID8gc29ydEFzY1sgc29ydEJ5IF0gOiBzb3J0QXNjO1xyXG4gICAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGlzQXNjZW5kaW5nID8gMSA6IC0xO1xyXG4gICAgICAgICAgcmV0dXJuICggYSA+IGIgPyAxIDogLTEgKSAqIGRpcmVjdGlvbjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIDA7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gbWV0aG9kcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuICAvLyBnZXQgbGF5b3V0IG1vZGVcclxuICBwcm90by5fbW9kZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGxheW91dE1vZGUgPSB0aGlzLm9wdGlvbnMubGF5b3V0TW9kZTtcclxuICAgIHZhciBtb2RlID0gdGhpcy5tb2Rlc1sgbGF5b3V0TW9kZSBdO1xyXG4gICAgaWYgKCAhbW9kZSApIHtcclxuICAgICAgLy8gVE9ETyBjb25zb2xlLmVycm9yXHJcbiAgICAgIHRocm93IG5ldyBFcnJvciggJ05vIGxheW91dCBtb2RlOiAnICsgbGF5b3V0TW9kZSApO1xyXG4gICAgfVxyXG4gICAgLy8gSEFDSyBzeW5jIG1vZGUncyBvcHRpb25zXHJcbiAgICAvLyBhbnkgb3B0aW9ucyBzZXQgYWZ0ZXIgaW5pdCBmb3IgbGF5b3V0IG1vZGUgbmVlZCB0byBiZSBzeW5jZWRcclxuICAgIG1vZGUub3B0aW9ucyA9IHRoaXMub3B0aW9uc1sgbGF5b3V0TW9kZSBdO1xyXG4gICAgcmV0dXJuIG1vZGU7XHJcbiAgfTtcclxuXHJcbiAgcHJvdG8uX3Jlc2V0TGF5b3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyB0cmlnZ2VyIG9yaWdpbmFsIHJlc2V0IGxheW91dFxyXG4gICAgT3V0bGF5ZXIucHJvdG90eXBlLl9yZXNldExheW91dC5jYWxsKCB0aGlzICk7XHJcbiAgICB0aGlzLl9tb2RlKCkuX3Jlc2V0TGF5b3V0KCk7XHJcbiAgfTtcclxuXHJcbiAgcHJvdG8uX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCBpdGVtICApIHtcclxuICAgIHJldHVybiB0aGlzLl9tb2RlKCkuX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiggaXRlbSApO1xyXG4gIH07XHJcblxyXG4gIHByb3RvLl9tYW5hZ2VTdGFtcCA9IGZ1bmN0aW9uKCBzdGFtcCApIHtcclxuICAgIHRoaXMuX21vZGUoKS5fbWFuYWdlU3RhbXAoIHN0YW1wICk7XHJcbiAgfTtcclxuXHJcbiAgcHJvdG8uX2dldENvbnRhaW5lclNpemUgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB0aGlzLl9tb2RlKCkuX2dldENvbnRhaW5lclNpemUoKTtcclxuICB9O1xyXG5cclxuICBwcm90by5uZWVkc1Jlc2l6ZUxheW91dCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX21vZGUoKS5uZWVkc1Jlc2l6ZUxheW91dCgpO1xyXG4gIH07XHJcblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGFkZGluZyAmIHJlbW92aW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG4gIC8vIEhFQURTIFVQIG92ZXJ3cml0ZXMgZGVmYXVsdCBPdXRsYXllciBhcHBlbmRlZFxyXG4gIHByb3RvLmFwcGVuZGVkID0gZnVuY3Rpb24oIGVsZW1zICkge1xyXG4gICAgdmFyIGl0ZW1zID0gdGhpcy5hZGRJdGVtcyggZWxlbXMgKTtcclxuICAgIGlmICggIWl0ZW1zLmxlbmd0aCApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy8gZmlsdGVyLCBsYXlvdXQsIHJldmVhbCBuZXcgaXRlbXNcclxuICAgIHZhciBmaWx0ZXJlZEl0ZW1zID0gdGhpcy5fZmlsdGVyUmV2ZWFsQWRkZWQoIGl0ZW1zICk7XHJcbiAgICAvLyBhZGQgdG8gZmlsdGVyZWRJdGVtc1xyXG4gICAgdGhpcy5maWx0ZXJlZEl0ZW1zID0gdGhpcy5maWx0ZXJlZEl0ZW1zLmNvbmNhdCggZmlsdGVyZWRJdGVtcyApO1xyXG4gIH07XHJcblxyXG4gIC8vIEhFQURTIFVQIG92ZXJ3cml0ZXMgZGVmYXVsdCBPdXRsYXllciBwcmVwZW5kZWRcclxuICBwcm90by5wcmVwZW5kZWQgPSBmdW5jdGlvbiggZWxlbXMgKSB7XHJcbiAgICB2YXIgaXRlbXMgPSB0aGlzLl9pdGVtaXplKCBlbGVtcyApO1xyXG4gICAgaWYgKCAhaXRlbXMubGVuZ3RoICkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyBzdGFydCBuZXcgbGF5b3V0XHJcbiAgICB0aGlzLl9yZXNldExheW91dCgpO1xyXG4gICAgdGhpcy5fbWFuYWdlU3RhbXBzKCk7XHJcbiAgICAvLyBmaWx0ZXIsIGxheW91dCwgcmV2ZWFsIG5ldyBpdGVtc1xyXG4gICAgdmFyIGZpbHRlcmVkSXRlbXMgPSB0aGlzLl9maWx0ZXJSZXZlYWxBZGRlZCggaXRlbXMgKTtcclxuICAgIC8vIGxheW91dCBwcmV2aW91cyBpdGVtc1xyXG4gICAgdGhpcy5sYXlvdXRJdGVtcyggdGhpcy5maWx0ZXJlZEl0ZW1zICk7XHJcbiAgICAvLyBhZGQgdG8gaXRlbXMgYW5kIGZpbHRlcmVkSXRlbXNcclxuICAgIHRoaXMuZmlsdGVyZWRJdGVtcyA9IGZpbHRlcmVkSXRlbXMuY29uY2F0KCB0aGlzLmZpbHRlcmVkSXRlbXMgKTtcclxuICAgIHRoaXMuaXRlbXMgPSBpdGVtcy5jb25jYXQoIHRoaXMuaXRlbXMgKTtcclxuICB9O1xyXG5cclxuICBwcm90by5fZmlsdGVyUmV2ZWFsQWRkZWQgPSBmdW5jdGlvbiggaXRlbXMgKSB7XHJcbiAgICB2YXIgZmlsdGVyZWQgPSB0aGlzLl9maWx0ZXIoIGl0ZW1zICk7XHJcbiAgICB0aGlzLmhpZGUoIGZpbHRlcmVkLm5lZWRIaWRlICk7XHJcbiAgICAvLyByZXZlYWwgYWxsIG5ldyBpdGVtc1xyXG4gICAgdGhpcy5yZXZlYWwoIGZpbHRlcmVkLm1hdGNoZXMgKTtcclxuICAgIC8vIGxheW91dCBuZXcgaXRlbXMsIG5vIHRyYW5zaXRpb25cclxuICAgIHRoaXMubGF5b3V0SXRlbXMoIGZpbHRlcmVkLm1hdGNoZXMsIHRydWUgKTtcclxuICAgIHJldHVybiBmaWx0ZXJlZC5tYXRjaGVzO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEZpbHRlciwgc29ydCwgYW5kIGxheW91dCBuZXdseS1hcHBlbmRlZCBpdGVtIGVsZW1lbnRzXHJcbiAgICogQHBhcmFtIHtBcnJheSBvciBOb2RlTGlzdCBvciBFbGVtZW50fSBlbGVtc1xyXG4gICAqL1xyXG4gIHByb3RvLmluc2VydCA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuICAgIHZhciBpdGVtcyA9IHRoaXMuYWRkSXRlbXMoIGVsZW1zICk7XHJcbiAgICBpZiAoICFpdGVtcy5sZW5ndGggKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIGFwcGVuZCBpdGVtIGVsZW1lbnRzXHJcbiAgICB2YXIgaSwgaXRlbTtcclxuICAgIHZhciBsZW4gPSBpdGVtcy5sZW5ndGg7XHJcbiAgICBmb3IgKCBpPTA7IGkgPCBsZW47IGkrKyApIHtcclxuICAgICAgaXRlbSA9IGl0ZW1zW2ldO1xyXG4gICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoIGl0ZW0uZWxlbWVudCApO1xyXG4gICAgfVxyXG4gICAgLy8gZmlsdGVyIG5ldyBzdHVmZlxyXG4gICAgdmFyIGZpbHRlcmVkSW5zZXJ0SXRlbXMgPSB0aGlzLl9maWx0ZXIoIGl0ZW1zICkubWF0Y2hlcztcclxuICAgIC8vIHNldCBmbGFnXHJcbiAgICBmb3IgKCBpPTA7IGkgPCBsZW47IGkrKyApIHtcclxuICAgICAgaXRlbXNbaV0uaXNMYXlvdXRJbnN0YW50ID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIHRoaXMuYXJyYW5nZSgpO1xyXG4gICAgLy8gcmVzZXQgZmxhZ1xyXG4gICAgZm9yICggaT0wOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICAgIGRlbGV0ZSBpdGVtc1tpXS5pc0xheW91dEluc3RhbnQ7XHJcbiAgICB9XHJcbiAgICB0aGlzLnJldmVhbCggZmlsdGVyZWRJbnNlcnRJdGVtcyApO1xyXG4gIH07XHJcblxyXG4gIHZhciBfcmVtb3ZlID0gcHJvdG8ucmVtb3ZlO1xyXG4gIHByb3RvLnJlbW92ZSA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcclxuICAgIGVsZW1zID0gdXRpbHMubWFrZUFycmF5KCBlbGVtcyApO1xyXG4gICAgdmFyIHJlbW92ZUl0ZW1zID0gdGhpcy5nZXRJdGVtcyggZWxlbXMgKTtcclxuICAgIC8vIGRvIHJlZ3VsYXIgdGhpbmdcclxuICAgIF9yZW1vdmUuY2FsbCggdGhpcywgZWxlbXMgKTtcclxuICAgIC8vIGJhaWwgaWYgbm8gaXRlbXMgdG8gcmVtb3ZlXHJcbiAgICB2YXIgbGVuID0gcmVtb3ZlSXRlbXMgJiYgcmVtb3ZlSXRlbXMubGVuZ3RoO1xyXG4gICAgLy8gcmVtb3ZlIGVsZW1zIGZyb20gZmlsdGVyZWRJdGVtc1xyXG4gICAgZm9yICggdmFyIGk9MDsgbGVuICYmIGkgPCBsZW47IGkrKyApIHtcclxuICAgICAgdmFyIGl0ZW0gPSByZW1vdmVJdGVtc1tpXTtcclxuICAgICAgLy8gcmVtb3ZlIGl0ZW0gZnJvbSBjb2xsZWN0aW9uXHJcbiAgICAgIHV0aWxzLnJlbW92ZUZyb20oIHRoaXMuZmlsdGVyZWRJdGVtcywgaXRlbSApO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHByb3RvLnNodWZmbGUgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIHVwZGF0ZSByYW5kb20gc29ydERhdGFcclxuICAgIGZvciAoIHZhciBpPTA7IGkgPCB0aGlzLml0ZW1zLmxlbmd0aDsgaSsrICkge1xyXG4gICAgICB2YXIgaXRlbSA9IHRoaXMuaXRlbXNbaV07XHJcbiAgICAgIGl0ZW0uc29ydERhdGEucmFuZG9tID0gTWF0aC5yYW5kb20oKTtcclxuICAgIH1cclxuICAgIHRoaXMub3B0aW9ucy5zb3J0QnkgPSAncmFuZG9tJztcclxuICAgIHRoaXMuX3NvcnQoKTtcclxuICAgIHRoaXMuX2xheW91dCgpO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIHRyaWdnZXIgZm4gd2l0aG91dCB0cmFuc2l0aW9uXHJcbiAgICoga2luZCBvZiBoYWNreSB0byBoYXZlIHRoaXMgaW4gdGhlIGZpcnN0IHBsYWNlXHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzXHJcbiAgICogQHJldHVybnMgcmV0XHJcbiAgICogQHByaXZhdGVcclxuICAgKi9cclxuICBwcm90by5fbm9UcmFuc2l0aW9uID0gZnVuY3Rpb24oIGZuLCBhcmdzICkge1xyXG4gICAgLy8gc2F2ZSB0cmFuc2l0aW9uRHVyYXRpb24gYmVmb3JlIGRpc2FibGluZ1xyXG4gICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IHRoaXMub3B0aW9ucy50cmFuc2l0aW9uRHVyYXRpb247XHJcbiAgICAvLyBkaXNhYmxlIHRyYW5zaXRpb25cclxuICAgIHRoaXMub3B0aW9ucy50cmFuc2l0aW9uRHVyYXRpb24gPSAwO1xyXG4gICAgLy8gZG8gaXRcclxuICAgIHZhciByZXR1cm5WYWx1ZSA9IGZuLmFwcGx5KCB0aGlzLCBhcmdzICk7XHJcbiAgICAvLyByZS1lbmFibGUgdHJhbnNpdGlvbiBmb3IgcmV2ZWFsXHJcbiAgICB0aGlzLm9wdGlvbnMudHJhbnNpdGlvbkR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uO1xyXG4gICAgcmV0dXJuIHJldHVyblZhbHVlO1xyXG4gIH07XHJcblxyXG4gIC8vIC0tLS0tIGhlbHBlciBtZXRob2RzIC0tLS0tIC8vXHJcblxyXG4gIC8qKlxyXG4gICAqIGdldHRlciBtZXRob2QgZm9yIGdldHRpbmcgZmlsdGVyZWQgaXRlbSBlbGVtZW50c1xyXG4gICAqIEByZXR1cm5zIHtBcnJheX0gZWxlbXMgLSBjb2xsZWN0aW9uIG9mIGl0ZW0gZWxlbWVudHNcclxuICAgKi9cclxuICBwcm90by5nZXRGaWx0ZXJlZEl0ZW1FbGVtZW50cyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZmlsdGVyZWRJdGVtcy5tYXAoIGZ1bmN0aW9uKCBpdGVtICkge1xyXG4gICAgICByZXR1cm4gaXRlbS5lbGVtZW50O1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgLy8gLS0tLS0gIC0tLS0tIC8vXHJcblxyXG4gIHJldHVybiBJc290b3BlO1xyXG5cclxufSkpO1xyXG5cclxuIiwibW9kdWxlLmV4cG9ydHMgPSBqUXVlcnk7IiwidmFyIFZhbmlsbGFUaWx0ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVkIGJ5IFNlcmdpdSDImGFuZG9yIChtaWNrdTd6dSkgb24gMS8yNy8yMDE3LlxyXG4gICAgICogT3JpZ2luYWwgaWRlYTogaHR0cHM6Ly9naXRodWIuY29tL2dpanNyb2dlL3RpbHQuanNcclxuICAgICAqIE1JVCBMaWNlbnNlLlxyXG4gICAgICogVmVyc2lvbiAxLjcuMFxyXG4gICAgICovXHJcbiAgICBcclxuICAgIGNsYXNzIFZhbmlsbGFUaWx0IHtcclxuICAgICAgY29uc3RydWN0b3IoZWxlbWVudCwgc2V0dGluZ3MgPSB7fSkge1xyXG4gICAgICAgIGlmICghKGVsZW1lbnQgaW5zdGFuY2VvZiBOb2RlKSkge1xyXG4gICAgICAgICAgdGhyb3cgKFwiQ2FuJ3QgaW5pdGlhbGl6ZSBWYW5pbGxhVGlsdCBiZWNhdXNlIFwiICsgZWxlbWVudCArIFwiIGlzIG5vdCBhIE5vZGUuXCIpO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIHRoaXMud2lkdGggPSBudWxsO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gbnVsbDtcclxuICAgICAgICB0aGlzLmNsaWVudFdpZHRoID0gbnVsbDtcclxuICAgICAgICB0aGlzLmNsaWVudEhlaWdodCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5sZWZ0ID0gbnVsbDtcclxuICAgICAgICB0aGlzLnRvcCA9IG51bGw7XHJcbiAgICBcclxuICAgICAgICAvLyBmb3IgR3lyb3Njb3BlIHNhbXBsaW5nXHJcbiAgICAgICAgdGhpcy5nYW1tYXplcm8gPSBudWxsO1xyXG4gICAgICAgIHRoaXMuYmV0YXplcm8gPSBudWxsO1xyXG4gICAgICAgIHRoaXMubGFzdGdhbW1hemVybyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5sYXN0YmV0YXplcm8gPSBudWxsO1xyXG4gICAgXHJcbiAgICAgICAgdGhpcy50cmFuc2l0aW9uVGltZW91dCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy51cGRhdGVDYWxsID0gbnVsbDtcclxuICAgICAgICB0aGlzLmV2ZW50ID0gbnVsbDtcclxuICAgIFxyXG4gICAgICAgIHRoaXMudXBkYXRlQmluZCA9IHRoaXMudXBkYXRlLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5yZXNldEJpbmQgPSB0aGlzLnJlc2V0LmJpbmQodGhpcyk7XHJcbiAgICBcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSB0aGlzLmV4dGVuZFNldHRpbmdzKHNldHRpbmdzKTtcclxuICAgIFxyXG4gICAgICAgIHRoaXMucmV2ZXJzZSA9IHRoaXMuc2V0dGluZ3MucmV2ZXJzZSA/IC0xIDogMTtcclxuICAgICAgICB0aGlzLmdsYXJlID0gVmFuaWxsYVRpbHQuaXNTZXR0aW5nVHJ1ZSh0aGlzLnNldHRpbmdzLmdsYXJlKTtcclxuICAgICAgICB0aGlzLmdsYXJlUHJlcmVuZGVyID0gVmFuaWxsYVRpbHQuaXNTZXR0aW5nVHJ1ZSh0aGlzLnNldHRpbmdzW1wiZ2xhcmUtcHJlcmVuZGVyXCJdKTtcclxuICAgICAgICB0aGlzLmZ1bGxQYWdlTGlzdGVuaW5nID0gVmFuaWxsYVRpbHQuaXNTZXR0aW5nVHJ1ZSh0aGlzLnNldHRpbmdzW1wiZnVsbC1wYWdlLWxpc3RlbmluZ1wiXSk7XHJcbiAgICAgICAgdGhpcy5neXJvc2NvcGUgPSBWYW5pbGxhVGlsdC5pc1NldHRpbmdUcnVlKHRoaXMuc2V0dGluZ3MuZ3lyb3Njb3BlKTtcclxuICAgICAgICB0aGlzLmd5cm9zY29wZVNhbXBsZXMgPSB0aGlzLnNldHRpbmdzLmd5cm9zY29wZVNhbXBsZXM7XHJcbiAgICBcclxuICAgICAgICB0aGlzLmVsZW1lbnRMaXN0ZW5lciA9IHRoaXMuZ2V0RWxlbWVudExpc3RlbmVyKCk7XHJcbiAgICBcclxuICAgICAgICBpZiAodGhpcy5nbGFyZSkge1xyXG4gICAgICAgICAgdGhpcy5wcmVwYXJlR2xhcmUoKTtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBpZiAodGhpcy5mdWxsUGFnZUxpc3RlbmluZykge1xyXG4gICAgICAgICAgdGhpcy51cGRhdGVDbGllbnRTaXplKCk7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlSW5pdGlhbFBvc2l0aW9uKCk7XHJcbiAgICAgIH1cclxuICAgIFxyXG4gICAgICBzdGF0aWMgaXNTZXR0aW5nVHJ1ZShzZXR0aW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIHNldHRpbmcgPT09IFwiXCIgfHwgc2V0dGluZyA9PT0gdHJ1ZSB8fCBzZXR0aW5nID09PSAxO1xyXG4gICAgICB9XHJcbiAgICBcclxuICAgICAgLyoqXHJcbiAgICAgICAqIE1ldGhvZCByZXR1cm5zIGVsZW1lbnQgd2hhdCB3aWxsIGJlIGxpc3RlbiBtb3VzZSBldmVudHNcclxuICAgICAgICogQHJldHVybiB7Tm9kZX1cclxuICAgICAgICovXHJcbiAgICAgIGdldEVsZW1lbnRMaXN0ZW5lcigpIHtcclxuICAgICAgICBpZiAodGhpcy5mdWxsUGFnZUxpc3RlbmluZykge1xyXG4gICAgICAgICAgcmV0dXJuIHdpbmRvdy5kb2N1bWVudDtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuc2V0dGluZ3NbXCJtb3VzZS1ldmVudC1lbGVtZW50XCJdID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICBjb25zdCBtb3VzZUV2ZW50RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5zZXR0aW5nc1tcIm1vdXNlLWV2ZW50LWVsZW1lbnRcIl0pO1xyXG4gICAgXHJcbiAgICAgICAgICBpZiAobW91c2VFdmVudEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1vdXNlRXZlbnRFbGVtZW50O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzW1wibW91c2UtZXZlbnQtZWxlbWVudFwiXSBpbnN0YW5jZW9mIE5vZGUpIHtcclxuICAgICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzW1wibW91c2UtZXZlbnQtZWxlbWVudFwiXTtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50O1xyXG4gICAgICB9XHJcbiAgICBcclxuICAgICAgLyoqXHJcbiAgICAgICAqIE1ldGhvZCBzZXQgbGlzdGVuIG1ldGhvZHMgZm9yIHRoaXMuZWxlbWVudExpc3RlbmVyXHJcbiAgICAgICAqIEByZXR1cm4ge05vZGV9XHJcbiAgICAgICAqL1xyXG4gICAgICBhZGRFdmVudExpc3RlbmVycygpIHtcclxuICAgICAgICB0aGlzLm9uTW91c2VFbnRlckJpbmQgPSB0aGlzLm9uTW91c2VFbnRlci5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMub25Nb3VzZU1vdmVCaW5kID0gdGhpcy5vbk1vdXNlTW92ZS5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMub25Nb3VzZUxlYXZlQmluZCA9IHRoaXMub25Nb3VzZUxlYXZlLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5vbldpbmRvd1Jlc2l6ZUJpbmQgPSB0aGlzLm9uV2luZG93UmVzaXplLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5vbkRldmljZU9yaWVudGF0aW9uQmluZCA9IHRoaXMub25EZXZpY2VPcmllbnRhdGlvbi5iaW5kKHRoaXMpO1xyXG4gICAgXHJcbiAgICAgICAgdGhpcy5lbGVtZW50TGlzdGVuZXIuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwgdGhpcy5vbk1vdXNlRW50ZXJCaW5kKTtcclxuICAgICAgICB0aGlzLmVsZW1lbnRMaXN0ZW5lci5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCB0aGlzLm9uTW91c2VMZWF2ZUJpbmQpO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudExpc3RlbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5vbk1vdXNlTW92ZUJpbmQpO1xyXG4gICAgXHJcbiAgICAgICAgaWYgKHRoaXMuZ2xhcmUgfHwgdGhpcy5mdWxsUGFnZUxpc3RlbmluZykge1xyXG4gICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5vbldpbmRvd1Jlc2l6ZUJpbmQpO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIGlmICh0aGlzLmd5cm9zY29wZSkge1xyXG4gICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJkZXZpY2VvcmllbnRhdGlvblwiLCB0aGlzLm9uRGV2aWNlT3JpZW50YXRpb25CaW5kKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIFxyXG4gICAgICAvKipcclxuICAgICAgICogTWV0aG9kIHJlbW92ZSBldmVudCBsaXN0ZW5lcnMgZnJvbSBjdXJyZW50IHRoaXMuZWxlbWVudExpc3RlbmVyXHJcbiAgICAgICAqL1xyXG4gICAgICByZW1vdmVFdmVudExpc3RlbmVycygpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnRMaXN0ZW5lci5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLCB0aGlzLm9uTW91c2VFbnRlckJpbmQpO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudExpc3RlbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsIHRoaXMub25Nb3VzZUxlYXZlQmluZCk7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50TGlzdGVuZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLm9uTW91c2VNb3ZlQmluZCk7XHJcbiAgICBcclxuICAgICAgICBpZiAodGhpcy5neXJvc2NvcGUpIHtcclxuICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiZGV2aWNlb3JpZW50YXRpb25cIiwgdGhpcy5vbkRldmljZU9yaWVudGF0aW9uQmluZCk7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgaWYgKHRoaXMuZ2xhcmUgfHwgdGhpcy5mdWxsUGFnZUxpc3RlbmluZykge1xyXG4gICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5vbldpbmRvd1Jlc2l6ZUJpbmQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgXHJcbiAgICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudHJhbnNpdGlvblRpbWVvdXQpO1xyXG4gICAgICAgIGlmICh0aGlzLnVwZGF0ZUNhbGwgIT09IG51bGwpIHtcclxuICAgICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMudXBkYXRlQ2FsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgdGhpcy5yZXNldCgpO1xyXG4gICAgXHJcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC52YW5pbGxhVGlsdCA9IG51bGw7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMuZWxlbWVudC52YW5pbGxhVGlsdDtcclxuICAgIFxyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IG51bGw7XHJcbiAgICAgIH1cclxuICAgIFxyXG4gICAgICBvbkRldmljZU9yaWVudGF0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKGV2ZW50LmdhbW1hID09PSBudWxsIHx8IGV2ZW50LmJldGEgPT09IG51bGwpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnRQb3NpdGlvbigpO1xyXG4gICAgXHJcbiAgICAgICAgaWYgKHRoaXMuZ3lyb3Njb3BlU2FtcGxlcyA+IDApIHtcclxuICAgICAgICAgIHRoaXMubGFzdGdhbW1hemVybyA9IHRoaXMuZ2FtbWF6ZXJvO1xyXG4gICAgICAgICAgdGhpcy5sYXN0YmV0YXplcm8gPSB0aGlzLmJldGF6ZXJvO1xyXG4gICAgXHJcbiAgICAgICAgICBpZiAodGhpcy5nYW1tYXplcm8gPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5nYW1tYXplcm8gPSBldmVudC5nYW1tYTtcclxuICAgICAgICAgICAgdGhpcy5iZXRhemVybyA9IGV2ZW50LmJldGE7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmdhbW1hemVybyA9IChldmVudC5nYW1tYSArIHRoaXMubGFzdGdhbW1hemVybykgLyAyO1xyXG4gICAgICAgICAgICB0aGlzLmJldGF6ZXJvID0gKGV2ZW50LmJldGEgKyB0aGlzLmxhc3RiZXRhemVybykgLyAyO1xyXG4gICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICB0aGlzLmd5cm9zY29wZVNhbXBsZXMgLT0gMTtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBjb25zdCB0b3RhbEFuZ2xlWCA9IHRoaXMuc2V0dGluZ3MuZ3lyb3Njb3BlTWF4QW5nbGVYIC0gdGhpcy5zZXR0aW5ncy5neXJvc2NvcGVNaW5BbmdsZVg7XHJcbiAgICAgICAgY29uc3QgdG90YWxBbmdsZVkgPSB0aGlzLnNldHRpbmdzLmd5cm9zY29wZU1heEFuZ2xlWSAtIHRoaXMuc2V0dGluZ3MuZ3lyb3Njb3BlTWluQW5nbGVZO1xyXG4gICAgXHJcbiAgICAgICAgY29uc3QgZGVncmVlc1BlclBpeGVsWCA9IHRvdGFsQW5nbGVYIC8gdGhpcy53aWR0aDtcclxuICAgICAgICBjb25zdCBkZWdyZWVzUGVyUGl4ZWxZID0gdG90YWxBbmdsZVkgLyB0aGlzLmhlaWdodDtcclxuICAgIFxyXG4gICAgICAgIGNvbnN0IGFuZ2xlWCA9IGV2ZW50LmdhbW1hIC0gKHRoaXMuc2V0dGluZ3MuZ3lyb3Njb3BlTWluQW5nbGVYICsgdGhpcy5nYW1tYXplcm8pO1xyXG4gICAgICAgIGNvbnN0IGFuZ2xlWSA9IGV2ZW50LmJldGEgLSAodGhpcy5zZXR0aW5ncy5neXJvc2NvcGVNaW5BbmdsZVkgKyB0aGlzLmJldGF6ZXJvKTtcclxuICAgIFxyXG4gICAgICAgIGNvbnN0IHBvc1ggPSBhbmdsZVggLyBkZWdyZWVzUGVyUGl4ZWxYO1xyXG4gICAgICAgIGNvbnN0IHBvc1kgPSBhbmdsZVkgLyBkZWdyZWVzUGVyUGl4ZWxZO1xyXG4gICAgXHJcbiAgICAgICAgaWYgKHRoaXMudXBkYXRlQ2FsbCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy51cGRhdGVDYWxsKTtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICB0aGlzLmV2ZW50ID0ge1xyXG4gICAgICAgICAgY2xpZW50WDogcG9zWCArIHRoaXMubGVmdCxcclxuICAgICAgICAgIGNsaWVudFk6IHBvc1kgKyB0aGlzLnRvcCxcclxuICAgICAgICB9O1xyXG4gICAgXHJcbiAgICAgICAgdGhpcy51cGRhdGVDYWxsID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMudXBkYXRlQmluZCk7XHJcbiAgICAgIH1cclxuICAgIFxyXG4gICAgICBvbk1vdXNlRW50ZXIoKSB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50UG9zaXRpb24oKTtcclxuICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUud2lsbENoYW5nZSA9IFwidHJhbnNmb3JtXCI7XHJcbiAgICAgICAgdGhpcy5zZXRUcmFuc2l0aW9uKCk7XHJcbiAgICAgIH1cclxuICAgIFxyXG4gICAgICBvbk1vdXNlTW92ZShldmVudCkge1xyXG4gICAgICAgIGlmICh0aGlzLnVwZGF0ZUNhbGwgIT09IG51bGwpIHtcclxuICAgICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMudXBkYXRlQ2FsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgdGhpcy5ldmVudCA9IGV2ZW50O1xyXG4gICAgICAgIHRoaXMudXBkYXRlQ2FsbCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnVwZGF0ZUJpbmQpO1xyXG4gICAgICB9XHJcbiAgICBcclxuICAgICAgb25Nb3VzZUxlYXZlKCkge1xyXG4gICAgICAgIHRoaXMuc2V0VHJhbnNpdGlvbigpO1xyXG4gICAgXHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MucmVzZXQpIHtcclxuICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnJlc2V0QmluZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICBcclxuICAgICAgcmVzZXQoKSB7XHJcbiAgICAgICAgdGhpcy5ldmVudCA9IHtcclxuICAgICAgICAgIGNsaWVudFg6IHRoaXMubGVmdCArIHRoaXMud2lkdGggLyAyLFxyXG4gICAgICAgICAgY2xpZW50WTogdGhpcy50b3AgKyB0aGlzLmhlaWdodCAvIDJcclxuICAgICAgICB9O1xyXG4gICAgXHJcbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudCAmJiB0aGlzLmVsZW1lbnQuc3R5bGUpIHtcclxuICAgICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSBgcGVyc3BlY3RpdmUoJHt0aGlzLnNldHRpbmdzLnBlcnNwZWN0aXZlfXB4KSBgICtcclxuICAgICAgICAgICAgYHJvdGF0ZVgoMGRlZykgYCArXHJcbiAgICAgICAgICAgIGByb3RhdGVZKDBkZWcpIGAgK1xyXG4gICAgICAgICAgICBgc2NhbGUzZCgxLCAxLCAxKWA7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgdGhpcy5yZXNldEdsYXJlKCk7XHJcbiAgICAgIH1cclxuICAgIFxyXG4gICAgICByZXNldEdsYXJlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmdsYXJlKSB7XHJcbiAgICAgICAgICB0aGlzLmdsYXJlRWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSBcInJvdGF0ZSgxODBkZWcpIHRyYW5zbGF0ZSgtNTAlLCAtNTAlKVwiO1xyXG4gICAgICAgICAgdGhpcy5nbGFyZUVsZW1lbnQuc3R5bGUub3BhY2l0eSA9IFwiMFwiO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgXHJcbiAgICAgIHVwZGF0ZUluaXRpYWxQb3NpdGlvbigpIHtcclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5zdGFydFggPT09IDAgJiYgdGhpcy5zZXR0aW5ncy5zdGFydFkgPT09IDApIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICB0aGlzLm9uTW91c2VFbnRlcigpO1xyXG4gICAgXHJcbiAgICAgICAgaWYgKHRoaXMuZnVsbFBhZ2VMaXN0ZW5pbmcpIHtcclxuICAgICAgICAgIHRoaXMuZXZlbnQgPSB7XHJcbiAgICAgICAgICAgIGNsaWVudFg6ICh0aGlzLnNldHRpbmdzLnN0YXJ0WCArIHRoaXMuc2V0dGluZ3MubWF4KSAvICgyICogdGhpcy5zZXR0aW5ncy5tYXgpICogdGhpcy5jbGllbnRXaWR0aCxcclxuICAgICAgICAgICAgY2xpZW50WTogKHRoaXMuc2V0dGluZ3Muc3RhcnRZICsgdGhpcy5zZXR0aW5ncy5tYXgpIC8gKDIgKiB0aGlzLnNldHRpbmdzLm1heCkgKiB0aGlzLmNsaWVudEhlaWdodFxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5ldmVudCA9IHtcclxuICAgICAgICAgICAgY2xpZW50WDogdGhpcy5sZWZ0ICsgKCh0aGlzLnNldHRpbmdzLnN0YXJ0WCArIHRoaXMuc2V0dGluZ3MubWF4KSAvICgyICogdGhpcy5zZXR0aW5ncy5tYXgpICogdGhpcy53aWR0aCksXHJcbiAgICAgICAgICAgIGNsaWVudFk6IHRoaXMudG9wICsgKCh0aGlzLnNldHRpbmdzLnN0YXJ0WSArIHRoaXMuc2V0dGluZ3MubWF4KSAvICgyICogdGhpcy5zZXR0aW5ncy5tYXgpICogdGhpcy5oZWlnaHQpXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgXHJcbiAgICAgICAgbGV0IGJhY2t1cFNjYWxlID0gdGhpcy5zZXR0aW5ncy5zY2FsZTtcclxuICAgICAgICB0aGlzLnNldHRpbmdzLnNjYWxlID0gMTtcclxuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3Muc2NhbGUgPSBiYWNrdXBTY2FsZTtcclxuICAgICAgICB0aGlzLnJlc2V0R2xhcmUoKTtcclxuICAgICAgfVxyXG4gICAgXHJcbiAgICAgIGdldFZhbHVlcygpIHtcclxuICAgICAgICBsZXQgeCwgeTtcclxuICAgIFxyXG4gICAgICAgIGlmICh0aGlzLmZ1bGxQYWdlTGlzdGVuaW5nKSB7XHJcbiAgICAgICAgICB4ID0gdGhpcy5ldmVudC5jbGllbnRYIC8gdGhpcy5jbGllbnRXaWR0aDtcclxuICAgICAgICAgIHkgPSB0aGlzLmV2ZW50LmNsaWVudFkgLyB0aGlzLmNsaWVudEhlaWdodDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgeCA9ICh0aGlzLmV2ZW50LmNsaWVudFggLSB0aGlzLmxlZnQpIC8gdGhpcy53aWR0aDtcclxuICAgICAgICAgIHkgPSAodGhpcy5ldmVudC5jbGllbnRZIC0gdGhpcy50b3ApIC8gdGhpcy5oZWlnaHQ7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgeCA9IE1hdGgubWluKE1hdGgubWF4KHgsIDApLCAxKTtcclxuICAgICAgICB5ID0gTWF0aC5taW4oTWF0aC5tYXgoeSwgMCksIDEpO1xyXG4gICAgXHJcbiAgICAgICAgbGV0IHRpbHRYID0gKHRoaXMucmV2ZXJzZSAqICh0aGlzLnNldHRpbmdzLm1heCAtIHggKiB0aGlzLnNldHRpbmdzLm1heCAqIDIpKS50b0ZpeGVkKDIpO1xyXG4gICAgICAgIGxldCB0aWx0WSA9ICh0aGlzLnJldmVyc2UgKiAoeSAqIHRoaXMuc2V0dGluZ3MubWF4ICogMiAtIHRoaXMuc2V0dGluZ3MubWF4KSkudG9GaXhlZCgyKTtcclxuICAgICAgICBsZXQgYW5nbGUgPSBNYXRoLmF0YW4yKHRoaXMuZXZlbnQuY2xpZW50WCAtICh0aGlzLmxlZnQgKyB0aGlzLndpZHRoIC8gMiksIC0odGhpcy5ldmVudC5jbGllbnRZIC0gKHRoaXMudG9wICsgdGhpcy5oZWlnaHQgLyAyKSkpICogKDE4MCAvIE1hdGguUEkpO1xyXG4gICAgXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHRpbHRYOiB0aWx0WCxcclxuICAgICAgICAgIHRpbHRZOiB0aWx0WSxcclxuICAgICAgICAgIHBlcmNlbnRhZ2VYOiB4ICogMTAwLFxyXG4gICAgICAgICAgcGVyY2VudGFnZVk6IHkgKiAxMDAsXHJcbiAgICAgICAgICBhbmdsZTogYW5nbGVcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICBcclxuICAgICAgdXBkYXRlRWxlbWVudFBvc2l0aW9uKCkge1xyXG4gICAgICAgIGxldCByZWN0ID0gdGhpcy5lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgXHJcbiAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMuZWxlbWVudC5vZmZzZXRXaWR0aDtcclxuICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMuZWxlbWVudC5vZmZzZXRIZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5sZWZ0ID0gcmVjdC5sZWZ0O1xyXG4gICAgICAgIHRoaXMudG9wID0gcmVjdC50b3A7XHJcbiAgICAgIH1cclxuICAgIFxyXG4gICAgICB1cGRhdGUoKSB7XHJcbiAgICAgICAgbGV0IHZhbHVlcyA9IHRoaXMuZ2V0VmFsdWVzKCk7XHJcbiAgICBcclxuICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gXCJwZXJzcGVjdGl2ZShcIiArIHRoaXMuc2V0dGluZ3MucGVyc3BlY3RpdmUgKyBcInB4KSBcIiArXHJcbiAgICAgICAgICBcInJvdGF0ZVgoXCIgKyAodGhpcy5zZXR0aW5ncy5heGlzID09PSBcInhcIiA/IDAgOiB2YWx1ZXMudGlsdFkpICsgXCJkZWcpIFwiICtcclxuICAgICAgICAgIFwicm90YXRlWShcIiArICh0aGlzLnNldHRpbmdzLmF4aXMgPT09IFwieVwiID8gMCA6IHZhbHVlcy50aWx0WCkgKyBcImRlZykgXCIgK1xyXG4gICAgICAgICAgXCJzY2FsZTNkKFwiICsgdGhpcy5zZXR0aW5ncy5zY2FsZSArIFwiLCBcIiArIHRoaXMuc2V0dGluZ3Muc2NhbGUgKyBcIiwgXCIgKyB0aGlzLnNldHRpbmdzLnNjYWxlICsgXCIpXCI7XHJcbiAgICBcclxuICAgICAgICBpZiAodGhpcy5nbGFyZSkge1xyXG4gICAgICAgICAgdGhpcy5nbGFyZUVsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gYHJvdGF0ZSgke3ZhbHVlcy5hbmdsZX1kZWcpIHRyYW5zbGF0ZSgtNTAlLCAtNTAlKWA7XHJcbiAgICAgICAgICB0aGlzLmdsYXJlRWxlbWVudC5zdHlsZS5vcGFjaXR5ID0gYCR7dmFsdWVzLnBlcmNlbnRhZ2VZICogdGhpcy5zZXR0aW5nc1tcIm1heC1nbGFyZVwiXSAvIDEwMH1gO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIHRoaXMuZWxlbWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcInRpbHRDaGFuZ2VcIiwge1xyXG4gICAgICAgICAgXCJkZXRhaWxcIjogdmFsdWVzXHJcbiAgICAgICAgfSkpO1xyXG4gICAgXHJcbiAgICAgICAgdGhpcy51cGRhdGVDYWxsID0gbnVsbDtcclxuICAgICAgfVxyXG4gICAgXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBBcHBlbmRzIHRoZSBnbGFyZSBlbGVtZW50IChpZiBnbGFyZVByZXJlbmRlciBlcXVhbHMgZmFsc2UpXHJcbiAgICAgICAqIGFuZCBzZXRzIHRoZSBkZWZhdWx0IHN0eWxlXHJcbiAgICAgICAqL1xyXG4gICAgICBwcmVwYXJlR2xhcmUoKSB7XHJcbiAgICAgICAgLy8gSWYgb3B0aW9uIHByZS1yZW5kZXIgaXMgZW5hYmxlZCB3ZSBhc3N1bWUgYWxsIGh0bWwvY3NzIGlzIHByZXNlbnQgZm9yIGFuIG9wdGltYWwgZ2xhcmUgZWZmZWN0LlxyXG4gICAgICAgIGlmICghdGhpcy5nbGFyZVByZXJlbmRlcikge1xyXG4gICAgICAgICAgLy8gQ3JlYXRlIGdsYXJlIGVsZW1lbnRcclxuICAgICAgICAgIGNvbnN0IGpzVGlsdEdsYXJlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICAgIGpzVGlsdEdsYXJlLmNsYXNzTGlzdC5hZGQoXCJqcy10aWx0LWdsYXJlXCIpO1xyXG4gICAgXHJcbiAgICAgICAgICBjb25zdCBqc1RpbHRHbGFyZUlubmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICAgIGpzVGlsdEdsYXJlSW5uZXIuY2xhc3NMaXN0LmFkZChcImpzLXRpbHQtZ2xhcmUtaW5uZXJcIik7XHJcbiAgICBcclxuICAgICAgICAgIGpzVGlsdEdsYXJlLmFwcGVuZENoaWxkKGpzVGlsdEdsYXJlSW5uZXIpO1xyXG4gICAgICAgICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKGpzVGlsdEdsYXJlKTtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICB0aGlzLmdsYXJlRWxlbWVudFdyYXBwZXIgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5qcy10aWx0LWdsYXJlXCIpO1xyXG4gICAgICAgIHRoaXMuZ2xhcmVFbGVtZW50ID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuanMtdGlsdC1nbGFyZS1pbm5lclwiKTtcclxuICAgIFxyXG4gICAgICAgIGlmICh0aGlzLmdsYXJlUHJlcmVuZGVyKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLmdsYXJlRWxlbWVudFdyYXBwZXIuc3R5bGUsIHtcclxuICAgICAgICAgIFwicG9zaXRpb25cIjogXCJhYnNvbHV0ZVwiLFxyXG4gICAgICAgICAgXCJ0b3BcIjogXCIwXCIsXHJcbiAgICAgICAgICBcImxlZnRcIjogXCIwXCIsXHJcbiAgICAgICAgICBcIndpZHRoXCI6IFwiMTAwJVwiLFxyXG4gICAgICAgICAgXCJoZWlnaHRcIjogXCIxMDAlXCIsXHJcbiAgICAgICAgICBcIm92ZXJmbG93XCI6IFwiaGlkZGVuXCIsXHJcbiAgICAgICAgICBcInBvaW50ZXItZXZlbnRzXCI6IFwibm9uZVwiXHJcbiAgICAgICAgfSk7XHJcbiAgICBcclxuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMuZ2xhcmVFbGVtZW50LnN0eWxlLCB7XHJcbiAgICAgICAgICBcInBvc2l0aW9uXCI6IFwiYWJzb2x1dGVcIixcclxuICAgICAgICAgIFwidG9wXCI6IFwiNTAlXCIsXHJcbiAgICAgICAgICBcImxlZnRcIjogXCI1MCVcIixcclxuICAgICAgICAgIFwicG9pbnRlci1ldmVudHNcIjogXCJub25lXCIsXHJcbiAgICAgICAgICBcImJhY2tncm91bmQtaW1hZ2VcIjogYGxpbmVhci1ncmFkaWVudCgwZGVnLCByZ2JhKDI1NSwyNTUsMjU1LDApIDAlLCByZ2JhKDI1NSwyNTUsMjU1LDEpIDEwMCUpYCxcclxuICAgICAgICAgIFwid2lkdGhcIjogYCR7dGhpcy5lbGVtZW50Lm9mZnNldFdpZHRoICogMn1weGAsXHJcbiAgICAgICAgICBcImhlaWdodFwiOiBgJHt0aGlzLmVsZW1lbnQub2Zmc2V0V2lkdGggKiAyfXB4YCxcclxuICAgICAgICAgIFwidHJhbnNmb3JtXCI6IFwicm90YXRlKDE4MGRlZykgdHJhbnNsYXRlKC01MCUsIC01MCUpXCIsXHJcbiAgICAgICAgICBcInRyYW5zZm9ybS1vcmlnaW5cIjogXCIwJSAwJVwiLFxyXG4gICAgICAgICAgXCJvcGFjaXR5XCI6IFwiMFwiLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICBcclxuICAgICAgdXBkYXRlR2xhcmVTaXplKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmdsYXJlKSB7XHJcbiAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMuZ2xhcmVFbGVtZW50LnN0eWxlLCB7XHJcbiAgICAgICAgICAgIFwid2lkdGhcIjogYCR7dGhpcy5lbGVtZW50Lm9mZnNldFdpZHRoICogMn1gLFxyXG4gICAgICAgICAgICBcImhlaWdodFwiOiBgJHt0aGlzLmVsZW1lbnQub2Zmc2V0V2lkdGggKiAyfWAsXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIFxyXG4gICAgICB1cGRhdGVDbGllbnRTaXplKCkge1xyXG4gICAgICAgIHRoaXMuY2xpZW50V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aFxyXG4gICAgICAgICAgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoXHJcbiAgICAgICAgICB8fCBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoO1xyXG4gICAgXHJcbiAgICAgICAgdGhpcy5jbGllbnRIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHRcclxuICAgICAgICAgIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHRcclxuICAgICAgICAgIHx8IGRvY3VtZW50LmJvZHkuY2xpZW50SGVpZ2h0O1xyXG4gICAgICB9XHJcbiAgICBcclxuICAgICAgb25XaW5kb3dSZXNpemUoKSB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVHbGFyZVNpemUoKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZUNsaWVudFNpemUoKTtcclxuICAgICAgfVxyXG4gICAgXHJcbiAgICAgIHNldFRyYW5zaXRpb24oKSB7XHJcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudHJhbnNpdGlvblRpbWVvdXQpO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS50cmFuc2l0aW9uID0gdGhpcy5zZXR0aW5ncy5zcGVlZCArIFwibXMgXCIgKyB0aGlzLnNldHRpbmdzLmVhc2luZztcclxuICAgICAgICBpZiAodGhpcy5nbGFyZSkgdGhpcy5nbGFyZUVsZW1lbnQuc3R5bGUudHJhbnNpdGlvbiA9IGBvcGFjaXR5ICR7dGhpcy5zZXR0aW5ncy5zcGVlZH1tcyAke3RoaXMuc2V0dGluZ3MuZWFzaW5nfWA7XHJcbiAgICBcclxuICAgICAgICB0aGlzLnRyYW5zaXRpb25UaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUudHJhbnNpdGlvbiA9IFwiXCI7XHJcbiAgICAgICAgICBpZiAodGhpcy5nbGFyZSkge1xyXG4gICAgICAgICAgICB0aGlzLmdsYXJlRWxlbWVudC5zdHlsZS50cmFuc2l0aW9uID0gXCJcIjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9LCB0aGlzLnNldHRpbmdzLnNwZWVkKTtcclxuICAgIFxyXG4gICAgICB9XHJcbiAgICBcclxuICAgICAgLyoqXHJcbiAgICAgICAqIE1ldGhvZCByZXR1cm4gcGF0Y2hlZCBzZXR0aW5ncyBvZiBpbnN0YW5jZVxyXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHNldHRpbmdzLnJldmVyc2UgLSByZXZlcnNlIHRoZSB0aWx0IGRpcmVjdGlvblxyXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gc2V0dGluZ3MubWF4IC0gbWF4IHRpbHQgcm90YXRpb24gKGRlZ3JlZXMpXHJcbiAgICAgICAqIEBwYXJhbSB7c3RhcnRYfSBzZXR0aW5ncy5zdGFydFggLSB0aGUgc3RhcnRpbmcgdGlsdCBvbiB0aGUgWCBheGlzLCBpbiBkZWdyZWVzLiBEZWZhdWx0OiAwXHJcbiAgICAgICAqIEBwYXJhbSB7c3RhcnRZfSBzZXR0aW5ncy5zdGFydFkgLSB0aGUgc3RhcnRpbmcgdGlsdCBvbiB0aGUgWSBheGlzLCBpbiBkZWdyZWVzLiBEZWZhdWx0OiAwXHJcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzZXR0aW5ncy5wZXJzcGVjdGl2ZSAtIFRyYW5zZm9ybSBwZXJzcGVjdGl2ZSwgdGhlIGxvd2VyIHRoZSBtb3JlIGV4dHJlbWUgdGhlIHRpbHQgZ2V0c1xyXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2V0dGluZ3MuZWFzaW5nIC0gRWFzaW5nIG9uIGVudGVyL2V4aXRcclxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHNldHRpbmdzLnNjYWxlIC0gMiA9IDIwMCUsIDEuNSA9IDE1MCUsIGV0Yy4uXHJcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzZXR0aW5ncy5zcGVlZCAtIFNwZWVkIG9mIHRoZSBlbnRlci9leGl0IHRyYW5zaXRpb25cclxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBzZXR0aW5ncy50cmFuc2l0aW9uIC0gU2V0IGEgdHJhbnNpdGlvbiBvbiBlbnRlci9leGl0XHJcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bGx9IHNldHRpbmdzLmF4aXMgLSBXaGF0IGF4aXMgc2hvdWxkIGJlIGRpc2FibGVkLiBDYW4gYmUgWCBvciBZXHJcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gc2V0dGluZ3MuZ2xhcmUgLSBXaGF0IGF4aXMgc2hvdWxkIGJlIGRpc2FibGVkLiBDYW4gYmUgWCBvciBZXHJcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzZXR0aW5ncy5tYXgtZ2xhcmUgLSB0aGUgbWF4aW11bSBcImdsYXJlXCIgb3BhY2l0eSAoMSA9IDEwMCUsIDAuNSA9IDUwJSlcclxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBzZXR0aW5ncy5nbGFyZS1wcmVyZW5kZXIgLSBmYWxzZSA9IFZhbmlsbGFUaWx0IGNyZWF0ZXMgdGhlIGdsYXJlIGVsZW1lbnRzIGZvciB5b3UsIG90aGVyd2lzZVxyXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHNldHRpbmdzLmZ1bGwtcGFnZS1saXN0ZW5pbmcgLSBJZiB0cnVlLCBwYXJhbGxheCBlZmZlY3Qgd2lsbCBsaXN0ZW4gdG8gbW91c2UgbW92ZSBldmVudHMgb24gdGhlIHdob2xlIGRvY3VtZW50LCBub3Qgb25seSB0aGUgc2VsZWN0ZWQgZWxlbWVudFxyXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHNldHRpbmdzLm1vdXNlLWV2ZW50LWVsZW1lbnQgLSBTdHJpbmcgc2VsZWN0b3Igb3IgbGluayB0byBIVE1MLWVsZW1lbnQgd2hhdCB3aWxsIGJlIGxpc3RlbiBtb3VzZSBldmVudHNcclxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBzZXR0aW5ncy5yZXNldCAtIGZhbHNlID0gSWYgdGhlIHRpbHQgZWZmZWN0IGhhcyB0byBiZSByZXNldCBvbiBleGl0XHJcbiAgICAgICAqIEBwYXJhbSB7Z3lyb3Njb3BlfSBzZXR0aW5ncy5neXJvc2NvcGUgLSBFbmFibGUgdGlsdGluZyBieSBkZXZpY2VvcmllbnRhdGlvbiBldmVudHNcclxuICAgICAgICogQHBhcmFtIHtneXJvc2NvcGVTZW5zaXRpdml0eX0gc2V0dGluZ3MuZ3lyb3Njb3BlU2Vuc2l0aXZpdHkgLSBCZXR3ZWVuIDAgYW5kIDEgLSBUaGUgYW5nbGUgYXQgd2hpY2ggbWF4IHRpbHQgcG9zaXRpb24gaXMgcmVhY2hlZC4gMSA9IDkwZGVnLCAwLjUgPSA0NWRlZywgZXRjLi5cclxuICAgICAgICogQHBhcmFtIHtneXJvc2NvcGVTYW1wbGVzfSBzZXR0aW5ncy5neXJvc2NvcGVTYW1wbGVzIC0gSG93IG1hbnkgZ3lyb3Njb3BlIG1vdmVzIHRvIGRlY2lkZSB0aGUgc3RhcnRpbmcgcG9zaXRpb24uXHJcbiAgICAgICAqL1xyXG4gICAgICBleHRlbmRTZXR0aW5ncyhzZXR0aW5ncykge1xyXG4gICAgICAgIGxldCBkZWZhdWx0U2V0dGluZ3MgPSB7XHJcbiAgICAgICAgICByZXZlcnNlOiBmYWxzZSxcclxuICAgICAgICAgIG1heDogMTUsXHJcbiAgICAgICAgICBzdGFydFg6IDAsXHJcbiAgICAgICAgICBzdGFydFk6IDAsXHJcbiAgICAgICAgICBwZXJzcGVjdGl2ZTogMTAwMCxcclxuICAgICAgICAgIGVhc2luZzogXCJjdWJpYy1iZXppZXIoLjAzLC45OCwuNTIsLjk5KVwiLFxyXG4gICAgICAgICAgc2NhbGU6IDEsXHJcbiAgICAgICAgICBzcGVlZDogMzAwLFxyXG4gICAgICAgICAgdHJhbnNpdGlvbjogdHJ1ZSxcclxuICAgICAgICAgIGF4aXM6IG51bGwsXHJcbiAgICAgICAgICBnbGFyZTogZmFsc2UsXHJcbiAgICAgICAgICBcIm1heC1nbGFyZVwiOiAxLFxyXG4gICAgICAgICAgXCJnbGFyZS1wcmVyZW5kZXJcIjogZmFsc2UsXHJcbiAgICAgICAgICBcImZ1bGwtcGFnZS1saXN0ZW5pbmdcIjogZmFsc2UsXHJcbiAgICAgICAgICBcIm1vdXNlLWV2ZW50LWVsZW1lbnRcIjogbnVsbCxcclxuICAgICAgICAgIHJlc2V0OiB0cnVlLFxyXG4gICAgICAgICAgZ3lyb3Njb3BlOiB0cnVlLFxyXG4gICAgICAgICAgZ3lyb3Njb3BlTWluQW5nbGVYOiAtNDUsXHJcbiAgICAgICAgICBneXJvc2NvcGVNYXhBbmdsZVg6IDQ1LFxyXG4gICAgICAgICAgZ3lyb3Njb3BlTWluQW5nbGVZOiAtNDUsXHJcbiAgICAgICAgICBneXJvc2NvcGVNYXhBbmdsZVk6IDQ1LFxyXG4gICAgICAgICAgZ3lyb3Njb3BlU2FtcGxlczogMTBcclxuICAgICAgICB9O1xyXG4gICAgXHJcbiAgICAgICAgbGV0IG5ld1NldHRpbmdzID0ge307XHJcbiAgICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gZGVmYXVsdFNldHRpbmdzKSB7XHJcbiAgICAgICAgICBpZiAocHJvcGVydHkgaW4gc2V0dGluZ3MpIHtcclxuICAgICAgICAgICAgbmV3U2V0dGluZ3NbcHJvcGVydHldID0gc2V0dGluZ3NbcHJvcGVydHldO1xyXG4gICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmVsZW1lbnQuaGFzQXR0cmlidXRlKFwiZGF0YS10aWx0LVwiICsgcHJvcGVydHkpKSB7XHJcbiAgICAgICAgICAgIGxldCBhdHRyaWJ1dGUgPSB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS10aWx0LVwiICsgcHJvcGVydHkpO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgIG5ld1NldHRpbmdzW3Byb3BlcnR5XSA9IEpTT04ucGFyc2UoYXR0cmlidXRlKTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgIG5ld1NldHRpbmdzW3Byb3BlcnR5XSA9IGF0dHJpYnV0ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBuZXdTZXR0aW5nc1twcm9wZXJ0eV0gPSBkZWZhdWx0U2V0dGluZ3NbcHJvcGVydHldO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIHJldHVybiBuZXdTZXR0aW5ncztcclxuICAgICAgfVxyXG4gICAgXHJcbiAgICAgIHN0YXRpYyBpbml0KGVsZW1lbnRzLCBzZXR0aW5ncykge1xyXG4gICAgICAgIGlmIChlbGVtZW50cyBpbnN0YW5jZW9mIE5vZGUpIHtcclxuICAgICAgICAgIGVsZW1lbnRzID0gW2VsZW1lbnRzXTtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBpZiAoZWxlbWVudHMgaW5zdGFuY2VvZiBOb2RlTGlzdCkge1xyXG4gICAgICAgICAgZWxlbWVudHMgPSBbXS5zbGljZS5jYWxsKGVsZW1lbnRzKTtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBpZiAoIShlbGVtZW50cyBpbnN0YW5jZW9mIEFycmF5KSkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIGVsZW1lbnRzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcclxuICAgICAgICAgIGlmICghKFwidmFuaWxsYVRpbHRcIiBpbiBlbGVtZW50KSkge1xyXG4gICAgICAgICAgICBlbGVtZW50LnZhbmlsbGFUaWx0ID0gbmV3IFZhbmlsbGFUaWx0KGVsZW1lbnQsIHNldHRpbmdzKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgIC8qIGV4cG9zZSB0aGUgY2xhc3MgdG8gd2luZG93ICovXHJcbiAgICAgIHdpbmRvdy5WYW5pbGxhVGlsdCA9IFZhbmlsbGFUaWx0O1xyXG4gICAgXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBBdXRvIGxvYWRcclxuICAgICAgICovXHJcbiAgICAgIFZhbmlsbGFUaWx0LmluaXQoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLXRpbHRdXCIpKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIFZhbmlsbGFUaWx0O1xyXG4gICAgXHJcbiAgICB9KCkpO1xyXG4gICAgIiwiLy8gUm90YXRlIG9uIHNjcm9sbFxyXG5cclxud2luZG93Lm9uc2Nyb2xsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgc2Nyb2xsUm90YXRlKCk7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBzY3JvbGxSb3RhdGUoKSB7XHJcbiAgICBsZXQgaW1hZ2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvdGF0ZS0tc2Nyb2xsXCIpO1xyXG4gICAgaW1hZ2Uuc3R5bGUudHJhbnNmb3JtID0gXCJyb3RhdGUoXCIgKyB3aW5kb3cucGFnZVlPZmZzZXQvNCArIFwiZGVnKVwiO1xyXG59XHJcblxyXG5cclxudmFyIHJlbGxheCA9IG5ldyBSZWxsYXgoJy5yZWxsYXgnKTsiLCIoZnVuY3Rpb24oJCkge1xyXG5cclxuICAgIGxldCAkd2luZG93ID0gJCh3aW5kb3cpO1xyXG4gICAgbGV0IGxhc3RXaW5kb3dXaWR0aCA9ICR3aW5kb3cud2lkdGgoKTtcclxuICAgIGxldCB0b2dnbGUgPSAkKCAnLm5hdmJhci10b2dnbGVyJyApO1xyXG4gICAgbGV0IGhlYWRlciA9ICQoICcuc2l0ZS1oZWFkZXInICk7XHJcbiAgICBsZXQgbmF2aWdhdGlvbiA9ICQoICcubmF2YmFyLW5hdicgKTtcclxuICAgIGxldCBkcm9wZG93bkJ0biA9ICQoICcuZHJvcGRvd24tYnRuJyApO1xyXG4gICAgbGV0IGRyb3Bkb3duID0gJCggJy5kcm9wZG93bi1tZW51JyApO1xyXG5cclxuICAgIC8vIEZ1bmN0aW9uc1xyXG4gICAgZnVuY3Rpb24gdG9nZ2xlTWVudSgpIHtcclxuICAgICAgICAvLyBUb2dnbGUgLm9wZW4gdG8gLm5hdmJhci1uYXZcclxuICAgICAgICAkKG5hdmlnYXRpb24pLnRvZ2dsZUNsYXNzKCAnaXMtb3BlbicgKTtcclxuICAgICAgICAvLyBUb2dnbGUgLmlzLWFjdGl2ZSB0byB0aGUgaGFtYnVyZ2VyIGljb25cclxuICAgICAgICAkKHRvZ2dsZSkudG9nZ2xlQ2xhc3MoICdpcy1hY3RpdmUnICk7XHJcbiAgICAgICAgLy8gVG9nZ2xlIC5pcy1hY3RpdmUgb24gc2l0ZS1oZWFkZXJcclxuICAgICAgICAkKGhlYWRlcikudG9nZ2xlQ2xhc3MoICdleHBhbmRlZCcgKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjbG9zZUFsbERyb3Bkb3ducygpIHtcclxuICAgICAgICBpZiAoJChkcm9wZG93bikuaGFzQ2xhc3MoICdzaG93JyApKSB7XHJcbiAgICAgICAgICAgICQoZHJvcGRvd24pLnJlbW92ZUNsYXNzKCAnc2hvdycgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCQoZHJvcGRvd25CdG4pLmhhc0NsYXNzKCAndG9nZ2xlZCcgKSkge1xyXG4gICAgICAgICAgICAkKGRyb3Bkb3duQnRuKS5yZW1vdmVDbGFzcyggJ3RvZ2dsZWQnICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICQoZHJvcGRvd24pLmF0dHIoIFwic3R5bGVcIiwgXCIgXCIgKTtcclxuICAgICAgICAkKG5hdmlnYXRpb24pLmF0dHIoIFwic3R5bGVcIiwgXCIgXCIgKTtcclxuICAgICAgICAkKHRvZ2dsZSkucmVtb3ZlQ2xhc3MoICdpcy1hY3RpdmUnICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gT3BlbiBtb2JpbGUgbWVudVxyXG4gICAgJCh0b2dnbGUpLmNsaWNrKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7IFxyXG5cclxuICAgICAgICB0b2dnbGVNZW51KCk7XHJcbiAgXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBPcGVuIGRyb3Bkb3duIG1lbnVzXHJcbiAgICAkKGRyb3Bkb3duQnRuKS5jbGljayhmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyBcclxuXHJcbiAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTtcclxuXHJcbiAgICAgICAgLy8gQWRkIC8gcmVtb3ZlIC50b2dnbGVkIGZyb20gZHJvcGRvd24gYnV0dG9uXHJcblx0XHRpZiAoJHRoaXMuaGFzQ2xhc3MoICd0b2dnbGVkJyApKSB7XHJcblx0XHRcdCR0aGlzLnJlbW92ZUNsYXNzKCAndG9nZ2xlZCcgKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdCR0aGlzLnBhcmVudCgpLnBhcmVudCgpLmZpbmQoICcuZHJvcGRvd24tYnRuJyApLnJlbW92ZUNsYXNzKCAndG9nZ2xlZCcgKTtcclxuXHRcdFx0JHRoaXMudG9nZ2xlQ2xhc3MoICd0b2dnbGVkJyApO1xyXG5cdFx0fVxyXG5cclxuICAgICAgICAvLyBBZGQgLyByZW1vdmUgLnNob3cgZnJvbSBkcm9wZG93bi1tZW51XHJcbiAgICAgICAgaWYgKCR0aGlzLm5leHQoKS5oYXNDbGFzcyggJ3Nob3cnICkpIHtcclxuICAgICAgICAgICAgJHRoaXMubmV4dCgpLnJlbW92ZUNsYXNzKCAnc2hvdycgKTtcclxuICAgICAgICAgICAgJHRoaXMubmV4dCgpLnNsaWRlVXAoIDM1MCApO1xyXG4gICAgICAgICAgICAkdGhpcy5wYXJlbnQoKS5wYXJlbnQoKS5maW5kKCAnLmRyb3Bkb3duLW1lbnUnICkucmVtb3ZlQ2xhc3MoICdzaG93JyApO1xyXG4gICAgICAgICAgICAkdGhpcy5wYXJlbnQoKS5wYXJlbnQoKS5maW5kKCAnLmRyb3Bkb3duLW1lbnUnICkuc2xpZGVVcCggMzUwICk7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICR0aGlzLnBhcmVudCgpLnBhcmVudCgpLmZpbmQoICcuZHJvcGRvd24tbWVudScgKS5yZW1vdmVDbGFzcyggJ3Nob3cnICk7XHJcblx0XHRcdCR0aGlzLnBhcmVudCgpLnBhcmVudCgpLmZpbmQoICcuZHJvcGRvd24tbWVudScgKS5zbGlkZVVwKCAzNTAgKTtcclxuXHRcdFx0JHRoaXMubmV4dCgpLnRvZ2dsZUNsYXNzKCAnc2hvdycgKTtcclxuICAgICAgICAgICAgJHRoaXMubmV4dCgpLnNsaWRlVG9nZ2xlKCAzNTAgKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBDbG9zZSBhbmQgcmVzZXQgb24gd2luZG93IHdpZHRoIGNoYW5nZVxyXG4gICAgJHdpbmRvdy5yZXNpemUoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICB2YXIgd2luZG93V2lkdGggPSAkd2luZG93LndpZHRoKCk7XHJcblxyXG4gICAgICAgIGlmIChsYXN0V2luZG93V2lkdGggIT09IHdpbmRvd1dpZHRoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCQobmF2aWdhdGlvbikuaGFzQ2xhc3MoICdpcy1vcGVuJyApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlTWVudSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBjbG9zZUFsbERyb3Bkb3ducygpO1xyXG4gICAgICAgICAgICAgICAgJChuYXZpZ2F0aW9uKS5yZW1vdmVBdHRyKCAnc3R5bGUnICk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICAgIFxyXG59KSggalF1ZXJ5ICk7XHJcbiIsImpRdWVyeShmdW5jdGlvbiAoJCkge1xyXG5cclxuICB2YXIgZmlsdGVyRm5zID0ge1xyXG4gICAgLy8gc2hvdyBpZiBudW1iZXIgaXMgZ3JlYXRlciB0aGFuIDUwXHJcbiAgICBudW1iZXJHcmVhdGVyVGhhbjUwOiBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIG51bWJlciA9ICQodGhpcykuZmluZCgnLm51bWJlcicpLnRleHQoKTtcclxuICAgICAgcmV0dXJuIHBhcnNlSW50KCBudW1iZXIsIDEwICkgPiA1MDtcclxuICAgIH0sXHJcbiAgICAvLyBzaG93IGlmIG5hbWUgZW5kcyB3aXRoIC1pdW1cclxuICAgIGl1bTogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBuYW1lID0gJCh0aGlzKS5maW5kKCcubmFtZScpLnRleHQoKTtcclxuICAgICAgY29uc29sZS5sb2cobmFtZSk7XHJcbiAgICAgIHJldHVybiBuYW1lLm1hdGNoKCAva2VzJC8gKTtcclxuICAgIFxyXG4gICAgfSxcclxuICAgIHRlc3RGdW5jOiBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIGF0dHIgPSAkKHRoaXMpLmhhc0NsYXNzKCd3ZWJidXR2ZWNrbGluZycpO1xyXG4gICAgICBjb25zb2xlLmxvZyhhdHRyKTtcclxuICAgICAgcmV0dXJuIGF0dHI7XHJcbiAgICAgXHJcbiAgICB9LFxyXG4gICAgdGVzdFNlbzogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBhdHRyID0gJCh0aGlzKS5oYXNDbGFzcygnc2VvJyk7XHJcbiAgICAgIGNvbnNvbGUubG9nKGF0dHIpO1xyXG4gICAgICByZXR1cm4gYXR0cjtcclxuICAgICBcclxuICAgIH1cclxuICB9O1xyXG4gIFxyXG4gIGZ1bmN0aW9uIGdldEhhc2hGaWx0ZXIoKSB7XHJcbiAgICAvLyBnZXQgZmlsdGVyPWZpbHRlck5hbWVcclxuICAgIHZhciBtYXRjaGVzID0gbG9jYXRpb24uaGFzaC5tYXRjaCggLyhbXiZdKykvaSApO1xyXG4gICAgdmFyIGhhc2hGaWx0ZXIgPSBtYXRjaGVzICYmIG1hdGNoZXNbMV07XHJcbiAgICByZXR1cm4gaGFzaEZpbHRlciAmJiBkZWNvZGVVUklDb21wb25lbnQoIGhhc2hGaWx0ZXIgKS5zdWJzdHIoMSk7XHJcbiAgfVxyXG4gIFxyXG4gIC8vIGluaXQgSXNvdG9wZVxyXG4gIHZhciAkZ3JpZCA9ICQoJy5nYWxsZXJ5Jyk7XHJcbiAgXHJcbiAgLy8gYmluZCBmaWx0ZXIgYnV0dG9uIGNsaWNrXHJcbiAgdmFyICRmaWx0ZXJCdXR0b25Hcm91cCA9ICQoJy5idG4tZmlsdGVyLWdyb3VwJyk7XHJcbiAgJGZpbHRlckJ1dHRvbkdyb3VwLm9uKCAnY2xpY2snLCAnYnV0dG9uJywgZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZmlsdGVyQXR0ciA9ICQoIHRoaXMgKS5hdHRyKCdkYXRhLWZpbHRlcicpO1xyXG4gICAgLy8gc2V0IGZpbHRlciBpbiBoYXNoXHJcbiAgICBsb2NhdGlvbi5oYXNoID0gJycgKyBlbmNvZGVVUklDb21wb25lbnQoIGZpbHRlckF0dHIgKTtcclxuICB9KTtcclxuICBcclxuICB2YXIgaXNJc290b3BlSW5pdCA9IGZhbHNlO1xyXG4gIFxyXG4gIGZ1bmN0aW9uIG9uSGFzaGNoYW5nZSgpIHtcclxuICAgIHZhciBoYXNoRmlsdGVyID0gZ2V0SGFzaEZpbHRlcigpO1xyXG4gICAgaWYgKCAhaGFzaEZpbHRlciAmJiBpc0lzb3RvcGVJbml0ICkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpc0lzb3RvcGVJbml0ID0gdHJ1ZTtcclxuICAgIC8vIGZpbHRlciBpc290b3BlXHJcbiAgICAkZ3JpZC5pc290b3BlKHtcclxuICAgICAgaXRlbVNlbGVjdG9yOiAnLmdhbGxlcnktaXRlbScsXHJcbiAgICAgIGxheW91dE1vZGUgOiAnbWFzb25yeScsXHJcbiAgICAgIG1hc29ucnkgOiB7XHJcbiAgICAgICAgZ3V0dGVyIDogJy5nYWxsZXJ5LWl0ZW0tZ3V0dGVyJ1xyXG4gICAgICB9LFxyXG4gICAgICAvLyB1c2UgZmlsdGVyRm5zXHJcbiAgICAgIGZpbHRlcjogZmlsdGVyRm5zWyBoYXNoRmlsdGVyIF0gfHwgaGFzaEZpbHRlclxyXG4gICAgfSk7XHJcbiAgICAvLyBzZXQgc2VsZWN0ZWQgY2xhc3Mgb24gYnV0dG9uXHJcbiAgICBpZiAoIGhhc2hGaWx0ZXIgKSB7XHJcbiAgICAgICRmaWx0ZXJCdXR0b25Hcm91cC5maW5kKCcuc2VsZWN0ZWQnKS5yZW1vdmVDbGFzcygnc2VsZWN0ZWQnKTtcclxuICAgICAgJGZpbHRlckJ1dHRvbkdyb3VwLmZpbmQoJ1tkYXRhLWZpbHRlcj1cIicgKyBoYXNoRmlsdGVyICsgJ1wiXScpLmFkZENsYXNzKCdzZWxlY3RlZCcpO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICAkKHdpbmRvdykub24oICdoYXNoY2hhbmdlJywgb25IYXNoY2hhbmdlICk7XHJcbiAgXHJcbiAgLy8gdHJpZ2dlciBldmVudCBoYW5kbGVyIHRvIGluaXQgSXNvdG9wZVxyXG4gIG9uSGFzaGNoYW5nZSgpO1xyXG4gIFxyXG4gIFxyXG5cclxufSk7XHJcblxyXG5cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==